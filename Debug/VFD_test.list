
VFD_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  0800c6e0  0800c6e0  0001c6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce50  0800ce50  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce50  0800ce50  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce50  0800ce50  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce50  0800ce50  0001ce50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce54  0800ce54  0001ce54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800ce58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001580  20000190  0800cfe8  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001710  0800cfe8  00021710  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fd00  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043f6  00000000  00000000  0003feb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  000442b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001790  00000000  00000000  00045bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c24c  00000000  00000000  00047350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cdb4  00000000  00000000  0006359c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093e6e  00000000  00000000  00080350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001141be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068b0  00000000  00000000  00114214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000190 	.word	0x20000190
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c6c8 	.word	0x0800c6c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000194 	.word	0x20000194
 8000148:	0800c6c8 	.word	0x0800c6c8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <fifo_push>:
buff_t fifo_buffer[BUFF_SIZE];
uint32_t head_index = 0;
uint32_t tail_index = 0;

bool fifo_push(buff_t data)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	if (fifo_length() >= BUFF_SIZE - 1)
 800017a:	f000 f859 	bl	8000230 <fifo_length>
 800017e:	4603      	mov	r3, r0
 8000180:	2bfe      	cmp	r3, #254	; 0xfe
 8000182:	d901      	bls.n	8000188 <fifo_push+0x18>
		return 1; // too much data!
 8000184:	2301      	movs	r3, #1
 8000186:	e012      	b.n	80001ae <fifo_push+0x3e>
	if (++tail_index == BUFF_SIZE)
 8000188:	4b0b      	ldr	r3, [pc, #44]	; (80001b8 <fifo_push+0x48>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	3301      	adds	r3, #1
 800018e:	4a0a      	ldr	r2, [pc, #40]	; (80001b8 <fifo_push+0x48>)
 8000190:	6013      	str	r3, [r2, #0]
 8000192:	4b09      	ldr	r3, [pc, #36]	; (80001b8 <fifo_push+0x48>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800019a:	d102      	bne.n	80001a2 <fifo_push+0x32>
		tail_index = 0;
 800019c:	4b06      	ldr	r3, [pc, #24]	; (80001b8 <fifo_push+0x48>)
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
	fifo_buffer[tail_index] = data;
 80001a2:	4b05      	ldr	r3, [pc, #20]	; (80001b8 <fifo_push+0x48>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	4905      	ldr	r1, [pc, #20]	; (80001bc <fifo_push+0x4c>)
 80001a8:	79fa      	ldrb	r2, [r7, #7]
 80001aa:	54ca      	strb	r2, [r1, r3]
	return 0;
 80001ac:	2300      	movs	r3, #0
}
 80001ae:	4618      	mov	r0, r3
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	200001b0 	.word	0x200001b0
 80001bc:	2000046c 	.word	0x2000046c

080001c0 <fifo_pop>:

buff_t fifo_pop(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
	if (fifo_is_empty())
 80001c4:	f000 f820 	bl	8000208 <fifo_is_empty>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d004      	beq.n	80001d8 <fifo_pop+0x18>
		return fifo_buffer[head_index]; // buffer is empty, return the last value
 80001ce:	4b0c      	ldr	r3, [pc, #48]	; (8000200 <fifo_pop+0x40>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a0c      	ldr	r2, [pc, #48]	; (8000204 <fifo_pop+0x44>)
 80001d4:	5cd3      	ldrb	r3, [r2, r3]
 80001d6:	e010      	b.n	80001fa <fifo_pop+0x3a>
	if (++head_index == BUFF_SIZE)
 80001d8:	4b09      	ldr	r3, [pc, #36]	; (8000200 <fifo_pop+0x40>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	3301      	adds	r3, #1
 80001de:	4a08      	ldr	r2, [pc, #32]	; (8000200 <fifo_pop+0x40>)
 80001e0:	6013      	str	r3, [r2, #0]
 80001e2:	4b07      	ldr	r3, [pc, #28]	; (8000200 <fifo_pop+0x40>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001ea:	d102      	bne.n	80001f2 <fifo_pop+0x32>
		head_index = 0;
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <fifo_pop+0x40>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
	return fifo_buffer[head_index];
 80001f2:	4b03      	ldr	r3, [pc, #12]	; (8000200 <fifo_pop+0x40>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a03      	ldr	r2, [pc, #12]	; (8000204 <fifo_pop+0x44>)
 80001f8:	5cd3      	ldrb	r3, [r2, r3]
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	200001ac 	.word	0x200001ac
 8000204:	2000046c 	.word	0x2000046c

08000208 <fifo_is_empty>:

bool fifo_is_empty(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	return head_index == tail_index;
 800020c:	4b06      	ldr	r3, [pc, #24]	; (8000228 <fifo_is_empty+0x20>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <fifo_is_empty+0x24>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	429a      	cmp	r2, r3
 8000216:	bf0c      	ite	eq
 8000218:	2301      	moveq	r3, #1
 800021a:	2300      	movne	r3, #0
 800021c:	b2db      	uxtb	r3, r3
}
 800021e:	4618      	mov	r0, r3
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	200001ac 	.word	0x200001ac
 800022c:	200001b0 	.word	0x200001b0

08000230 <fifo_length>:

uint32_t fifo_length(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	if (tail_index >= head_index)
 8000234:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <fifo_length+0x34>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <fifo_length+0x38>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	429a      	cmp	r2, r3
 800023e:	d305      	bcc.n	800024c <fifo_length+0x1c>
		return tail_index - head_index;
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <fifo_length+0x34>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b08      	ldr	r3, [pc, #32]	; (8000268 <fifo_length+0x38>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	1ad3      	subs	r3, r2, r3
 800024a:	e006      	b.n	800025a <fifo_length+0x2a>
	else
		return tail_index + BUFF_SIZE - head_index;
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <fifo_length+0x34>)
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	4b05      	ldr	r3, [pc, #20]	; (8000268 <fifo_length+0x38>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	1ad3      	subs	r3, r2, r3
 8000256:	f503 7380 	add.w	r3, r3, #256	; 0x100
}
 800025a:	4618      	mov	r0, r3
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	200001b0 	.word	0x200001b0
 8000268:	200001ac 	.word	0x200001ac

0800026c <active>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t last_active_time;

void active(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	last_active_time = HAL_GetTick();
 8000270:	f003 fbcc 	bl	8003a0c <HAL_GetTick>
 8000274:	4603      	mov	r3, r0
 8000276:	4a02      	ldr	r2, [pc, #8]	; (8000280 <active+0x14>)
 8000278:	6013      	str	r3, [r2, #0]
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	20000618 	.word	0x20000618

08000284 <delay_us>:
#define PB1 (HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin))
#define PB2 (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin))

// delays for us count
void delay_us(uint16_t us)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 800028e:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <delay_us+0x30>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2200      	movs	r2, #0
 8000294:	625a      	str	r2, [r3, #36]	; 0x24
	while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000296:	bf00      	nop
 8000298:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <delay_us+0x30>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800029e:	b29b      	uxth	r3, r3
 80002a0:	88fa      	ldrh	r2, [r7, #6]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d8f8      	bhi.n	8000298 <delay_us+0x14>
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	20000640 	.word	0x20000640

080002b8 <delay>:

void delay(uint32_t delay)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 80002c0:	6878      	ldr	r0, [r7, #4]
 80002c2:	f003 fbad 	bl	8003a20 <HAL_Delay>
}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}

080002ce <nrf_init_tx>:

void nrf_init_tx(uint8_t *address)
{
 80002ce:	b580      	push	{r7, lr}
 80002d0:	b082      	sub	sp, #8
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
    nrf24l01p_get_clear_irq_flags();
 80002d6:	f002 fca3 	bl	8002c20 <nrf24l01p_get_clear_irq_flags>
    nrf24l01p_close_pipe(NRF24L01P_ALL);
 80002da:	20ff      	movs	r0, #255	; 0xff
 80002dc:	f002 fd3a 	bl	8002d54 <nrf24l01p_close_pipe>
    nrf24l01p_open_pipe(NRF24L01P_TX, true);
 80002e0:	2101      	movs	r1, #1
 80002e2:	2006      	movs	r0, #6
 80002e4:	f002 fcdf 	bl	8002ca6 <nrf24l01p_open_pipe>

    nrf24l01p_set_auto_retr(NRF_RETRANSMITS, NRF_RETRANSMIT_DELAY);
 80002e8:	21fa      	movs	r1, #250	; 0xfa
 80002ea:	2005      	movs	r0, #5
 80002ec:	f002 fd9e 	bl	8002e2c <nrf24l01p_set_auto_retr>
    nrf24l01p_open_pipe(NRF24L01P_PIPE0, true);
 80002f0:	2101      	movs	r1, #1
 80002f2:	2000      	movs	r0, #0
 80002f4:	f002 fcd7 	bl	8002ca6 <nrf24l01p_open_pipe>
    nrf24l01p_set_address(NRF24L01P_PIPE0, address);
 80002f8:	6879      	ldr	r1, [r7, #4]
 80002fa:	2000      	movs	r0, #0
 80002fc:	f002 fd6c 	bl	8002dd8 <nrf24l01p_set_address>

    nrf24l01p_set_crc_mode(NRF24L01P_CRC_16BIT);
 8000300:	2003      	movs	r0, #3
 8000302:	f002 fcb5 	bl	8002c70 <nrf24l01p_set_crc_mode>
    nrf24l01p_set_address_width(NRF24L01P_AW_5BYTES);
 8000306:	2005      	movs	r0, #5
 8000308:	f002 fdb0 	bl	8002e6c <nrf24l01p_set_address_width>
    nrf24l01p_set_address(NRF24L01P_TX, address);
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	2006      	movs	r0, #6
 8000310:	f002 fd62 	bl	8002dd8 <nrf24l01p_set_address>
    nrf24l01p_set_operation_mode(NRF24L01P_PTX);
 8000314:	2000      	movs	r0, #0
 8000316:	f002 fdd7 	bl	8002ec8 <nrf24l01p_set_operation_mode>
    nrf24l01p_set_rf_channel(NRF_CHANNEL);
 800031a:	2044      	movs	r0, #68	; 0x44
 800031c:	f002 fe11 	bl	8002f42 <nrf24l01p_set_rf_channel>

    nrf24l01p_set_power_mode(NRF24L01P_PWR_UP);
 8000320:	2001      	movs	r0, #1
 8000322:	f002 fdf0 	bl	8002f06 <nrf24l01p_set_power_mode>
    delay(NRF_POWER_UP_DELAY);
 8000326:	2002      	movs	r0, #2
 8000328:	f7ff ffc6 	bl	80002b8 <delay>
}
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}

08000334 <nrf_init_rx>:

void nrf_init_rx(uint8_t *address)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
    nrf24l01p_get_clear_irq_flags();
 800033c:	f002 fc70 	bl	8002c20 <nrf24l01p_get_clear_irq_flags>
    nrf24l01p_close_pipe(NRF24L01P_ALL);
 8000340:	20ff      	movs	r0, #255	; 0xff
 8000342:	f002 fd07 	bl	8002d54 <nrf24l01p_close_pipe>
    nrf24l01p_open_pipe(NRF24L01P_PIPE0, true);
 8000346:	2101      	movs	r1, #1
 8000348:	2000      	movs	r0, #0
 800034a:	f002 fcac 	bl	8002ca6 <nrf24l01p_open_pipe>
    nrf24l01p_set_crc_mode(NRF24L01P_CRC_16BIT);
 800034e:	2003      	movs	r0, #3
 8000350:	f002 fc8e 	bl	8002c70 <nrf24l01p_set_crc_mode>
    nrf24l01p_set_address_width(NRF24L01P_AW_5BYTES);
 8000354:	2005      	movs	r0, #5
 8000356:	f002 fd89 	bl	8002e6c <nrf24l01p_set_address_width>
    nrf24l01p_set_address(NRF24L01P_PIPE0, address);
 800035a:	6879      	ldr	r1, [r7, #4]
 800035c:	2000      	movs	r0, #0
 800035e:	f002 fd3b 	bl	8002dd8 <nrf24l01p_set_address>
    nrf24l01p_set_operation_mode(NRF24L01P_PRX);
 8000362:	2001      	movs	r0, #1
 8000364:	f002 fdb0 	bl	8002ec8 <nrf24l01p_set_operation_mode>
    nrf24l01p_set_rx_payload_width(NRF24L01P_PIPE0, NRF_PAYLOAD_LENGTH);
 8000368:	210a      	movs	r1, #10
 800036a:	2000      	movs	r0, #0
 800036c:	f002 fd8e 	bl	8002e8c <nrf24l01p_set_rx_payload_width>
    nrf24l01p_set_rf_channel(NRF_CHANNEL);
 8000370:	2044      	movs	r0, #68	; 0x44
 8000372:	f002 fde6 	bl	8002f42 <nrf24l01p_set_rf_channel>

    nrf24l01p_set_power_mode(NRF24L01P_PWR_UP);
 8000376:	2001      	movs	r0, #1
 8000378:	f002 fdc5 	bl	8002f06 <nrf24l01p_set_power_mode>
    delay(NRF_POWER_UP_DELAY);
 800037c:	2002      	movs	r0, #2
 800037e:	f7ff ff9b 	bl	80002b8 <delay>
}
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
	...

0800038c <nrf24l01p_spi_ss>:

void nrf24l01p_spi_ss(nrf24l01p_spi_ss_level_t level)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
	// we will transmit data to nRF, MSB FIRST
	if (!level)
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d107      	bne.n	80003ac <nrf24l01p_spi_ss+0x20>
		hspi2.Instance->CR1 &= ~(SPI_CR1_LSBFIRST);
 800039c:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <nrf24l01p_spi_ss+0x4c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <nrf24l01p_spi_ss+0x4c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80003aa:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(SPI2_nRF_CSn_GPIO_Port, SPI2_nRF_CSn_Pin, level);
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	461a      	mov	r2, r3
 80003b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003b4:	4809      	ldr	r0, [pc, #36]	; (80003dc <nrf24l01p_spi_ss+0x50>)
 80003b6:	f003 fe00 	bl	8003fba <HAL_GPIO_WritePin>
	// we will transmit data to VFD, LSB FIRST
	if (level)
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d007      	beq.n	80003d0 <nrf24l01p_spi_ss+0x44>
		hspi2.Instance->CR1 |= SPI_CR1_LSBFIRST;
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <nrf24l01p_spi_ss+0x4c>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <nrf24l01p_spi_ss+0x4c>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80003ce:	601a      	str	r2, [r3, #0]
}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	2000056c 	.word	0x2000056c
 80003dc:	40010c00 	.word	0x40010c00

080003e0 <nrf24l01p_spi_rw>:

uint8_t nrf24l01p_spi_rw(uint8_t value)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af02      	add	r7, sp, #8
 80003e6:	4603      	mov	r3, r0
 80003e8:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	HAL_SPI_TransmitReceive(&hspi2, &value, &data, 1, 100);
 80003ea:	f107 020f 	add.w	r2, r7, #15
 80003ee:	1df9      	adds	r1, r7, #7
 80003f0:	2364      	movs	r3, #100	; 0x64
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	2301      	movs	r3, #1
 80003f6:	4804      	ldr	r0, [pc, #16]	; (8000408 <nrf24l01p_spi_rw+0x28>)
 80003f8:	f007 f954 	bl	80076a4 <HAL_SPI_TransmitReceive>
	return data;
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3710      	adds	r7, #16
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	2000056c 	.word	0x2000056c

0800040c <vfd_spi_cs>:


void vfd_spi_cs(vfd_cs_t cs)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, cs);
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	461a      	mov	r2, r3
 800041a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800041e:	4803      	ldr	r0, [pc, #12]	; (800042c <vfd_spi_cs+0x20>)
 8000420:	f003 fdcb 	bl	8003fba <HAL_GPIO_WritePin>
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	40010c00 	.word	0x40010c00

08000430 <vfd_spi_tx>:

void vfd_spi_tx(uint8_t *pData, uint16_t Size)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	460b      	mov	r3, r1
 800043a:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi2, pData, Size, 100);
 800043c:	887a      	ldrh	r2, [r7, #2]
 800043e:	2364      	movs	r3, #100	; 0x64
 8000440:	6879      	ldr	r1, [r7, #4]
 8000442:	4803      	ldr	r0, [pc, #12]	; (8000450 <vfd_spi_tx+0x20>)
 8000444:	f006 fff2 	bl	800742c <HAL_SPI_Transmit>
}
 8000448:	bf00      	nop
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	2000056c 	.word	0x2000056c

08000454 <do_vfd_init>:

void do_vfd_init(void)
{
 8000454:	b5b0      	push	{r4, r5, r7, lr}
 8000456:	b090      	sub	sp, #64	; 0x40
 8000458:	af00      	add	r7, sp, #0
#define FULL_DEMO (0)
	vfd_spi_cs(VFD_CS_HIGH);
 800045a:	2001      	movs	r0, #1
 800045c:	f7ff ffd6 	bl	800040c <vfd_spi_cs>
	HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 8000460:	2201      	movs	r2, #1
 8000462:	2120      	movs	r1, #32
 8000464:	4853      	ldr	r0, [pc, #332]	; (80005b4 <do_vfd_init+0x160>)
 8000466:	f003 fda8 	bl	8003fba <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800046a:	200a      	movs	r0, #10
 800046c:	f003 fad8 	bl	8003a20 <HAL_Delay>

	vfd_init(); // init display, 11 digits 17 segments
 8000470:	f003 fa10 	bl	8003894 <vfd_init>
	vfd_leds(0); // disable leds
 8000474:	2000      	movs	r0, #0
 8000476:	f003 f9e9 	bl	800384c <vfd_leds>

	for (int i = 0; i < sizeof(vfd.arr1); i++) {
 800047a:	2300      	movs	r3, #0
 800047c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800047e:	e007      	b.n	8000490 <do_vfd_init+0x3c>
		vfd.arr1[i] = 0xFF;
 8000480:	4a4d      	ldr	r2, [pc, #308]	; (80005b8 <do_vfd_init+0x164>)
 8000482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000484:	4413      	add	r3, r2
 8000486:	22ff      	movs	r2, #255	; 0xff
 8000488:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(vfd.arr1); i++) {
 800048a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800048c:	3301      	adds	r3, #1
 800048e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000492:	2b20      	cmp	r3, #32
 8000494:	d9f4      	bls.n	8000480 <do_vfd_init+0x2c>
	}

	vfd_update();
 8000496:	f003 f9b1 	bl	80037fc <vfd_update>
	vfd_control(true, 0b111);
 800049a:	2107      	movs	r1, #7
 800049c:	2001      	movs	r0, #1
 800049e:	f003 fa0d 	bl	80038bc <vfd_control>
		HAL_Delay(500);
		do_microrl();
	}

	//erase everything... just in case
	vfd_clear_buf();
 80004a2:	f003 f991 	bl	80037c8 <vfd_clear_buf>

	// fill everything
	for (int j = 1; j < 15; j++) {
 80004a6:	2301      	movs	r3, #1
 80004a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80004aa:	e03b      	b.n	8000524 <do_vfd_init+0xd0>
		uint32_t temp = 1 << j;
 80004ac:	2201      	movs	r2, #1
 80004ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80004b0:	fa02 f303 	lsl.w	r3, r2, r3
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i = 1; i < 11; i++) {
 80004b6:	2301      	movs	r3, #1
 80004b8:	637b      	str	r3, [r7, #52]	; 0x34
 80004ba:	e026      	b.n	800050a <do_vfd_init+0xb6>
			for (int b = 0; b < 3; b++) {
 80004bc:	2300      	movs	r3, #0
 80004be:	633b      	str	r3, [r7, #48]	; 0x30
 80004c0:	e01d      	b.n	80004fe <do_vfd_init+0xaa>
				vfd.arr2[i][b] |= (temp >> (b << 3)) & 0xFF;
 80004c2:	493d      	ldr	r1, [pc, #244]	; (80005b8 <do_vfd_init+0x164>)
 80004c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80004c6:	4613      	mov	r3, r2
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	4413      	add	r3, r2
 80004cc:	18ca      	adds	r2, r1, r3
 80004ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004d0:	4413      	add	r3, r2
 80004d2:	781a      	ldrb	r2, [r3, #0]
 80004d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004d6:	00db      	lsls	r3, r3, #3
 80004d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80004da:	fa21 f303 	lsr.w	r3, r1, r3
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	4313      	orrs	r3, r2
 80004e2:	b2d8      	uxtb	r0, r3
 80004e4:	4934      	ldr	r1, [pc, #208]	; (80005b8 <do_vfd_init+0x164>)
 80004e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80004e8:	4613      	mov	r3, r2
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	4413      	add	r3, r2
 80004ee:	18ca      	adds	r2, r1, r3
 80004f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004f2:	4413      	add	r3, r2
 80004f4:	4602      	mov	r2, r0
 80004f6:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++) {
 80004f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004fa:	3301      	adds	r3, #1
 80004fc:	633b      	str	r3, [r7, #48]	; 0x30
 80004fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000500:	2b02      	cmp	r3, #2
 8000502:	ddde      	ble.n	80004c2 <do_vfd_init+0x6e>
		for (int i = 1; i < 11; i++) {
 8000504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000506:	3301      	adds	r3, #1
 8000508:	637b      	str	r3, [r7, #52]	; 0x34
 800050a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800050c:	2b0a      	cmp	r3, #10
 800050e:	ddd5      	ble.n	80004bc <do_vfd_init+0x68>
			}
		}
		vfd_update();
 8000510:	f003 f974 	bl	80037fc <vfd_update>
		HAL_Delay(100);
 8000514:	2064      	movs	r0, #100	; 0x64
 8000516:	f003 fa83 	bl	8003a20 <HAL_Delay>
		do_microrl();
 800051a:	f000 fb4f 	bl	8000bbc <do_microrl>
	for (int j = 1; j < 15; j++) {
 800051e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000520:	3301      	adds	r3, #1
 8000522:	63bb      	str	r3, [r7, #56]	; 0x38
 8000524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000526:	2b0e      	cmp	r3, #14
 8000528:	ddc0      	ble.n	80004ac <do_vfd_init+0x58>
	}

	const uint32_t arr[] = {
 800052a:	4b24      	ldr	r3, [pc, #144]	; (80005bc <do_vfd_init+0x168>)
 800052c:	1d3c      	adds	r4, r7, #4
 800052e:	461d      	mov	r5, r3
 8000530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000534:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			VFD_SYM_BRACKET_LEFT,
			VFD_SYM_SMALL_ARROW_RIGHT,
			VFD_SYM_DCC,
	};

	for (int j = 0; j < sizeof(arr)/sizeof(arr[0]); j++) {
 800053c:	2300      	movs	r3, #0
 800053e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000540:	e013      	b.n	800056a <do_vfd_init+0x116>
		vfd_set_symbols(arr[j]);
 8000542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800054a:	4413      	add	r3, r2
 800054c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000550:	4618      	mov	r0, r3
 8000552:	f003 f887 	bl	8003664 <vfd_set_symbols>
		vfd_update();
 8000556:	f003 f951 	bl	80037fc <vfd_update>
		HAL_Delay(50);
 800055a:	2032      	movs	r0, #50	; 0x32
 800055c:	f003 fa60 	bl	8003a20 <HAL_Delay>
		do_microrl();
 8000560:	f000 fb2c 	bl	8000bbc <do_microrl>
	for (int j = 0; j < sizeof(arr)/sizeof(arr[0]); j++) {
 8000564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000566:	3301      	adds	r3, #1
 8000568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800056a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800056c:	2b07      	cmp	r3, #7
 800056e:	d9e8      	bls.n	8000542 <do_vfd_init+0xee>
	}

	for (int j = 0; j < 17; j++) {
 8000570:	2300      	movs	r3, #0
 8000572:	62bb      	str	r3, [r7, #40]	; 0x28
 8000574:	e010      	b.n	8000598 <do_vfd_init+0x144>
		vfd_set_symbols(1<<j);
 8000576:	2201      	movs	r2, #1
 8000578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800057a:	fa02 f303 	lsl.w	r3, r2, r3
 800057e:	4618      	mov	r0, r3
 8000580:	f003 f870 	bl	8003664 <vfd_set_symbols>
		vfd_update();
 8000584:	f003 f93a 	bl	80037fc <vfd_update>
		HAL_Delay(50);
 8000588:	2032      	movs	r0, #50	; 0x32
 800058a:	f003 fa49 	bl	8003a20 <HAL_Delay>
		do_microrl();
 800058e:	f000 fb15 	bl	8000bbc <do_microrl>
	for (int j = 0; j < 17; j++) {
 8000592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000594:	3301      	adds	r3, #1
 8000596:	62bb      	str	r3, [r7, #40]	; 0x28
 8000598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800059a:	2b10      	cmp	r3, #16
 800059c:	ddeb      	ble.n	8000576 <do_vfd_init+0x122>
	}

	vfd_clear_buf();
 800059e:	f003 f913 	bl	80037c8 <vfd_clear_buf>
	HAL_Delay(500);
 80005a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005a6:	f003 fa3b 	bl	8003a20 <HAL_Delay>
}
 80005aa:	bf00      	nop
 80005ac:	3740      	adds	r7, #64	; 0x40
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bdb0      	pop	{r4, r5, r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40010c00 	.word	0x40010c00
 80005b8:	2000061c 	.word	0x2000061c
 80005bc:	0800c6e0 	.word	0x0800c6e0

080005c0 <do_led>:

void do_led(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 500)
 80005c4:	f003 fa22 	bl	8003a0c <HAL_GetTick>
 80005c8:	4602      	mov	r2, r0
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <do_led+0x30>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	1ad3      	subs	r3, r2, r3
 80005d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005d4:	d30a      	bcc.n	80005ec <do_led+0x2c>
		return;
	last_time = HAL_GetTick();
 80005d6:	f003 fa19 	bl	8003a0c <HAL_GetTick>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <do_led+0x30>)
 80005de:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e4:	4803      	ldr	r0, [pc, #12]	; (80005f4 <do_led+0x34>)
 80005e6:	f003 fd00 	bl	8003fea <HAL_GPIO_TogglePin>
 80005ea:	e000      	b.n	80005ee <do_led+0x2e>
		return;
 80005ec:	bf00      	nop
}
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200001b4 	.word	0x200001b4
 80005f4:	40011000 	.word	0x40011000

080005f8 <read.9147>:

void do_fram_test(void)
{
	bool read(void)
	{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af04      	add	r7, sp, #16
 80005fe:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t temp;
		HAL_I2C_Mem_Read(&hi2c1, 0b10100000, 0x42, 1, &temp, 1, 10);
 8000602:	230a      	movs	r3, #10
 8000604:	9302      	str	r3, [sp, #8]
 8000606:	2301      	movs	r3, #1
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	f107 030f 	add.w	r3, r7, #15
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	2242      	movs	r2, #66	; 0x42
 8000614:	21a0      	movs	r1, #160	; 0xa0
 8000616:	480f      	ldr	r0, [pc, #60]	; (8000654 <read.9147+0x5c>)
 8000618:	f003 ff3e 	bl	8004498 <HAL_I2C_Mem_Read>
		if (temp != 0x42)
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	2b42      	cmp	r3, #66	; 0x42
 8000620:	d001      	beq.n	8000626 <read.9147+0x2e>
			return false;
 8000622:	2300      	movs	r3, #0
 8000624:	e012      	b.n	800064c <read.9147+0x54>
		HAL_I2C_Mem_Read(&hi2c1, 0b10100010, 0x5A, 1, &temp, 1, 10);
 8000626:	230a      	movs	r3, #10
 8000628:	9302      	str	r3, [sp, #8]
 800062a:	2301      	movs	r3, #1
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	f107 030f 	add.w	r3, r7, #15
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2301      	movs	r3, #1
 8000636:	225a      	movs	r2, #90	; 0x5a
 8000638:	21a2      	movs	r1, #162	; 0xa2
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <read.9147+0x5c>)
 800063c:	f003 ff2c 	bl	8004498 <HAL_I2C_Mem_Read>
		if (temp != 0xA5)
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2ba5      	cmp	r3, #165	; 0xa5
 8000644:	d001      	beq.n	800064a <read.9147+0x52>
			return false;
 8000646:	2300      	movs	r3, #0
 8000648:	e000      	b.n	800064c <read.9147+0x54>
		return true;
 800064a:	2301      	movs	r3, #1
	}
 800064c:	4618      	mov	r0, r3
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200005c4 	.word	0x200005c4

08000658 <do_fram_test>:
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b0c6      	sub	sp, #280	; 0x118
 800065c:	af04      	add	r7, sp, #16
void do_fram_test(void)
 800065e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000662:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		HAL_I2C_Mem_Write(&hi2c1, 0b10100000, 0x42, 1, &temp, 1, 10);
		temp = 0xA5;
		HAL_I2C_Mem_Write(&hi2c1, 0b10100010, 0x5A, 1, &temp, 1, 10);
	}
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 200)
 8000666:	f003 f9d1 	bl	8003a0c <HAL_GetTick>
 800066a:	4602      	mov	r2, r0
 800066c:	4b63      	ldr	r3, [pc, #396]	; (80007fc <do_fram_test+0x1a4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	2bc7      	cmp	r3, #199	; 0xc7
 8000674:	f240 80bd 	bls.w	80007f2 <do_fram_test+0x19a>
		return;
	if (PB1 && PB2)
 8000678:	2102      	movs	r1, #2
 800067a:	4861      	ldr	r0, [pc, #388]	; (8000800 <do_fram_test+0x1a8>)
 800067c:	f003 fc86 	bl	8003f8c <HAL_GPIO_ReadPin>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	f000 80af 	beq.w	80007e6 <do_fram_test+0x18e>
 8000688:	2104      	movs	r1, #4
 800068a:	485d      	ldr	r0, [pc, #372]	; (8000800 <do_fram_test+0x1a8>)
 800068c:	f003 fc7e 	bl	8003f8c <HAL_GPIO_ReadPin>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	f000 80a7 	beq.w	80007e6 <do_fram_test+0x18e>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0); // turn led on
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069e:	4859      	ldr	r0, [pc, #356]	; (8000804 <do_fram_test+0x1ac>)
 80006a0:	f003 fc8b 	bl	8003fba <HAL_GPIO_WritePin>
		vfd_put_string("FRAM TEST");
 80006a4:	4858      	ldr	r0, [pc, #352]	; (8000808 <do_fram_test+0x1b0>)
 80006a6:	f002 ff57 	bl	8003558 <vfd_put_string>
		vfd_update();
 80006aa:	f003 f8a7 	bl	80037fc <vfd_update>
		for (int i = 0; i < 3; i++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80006b4:	e012      	b.n	80006dc <do_fram_test+0x84>
		{
			vfd_leds(~(1<<i));
 80006b6:	2201      	movs	r2, #1
 80006b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	43db      	mvns	r3, r3
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 f8c0 	bl	800384c <vfd_leds>
			HAL_Delay(250);
 80006cc:	20fa      	movs	r0, #250	; 0xfa
 80006ce:	f003 f9a7 	bl	8003a20 <HAL_Delay>
		for (int i = 0; i < 3; i++)
 80006d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80006d6:	3301      	adds	r3, #1
 80006d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80006dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	dde8      	ble.n	80006b6 <do_fram_test+0x5e>
		}
		vfd_leds(0b1111);
 80006e4:	200f      	movs	r0, #15
 80006e6:	f003 f8b1 	bl	800384c <vfd_leds>
		HAL_Delay(500);
 80006ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ee:	f003 f997 	bl	8003a20 <HAL_Delay>
		if (read())
 80006f2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80006f6:	469c      	mov	ip, r3
 80006f8:	f7ff ff7e 	bl	80005f8 <read.9147>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d008      	beq.n	8000714 <do_fram_test+0xbc>
		{
			vfd_leds(0b0100);
 8000702:	2004      	movs	r0, #4
 8000704:	f003 f8a2 	bl	800384c <vfd_leds>
			vfd_put_string("FRAM FOUND");
 8000708:	4840      	ldr	r0, [pc, #256]	; (800080c <do_fram_test+0x1b4>)
 800070a:	f002 ff25 	bl	8003558 <vfd_put_string>
			vfd_update();
 800070e:	f003 f875 	bl	80037fc <vfd_update>
 8000712:	e024      	b.n	800075e <do_fram_test+0x106>
		}
		else
		{
			vfd_leds(0b0001);
 8000714:	2001      	movs	r0, #1
 8000716:	f003 f899 	bl	800384c <vfd_leds>
			write();
 800071a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800071e:	469c      	mov	ip, r3
 8000720:	f000 f87c 	bl	800081c <write.9151>
			HAL_Delay(500);
 8000724:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000728:	f003 f97a 	bl	8003a20 <HAL_Delay>
			if (read())
 800072c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000730:	469c      	mov	ip, r3
 8000732:	f7ff ff61 	bl	80005f8 <read.9147>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d008      	beq.n	800074e <do_fram_test+0xf6>
			{
				vfd_leds(0b0011);
 800073c:	2003      	movs	r0, #3
 800073e:	f003 f885 	bl	800384c <vfd_leds>
				vfd_put_string("FRAM OKAY");
 8000742:	4833      	ldr	r0, [pc, #204]	; (8000810 <do_fram_test+0x1b8>)
 8000744:	f002 ff08 	bl	8003558 <vfd_put_string>
				vfd_update();
 8000748:	f003 f858 	bl	80037fc <vfd_update>
 800074c:	e007      	b.n	800075e <do_fram_test+0x106>
			}
			else
			{
				vfd_leds(0b1000);
 800074e:	2008      	movs	r0, #8
 8000750:	f003 f87c 	bl	800384c <vfd_leds>
				vfd_put_string("NO FRAM!");
 8000754:	482f      	ldr	r0, [pc, #188]	; (8000814 <do_fram_test+0x1bc>)
 8000756:	f002 feff 	bl	8003558 <vfd_put_string>
				vfd_update();
 800075a:	f003 f84f 	bl	80037fc <vfd_update>
			}
		}

		while(PB1);
 800075e:	bf00      	nop
 8000760:	2102      	movs	r1, #2
 8000762:	4827      	ldr	r0, [pc, #156]	; (8000800 <do_fram_test+0x1a8>)
 8000764:	f003 fc12 	bl	8003f8c <HAL_GPIO_ReadPin>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1f8      	bne.n	8000760 <do_fram_test+0x108>
		if (PB2)
 800076e:	2104      	movs	r1, #4
 8000770:	4823      	ldr	r0, [pc, #140]	; (8000800 <do_fram_test+0x1a8>)
 8000772:	f003 fc0b 	bl	8003f8c <HAL_GPIO_ReadPin>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d034      	beq.n	80007e6 <do_fram_test+0x18e>
		{
			// PB2 still pressed, erase RAM
			vfd_leds(0b1001);
 800077c:	2009      	movs	r0, #9
 800077e:	f003 f865 	bl	800384c <vfd_leds>
			uint8_t zero[256] = {0};
 8000782:	463b      	mov	r3, r7
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	3304      	adds	r3, #4
 800078a:	22fc      	movs	r2, #252	; 0xfc
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f00b ff7a 	bl	800c688 <memset>
			//first half
			HAL_I2C_Mem_Write(&hi2c1, 0b10100000, 0, 1, zero, sizeof(zero), 200);
 8000794:	23c8      	movs	r3, #200	; 0xc8
 8000796:	9302      	str	r3, [sp, #8]
 8000798:	f44f 7380 	mov.w	r3, #256	; 0x100
 800079c:	9301      	str	r3, [sp, #4]
 800079e:	463b      	mov	r3, r7
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	2301      	movs	r3, #1
 80007a4:	2200      	movs	r2, #0
 80007a6:	21a0      	movs	r1, #160	; 0xa0
 80007a8:	481b      	ldr	r0, [pc, #108]	; (8000818 <do_fram_test+0x1c0>)
 80007aa:	f003 fd7b 	bl	80042a4 <HAL_I2C_Mem_Write>
			//second half
			HAL_I2C_Mem_Write(&hi2c1, 0b10100010, 0, 1, zero, sizeof(zero), 200);
 80007ae:	23c8      	movs	r3, #200	; 0xc8
 80007b0:	9302      	str	r3, [sp, #8]
 80007b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b6:	9301      	str	r3, [sp, #4]
 80007b8:	463b      	mov	r3, r7
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2301      	movs	r3, #1
 80007be:	2200      	movs	r2, #0
 80007c0:	21a2      	movs	r1, #162	; 0xa2
 80007c2:	4815      	ldr	r0, [pc, #84]	; (8000818 <do_fram_test+0x1c0>)
 80007c4:	f003 fd6e 	bl	80042a4 <HAL_I2C_Mem_Write>
			HAL_Delay(500);
 80007c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007cc:	f003 f928 	bl	8003a20 <HAL_Delay>
			vfd_leds(0b1010);
 80007d0:	200a      	movs	r0, #10
 80007d2:	f003 f83b 	bl	800384c <vfd_leds>
			while (PB2);
 80007d6:	bf00      	nop
 80007d8:	2104      	movs	r1, #4
 80007da:	4809      	ldr	r0, [pc, #36]	; (8000800 <do_fram_test+0x1a8>)
 80007dc:	f003 fbd6 	bl	8003f8c <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1f8      	bne.n	80007d8 <do_fram_test+0x180>
		}
	}
	last_time = HAL_GetTick();
 80007e6:	f003 f911 	bl	8003a0c <HAL_GetTick>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4a03      	ldr	r2, [pc, #12]	; (80007fc <do_fram_test+0x1a4>)
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	e000      	b.n	80007f4 <do_fram_test+0x19c>
		return;
 80007f2:	bf00      	nop
}
 80007f4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200001b8 	.word	0x200001b8
 8000800:	40010c00 	.word	0x40010c00
 8000804:	40011000 	.word	0x40011000
 8000808:	0800c700 	.word	0x0800c700
 800080c:	0800c70c 	.word	0x0800c70c
 8000810:	0800c718 	.word	0x0800c718
 8000814:	0800c724 	.word	0x0800c724
 8000818:	200005c4 	.word	0x200005c4

0800081c <write.9151>:
	{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af04      	add	r7, sp, #16
 8000822:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t temp = 0x42;
 8000826:	2342      	movs	r3, #66	; 0x42
 8000828:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, 0b10100000, 0x42, 1, &temp, 1, 10);
 800082a:	230a      	movs	r3, #10
 800082c:	9302      	str	r3, [sp, #8]
 800082e:	2301      	movs	r3, #1
 8000830:	9301      	str	r3, [sp, #4]
 8000832:	f107 030f 	add.w	r3, r7, #15
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2301      	movs	r3, #1
 800083a:	2242      	movs	r2, #66	; 0x42
 800083c:	21a0      	movs	r1, #160	; 0xa0
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <write.9151+0x50>)
 8000840:	f003 fd30 	bl	80042a4 <HAL_I2C_Mem_Write>
		temp = 0xA5;
 8000844:	23a5      	movs	r3, #165	; 0xa5
 8000846:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, 0b10100010, 0x5A, 1, &temp, 1, 10);
 8000848:	230a      	movs	r3, #10
 800084a:	9302      	str	r3, [sp, #8]
 800084c:	2301      	movs	r3, #1
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	f107 030f 	add.w	r3, r7, #15
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2301      	movs	r3, #1
 8000858:	225a      	movs	r2, #90	; 0x5a
 800085a:	21a2      	movs	r1, #162	; 0xa2
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <write.9151+0x50>)
 800085e:	f003 fd21 	bl	80042a4 <HAL_I2C_Mem_Write>
	}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200005c4 	.word	0x200005c4

08000870 <do_buttons_and_nrf>:

#define BIT(index) ((uint8_t)1 << (uint8_t)(index))
#define BIT_COND(data,index,condition) (((uint8_t)(data) & ~BIT(index)) | ((condition) ? BIT(index) : (uint8_t)0))
bool do_buttons_and_nrf(void)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b087      	sub	sp, #28
 8000874:	af00      	add	r7, sp, #0
	static bool set_rx = true;
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < (set_rx?90:70))
 8000876:	f003 f8c9 	bl	8003a0c <HAL_GetTick>
 800087a:	4602      	mov	r2, r0
 800087c:	4bbf      	ldr	r3, [pc, #764]	; (8000b7c <do_buttons_and_nrf+0x30c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	4abf      	ldr	r2, [pc, #764]	; (8000b80 <do_buttons_and_nrf+0x310>)
 8000884:	7812      	ldrb	r2, [r2, #0]
 8000886:	2a00      	cmp	r2, #0
 8000888:	d001      	beq.n	800088e <do_buttons_and_nrf+0x1e>
 800088a:	225a      	movs	r2, #90	; 0x5a
 800088c:	e000      	b.n	8000890 <do_buttons_and_nrf+0x20>
 800088e:	2246      	movs	r2, #70	; 0x46
 8000890:	429a      	cmp	r2, r3
 8000892:	d901      	bls.n	8000898 <do_buttons_and_nrf+0x28>
		return false;
 8000894:	2300      	movs	r3, #0
 8000896:	e16c      	b.n	8000b72 <do_buttons_and_nrf+0x302>
	last_time = HAL_GetTick();
 8000898:	f003 f8b8 	bl	8003a0c <HAL_GetTick>
 800089c:	4603      	mov	r3, r0
 800089e:	4ab7      	ldr	r2, [pc, #732]	; (8000b7c <do_buttons_and_nrf+0x30c>)
 80008a0:	6013      	str	r3, [r2, #0]

	if (PB1 ^ PB2)
 80008a2:	2102      	movs	r1, #2
 80008a4:	48b7      	ldr	r0, [pc, #732]	; (8000b84 <do_buttons_and_nrf+0x314>)
 80008a6:	f003 fb71 	bl	8003f8c <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461c      	mov	r4, r3
 80008ae:	2104      	movs	r1, #4
 80008b0:	48b4      	ldr	r0, [pc, #720]	; (8000b84 <do_buttons_and_nrf+0x314>)
 80008b2:	f003 fb6b 	bl	8003f8c <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	429c      	cmp	r4, r3
 80008ba:	f000 8112 	beq.w	8000ae2 <do_buttons_and_nrf+0x272>
	{
		// we need to transmit
		set_rx = true;
 80008be:	4bb0      	ldr	r3, [pc, #704]	; (8000b80 <do_buttons_and_nrf+0x310>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2101      	movs	r1, #1
 80008c8:	48ae      	ldr	r0, [pc, #696]	; (8000b84 <do_buttons_and_nrf+0x314>)
 80008ca:	f003 fb76 	bl	8003fba <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80008ce:	200a      	movs	r0, #10
 80008d0:	f003 f8a6 	bl	8003a20 <HAL_Delay>
		nrf_init_tx(address);
 80008d4:	48ac      	ldr	r0, [pc, #688]	; (8000b88 <do_buttons_and_nrf+0x318>)
 80008d6:	f7ff fcfa 	bl	80002ce <nrf_init_tx>

		static uint8_t payload[NRF_PAYLOAD_LENGTH];
		memset(payload, 0x44, sizeof(payload));
 80008da:	220a      	movs	r2, #10
 80008dc:	2144      	movs	r1, #68	; 0x44
 80008de:	48ab      	ldr	r0, [pc, #684]	; (8000b8c <do_buttons_and_nrf+0x31c>)
 80008e0:	f00b fed2 	bl	800c688 <memset>
		if (PB1)
 80008e4:	2102      	movs	r1, #2
 80008e6:	48a7      	ldr	r0, [pc, #668]	; (8000b84 <do_buttons_and_nrf+0x314>)
 80008e8:	f003 fb50 	bl	8003f8c <HAL_GPIO_ReadPin>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d003      	beq.n	80008fa <do_buttons_and_nrf+0x8a>
			payload[0] = 1;
 80008f2:	4ba6      	ldr	r3, [pc, #664]	; (8000b8c <do_buttons_and_nrf+0x31c>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
 80008f8:	e00c      	b.n	8000914 <do_buttons_and_nrf+0xa4>
		else if (PB2)
 80008fa:	2104      	movs	r1, #4
 80008fc:	48a1      	ldr	r0, [pc, #644]	; (8000b84 <do_buttons_and_nrf+0x314>)
 80008fe:	f003 fb45 	bl	8003f8c <HAL_GPIO_ReadPin>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d003      	beq.n	8000910 <do_buttons_and_nrf+0xa0>
			payload[0] = 2;
 8000908:	4ba0      	ldr	r3, [pc, #640]	; (8000b8c <do_buttons_and_nrf+0x31c>)
 800090a:	2202      	movs	r2, #2
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	e001      	b.n	8000914 <do_buttons_and_nrf+0xa4>
		else
			return false;
 8000910:	2300      	movs	r3, #0
 8000912:	e12e      	b.n	8000b72 <do_buttons_and_nrf+0x302>
		nrf24l01p_write_tx_payload(payload, sizeof(payload));
 8000914:	210a      	movs	r1, #10
 8000916:	489d      	ldr	r0, [pc, #628]	; (8000b8c <do_buttons_and_nrf+0x31c>)
 8000918:	f002 fb3c 	bl	8002f94 <nrf24l01p_write_tx_payload>

		HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 1);
 800091c:	2201      	movs	r2, #1
 800091e:	2101      	movs	r1, #1
 8000920:	4898      	ldr	r0, [pc, #608]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000922:	f003 fb4a 	bl	8003fba <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000926:	2001      	movs	r0, #1
 8000928:	f003 f87a 	bl	8003a20 <HAL_Delay>
		HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2101      	movs	r1, #1
 8000930:	4894      	ldr	r0, [pc, #592]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000932:	f003 fb42 	bl	8003fba <HAL_GPIO_WritePin>

		if (payload[0] == 1)
 8000936:	4b95      	ldr	r3, [pc, #596]	; (8000b8c <do_buttons_and_nrf+0x31c>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d106      	bne.n	800094c <do_buttons_and_nrf+0xdc>
		{
			vfd_leds(0b0001);
 800093e:	2001      	movs	r0, #1
 8000940:	f002 ff84 	bl	800384c <vfd_leds>
			vfd_put_string("PB1");
 8000944:	4892      	ldr	r0, [pc, #584]	; (8000b90 <do_buttons_and_nrf+0x320>)
 8000946:	f002 fe07 	bl	8003558 <vfd_put_string>
 800094a:	e005      	b.n	8000958 <do_buttons_and_nrf+0xe8>
		}
		else
		{
			vfd_leds(0b0010);
 800094c:	2002      	movs	r0, #2
 800094e:	f002 ff7d 	bl	800384c <vfd_leds>
			vfd_put_string("PB2");
 8000952:	4890      	ldr	r0, [pc, #576]	; (8000b94 <do_buttons_and_nrf+0x324>)
 8000954:	f002 fe00 	bl	8003558 <vfd_put_string>
		}
		vfd_update();
 8000958:	f002 ff50 	bl	80037fc <vfd_update>

		uint32_t timeout_cnt = HAL_GetTick();
 800095c:	f003 f856 	bl	8003a0c <HAL_GetTick>
 8000960:	6178      	str	r0, [r7, #20]

		do {
			if (nrf24l01p_get_irq_flags() & (1 << NRF24L01P_IRQ_TX_DS))
 8000962:	f002 f97b 	bl	8002c5c <nrf24l01p_get_irq_flags>
 8000966:	4603      	mov	r3, r0
 8000968:	f003 0320 	and.w	r3, r3, #32
 800096c:	2b00      	cmp	r3, #0
 800096e:	d010      	beq.n	8000992 <do_buttons_and_nrf+0x122>
			{
				//successfully transmitted
				if (payload[0] == 1)
 8000970:	4b86      	ldr	r3, [pc, #536]	; (8000b8c <do_buttons_and_nrf+0x31c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d103      	bne.n	8000980 <do_buttons_and_nrf+0x110>
					vfd_put_string("PB1 TX");
 8000978:	4887      	ldr	r0, [pc, #540]	; (8000b98 <do_buttons_and_nrf+0x328>)
 800097a:	f002 fded 	bl	8003558 <vfd_put_string>
 800097e:	e002      	b.n	8000986 <do_buttons_and_nrf+0x116>
				else
					vfd_put_string("PB2 TX");
 8000980:	4886      	ldr	r0, [pc, #536]	; (8000b9c <do_buttons_and_nrf+0x32c>)
 8000982:	f002 fde9 	bl	8003558 <vfd_put_string>
				vfd_update();
 8000986:	f002 ff39 	bl	80037fc <vfd_update>
				nrf24l01p_clear_irq_flag(NRF24L01P_IRQ_TX_DS);
 800098a:	2005      	movs	r0, #5
 800098c:	f002 f954 	bl	8002c38 <nrf24l01p_clear_irq_flag>
				break;
 8000990:	e0a5      	b.n	8000ade <do_buttons_and_nrf+0x26e>
			}
			if (nrf24l01p_get_irq_flags() & (1 << NRF24L01P_IRQ_MAX_RT))
 8000992:	f002 f963 	bl	8002c5c <nrf24l01p_get_irq_flags>
 8000996:	4603      	mov	r3, r0
 8000998:	f003 0310 	and.w	r3, r3, #16
 800099c:	2b00      	cmp	r3, #0
 800099e:	d075      	beq.n	8000a8c <do_buttons_and_nrf+0x21c>
			{
				// not send
				vfd_leds(0b1000);
 80009a0:	2008      	movs	r0, #8
 80009a2:	f002 ff53 	bl	800384c <vfd_leds>
				if (payload[0] == 1)
 80009a6:	4b79      	ldr	r3, [pc, #484]	; (8000b8c <do_buttons_and_nrf+0x31c>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d103      	bne.n	80009b6 <do_buttons_and_nrf+0x146>
					vfd_put_string("PB1 MAX RT");
 80009ae:	487c      	ldr	r0, [pc, #496]	; (8000ba0 <do_buttons_and_nrf+0x330>)
 80009b0:	f002 fdd2 	bl	8003558 <vfd_put_string>
 80009b4:	e002      	b.n	80009bc <do_buttons_and_nrf+0x14c>
				else
					vfd_put_string("PB2 MAX RT");
 80009b6:	487b      	ldr	r0, [pc, #492]	; (8000ba4 <do_buttons_and_nrf+0x334>)
 80009b8:	f002 fdce 	bl	8003558 <vfd_put_string>
				vfd_update();
 80009bc:	f002 ff1e 	bl	80037fc <vfd_update>
				nrf24l01p_clear_irq_flag(NRF24L01P_IRQ_MAX_RT);
 80009c0:	2004      	movs	r0, #4
 80009c2:	f002 f939 	bl	8002c38 <nrf24l01p_clear_irq_flag>
				nrf24l01p_flush_tx();
 80009c6:	f002 fb24 	bl	8003012 <nrf24l01p_flush_tx>
				uint32_t but_hold = HAL_GetTick();
 80009ca:	f003 f81f 	bl	8003a0c <HAL_GetTick>
 80009ce:	6138      	str	r0, [r7, #16]
				while(PB1||PB2)
 80009d0:	e04d      	b.n	8000a6e <do_buttons_and_nrf+0x1fe>
				{
					if (HAL_GetTick() - but_hold > 2000)
 80009d2:	f003 f81b 	bl	8003a0c <HAL_GetTick>
 80009d6:	4602      	mov	r2, r0
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80009e0:	d945      	bls.n	8000a6e <do_buttons_and_nrf+0x1fe>
					{
						vfd_put_string("BERSERK");
 80009e2:	4871      	ldr	r0, [pc, #452]	; (8000ba8 <do_buttons_and_nrf+0x338>)
 80009e4:	f002 fdb8 	bl	8003558 <vfd_put_string>
						vfd_update();
 80009e8:	f002 ff08 	bl	80037fc <vfd_update>
						nrf24l01p_set_operation_mode(NRF24L01P_PTX);
 80009ec:	2000      	movs	r0, #0
 80009ee:	f002 fa6b 	bl	8002ec8 <nrf24l01p_set_operation_mode>

						nrf24l01p_set_rf_channel(NRF_CHANNEL);
 80009f2:	2044      	movs	r0, #68	; 0x44
 80009f4:	f002 faa5 	bl	8002f42 <nrf24l01p_set_rf_channel>
						nrf24l01p_set_power_mode(NRF24L01P_PWR_UP);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f002 fa84 	bl	8002f06 <nrf24l01p_set_power_mode>
						nrf24l01p_set_pll_mode(NRF24L01P_PLL_LOCK);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f002 fb18 	bl	8003034 <nrf24l01p_set_pll_mode>
						nrf24l01p_write_reg(NRF24L01P_RF_SETUP,
								BIT_COND(nrf24l01p_read_reg(NRF24L01P_RF_SETUP),
 8000a04:	2006      	movs	r0, #6
 8000a06:	f002 fb33 	bl	8003070 <nrf24l01p_read_reg>
 8000a0a:	4603      	mov	r3, r0
						nrf24l01p_write_reg(NRF24L01P_RF_SETUP,
 8000a0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	4619      	mov	r1, r3
 8000a14:	2006      	movs	r0, #6
 8000a16:	f002 fb44 	bl	80030a2 <nrf24l01p_write_reg>
										NRF24L01P_RF_SETUP_CONT_WAVE, 1));
						delay(NRF_POWER_UP_DELAY);
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	f7ff fc4c 	bl	80002b8 <delay>
						HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 1);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2101      	movs	r1, #1
 8000a24:	4857      	ldr	r0, [pc, #348]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000a26:	f003 fac8 	bl	8003fba <HAL_GPIO_WritePin>
						while(PB1||PB2);
 8000a2a:	bf00      	nop
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4855      	ldr	r0, [pc, #340]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000a30:	f003 faac 	bl	8003f8c <HAL_GPIO_ReadPin>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d1f8      	bne.n	8000a2c <do_buttons_and_nrf+0x1bc>
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	4851      	ldr	r0, [pc, #324]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000a3e:	f003 faa5 	bl	8003f8c <HAL_GPIO_ReadPin>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1f1      	bne.n	8000a2c <do_buttons_and_nrf+0x1bc>
						nrf24l01p_write_reg(NRF24L01P_RF_SETUP,
								BIT_COND(nrf24l01p_read_reg(NRF24L01P_RF_SETUP),
 8000a48:	2006      	movs	r0, #6
 8000a4a:	f002 fb11 	bl	8003070 <nrf24l01p_read_reg>
 8000a4e:	4603      	mov	r3, r0
						nrf24l01p_write_reg(NRF24L01P_RF_SETUP,
 8000a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	4619      	mov	r1, r3
 8000a58:	2006      	movs	r0, #6
 8000a5a:	f002 fb22 	bl	80030a2 <nrf24l01p_write_reg>
										NRF24L01P_RF_SETUP_CONT_WAVE, 0));
						nrf24l01p_set_pll_mode(NRF24L01P_PLL_UNLOCK);
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f002 fae8 	bl	8003034 <nrf24l01p_set_pll_mode>
						HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2101      	movs	r1, #1
 8000a68:	4846      	ldr	r0, [pc, #280]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000a6a:	f003 faa6 	bl	8003fba <HAL_GPIO_WritePin>
				while(PB1||PB2)
 8000a6e:	2102      	movs	r1, #2
 8000a70:	4844      	ldr	r0, [pc, #272]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000a72:	f003 fa8b 	bl	8003f8c <HAL_GPIO_ReadPin>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d1aa      	bne.n	80009d2 <do_buttons_and_nrf+0x162>
 8000a7c:	2104      	movs	r1, #4
 8000a7e:	4841      	ldr	r0, [pc, #260]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000a80:	f003 fa84 	bl	8003f8c <HAL_GPIO_ReadPin>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1a3      	bne.n	80009d2 <do_buttons_and_nrf+0x162>
					}
				}
				break;
 8000a8a:	e028      	b.n	8000ade <do_buttons_and_nrf+0x26e>
			}
			if (HAL_GetTick() - timeout_cnt > 200)
 8000a8c:	f002 ffbe 	bl	8003a0c <HAL_GetTick>
 8000a90:	4602      	mov	r2, r0
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	2bc8      	cmp	r3, #200	; 0xc8
 8000a98:	f67f af63 	bls.w	8000962 <do_buttons_and_nrf+0xf2>
			{
				// timeout error
				vfd_leds(0b1011);
 8000a9c:	200b      	movs	r0, #11
 8000a9e:	f002 fed5 	bl	800384c <vfd_leds>
				if (payload[0] == 1)
 8000aa2:	4b3a      	ldr	r3, [pc, #232]	; (8000b8c <do_buttons_and_nrf+0x31c>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d103      	bne.n	8000ab2 <do_buttons_and_nrf+0x242>
					vfd_put_string("PB1 T/OUT");
 8000aaa:	4840      	ldr	r0, [pc, #256]	; (8000bac <do_buttons_and_nrf+0x33c>)
 8000aac:	f002 fd54 	bl	8003558 <vfd_put_string>
 8000ab0:	e002      	b.n	8000ab8 <do_buttons_and_nrf+0x248>
				else
					vfd_put_string("PB2 T/OUT");
 8000ab2:	483f      	ldr	r0, [pc, #252]	; (8000bb0 <do_buttons_and_nrf+0x340>)
 8000ab4:	f002 fd50 	bl	8003558 <vfd_put_string>
				vfd_update();
 8000ab8:	f002 fea0 	bl	80037fc <vfd_update>
				nrf24l01p_flush_tx();
 8000abc:	f002 faa9 	bl	8003012 <nrf24l01p_flush_tx>
				while(PB1||PB2);
 8000ac0:	bf00      	nop
 8000ac2:	2102      	movs	r1, #2
 8000ac4:	482f      	ldr	r0, [pc, #188]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000ac6:	f003 fa61 	bl	8003f8c <HAL_GPIO_ReadPin>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1f8      	bne.n	8000ac2 <do_buttons_and_nrf+0x252>
 8000ad0:	2104      	movs	r1, #4
 8000ad2:	482c      	ldr	r0, [pc, #176]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000ad4:	f003 fa5a 	bl	8003f8c <HAL_GPIO_ReadPin>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1f1      	bne.n	8000ac2 <do_buttons_and_nrf+0x252>
				break;
			}

		} while (1);
		return true; // we where active
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e047      	b.n	8000b72 <do_buttons_and_nrf+0x302>
	}
	else
	{
		// we need to receive
		if (set_rx)
 8000ae2:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <do_buttons_and_nrf+0x310>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d00a      	beq.n	8000b00 <do_buttons_and_nrf+0x290>
		{
			set_rx = false;
 8000aea:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <do_buttons_and_nrf+0x310>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]
			nrf_init_rx(address);
 8000af0:	4825      	ldr	r0, [pc, #148]	; (8000b88 <do_buttons_and_nrf+0x318>)
 8000af2:	f7ff fc1f 	bl	8000334 <nrf_init_rx>
			HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 1);
 8000af6:	2201      	movs	r2, #1
 8000af8:	2101      	movs	r1, #1
 8000afa:	4822      	ldr	r0, [pc, #136]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000afc:	f003 fa5d 	bl	8003fba <HAL_GPIO_WritePin>
		}

		if (nrf24l01p_get_irq_flags() & (1 << NRF24L01P_IRQ_RX_DR))
 8000b00:	f002 f8ac 	bl	8002c5c <nrf24l01p_get_irq_flags>
 8000b04:	4603      	mov	r3, r0
 8000b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d030      	beq.n	8000b70 <do_buttons_and_nrf+0x300>
		{
			nrf24l01p_clear_irq_flag(NRF24L01P_IRQ_RX_DR);
 8000b0e:	2006      	movs	r0, #6
 8000b10:	f002 f892 	bl	8002c38 <nrf24l01p_clear_irq_flag>

			uint8_t payload[NRF_PAYLOAD_LENGTH];

			while (!nrf24l01p_rx_fifo_empty())
 8000b14:	e003      	b.n	8000b1e <do_buttons_and_nrf+0x2ae>
				nrf24l01p_read_rx_payload(payload);
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f002 fa6d 	bl	8002ff8 <nrf24l01p_read_rx_payload>
			while (!nrf24l01p_rx_fifo_empty())
 8000b1e:	f002 fa1e 	bl	8002f5e <nrf24l01p_rx_fifo_empty>
 8000b22:	4603      	mov	r3, r0
 8000b24:	f083 0301 	eor.w	r3, r3, #1
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1f3      	bne.n	8000b16 <do_buttons_and_nrf+0x2a6>

			if (payload[0] == 1)
 8000b2e:	793b      	ldrb	r3, [r7, #4]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d10c      	bne.n	8000b4e <do_buttons_and_nrf+0x2de>
			{
				vfd_leds(0b0101);
 8000b34:	2005      	movs	r0, #5
 8000b36:	f002 fe89 	bl	800384c <vfd_leds>
				vfd_put_string("* RX PB1 *");
 8000b3a:	481e      	ldr	r0, [pc, #120]	; (8000bb4 <do_buttons_and_nrf+0x344>)
 8000b3c:	f002 fd0c 	bl	8003558 <vfd_put_string>
				vfd_set_symbols(VFD_SYM_ARROW_LEFT);
 8000b40:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000b44:	f002 fd8e 	bl	8003664 <vfd_set_symbols>
				vfd_update();
 8000b48:	f002 fe58 	bl	80037fc <vfd_update>
 8000b4c:	e00e      	b.n	8000b6c <do_buttons_and_nrf+0x2fc>
			}
			else if (payload[0] == 2)
 8000b4e:	793b      	ldrb	r3, [r7, #4]
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d10b      	bne.n	8000b6c <do_buttons_and_nrf+0x2fc>
			{
				vfd_leds(0b0110);
 8000b54:	2006      	movs	r0, #6
 8000b56:	f002 fe79 	bl	800384c <vfd_leds>
				vfd_put_string("* RX PB2 *");
 8000b5a:	4817      	ldr	r0, [pc, #92]	; (8000bb8 <do_buttons_and_nrf+0x348>)
 8000b5c:	f002 fcfc 	bl	8003558 <vfd_put_string>
				vfd_set_symbols(VFD_SYM_ARROW_RIGHT);
 8000b60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b64:	f002 fd7e 	bl	8003664 <vfd_set_symbols>
				vfd_update();
 8000b68:	f002 fe48 	bl	80037fc <vfd_update>
			}
			return true; // we have something received
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e000      	b.n	8000b72 <do_buttons_and_nrf+0x302>
		}
		else
		{
			// no buttons pressed and nothing received
			return false;
 8000b70:	2300      	movs	r3, #0
		}
	}
	return false;
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	371c      	adds	r7, #28
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd90      	pop	{r4, r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200001bc 	.word	0x200001bc
 8000b80:	20000005 	.word	0x20000005
 8000b84:	40010c00 	.word	0x40010c00
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	200001c0 	.word	0x200001c0
 8000b90:	0800c730 	.word	0x0800c730
 8000b94:	0800c734 	.word	0x0800c734
 8000b98:	0800c738 	.word	0x0800c738
 8000b9c:	0800c740 	.word	0x0800c740
 8000ba0:	0800c748 	.word	0x0800c748
 8000ba4:	0800c754 	.word	0x0800c754
 8000ba8:	0800c760 	.word	0x0800c760
 8000bac:	0800c768 	.word	0x0800c768
 8000bb0:	0800c774 	.word	0x0800c774
 8000bb4:	0800c780 	.word	0x0800c780
 8000bb8:	0800c78c 	.word	0x0800c78c

08000bbc <do_microrl>:

void do_microrl(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
	while (!fifo_is_empty())
 8000bc2:	e007      	b.n	8000bd4 <do_microrl+0x18>
	{
		uint8_t buf = fifo_pop();
 8000bc4:	f7ff fafc 	bl	80001c0 <fifo_pop>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	71fb      	strb	r3, [r7, #7]
		microrl_print_char(buf);
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fc46 	bl	8002460 <microrl_print_char>
	while (!fifo_is_empty())
 8000bd4:	f7ff fb18 	bl	8000208 <fifo_is_empty>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	f083 0301 	eor.w	r3, r3, #1
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1ef      	bne.n	8000bc4 <do_microrl+0x8>
	}
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <sigint>:

void sigint(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
	print (ENDL);
 8000bf6:	4815      	ldr	r0, [pc, #84]	; (8000c4c <sigint+0x5c>)
 8000bf8:	f001 fc44 	bl	8002484 <print>
	print ("^C catched!");
 8000bfc:	4814      	ldr	r0, [pc, #80]	; (8000c50 <sigint+0x60>)
 8000bfe:	f001 fc41 	bl	8002484 <print>
	do_nrf_scan(-1);
 8000c02:	f04f 30ff 	mov.w	r0, #4294967295
 8000c06:	f000 f827 	bl	8000c58 <do_nrf_scan>
	active();
 8000c0a:	f7ff fb2f 	bl	800026c <active>
	vfd_put_string("CTRL + C");
 8000c0e:	4811      	ldr	r0, [pc, #68]	; (8000c54 <sigint+0x64>)
 8000c10:	f002 fca2 	bl	8003558 <vfd_put_string>
	vfd_set_symbols(VFD_SYM_DCC);
 8000c14:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000c18:	f002 fd24 	bl	8003664 <vfd_set_symbols>
	vfd_update();
 8000c1c:	f002 fdee 	bl	80037fc <vfd_update>
	vfd_update();
 8000c20:	f002 fdec 	bl	80037fc <vfd_update>

	// emulate ENTER input to print the promptexecute
	char * p = ENDL;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <sigint+0x5c>)
 8000c26:	607b      	str	r3, [r7, #4]
	while(*p) fifo_push(*(p++));
 8000c28:	e006      	b.n	8000c38 <sigint+0x48>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	1c5a      	adds	r2, r3, #1
 8000c2e:	607a      	str	r2, [r7, #4]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fa9c 	bl	8000170 <fifo_push>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1f4      	bne.n	8000c2a <sigint+0x3a>
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	0800c798 	.word	0x0800c798
 8000c50:	0800c79c 	.word	0x0800c79c
 8000c54:	0800c7a8 	.word	0x0800c7a8

08000c58 <do_nrf_scan>:


bool do_nrf_scan(int8_t command)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b0a6      	sub	sp, #152	; 0x98
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	static bool active = false;
	static uint8_t arr[NRF24L01P_CHANNELS_COUNT] = {0};

	if (command == -1)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c6a:	d102      	bne.n	8000c72 <do_nrf_scan+0x1a>
	{
		active = false;
 8000c6c:	4b66      	ldr	r3, [pc, #408]	; (8000e08 <do_nrf_scan+0x1b0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
	}
	if (command == 1)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d11b      	bne.n	8000cb2 <do_nrf_scan+0x5a>
	{
		memset(arr, 0, NRF24L01P_CHANNELS_COUNT);
 8000c7a:	227e      	movs	r2, #126	; 0x7e
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4863      	ldr	r0, [pc, #396]	; (8000e0c <do_nrf_scan+0x1b4>)
 8000c80:	f00b fd02 	bl	800c688 <memset>
		print("0000000000000000111111111111111122222222222222223333333333333333");
 8000c84:	4862      	ldr	r0, [pc, #392]	; (8000e10 <do_nrf_scan+0x1b8>)
 8000c86:	f001 fbfd 	bl	8002484 <print>
		print("44444444444444445555555555555555666666666666666677777777777777");
 8000c8a:	4862      	ldr	r0, [pc, #392]	; (8000e14 <do_nrf_scan+0x1bc>)
 8000c8c:	f001 fbfa 	bl	8002484 <print>
		print(ENDL);
 8000c90:	4861      	ldr	r0, [pc, #388]	; (8000e18 <do_nrf_scan+0x1c0>)
 8000c92:	f001 fbf7 	bl	8002484 <print>
		print("0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef");
 8000c96:	4861      	ldr	r0, [pc, #388]	; (8000e1c <do_nrf_scan+0x1c4>)
 8000c98:	f001 fbf4 	bl	8002484 <print>
		print("0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcd");
 8000c9c:	4860      	ldr	r0, [pc, #384]	; (8000e20 <do_nrf_scan+0x1c8>)
 8000c9e:	f001 fbf1 	bl	8002484 <print>
		print(ENDL);
 8000ca2:	485d      	ldr	r0, [pc, #372]	; (8000e18 <do_nrf_scan+0x1c0>)
 8000ca4:	f001 fbee 	bl	8002484 <print>
		active = true;
 8000ca8:	4b57      	ldr	r3, [pc, #348]	; (8000e08 <do_nrf_scan+0x1b0>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	701a      	strb	r2, [r3, #0]
		return false;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e0a6      	b.n	8000e00 <do_nrf_scan+0x1a8>
	}
	if (!active)
 8000cb2:	4b55      	ldr	r3, [pc, #340]	; (8000e08 <do_nrf_scan+0x1b0>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	f083 0301 	eor.w	r3, r3, #1
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <do_nrf_scan+0x6c>
		return false;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	e09d      	b.n	8000e00 <do_nrf_scan+0x1a8>

	HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin,0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	4856      	ldr	r0, [pc, #344]	; (8000e24 <do_nrf_scan+0x1cc>)
 8000cca:	f003 f976 	bl	8003fba <HAL_GPIO_WritePin>
	nrf24l01p_get_clear_irq_flags();
 8000cce:	f001 ffa7 	bl	8002c20 <nrf24l01p_get_clear_irq_flags>
    nrf24l01p_close_pipe(NRF24L01P_ALL);
 8000cd2:	20ff      	movs	r0, #255	; 0xff
 8000cd4:	f002 f83e 	bl	8002d54 <nrf24l01p_close_pipe>
    nrf24l01p_open_pipe(NRF24L01P_PIPE0, false);
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f001 ffe3 	bl	8002ca6 <nrf24l01p_open_pipe>
    uint8_t add[] = {0x05, 0xA5, 0x55, 0xA5, 0x50};
 8000ce0:	4a51      	ldr	r2, [pc, #324]	; (8000e28 <do_nrf_scan+0x1d0>)
 8000ce2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ce6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cea:	6018      	str	r0, [r3, #0]
 8000cec:	3304      	adds	r3, #4
 8000cee:	7019      	strb	r1, [r3, #0]
    nrf24l01p_set_address(NRF24L01P_PIPE0, add);
 8000cf0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f002 f86e 	bl	8002dd8 <nrf24l01p_set_address>
    nrf24l01p_set_operation_mode(NRF24L01P_PRX);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f002 f8e3 	bl	8002ec8 <nrf24l01p_set_operation_mode>
    nrf24l01p_set_rx_payload_width(NRF24L01P_PIPE0, NRF_PAYLOAD_LENGTH);
 8000d02:	210a      	movs	r1, #10
 8000d04:	2000      	movs	r0, #0
 8000d06:	f002 f8c1 	bl	8002e8c <nrf24l01p_set_rx_payload_width>
    nrf24l01p_set_power_mode(NRF24L01P_PWR_UP);
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f002 f8fb 	bl	8002f06 <nrf24l01p_set_power_mode>
    delay(NRF_POWER_UP_DELAY);
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fad1 	bl	80002b8 <delay>

	for (int i = 0; i < NRF24L01P_CHANNELS_COUNT; i++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000d1c:	e031      	b.n	8000d82 <do_nrf_scan+0x12a>
	{
	    nrf24l01p_set_rf_channel(i);
 8000d1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	4618      	mov	r0, r3
 8000d26:	f002 f90c 	bl	8002f42 <nrf24l01p_set_rf_channel>
		HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin,1);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	483d      	ldr	r0, [pc, #244]	; (8000e24 <do_nrf_scan+0x1cc>)
 8000d30:	f003 f943 	bl	8003fba <HAL_GPIO_WritePin>
		delay_us(5000);
 8000d34:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d38:	f7ff faa4 	bl	8000284 <delay_us>
		HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin,0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2101      	movs	r1, #1
 8000d40:	4838      	ldr	r0, [pc, #224]	; (8000e24 <do_nrf_scan+0x1cc>)
 8000d42:	f003 f93a 	bl	8003fba <HAL_GPIO_WritePin>
		if (nrf24l01p_get_carrier_detect())
 8000d46:	f002 f916 	bl	8002f76 <nrf24l01p_get_carrier_detect>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d013      	beq.n	8000d78 <do_nrf_scan+0x120>
			if (arr[i] < 0xff)
 8000d50:	4a2e      	ldr	r2, [pc, #184]	; (8000e0c <do_nrf_scan+0x1b4>)
 8000d52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000d56:	4413      	add	r3, r2
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2bff      	cmp	r3, #255	; 0xff
 8000d5c:	d00c      	beq.n	8000d78 <do_nrf_scan+0x120>
				arr[i]++;
 8000d5e:	4a2b      	ldr	r2, [pc, #172]	; (8000e0c <do_nrf_scan+0x1b4>)
 8000d60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000d64:	4413      	add	r3, r2
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	b2d9      	uxtb	r1, r3
 8000d6c:	4a27      	ldr	r2, [pc, #156]	; (8000e0c <do_nrf_scan+0x1b4>)
 8000d6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000d72:	4413      	add	r3, r2
 8000d74:	460a      	mov	r2, r1
 8000d76:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NRF24L01P_CHANNELS_COUNT; i++)
 8000d78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000d82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000d86:	2b7d      	cmp	r3, #125	; 0x7d
 8000d88:	ddc9      	ble.n	8000d1e <do_nrf_scan+0xc6>
	}
	uint8_t packet[NRF24L01P_CHANNELS_COUNT + 1] = {0};
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	227b      	movs	r2, #123	; 0x7b
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f00b fc76 	bl	800c688 <memset>
	for (int i = 0; i < NRF24L01P_CHANNELS_COUNT; i++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000da2:	e020      	b.n	8000de6 <do_nrf_scan+0x18e>
	{
		packet[i] = (arr[i] < 0xf?arr[i]:0xf) + ((arr[i] < 10)?'0':('a' - 0xa));
 8000da4:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <do_nrf_scan+0x1b4>)
 8000da6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000daa:	4413      	add	r3, r2
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b0f      	cmp	r3, #15
 8000db0:	bf28      	it	cs
 8000db2:	230f      	movcs	r3, #15
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	4915      	ldr	r1, [pc, #84]	; (8000e0c <do_nrf_scan+0x1b4>)
 8000db8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000dbc:	440a      	add	r2, r1
 8000dbe:	7812      	ldrb	r2, [r2, #0]
 8000dc0:	2a09      	cmp	r2, #9
 8000dc2:	d801      	bhi.n	8000dc8 <do_nrf_scan+0x170>
 8000dc4:	2230      	movs	r2, #48	; 0x30
 8000dc6:	e000      	b.n	8000dca <do_nrf_scan+0x172>
 8000dc8:	2257      	movs	r2, #87	; 0x57
 8000dca:	4413      	add	r3, r2
 8000dcc:	b2d9      	uxtb	r1, r3
 8000dce:	f107 0208 	add.w	r2, r7, #8
 8000dd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000dd6:	4413      	add	r3, r2
 8000dd8:	460a      	mov	r2, r1
 8000dda:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NRF24L01P_CHANNELS_COUNT; i++)
 8000ddc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000de0:	3301      	adds	r3, #1
 8000de2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000de6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000dea:	2b7d      	cmp	r3, #125	; 0x7d
 8000dec:	ddda      	ble.n	8000da4 <do_nrf_scan+0x14c>
	}
	print((char *)packet);
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	4618      	mov	r0, r3
 8000df4:	f001 fb46 	bl	8002484 <print>
	print(ENDL);
 8000df8:	4807      	ldr	r0, [pc, #28]	; (8000e18 <do_nrf_scan+0x1c0>)
 8000dfa:	f001 fb43 	bl	8002484 <print>
	return true;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3798      	adds	r7, #152	; 0x98
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	200001ca 	.word	0x200001ca
 8000e0c:	200001cc 	.word	0x200001cc
 8000e10:	0800c7b4 	.word	0x0800c7b4
 8000e14:	0800c7f8 	.word	0x0800c7f8
 8000e18:	0800c798 	.word	0x0800c798
 8000e1c:	0800c838 	.word	0x0800c838
 8000e20:	0800c87c 	.word	0x0800c87c
 8000e24:	40010c00 	.word	0x40010c00
 8000e28:	0800c8bc 	.word	0x0800c8bc

08000e2c <nrf_scan>:

int nrf_scan (int argc, const char * const * argv)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
	vfd_put_string("NRF SCAN");
 8000e36:	4807      	ldr	r0, [pc, #28]	; (8000e54 <nrf_scan+0x28>)
 8000e38:	f002 fb8e 	bl	8003558 <vfd_put_string>
	do_nrf_scan(1);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff ff0b 	bl	8000c58 <do_nrf_scan>
	vfd_update();
 8000e42:	f002 fcdb 	bl	80037fc <vfd_update>
	active();
 8000e46:	f7ff fa11 	bl	800026c <active>
	return 0;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	0800c8c4 	.word	0x0800c8c4

08000e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5e:	f002 fd7d 	bl	800395c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e62:	f000 f8c1 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e66:	f000 f9d9 	bl	800121c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000e6a:	f000 f947 	bl	80010fc <MX_SPI2_Init>
  MX_I2C1_Init();
 8000e6e:	f000 f917 	bl	80010a0 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000e72:	f00a ff0f 	bl	800bc94 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000e76:	f000 f977 	bl	8001168 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_SPI_ENABLE(&hspi2);
 8000e7a:	4b52      	ldr	r3, [pc, #328]	; (8000fc4 <main+0x16c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b50      	ldr	r3, [pc, #320]	; (8000fc4 <main+0x16c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e88:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim1);
 8000e8a:	484f      	ldr	r0, [pc, #316]	; (8000fc8 <main+0x170>)
 8000e8c:	f006 fea2 	bl	8007bd4 <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, 1);
 8000e90:	2201      	movs	r2, #1
 8000e92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e96:	484d      	ldr	r0, [pc, #308]	; (8000fcc <main+0x174>)
 8000e98:	f003 f88f 	bl	8003fba <HAL_GPIO_WritePin>
  init_microrl(); // we are ready for microrl!
 8000e9c:	f001 fe16 	bl	8002acc <init_microrl>

  uint8_t test;
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f7ff fa73 	bl	800038c <nrf24l01p_spi_ss>

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eac:	4848      	ldr	r0, [pc, #288]	; (8000fd0 <main+0x178>)
 8000eae:	f003 f884 	bl	8003fba <HAL_GPIO_WritePin>

  do_vfd_init();
 8000eb2:	f7ff facf 	bl	8000454 <do_vfd_init>

  test = nrf24l01p_nop();
 8000eb6:	f002 f8b4 	bl	8003022 <nrf24l01p_nop>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	73fb      	strb	r3, [r7, #15]
  if ((test&0b1110) == 0b1110)
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	f003 030e 	and.w	r3, r3, #14
 8000ec4:	2b0e      	cmp	r3, #14
 8000ec6:	d107      	bne.n	8000ed8 <main+0x80>
  {
	  vfd_put_string("NRF24L01+");
 8000ec8:	4842      	ldr	r0, [pc, #264]	; (8000fd4 <main+0x17c>)
 8000eca:	f002 fb45 	bl	8003558 <vfd_put_string>
	  vfd_set_symbols(VFD_SYM_DOLBY);
 8000ece:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ed2:	f002 fbc7 	bl	8003664 <vfd_set_symbols>
 8000ed6:	e002      	b.n	8000ede <main+0x86>
  }
  else
  {
	  vfd_put_string("VFD FV651G");
 8000ed8:	483f      	ldr	r0, [pc, #252]	; (8000fd8 <main+0x180>)
 8000eda:	f002 fb3d 	bl	8003558 <vfd_put_string>
  }
  vfd_update();
 8000ede:	f002 fc8d 	bl	80037fc <vfd_update>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  last_active_time = HAL_GetTick();
 8000ee2:	f002 fd93 	bl	8003a0c <HAL_GetTick>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4a3c      	ldr	r2, [pc, #240]	; (8000fdc <main+0x184>)
 8000eea:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  do_led();
 8000eec:	f7ff fb68 	bl	80005c0 <do_led>
	  do_fram_test();
 8000ef0:	f7ff fbb2 	bl	8000658 <do_fram_test>
	  do_microrl();
 8000ef4:	f7ff fe62 	bl	8000bbc <do_microrl>
	  if (do_nrf_scan(0) || do_buttons_and_nrf())
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff fead 	bl	8000c58 <do_nrf_scan>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d104      	bne.n	8000f0e <main+0xb6>
 8000f04:	f7ff fcb4 	bl	8000870 <do_buttons_and_nrf>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d004      	beq.n	8000f18 <main+0xc0>
		  last_active_time = HAL_GetTick();
 8000f0e:	f002 fd7d 	bl	8003a0c <HAL_GetTick>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4a31      	ldr	r2, [pc, #196]	; (8000fdc <main+0x184>)
 8000f16:	6013      	str	r3, [r2, #0]

	  // disable if inactive

	  if (HAL_GetTick() - last_active_time > 200)
 8000f18:	f002 fd78 	bl	8003a0c <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <main+0x184>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	2bc8      	cmp	r3, #200	; 0xc8
 8000f26:	d910      	bls.n	8000f4a <main+0xf2>
	  {
		  vfd_leds(0);
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f002 fc8f 	bl	800384c <vfd_leds>
		  vfd_clr_symbols(VFD_SYM_ARROW_LEFT);
 8000f2e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000f32:	f002 fbef 	bl	8003714 <vfd_clr_symbols>
		  vfd_clr_symbols(VFD_SYM_ARROW_RIGHT);
 8000f36:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f3a:	f002 fbeb 	bl	8003714 <vfd_clr_symbols>
		  vfd_clr_symbols(VFD_SYM_DCC);
 8000f3e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000f42:	f002 fbe7 	bl	8003714 <vfd_clr_symbols>
		  vfd_update();
 8000f46:	f002 fc59 	bl	80037fc <vfd_update>
	  }

	  if (HAL_GetTick() - last_active_time > 10000)
 8000f4a:	f002 fd5f 	bl	8003a0c <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <main+0x184>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d905      	bls.n	8000f6a <main+0x112>
		  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2120      	movs	r1, #32
 8000f62:	481f      	ldr	r0, [pc, #124]	; (8000fe0 <main+0x188>)
 8000f64:	f003 f829 	bl	8003fba <HAL_GPIO_WritePin>
 8000f68:	e7c0      	b.n	8000eec <main+0x94>
	  else
	  {
		  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2120      	movs	r1, #32
 8000f6e:	481c      	ldr	r0, [pc, #112]	; (8000fe0 <main+0x188>)
 8000f70:	f003 f823 	bl	8003fba <HAL_GPIO_WritePin>
		  if (HAL_GetTick() - last_active_time > 3000)
 8000f74:	f002 fd4a 	bl	8003a0c <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <main+0x184>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d9b1      	bls.n	8000eec <main+0x94>
		  {
			  char buf [11];
			  memset(buf, '\0', sizeof(buf));
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	220b      	movs	r2, #11
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f00b fb7a 	bl	800c688 <memset>
			  memset(buf, '_', 10-((HAL_GetTick() - last_active_time)/1000));
 8000f94:	f002 fd3a 	bl	8003a0c <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <main+0x184>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <main+0x18c>)
 8000fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa6:	099b      	lsrs	r3, r3, #6
 8000fa8:	f1c3 020a 	rsb	r2, r3, #10
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	215f      	movs	r1, #95	; 0x5f
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f00b fb69 	bl	800c688 <memset>
			  vfd_put_string(buf);
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f002 facd 	bl	8003558 <vfd_put_string>
			  vfd_update();
 8000fbe:	f002 fc1d 	bl	80037fc <vfd_update>
	  do_led();
 8000fc2:	e793      	b.n	8000eec <main+0x94>
 8000fc4:	2000056c 	.word	0x2000056c
 8000fc8:	20000640 	.word	0x20000640
 8000fcc:	40010800 	.word	0x40010800
 8000fd0:	40011000 	.word	0x40011000
 8000fd4:	0800c8d0 	.word	0x0800c8d0
 8000fd8:	0800c8dc 	.word	0x0800c8dc
 8000fdc:	20000618 	.word	0x20000618
 8000fe0:	40010c00 	.word	0x40010c00
 8000fe4:	10624dd3 	.word	0x10624dd3

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b094      	sub	sp, #80	; 0x50
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff2:	2228      	movs	r2, #40	; 0x28
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f00b fb46 	bl	800c688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001018:	2301      	movs	r3, #1
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800101c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001022:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001026:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001028:	2301      	movs	r3, #1
 800102a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102c:	2302      	movs	r3, #2
 800102e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001034:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001036:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800103a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001040:	4618      	mov	r0, r3
 8001042:	f005 fcb1 	bl	80069a8 <HAL_RCC_OscConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800104c:	f000 f97e 	bl	800134c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001050:	230f      	movs	r3, #15
 8001052:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001054:	2302      	movs	r3, #2
 8001056:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800105c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001060:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	2102      	movs	r1, #2
 800106c:	4618      	mov	r0, r3
 800106e:	f005 ff1b 	bl	8006ea8 <HAL_RCC_ClockConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001078:	f000 f968 	bl	800134c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800107c:	2310      	movs	r3, #16
 800107e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	4618      	mov	r0, r3
 8001088:	f006 f896 	bl	80071b8 <HAL_RCCEx_PeriphCLKConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001092:	f000 f95b 	bl	800134c <Error_Handler>
  }
}
 8001096:	bf00      	nop
 8001098:	3750      	adds	r7, #80	; 0x50
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_I2C1_Init+0x50>)
 80010a6:	4a13      	ldr	r2, [pc, #76]	; (80010f4 <MX_I2C1_Init+0x54>)
 80010a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_I2C1_Init+0x50>)
 80010ac:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <MX_I2C1_Init+0x58>)
 80010ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_I2C1_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_I2C1_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_I2C1_Init+0x50>)
 80010be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <MX_I2C1_Init+0x50>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_I2C1_Init+0x50>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <MX_I2C1_Init+0x50>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_I2C1_Init+0x50>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <MX_I2C1_Init+0x50>)
 80010de:	f002 ff9d 	bl	800401c <HAL_I2C_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010e8:	f000 f930 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200005c4 	.word	0x200005c4
 80010f4:	40005400 	.word	0x40005400
 80010f8:	000186a0 	.word	0x000186a0

080010fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_SPI2_Init+0x64>)
 8001102:	4a18      	ldr	r2, [pc, #96]	; (8001164 <MX_SPI2_Init+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <MX_SPI2_Init+0x64>)
 8001108:	f44f 7282 	mov.w	r2, #260	; 0x104
 800110c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_SPI2_Init+0x64>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_SPI2_Init+0x64>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_SPI2_Init+0x64>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_SPI2_Init+0x64>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_SPI2_Init+0x64>)
 8001128:	f44f 7200 	mov.w	r2, #512	; 0x200
 800112c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_SPI2_Init+0x64>)
 8001130:	2218      	movs	r2, #24
 8001132:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <MX_SPI2_Init+0x64>)
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_SPI2_Init+0x64>)
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <MX_SPI2_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_SPI2_Init+0x64>)
 8001148:	220a      	movs	r2, #10
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_SPI2_Init+0x64>)
 800114e:	f006 f8e9 	bl	8007324 <HAL_SPI_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001158:	f000 f8f8 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2000056c 	.word	0x2000056c
 8001164:	40003800 	.word	0x40003800

08001168 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001184:	4b22      	ldr	r3, [pc, #136]	; (8001210 <MX_TIM1_Init+0xa8>)
 8001186:	4a23      	ldr	r2, [pc, #140]	; (8001214 <MX_TIM1_Init+0xac>)
 8001188:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = HAL_RCC_GetSysClockFreq()/1000000-1;
 800118a:	f005 ff77 	bl	800707c <HAL_RCC_GetSysClockFreq>
 800118e:	4603      	mov	r3, r0
 8001190:	4a21      	ldr	r2, [pc, #132]	; (8001218 <MX_TIM1_Init+0xb0>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	0c9b      	lsrs	r3, r3, #18
 8001198:	3b01      	subs	r3, #1
 800119a:	4a1d      	ldr	r2, [pc, #116]	; (8001210 <MX_TIM1_Init+0xa8>)
 800119c:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <MX_TIM1_Init+0xa8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MX_TIM1_Init+0xa8>)
 80011a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <MX_TIM1_Init+0xa8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_TIM1_Init+0xa8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_TIM1_Init+0xa8>)
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011be:	4814      	ldr	r0, [pc, #80]	; (8001210 <MX_TIM1_Init+0xa8>)
 80011c0:	f006 fcb8 	bl	8007b34 <HAL_TIM_Base_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80011ca:	f000 f8bf 	bl	800134c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	4619      	mov	r1, r3
 80011da:	480d      	ldr	r0, [pc, #52]	; (8001210 <MX_TIM1_Init+0xa8>)
 80011dc:	f006 fd44 	bl	8007c68 <HAL_TIM_ConfigClockSource>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80011e6:	f000 f8b1 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011f2:	463b      	mov	r3, r7
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <MX_TIM1_Init+0xa8>)
 80011f8:	f006 fef2 	bl	8007fe0 <HAL_TIMEx_MasterConfigSynchronization>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001202:	f000 f8a3 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000640 	.word	0x20000640
 8001214:	40012c00 	.word	0x40012c00
 8001218:	431bde83 	.word	0x431bde83

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001230:	4b42      	ldr	r3, [pc, #264]	; (800133c <MX_GPIO_Init+0x120>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a41      	ldr	r2, [pc, #260]	; (800133c <MX_GPIO_Init+0x120>)
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b3f      	ldr	r3, [pc, #252]	; (800133c <MX_GPIO_Init+0x120>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0310 	and.w	r3, r3, #16
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001248:	4b3c      	ldr	r3, [pc, #240]	; (800133c <MX_GPIO_Init+0x120>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a3b      	ldr	r2, [pc, #236]	; (800133c <MX_GPIO_Init+0x120>)
 800124e:	f043 0320 	orr.w	r3, r3, #32
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b39      	ldr	r3, [pc, #228]	; (800133c <MX_GPIO_Init+0x120>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0320 	and.w	r3, r3, #32
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	4b36      	ldr	r3, [pc, #216]	; (800133c <MX_GPIO_Init+0x120>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a35      	ldr	r2, [pc, #212]	; (800133c <MX_GPIO_Init+0x120>)
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b33      	ldr	r3, [pc, #204]	; (800133c <MX_GPIO_Init+0x120>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001278:	4b30      	ldr	r3, [pc, #192]	; (800133c <MX_GPIO_Init+0x120>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a2f      	ldr	r2, [pc, #188]	; (800133c <MX_GPIO_Init+0x120>)
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b2d      	ldr	r3, [pc, #180]	; (800133c <MX_GPIO_Init+0x120>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001290:	2201      	movs	r2, #1
 8001292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001296:	482a      	ldr	r0, [pc, #168]	; (8001340 <MX_GPIO_Init+0x124>)
 8001298:	f002 fe8f 	bl	8003fba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|SPI2_nRF_CSn_Pin|HV_EN_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f241 0121 	movw	r1, #4129	; 0x1021
 80012a2:	4828      	ldr	r0, [pc, #160]	; (8001344 <MX_GPIO_Init+0x128>)
 80012a4:	f002 fe89 	bl	8003fba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ae:	4826      	ldr	r0, [pc, #152]	; (8001348 <MX_GPIO_Init+0x12c>)
 80012b0:	f002 fe83 	bl	8003fba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, GPIO_PIN_SET);
 80012b4:	2201      	movs	r2, #1
 80012b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ba:	4822      	ldr	r0, [pc, #136]	; (8001344 <MX_GPIO_Init+0x128>)
 80012bc:	f002 fe7d 	bl	8003fba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2302      	movs	r3, #2
 80012d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4619      	mov	r1, r3
 80012d8:	4819      	ldr	r0, [pc, #100]	; (8001340 <MX_GPIO_Init+0x124>)
 80012da:	f002 fcd3 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : nRF_CE_Pin SPI2_nRF_CSn_Pin HV_EN_Pin PT6315_STB_Pin */
  GPIO_InitStruct.Pin = nRF_CE_Pin|SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 80012de:	f241 1321 	movw	r3, #4385	; 0x1121
 80012e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2302      	movs	r3, #2
 80012ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	4619      	mov	r1, r3
 80012f6:	4813      	ldr	r0, [pc, #76]	; (8001344 <MX_GPIO_Init+0x128>)
 80012f8:	f002 fcc4 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1_Pin PB2_Pin */
  GPIO_InitStruct.Pin = PB1_Pin|PB2_Pin;
 80012fc:	2306      	movs	r3, #6
 80012fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4619      	mov	r1, r3
 800130e:	480d      	ldr	r0, [pc, #52]	; (8001344 <MX_GPIO_Init+0x128>)
 8001310:	f002 fcb8 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PU_Pin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8001314:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001318:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2302      	movs	r3, #2
 8001324:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	4619      	mov	r1, r3
 800132c:	4806      	ldr	r0, [pc, #24]	; (8001348 <MX_GPIO_Init+0x12c>)
 800132e:	f002 fca9 	bl	8003c84 <HAL_GPIO_Init>

}
 8001332:	bf00      	nop
 8001334:	3720      	adds	r7, #32
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000
 8001340:	40011000 	.word	0x40011000
 8001344:	40010c00 	.word	0x40010c00
 8001348:	40010800 	.word	0x40010800

0800134c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001350:	b672      	cpsid	i
}
 8001352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001354:	e7fe      	b.n	8001354 <Error_Handler+0x8>

08001356 <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 8001356:	b480      	push	{r7}
 8001358:	b085      	sub	sp, #20
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	5c8a      	ldrb	r2, [r1, r2]
 800136a:	4413      	add	r3, r2
 800136c:	3301      	adds	r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2b3f      	cmp	r3, #63	; 0x3f
 8001374:	dd02      	ble.n	800137c <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3b40      	subs	r3, #64	; 0x40
 800137a:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	5cd3      	ldrb	r3, [r2, r3]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <hist_is_space_for_new+0x1a>
		return true;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e01e      	b.n	80013e4 <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	429a      	cmp	r2, r3
 80013b0:	db0c      	blt.n	80013cc <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4413      	add	r3, r2
 80013c0:	3b01      	subs	r3, #1
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	da0c      	bge.n	80013e2 <hist_is_space_for_new+0x56>
			return true;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e00b      	b.n	80013e4 <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	3b01      	subs	r3, #1
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	da01      	bge.n	80013e2 <hist_is_space_for_new+0x56>
			return true;
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <hist_is_space_for_new+0x58>
	}
	return false;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	60f8      	str	r0, [r7, #12]
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b3e      	cmp	r3, #62	; 0x3e
 80013fe:	dc61      	bgt.n	80014c4 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8001400:	e002      	b.n	8001408 <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f7ff ffa7 	bl	8001356 <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f7ff ffbe 	bl	800138c <hist_is_space_for_new>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0f5      	beq.n	8001402 <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	5cd3      	ldrb	r3, [r2, r3]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d105      	bne.n	800142e <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	b2d1      	uxtb	r1, r2
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	429a      	cmp	r2, r3
 800143a:	da0a      	bge.n	8001452 <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	3301      	adds	r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	4618      	mov	r0, r3
 800144c:	f00b f8f4 	bl	800c638 <memcpy>
 8001450:	e018      	b.n	8001484 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800145a:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	3301      	adds	r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	4618      	mov	r0, r3
 800146c:	f00b f8e4 	bl	800c638 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	68ba      	ldr	r2, [r7, #8]
 8001476:	18d1      	adds	r1, r2, r3
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	461a      	mov	r2, r3
 8001480:	f00b f8da 	bl	800c638 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	b2d1      	uxtb	r1, r2
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	2b3f      	cmp	r3, #63	; 0x3f
 80014a4:	dd05      	ble.n	80014b2 <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	2100      	movs	r1, #0
 80014ba:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2200      	movs	r2, #0
 80014c0:	649a      	str	r2, [r3, #72]	; 0x48
 80014c2:	e000      	b.n	80014c6 <hist_save_line+0xd8>
		return;
 80014c4:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08c      	sub	sp, #48	; 0x30
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 80014e2:	e010      	b.n	8001506 <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e8:	4413      	add	r3, r2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	3301      	adds	r3, #1
 80014ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014f0:	4413      	add	r3, r2
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 80014f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f6:	2b3f      	cmp	r3, #63	; 0x3f
 80014f8:	dd02      	ble.n	8001500 <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 80014fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fc:	3b40      	subs	r3, #64	; 0x40
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8001500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001502:	3301      	adds	r3, #1
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150a:	4413      	add	r3, r2
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1e8      	bne.n	80014e4 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d176      	bne.n	8001606 <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800151e:	429a      	cmp	r2, r3
 8001520:	f2c0 80d6 	blt.w	80016d0 <hist_restore_line+0x204>
			int header = pThis->begin;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 800152e:	e010      	b.n	8001552 <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	4413      	add	r3, r2
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	3301      	adds	r3, #1
 800153a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800153c:	4413      	add	r3, r2
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	2b3f      	cmp	r3, #63	; 0x3f
 8001544:	dd02      	ble.n	800154c <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	3b40      	subs	r3, #64	; 0x40
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 800154c:	6a3b      	ldr	r3, [r7, #32]
 800154e:	3301      	adds	r3, #1
 8001550:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	4413      	add	r3, r2
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d007      	beq.n	800156e <hist_restore_line+0xa2>
 800155e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	1e5a      	subs	r2, r3, #1
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156a:	429a      	cmp	r2, r3
 800156c:	d1e0      	bne.n	8001530 <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	4413      	add	r3, r2
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 80aa 	beq.w	80016d0 <hist_restore_line+0x204>
					pThis->cur++;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	4413      	add	r3, r2
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	4413      	add	r3, r2
 8001594:	2b3f      	cmp	r3, #63	; 0x3f
 8001596:	dc11      	bgt.n	80015bc <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 8001598:	2265      	movs	r2, #101	; 0x65
 800159a:	2100      	movs	r1, #0
 800159c:	68b8      	ldr	r0, [r7, #8]
 800159e:	f00b f873 	bl	800c688 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	3301      	adds	r3, #1
 80015a8:	18d1      	adds	r1, r2, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	4413      	add	r3, r2
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	68b8      	ldr	r0, [r7, #8]
 80015b6:	f00b f83f 	bl	800c638 <memcpy>
 80015ba:	e01f      	b.n	80015fc <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80015c2:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 80015c4:	2265      	movs	r2, #101	; 0x65
 80015c6:	2100      	movs	r1, #0
 80015c8:	68b8      	ldr	r0, [r7, #8]
 80015ca:	f00b f85d 	bl	800c688 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	3301      	adds	r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4619      	mov	r1, r3
 80015da:	68b8      	ldr	r0, [r7, #8]
 80015dc:	f00b f82c 	bl	800c638 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	18d0      	adds	r0, r2, r3
 80015e6:	68f9      	ldr	r1, [r7, #12]
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	4413      	add	r3, r2
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	f00b f81e 	bl	800c638 <memcpy>
				}
				return pThis->ring_buf[header];
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	4413      	add	r3, r2
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	e066      	b.n	80016d4 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160a:	2b00      	cmp	r3, #0
 800160c:	dd5e      	ble.n	80016cc <hist_restore_line+0x200>
				pThis->cur--;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001612:	1e5a      	subs	r2, r3, #1
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	61fb      	str	r3, [r7, #28]
			int j = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8001622:	e010      	b.n	8001646 <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	4413      	add	r3, r2
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	3301      	adds	r3, #1
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	4413      	add	r3, r2
 8001632:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	2b3f      	cmp	r3, #63	; 0x3f
 8001638:	dd02      	ble.n	8001640 <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b40      	subs	r3, #64	; 0x40
 800163e:	61fb      	str	r3, [r7, #28]
				j++;
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	3301      	adds	r3, #1
 8001644:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	4413      	add	r3, r2
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d006      	beq.n	8001660 <hist_restore_line+0x194>
 8001652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	1ad2      	subs	r2, r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800165c:	429a      	cmp	r2, r3
 800165e:	d1e1      	bne.n	8001624 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	4413      	add	r3, r2
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	4413      	add	r3, r2
 800166e:	2b3f      	cmp	r3, #63	; 0x3f
 8001670:	dc0c      	bgt.n	800168c <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	3301      	adds	r3, #1
 8001678:	18d1      	adds	r1, r2, r3
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	4413      	add	r3, r2
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	68b8      	ldr	r0, [r7, #8]
 8001686:	f00a ffd7 	bl	800c638 <memcpy>
 800168a:	e01a      	b.n	80016c2 <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001692:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3301      	adds	r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	4619      	mov	r1, r3
 80016a0:	68b8      	ldr	r0, [r7, #8]
 80016a2:	f00a ffc9 	bl	800c638 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	18d0      	adds	r0, r2, r3
 80016ac:	68f9      	ldr	r1, [r7, #12]
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	4413      	add	r3, r2
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	461a      	mov	r2, r3
 80016be:	f00a ffbb 	bl	800c638 <memcpy>
			}
			return pThis->ring_buf[header];
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	4413      	add	r3, r2
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	e003      	b.n	80016d4 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	e001      	b.n	80016d4 <hist_restore_line+0x208>
		}
	}
	return -1;
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3730      	adds	r7, #48	; 0x30
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
	int i = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
	int ind = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 80016f0:	e002      	b.n	80016f8 <split+0x1c>
			ind++;
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	3301      	adds	r3, #1
 80016f6:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4413      	add	r3, r2
 80016fe:	3354      	adds	r3, #84	; 0x54
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d103      	bne.n	800170e <split+0x32>
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	429a      	cmp	r2, r3
 800170c:	dbf1      	blt.n	80016f2 <split+0x16>
		}
		if (!(ind < limit)) return i;
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	429a      	cmp	r2, r3
 8001714:	db01      	blt.n	800171a <split+0x3e>
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	e024      	b.n	8001764 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	1c58      	adds	r0, r3, #1
 8001726:	6178      	str	r0, [r7, #20]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	4403      	add	r3, r0
 800172e:	440a      	add	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2b09      	cmp	r3, #9
 8001736:	dd05      	ble.n	8001744 <split+0x68>
			return -1;
 8001738:	f04f 33ff 	mov.w	r3, #4294967295
 800173c:	e012      	b.n	8001764 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	3301      	adds	r3, #1
 8001742:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4413      	add	r3, r2
 800174a:	3354      	adds	r3, #84	; 0x54
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <split+0x7e>
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	429a      	cmp	r2, r3
 8001758:	dbf1      	blt.n	800173e <split+0x62>
		}
		if (!(ind < limit)) return i;
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	429a      	cmp	r2, r3
 8001760:	dbca      	blt.n	80016f8 <split+0x1c>
 8001762:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 8001764:	4618      	mov	r0, r3
 8001766:	371c      	adds	r7, #28
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001780:	4610      	mov	r0, r2
 8001782:	4798      	blx	r3
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800179a:	4803      	ldr	r0, [pc, #12]	; (80017a8 <terminal_backspace+0x1c>)
 800179c:	4798      	blx	r3
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	0800c8f8 	.word	0x0800c8f8

080017ac <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80017ba:	4803      	ldr	r0, [pc, #12]	; (80017c8 <terminal_newline+0x1c>)
 80017bc:	4798      	blx	r3
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	0800c900 	.word	0x0800c900

080017cc <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	2300      	movs	r3, #0
 80017dc:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e8:	d235      	bcs.n	8001856 <u16bit_to_str+0x8a>
		while (nmb > 0) {
 80017ea:	e01a      	b.n	8001822 <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <u16bit_to_str+0x9c>)
 80017f0:	fba3 2301 	umull	r2, r3, r3, r1
 80017f4:	08da      	lsrs	r2, r3, #3
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	1aca      	subs	r2, r1, r3
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	1c59      	adds	r1, r3, #1
 8001806:	6179      	str	r1, [r7, #20]
 8001808:	3230      	adds	r2, #48	; 0x30
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	f107 0118 	add.w	r1, r7, #24
 8001810:	440b      	add	r3, r1
 8001812:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a13      	ldr	r2, [pc, #76]	; (8001868 <u16bit_to_str+0x9c>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	08db      	lsrs	r3, r3, #3
 8001820:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1e1      	bne.n	80017ec <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	e00f      	b.n	800184e <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	1e5a      	subs	r2, r3, #1
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	1c59      	adds	r1, r3, #1
 800183a:	6039      	str	r1, [r7, #0]
 800183c:	f107 0118 	add.w	r1, r7, #24
 8001840:	440a      	add	r2, r1
 8001842:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001846:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	3301      	adds	r3, #1
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	429a      	cmp	r2, r3
 8001854:	dbeb      	blt.n	800182e <u16bit_to_str+0x62>
	}
	*buf = '\0';
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
	return buf;
 800185c:	683b      	ldr	r3, [r7, #0]
}
 800185e:	4618      	mov	r0, r3
 8001860:	371c      	adds	r7, #28
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	cccccccd 	.word	0xcccccccd

0800186c <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	f107 0310 	add.w	r3, r7, #16
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	4a1d      	ldr	r2, [pc, #116]	; (8001900 <terminal_move_cursor+0x94>)
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	4611      	mov	r1, r2
 8001890:	8019      	strh	r1, [r3, #0]
 8001892:	3302      	adds	r3, #2
 8001894:	0c12      	lsrs	r2, r2, #16
 8001896:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	dd0f      	ble.n	80018be <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	3302      	adds	r3, #2
 80018a6:	4619      	mov	r1, r3
 80018a8:	4610      	mov	r0, r2
 80018aa:	f7ff ff8f 	bl	80017cc <u16bit_to_str>
 80018ae:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	4914      	ldr	r1, [pc, #80]	; (8001904 <terminal_move_cursor+0x98>)
 80018b4:	461a      	mov	r2, r3
 80018b6:	460b      	mov	r3, r1
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	8013      	strh	r3, [r2, #0]
 80018bc:	e013      	b.n	80018e6 <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	da18      	bge.n	80018f6 <terminal_move_cursor+0x8a>
		endstr = u16bit_to_str (-(offset), str+2);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	425b      	negs	r3, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	f107 030c 	add.w	r3, r7, #12
 80018ce:	3302      	adds	r3, #2
 80018d0:	4619      	mov	r1, r3
 80018d2:	4610      	mov	r0, r2
 80018d4:	f7ff ff7a 	bl	80017cc <u16bit_to_str>
 80018d8:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	490a      	ldr	r1, [pc, #40]	; (8001908 <terminal_move_cursor+0x9c>)
 80018de:	461a      	mov	r2, r3
 80018e0:	460b      	mov	r3, r1
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80018ec:	f107 020c 	add.w	r2, r7, #12
 80018f0:	4610      	mov	r0, r2
 80018f2:	4798      	blx	r3
 80018f4:	e000      	b.n	80018f8 <terminal_move_cursor+0x8c>
		return;
 80018f6:	bf00      	nop
}
 80018f8:	3720      	adds	r7, #32
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	0800c904 	.word	0x0800c904
 8001904:	0800c908 	.word	0x0800c908
 8001908:	0800c90c 	.word	0x0800c90c

0800190c <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 8001914:	f107 030c 	add.w	r3, r7, #12
 8001918:	4a15      	ldr	r2, [pc, #84]	; (8001970 <terminal_reset_cursor+0x64>)
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	4611      	mov	r1, r2
 800191e:	8019      	strh	r1, [r3, #0]
 8001920:	3302      	adds	r3, #2
 8001922:	0c12      	lsrs	r2, r2, #16
 8001924:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	3302      	adds	r3, #2
 800192c:	4619      	mov	r1, r3
 800192e:	206d      	movs	r0, #109	; 0x6d
 8001930:	f7ff ff4c 	bl	80017cc <u16bit_to_str>
 8001934:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	4a0e      	ldr	r2, [pc, #56]	; (8001974 <terminal_reset_cursor+0x68>)
 800193a:	6810      	ldr	r0, [r2, #0]
 800193c:	6018      	str	r0, [r3, #0]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3303      	adds	r3, #3
 8001942:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 8001944:	69f9      	ldr	r1, [r7, #28]
 8001946:	2006      	movs	r0, #6
 8001948:	f7ff ff40 	bl	80017cc <u16bit_to_str>
 800194c:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	4909      	ldr	r1, [pc, #36]	; (8001978 <terminal_reset_cursor+0x6c>)
 8001952:	461a      	mov	r2, r3
 8001954:	460b      	mov	r3, r1
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001960:	f107 020c 	add.w	r2, r7, #12
 8001964:	4610      	mov	r0, r2
 8001966:	4798      	blx	r3
}
 8001968:	bf00      	nop
 800196a:	3720      	adds	r7, #32
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	0800c904 	.word	0x0800c904
 8001974:	0800c910 	.word	0x0800c910
 8001978:	0800c908 	.word	0x0800c908

0800197c <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800198e:	4816      	ldr	r0, [pc, #88]	; (80019e8 <terminal_print_line+0x6c>)
 8001990:	4798      	blx	r3

	char nch [] = {0,0};
 8001992:	2300      	movs	r3, #0
 8001994:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	e014      	b.n	80019c6 <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	4413      	add	r3, r2
 80019a2:	3354      	adds	r3, #84	; 0x54
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 80019a8:	7c3b      	ldrb	r3, [r7, #16]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <terminal_print_line+0x36>
			nch[0] = ' ';
 80019ae:	2320      	movs	r3, #32
 80019b0:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80019b8:	f107 0210 	add.w	r2, r7, #16
 80019bc:	4610      	mov	r0, r2
 80019be:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3301      	adds	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	dbe4      	blt.n	800199c <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f7ff ff9a 	bl	800190c <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f7ff ff46 	bl	800186c <terminal_move_cursor>
}
 80019e0:	bf00      	nop
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	0800c914 	.word	0x0800c914

080019ec <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3354      	adds	r3, #84	; 0x54
 80019fa:	2265      	movs	r2, #101	; 0x65
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f00a fe42 	bl	800c688 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3304      	adds	r3, #4
 8001a08:	2240      	movs	r2, #64	; 0x40
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f00a fe3b 	bl	800c688 <memset>
	pThis->ring_hist.begin = 0;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	pThis->execute = NULL;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pThis->get_completion = NULL;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
	pThis->prompt_str = prompt_default;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <microrl_init+0x78>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000008 	.word	0x20000008

08001a68 <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	1d18      	adds	r0, r3, #4
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3354      	adds	r3, #84	; 0x54
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f7ff fcfb 	bl	80014cc <hist_restore_line>
 8001ad6:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	db1a      	blt.n	8001b14 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3354      	adds	r3, #84	; 0x54
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		terminal_reset_cursor (pThis);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ff04 	bl	800190c <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ff34 	bl	800197c <terminal_print_line>
	}
}
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	2b5b      	cmp	r3, #91	; 0x5b
 8001b2c:	d104      	bne.n	8001b38 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
		return 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	e07b      	b.n	8001c30 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d14f      	bne.n	8001be0 <escape_process+0xc4>
		if (ch == 'A') {
 8001b40:	78fb      	ldrb	r3, [r7, #3]
 8001b42:	2b41      	cmp	r3, #65	; 0x41
 8001b44:	d105      	bne.n	8001b52 <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 8001b46:	2100      	movs	r1, #0
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ffb7 	bl	8001abc <hist_search>
#endif
			return 1;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e06e      	b.n	8001c30 <escape_process+0x114>
		} else if (ch == 'B') {
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	2b42      	cmp	r3, #66	; 0x42
 8001b56:	d105      	bne.n	8001b64 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 8001b58:	2101      	movs	r1, #1
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ffae 	bl	8001abc <hist_search>
#endif
			return 1;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e065      	b.n	8001c30 <escape_process+0x114>
		} else if (ch == 'C') {
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	2b43      	cmp	r3, #67	; 0x43
 8001b68:	d114      	bne.n	8001b94 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001b76:	429a      	cmp	r2, r3
 8001b78:	da0a      	bge.n	8001b90 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff fe75 	bl	800186c <terminal_move_cursor>
				pThis->cursor++;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e04d      	b.n	8001c30 <escape_process+0x114>
		} else if (ch == 'D') {
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	2b44      	cmp	r3, #68	; 0x44
 8001b98:	d112      	bne.n	8001bc0 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	dd0b      	ble.n	8001bbc <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff fe5f 	bl	800186c <terminal_move_cursor>
				pThis->cursor--;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001bb4:	1e5a      	subs	r2, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e037      	b.n	8001c30 <escape_process+0x114>
		} else if (ch == '7') {
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	2b37      	cmp	r3, #55	; 0x37
 8001bc4:	d104      	bne.n	8001bd0 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2202      	movs	r2, #2
 8001bca:	701a      	strb	r2, [r3, #0]
			return 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e02f      	b.n	8001c30 <escape_process+0x114>
		} else if (ch == '8') {
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	2b38      	cmp	r3, #56	; 0x38
 8001bd4:	d12b      	bne.n	8001c2e <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2203      	movs	r2, #3
 8001bda:	701a      	strb	r2, [r3, #0]
			return 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	e027      	b.n	8001c30 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	2b7e      	cmp	r3, #126	; 0x7e
 8001be4:	d123      	bne.n	8001c2e <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d108      	bne.n	8001c00 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fe8c 	bl	800190c <terminal_reset_cursor>
			pThis->cursor = 0;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e017      	b.n	8001c30 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d112      	bne.n	8001c2e <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	4619      	mov	r1, r3
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff fe27 	bl	800186c <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	2b64      	cmp	r3, #100	; 0x64
 8001c50:	dc60      	bgt.n	8001d14 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c5e:	4619      	mov	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	440b      	add	r3, r1
 8001c64:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	3354      	adds	r3, #84	; 0x54
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor + len,
 8001c70:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c7e:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 8001c80:	461a      	mov	r2, r3
 8001c82:	f00a fce7 	bl	800c654 <memmove>
		for (i = 0; i < len; i++) {
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	e025      	b.n	8001cd8 <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	441a      	add	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	440b      	add	r3, r1
 8001c9c:	7811      	ldrb	r1, [r2, #0]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	460a      	mov	r2, r1
 8001ca4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cba:	2b20      	cmp	r3, #32
 8001cbc:	d109      	bne.n	8001cd2 <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	4413      	add	r3, r2
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	dbd5      	blt.n	8001c8c <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	441a      	add	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdlen += len;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	441a      	add	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4413      	add	r3, r2
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <microrl_insert_text+0xde>
	}
	return false;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	dd31      	ble.n	8001d94 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fd2b 	bl	800178c <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d42:	3b01      	subs	r3, #1
 8001d44:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3354      	adds	r3, #84	; 0x54
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor-1,
 8001d50:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 8001d62:	461a      	mov	r2, r3
 8001d64:	f00a fc76 	bl	800c654 <memmove>
		pThis->cursor--;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d6e:	1e5a      	subs	r2, r3, #1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	4413      	add	r3, r2
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001d8c:	1e5a      	subs	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	}
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f7fe f9d8 	bl	8000160 <strlen>
 8001db0:	4603      	mov	r3, r0
 8001db2:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	e019      	b.n	8001dee <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe f9cb 	bl	8000160 <strlen>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d20a      	bcs.n	8001de8 <common_len+0x4c>
			shortest = arr[i];
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f7fe f9be 	bl	8000160 <strlen>
 8001de4:	4603      	mov	r3, r0
 8001de6:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	3301      	adds	r3, #1
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1de      	bne.n	8001dba <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	e01f      	b.n	8001e42 <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	e012      	b.n	8001e2e <common_len+0x92>
			if (shortest[i] != arr[j][i])
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	781a      	ldrb	r2, [r3, #0]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	440b      	add	r3, r1
 8001e18:	6819      	ldr	r1, [r3, #0]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	440b      	add	r3, r1
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <common_len+0x8c>
				return i;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	e011      	b.n	8001e4c <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1e5      	bne.n	8001e08 <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	dbdb      	blt.n	8001e02 <common_len+0x66>

	return i;
 8001e4a:	697b      	ldr	r3, [r7, #20]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 8001e54:	b5b0      	push	{r4, r5, r7, lr}
 8001e56:	b090      	sub	sp, #64	; 0x40
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 809c 	beq.w	8001fa0 <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e6e:	f107 0208 	add.w	r2, r7, #8
 8001e72:	4619      	mov	r1, r3
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff fc31 	bl	80016dc <split>
 8001e7a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e82:	3b01      	subs	r3, #1
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4413      	add	r3, r2
 8001e88:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d109      	bne.n	8001ea4 <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 8001e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001e9c:	4413      	add	r3, r2
 8001e9e:	4a42      	ldr	r2, [pc, #264]	; (8001fa8 <microrl_get_complite+0x154>)
 8001ea0:	f843 2c38 	str.w	r2, [r3, #-56]
	compl_token = pThis->get_completion (status, tkn_arr);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001eaa:	f107 0208 	add.w	r2, r7, #8
 8001eae:	4611      	mov	r1, r2
 8001eb0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001eb2:	4798      	blx	r3
 8001eb4:	6338      	str	r0, [r7, #48]	; 0x30
	if (compl_token[0] != NULL) {
 8001eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d071      	beq.n	8001fa2 <microrl_get_complite+0x14e>
		int i = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	63bb      	str	r3, [r7, #56]	; 0x38
		int len;

		if (compl_token[1] == NULL) {
 8001ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d107      	bne.n	8001edc <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 8001ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe f945 	bl	8000160 <strlen>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8001eda:	e026      	b.n	8001f2a <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 8001edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ede:	f7ff ff5d 	bl	8001d9c <common_len>
 8001ee2:	6378      	str	r0, [r7, #52]	; 0x34
			terminal_newline (pThis);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff fc61 	bl	80017ac <terminal_newline>
			while (compl_token [i] != NULL) {
 8001eea:	e011      	b.n	8001f10 <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001ef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ef4:	0092      	lsls	r2, r2, #2
 8001ef6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ef8:	440a      	add	r2, r1
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	4610      	mov	r0, r2
 8001efe:	4798      	blx	r3
				pThis->print (" ");
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001f06:	4829      	ldr	r0, [pc, #164]	; (8001fac <microrl_get_complite+0x158>)
 8001f08:	4798      	blx	r3
				i++;
 8001f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	63bb      	str	r3, [r7, #56]	; 0x38
			while (compl_token [i] != NULL) {
 8001f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f16:	4413      	add	r3, r2
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1e6      	bne.n	8001eec <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff fc44 	bl	80017ac <terminal_newline>
			print_prompt (pThis);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff fc22 	bl	800176e <print_prompt>
		}
		
		if (len) {
 8001f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d02b      	beq.n	8001f88 <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f32:	681c      	ldr	r4, [r3, #0]
 8001f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f36:	3b01      	subs	r3, #1
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001f3e:	4413      	add	r3, r2
 8001f40:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe f90b 	bl	8000160 <strlen>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 8001f4e:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8001f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f52:	3b01      	subs	r3, #1
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe f8fd 	bl	8000160 <strlen>
 8001f66:	4603      	mov	r3, r0
 8001f68:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4629      	mov	r1, r5
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff fe62 	bl	8001c38 <microrl_insert_text>
			if (compl_token[1] == NULL) 
 8001f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f76:	3304      	adds	r3, #4
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d104      	bne.n	8001f88 <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	490a      	ldr	r1, [pc, #40]	; (8001fac <microrl_get_complite+0x158>)
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff fe58 	bl	8001c38 <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff fcbf 	bl	800190c <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f94:	461a      	mov	r2, r3
 8001f96:	2100      	movs	r1, #0
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff fcef 	bl	800197c <terminal_print_line>
 8001f9e:	e000      	b.n	8001fa2 <microrl_get_complite+0x14e>
		return;
 8001fa0:	bf00      	nop
	} 
}
 8001fa2:	3740      	adds	r7, #64	; 0x40
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa8:	0800c918 	.word	0x0800c918
 8001fac:	0800c91c 	.word	0x0800c91c

08001fb0 <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08e      	sub	sp, #56	; 0x38
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff fbf7 	bl	80017ac <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	dd0a      	ble.n	8001fde <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	1d18      	adds	r0, r3, #4
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001fd8:	461a      	mov	r2, r3
 8001fda:	f7ff fa08 	bl	80013ee <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001fe4:	f107 020c 	add.w	r2, r7, #12
 8001fe8:	4619      	mov	r1, r3
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff fb76 	bl	80016dc <split>
 8001ff0:	6378      	str	r0, [r7, #52]	; 0x34
	if (status == -1){
 8001ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff8:	d109      	bne.n	800200e <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002000:	4817      	ldr	r0, [pc, #92]	; (8002060 <new_line_handler+0xb0>)
 8002002:	4798      	blx	r3
		pThis->print (ENDL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800200a:	4816      	ldr	r0, [pc, #88]	; (8002064 <new_line_handler+0xb4>)
 800200c:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 800200e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002010:	2b00      	cmp	r3, #0
 8002012:	dd0c      	ble.n	800202e <new_line_handler+0x7e>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800201a:	2b00      	cmp	r3, #0
 800201c:	d007      	beq.n	800202e <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002024:	f107 020c 	add.w	r2, r7, #12
 8002028:	4611      	mov	r1, r2
 800202a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800202c:	4798      	blx	r3
	print_prompt (pThis);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff fb9d 	bl	800176e <print_prompt>
	pThis->cmdlen = 0;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3354      	adds	r3, #84	; 0x54
 8002048:	2265      	movs	r2, #101	; 0x65
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f00a fb1b 	bl	800c688 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8002058:	bf00      	nop
 800205a:	3738      	adds	r7, #56	; 0x38
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	0800c920 	.word	0x0800c920
 8002064:	0800c900 	.word	0x0800c900

08002068 <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	785b      	ldrb	r3, [r3, #1]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00d      	beq.n	8002096 <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	4619      	mov	r1, r3
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff fd4b 	bl	8001b1c <escape_process>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 81e3 	beq.w	8002454 <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 8002094:	e1de      	b.n	8002454 <microrl_insert_char+0x3ec>
		switch (ch) {
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	3b01      	subs	r3, #1
 800209a:	2b7e      	cmp	r3, #126	; 0x7e
 800209c:	f200 81af 	bhi.w	80023fe <microrl_insert_char+0x396>
 80020a0:	a201      	add	r2, pc, #4	; (adr r2, 80020a8 <microrl_insert_char+0x40>)
 80020a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a6:	bf00      	nop
 80020a8:	0800233b 	.word	0x0800233b
 80020ac:	08002373 	.word	0x08002373
 80020b0:	080023eb 	.word	0x080023eb
 80020b4:	080023ff 	.word	0x080023ff
 80020b8:	08002317 	.word	0x08002317
 80020bc:	0800234b 	.word	0x0800234b
 80020c0:	080023ff 	.word	0x080023ff
 80020c4:	080023ab 	.word	0x080023ab
 80020c8:	080022cd 	.word	0x080022cd
 80020cc:	080022a5 	.word	0x080022a5
 80020d0:	080022ff 	.word	0x080022ff
 80020d4:	080023ff 	.word	0x080023ff
 80020d8:	080022a5 	.word	0x080022a5
 80020dc:	080023a1 	.word	0x080023a1
 80020e0:	080023ff 	.word	0x080023ff
 80020e4:	08002397 	.word	0x08002397
 80020e8:	080023ff 	.word	0x080023ff
 80020ec:	080023c7 	.word	0x080023c7
 80020f0:	080023ff 	.word	0x080023ff
 80020f4:	080023ff 	.word	0x080023ff
 80020f8:	080022e3 	.word	0x080022e3
 80020fc:	080023ff 	.word	0x080023ff
 8002100:	080023ff 	.word	0x080023ff
 8002104:	080023ff 	.word	0x080023ff
 8002108:	080023ff 	.word	0x080023ff
 800210c:	080023ff 	.word	0x080023ff
 8002110:	080022d5 	.word	0x080022d5
 8002114:	080023ff 	.word	0x080023ff
 8002118:	080023ff 	.word	0x080023ff
 800211c:	080023ff 	.word	0x080023ff
 8002120:	080023ff 	.word	0x080023ff
 8002124:	080023ff 	.word	0x080023ff
 8002128:	080023ff 	.word	0x080023ff
 800212c:	080023ff 	.word	0x080023ff
 8002130:	080023ff 	.word	0x080023ff
 8002134:	080023ff 	.word	0x080023ff
 8002138:	080023ff 	.word	0x080023ff
 800213c:	080023ff 	.word	0x080023ff
 8002140:	080023ff 	.word	0x080023ff
 8002144:	080023ff 	.word	0x080023ff
 8002148:	080023ff 	.word	0x080023ff
 800214c:	080023ff 	.word	0x080023ff
 8002150:	080023ff 	.word	0x080023ff
 8002154:	080023ff 	.word	0x080023ff
 8002158:	080023ff 	.word	0x080023ff
 800215c:	080023ff 	.word	0x080023ff
 8002160:	080023ff 	.word	0x080023ff
 8002164:	080023ff 	.word	0x080023ff
 8002168:	080023ff 	.word	0x080023ff
 800216c:	080023ff 	.word	0x080023ff
 8002170:	080023ff 	.word	0x080023ff
 8002174:	080023ff 	.word	0x080023ff
 8002178:	080023ff 	.word	0x080023ff
 800217c:	080023ff 	.word	0x080023ff
 8002180:	080023ff 	.word	0x080023ff
 8002184:	080023ff 	.word	0x080023ff
 8002188:	080023ff 	.word	0x080023ff
 800218c:	080023ff 	.word	0x080023ff
 8002190:	080023ff 	.word	0x080023ff
 8002194:	080023ff 	.word	0x080023ff
 8002198:	080023ff 	.word	0x080023ff
 800219c:	080023ff 	.word	0x080023ff
 80021a0:	080023ff 	.word	0x080023ff
 80021a4:	080023ff 	.word	0x080023ff
 80021a8:	080023ff 	.word	0x080023ff
 80021ac:	080023ff 	.word	0x080023ff
 80021b0:	080023ff 	.word	0x080023ff
 80021b4:	080023ff 	.word	0x080023ff
 80021b8:	080023ff 	.word	0x080023ff
 80021bc:	080023ff 	.word	0x080023ff
 80021c0:	080023ff 	.word	0x080023ff
 80021c4:	080023ff 	.word	0x080023ff
 80021c8:	080023ff 	.word	0x080023ff
 80021cc:	080023ff 	.word	0x080023ff
 80021d0:	080023ff 	.word	0x080023ff
 80021d4:	080023ff 	.word	0x080023ff
 80021d8:	080023ff 	.word	0x080023ff
 80021dc:	080023ff 	.word	0x080023ff
 80021e0:	080023ff 	.word	0x080023ff
 80021e4:	080023ff 	.word	0x080023ff
 80021e8:	080023ff 	.word	0x080023ff
 80021ec:	080023ff 	.word	0x080023ff
 80021f0:	080023ff 	.word	0x080023ff
 80021f4:	080023ff 	.word	0x080023ff
 80021f8:	080023ff 	.word	0x080023ff
 80021fc:	080023ff 	.word	0x080023ff
 8002200:	080023ff 	.word	0x080023ff
 8002204:	080023ff 	.word	0x080023ff
 8002208:	080023ff 	.word	0x080023ff
 800220c:	080023ff 	.word	0x080023ff
 8002210:	080023ff 	.word	0x080023ff
 8002214:	080023ff 	.word	0x080023ff
 8002218:	080023ff 	.word	0x080023ff
 800221c:	080023ff 	.word	0x080023ff
 8002220:	080023ff 	.word	0x080023ff
 8002224:	080023ff 	.word	0x080023ff
 8002228:	080023ff 	.word	0x080023ff
 800222c:	080023ff 	.word	0x080023ff
 8002230:	080023ff 	.word	0x080023ff
 8002234:	080023ff 	.word	0x080023ff
 8002238:	080023ff 	.word	0x080023ff
 800223c:	080023ff 	.word	0x080023ff
 8002240:	080023ff 	.word	0x080023ff
 8002244:	080023ff 	.word	0x080023ff
 8002248:	080023ff 	.word	0x080023ff
 800224c:	080023ff 	.word	0x080023ff
 8002250:	080023ff 	.word	0x080023ff
 8002254:	080023ff 	.word	0x080023ff
 8002258:	080023ff 	.word	0x080023ff
 800225c:	080023ff 	.word	0x080023ff
 8002260:	080023ff 	.word	0x080023ff
 8002264:	080023ff 	.word	0x080023ff
 8002268:	080023ff 	.word	0x080023ff
 800226c:	080023ff 	.word	0x080023ff
 8002270:	080023ff 	.word	0x080023ff
 8002274:	080023ff 	.word	0x080023ff
 8002278:	080023ff 	.word	0x080023ff
 800227c:	080023ff 	.word	0x080023ff
 8002280:	080023ff 	.word	0x080023ff
 8002284:	080023ff 	.word	0x080023ff
 8002288:	080023ff 	.word	0x080023ff
 800228c:	080023ff 	.word	0x080023ff
 8002290:	080023ff 	.word	0x080023ff
 8002294:	080023ff 	.word	0x080023ff
 8002298:	080023ff 	.word	0x080023ff
 800229c:	080023ff 	.word	0x080023ff
 80022a0:	080023ab 	.word	0x080023ab
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	789b      	ldrb	r3, [r3, #2]
 80022a8:	461a      	mov	r2, r3
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b0d      	cmp	r3, #13
 80022ae:	d101      	bne.n	80022b4 <microrl_insert_char+0x24c>
 80022b0:	230a      	movs	r3, #10
 80022b2:	e000      	b.n	80022b6 <microrl_insert_char+0x24e>
 80022b4:	230d      	movs	r3, #13
 80022b6:	4293      	cmp	r3, r2
 80022b8:	f000 80c1 	beq.w	800243e <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff fe73 	bl	8001fb0 <new_line_handler>
				break;
 80022ca:	e0c3      	b.n	8002454 <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff fdc1 	bl	8001e54 <microrl_get_complite>
			break;
 80022d2:	e0bf      	b.n	8002454 <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	705a      	strb	r2, [r3, #1]
			break;
 80022da:	e0bb      	b.n	8002454 <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff fd1e 	bl	8001d1e <microrl_backspace>
					while (pThis->cursor > 0) {
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	dcf7      	bgt.n	80022dc <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80022f2:	461a      	mov	r2, r3
 80022f4:	2100      	movs	r1, #0
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff fb40 	bl	800197c <terminal_print_line>
			break;
 80022fc:	e0aa      	b.n	8002454 <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002304:	4855      	ldr	r0, [pc, #340]	; (800245c <microrl_insert_char+0x3f4>)
 8002306:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			break;
 8002314:	e09e      	b.n	8002454 <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	4619      	mov	r1, r3
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff faa0 	bl	800186c <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8002338:	e08c      	b.n	8002454 <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff fae6 	bl	800190c <terminal_reset_cursor>
				pThis->cursor = 0;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8002348:	e084      	b.n	8002454 <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002356:	429a      	cmp	r2, r3
 8002358:	da73      	bge.n	8002442 <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 800235a:	2101      	movs	r1, #1
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff fa85 	bl	800186c <terminal_move_cursor>
				pThis->cursor++;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8002370:	e067      	b.n	8002442 <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d064      	beq.n	8002446 <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 800237c:	f04f 31ff 	mov.w	r1, #4294967295
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff fa73 	bl	800186c <terminal_move_cursor>
				pThis->cursor--;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800238c:	1e5a      	subs	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8002394:	e057      	b.n	8002446 <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 8002396:	2100      	movs	r1, #0
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff fb8f 	bl	8001abc <hist_search>
			break;
 800239e:	e059      	b.n	8002454 <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 80023a0:	2101      	movs	r1, #1
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff fb8a 	bl	8001abc <hist_search>
			break;
 80023a8:	e054      	b.n	8002454 <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff fcb7 	bl	8001d1e <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023bc:	461a      	mov	r2, r3
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff fadc 	bl	800197c <terminal_print_line>
			break;
 80023c4:	e046      	b.n	8002454 <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff f9f0 	bl	80017ac <terminal_newline>
				print_prompt (pThis);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff f9ce 	bl	800176e <print_prompt>
				terminal_reset_cursor (pThis);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff fa9a 	bl	800190c <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023de:	461a      	mov	r2, r3
 80023e0:	2100      	movs	r1, #0
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff faca 	bl	800197c <terminal_print_line>
			break;
 80023e8:	e034      	b.n	8002454 <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d02a      	beq.n	800244a <microrl_insert_char+0x3e2>
				pThis->sigint();
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80023fa:	4798      	blx	r3
			break;
 80023fc:	e025      	b.n	800244a <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b20      	cmp	r3, #32
 8002402:	d104      	bne.n	800240e <microrl_insert_char+0x3a6>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800240a:	2b00      	cmp	r3, #0
 800240c:	d01f      	beq.n	800244e <microrl_insert_char+0x3e6>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b1f      	cmp	r3, #31
 8002412:	dd1c      	ble.n	800244e <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8002414:	463b      	mov	r3, r7
 8002416:	2201      	movs	r2, #1
 8002418:	4619      	mov	r1, r3
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff fc0c 	bl	8001c38 <microrl_insert_text>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d015      	beq.n	8002452 <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800242c:	1e59      	subs	r1, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002434:	461a      	mov	r2, r3
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff faa0 	bl	800197c <terminal_print_line>
			break;
 800243c:	e009      	b.n	8002452 <microrl_insert_char+0x3ea>
					break;
 800243e:	bf00      	nop
 8002440:	e008      	b.n	8002454 <microrl_insert_char+0x3ec>
			break;
 8002442:	bf00      	nop
 8002444:	e006      	b.n	8002454 <microrl_insert_char+0x3ec>
			break;
 8002446:	bf00      	nop
 8002448:	e004      	b.n	8002454 <microrl_insert_char+0x3ec>
			break;
 800244a:	bf00      	nop
 800244c:	e002      	b.n	8002454 <microrl_insert_char+0x3ec>
	}
 800244e:	bf00      	nop
 8002450:	e000      	b.n	8002454 <microrl_insert_char+0x3ec>
			break;
 8002452:	bf00      	nop
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	0800c914 	.word	0x0800c914

08002460 <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 800246a:	4b05      	ldr	r3, [pc, #20]	; (8002480 <microrl_print_char+0x20>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	79fa      	ldrb	r2, [r7, #7]
 8002470:	4611      	mov	r1, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fdf8 	bl	8002068 <microrl_insert_char>
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	2000000c 	.word	0x2000000c

08002484 <print>:

void print (const char * str)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <print+0x70>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	f083 0301 	eor.w	r3, r3, #1
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <print+0x1e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b1b      	cmp	r3, #27
 80024a0:	d024      	beq.n	80024ec <print+0x68>
		return;
	uint16_t len = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 80024a6:	89fb      	ldrh	r3, [r7, #14]
 80024a8:	3301      	adds	r3, #1
 80024aa:	81fb      	strh	r3, [r7, #14]
 80024ac:	89fb      	ldrh	r3, [r7, #14]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f6      	bne.n	80024a6 <print+0x22>
	uint32_t timeout = HAL_GetTick();
 80024b8:	f001 faa8 	bl	8003a0c <HAL_GetTick>
 80024bc:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 80024be:	e006      	b.n	80024ce <print+0x4a>
		if (HAL_GetTick() - timeout >= 5)
 80024c0:	f001 faa4 	bl	8003a0c <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d807      	bhi.n	80024de <print+0x5a>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 80024ce:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <print+0x74>)
 80024d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80024d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f1      	bne.n	80024c0 <print+0x3c>
 80024dc:	e000      	b.n	80024e0 <print+0x5c>
			break;
 80024de:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 80024e0:	89fb      	ldrh	r3, [r7, #14]
 80024e2:	4619      	mov	r1, r3
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f009 fca5 	bl	800be34 <CDC_Transmit_FS>
 80024ea:	e000      	b.n	80024ee <print+0x6a>
		return;
 80024ec:	bf00      	nop
}
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000010 	.word	0x20000010
 80024f8:	20000790 	.word	0x20000790

080024fc <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	e010      	b.n	800252e <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 800250c:	490c      	ldr	r1, [pc, #48]	; (8002540 <find_color_by_name+0x44>)
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	440b      	add	r3, r1
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	79fa      	ldrb	r2, [r7, #7]
 8002520:	429a      	cmp	r2, r3
 8002522:	d101      	bne.n	8002528 <find_color_by_name+0x2c>
		{
			return i;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	e006      	b.n	8002536 <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3301      	adds	r3, #1
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2b10      	cmp	r3, #16
 8002532:	d9eb      	bls.n	800250c <find_color_by_name+0x10>
		}
	}
	return 0;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	0800cc6c 	.word	0x0800cc6c

08002544 <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff ffd2 	bl	80024fc <find_color_by_name>
 8002558:	4602      	mov	r2, r0
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4413      	add	r3, r2
 8002564:	4a08      	ldr	r2, [pc, #32]	; (8002588 <print_color+0x44>)
 8002566:	4413      	add	r3, r2
 8002568:	3301      	adds	r3, #1
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff ff8a 	bl	8002484 <print>
	print(str);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ff87 	bl	8002484 <print>
	print(COLOR_NC);
 8002576:	4805      	ldr	r0, [pc, #20]	; (800258c <print_color+0x48>)
 8002578:	f7ff ff84 	bl	8002484 <print>
	return 0;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	0800cc6c 	.word	0x0800cc6c
 800258c:	0800c938 	.word	0x0800c938

08002590 <str_length>:

int str_length(const char * str)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]
	while (str[i])
 800259c:	e002      	b.n	80025a4 <str_length+0x14>
		i++;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3301      	adds	r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
	while (str[i])
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	4413      	add	r3, r2
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f6      	bne.n	800259e <str_length+0xe>
	return i;
 80025b0:	68fb      	ldr	r3, [r7, #12]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <print_help>:


int print_help(int argc, const char * const * argv)
{
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
	print(_VER);
 80025c6:	4862      	ldr	r0, [pc, #392]	; (8002750 <print_help+0x194>)
 80025c8:	f7ff ff5c 	bl	8002484 <print>
	print(ENDL);
 80025cc:	4861      	ldr	r0, [pc, #388]	; (8002754 <print_help+0x198>)
 80025ce:	f7ff ff59 	bl	8002484 <print>
	print ("Use ");
 80025d2:	4861      	ldr	r0, [pc, #388]	; (8002758 <print_help+0x19c>)
 80025d4:	f7ff ff56 	bl	8002484 <print>
	print_color("TAB", C_GREEN);
 80025d8:	2105      	movs	r1, #5
 80025da:	4860      	ldr	r0, [pc, #384]	; (800275c <print_help+0x1a0>)
 80025dc:	f7ff ffb2 	bl	8002544 <print_color>
	print(" key for completion");
 80025e0:	485f      	ldr	r0, [pc, #380]	; (8002760 <print_help+0x1a4>)
 80025e2:	f7ff ff4f 	bl	8002484 <print>
	print (ENDL);
 80025e6:	485b      	ldr	r0, [pc, #364]	; (8002754 <print_help+0x198>)
 80025e8:	f7ff ff4c 	bl	8002484 <print>
	print ("Available commands:");
 80025ec:	485d      	ldr	r0, [pc, #372]	; (8002764 <print_help+0x1a8>)
 80025ee:	f7ff ff49 	bl	8002484 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	e09e      	b.n	8002736 <print_help+0x17a>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 80025f8:	4a5b      	ldr	r2, [pc, #364]	; (8002768 <print_help+0x1ac>)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	212c      	movs	r1, #44	; 0x2c
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260a:	d11f      	bne.n	800264c <print_help+0x90>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	3b01      	subs	r3, #1
 8002610:	4a55      	ldr	r2, [pc, #340]	; (8002768 <print_help+0x1ac>)
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d004      	beq.n	800262c <print_help+0x70>
				print_color(" aka ", C_L_PURPLE);
 8002622:	210c      	movs	r1, #12
 8002624:	4851      	ldr	r0, [pc, #324]	; (800276c <print_help+0x1b0>)
 8002626:	f7ff ff8d 	bl	8002544 <print_color>
 800262a:	e003      	b.n	8002634 <print_help+0x78>
			else
				print_color("/", C_L_PURPLE);
 800262c:	210c      	movs	r1, #12
 800262e:	4850      	ldr	r0, [pc, #320]	; (8002770 <print_help+0x1b4>)
 8002630:	f7ff ff88 	bl	8002544 <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	222c      	movs	r2, #44	; 0x2c
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	4a4a      	ldr	r2, [pc, #296]	; (8002768 <print_help+0x1ac>)
 800263e:	4413      	add	r3, r2
 8002640:	3304      	adds	r3, #4
 8002642:	210b      	movs	r1, #11
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ff7d 	bl	8002544 <print_color>
 800264a:	e071      	b.n	8002730 <print_help+0x174>
		}
		else
		{
			print(ENDL);
 800264c:	4841      	ldr	r0, [pc, #260]	; (8002754 <print_help+0x198>)
 800264e:	f7ff ff19 	bl	8002484 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8002652:	f06f 0303 	mvn.w	r3, #3
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	e005      	b.n	8002666 <print_help+0xaa>
				print(" ");
 800265a:	4846      	ldr	r0, [pc, #280]	; (8002774 <print_help+0x1b8>)
 800265c:	f7ff ff12 	bl	8002484 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	3301      	adds	r3, #1
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	4a40      	ldr	r2, [pc, #256]	; (8002768 <print_help+0x1ac>)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	429a      	cmp	r2, r3
 8002678:	dbef      	blt.n	800265a <print_help+0x9e>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	222c      	movs	r2, #44	; 0x2c
 800267e:	fb02 f303 	mul.w	r3, r2, r3
 8002682:	4a39      	ldr	r2, [pc, #228]	; (8002768 <print_help+0x1ac>)
 8002684:	4413      	add	r3, r2
 8002686:	1d1a      	adds	r2, r3, #4
 8002688:	4937      	ldr	r1, [pc, #220]	; (8002768 <print_help+0x1ac>)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	202c      	movs	r0, #44	; 0x2c
 800268e:	fb00 f303 	mul.w	r3, r0, r3
 8002692:	440b      	add	r3, r1
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4938      	ldr	r1, [pc, #224]	; (8002778 <print_help+0x1bc>)
 8002698:	5ccb      	ldrb	r3, [r1, r3]
 800269a:	4619      	mov	r1, r3
 800269c:	4610      	mov	r0, r2
 800269e:	f7ff ff51 	bl	8002544 <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	e005      	b.n	80026b4 <print_help+0xf8>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 80026a8:	4832      	ldr	r0, [pc, #200]	; (8002774 <print_help+0x1b8>)
 80026aa:	f7ff feeb 	bl	8002484 <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3301      	adds	r3, #1
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	4a2c      	ldr	r2, [pc, #176]	; (8002768 <print_help+0x1ac>)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	212c      	movs	r1, #44	; 0x2c
 80026ba:	fb01 f303 	mul.w	r3, r1, r3
 80026be:	4413      	add	r3, r2
 80026c0:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80026c2:	f1c3 040b 	rsb	r4, r3, #11
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	222c      	movs	r2, #44	; 0x2c
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	4a26      	ldr	r2, [pc, #152]	; (8002768 <print_help+0x1ac>)
 80026d0:	4413      	add	r3, r2
 80026d2:	3304      	adds	r3, #4
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff5b 	bl	8002590 <str_length>
 80026da:	4603      	mov	r3, r0
 80026dc:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	dbe1      	blt.n	80026a8 <print_help+0xec>
			switch (microrl_actions[i].level){
 80026e4:	4a20      	ldr	r2, [pc, #128]	; (8002768 <print_help+0x1ac>)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	212c      	movs	r1, #44	; 0x2c
 80026ea:	fb01 f303 	mul.w	r3, r1, r3
 80026ee:	4413      	add	r3, r2
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <print_help+0x140>
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d004      	beq.n	8002704 <print_help+0x148>
 80026fa:	e007      	b.n	800270c <print_help+0x150>
			case 0:
				print ("-");
 80026fc:	481f      	ldr	r0, [pc, #124]	; (800277c <print_help+0x1c0>)
 80026fe:	f7ff fec1 	bl	8002484 <print>
				break;
 8002702:	e007      	b.n	8002714 <print_help+0x158>
			case 1:
				print ("^");
 8002704:	481e      	ldr	r0, [pc, #120]	; (8002780 <print_help+0x1c4>)
 8002706:	f7ff febd 	bl	8002484 <print>
				break;
 800270a:	e003      	b.n	8002714 <print_help+0x158>
			default:
				print ("#");
 800270c:	481d      	ldr	r0, [pc, #116]	; (8002784 <print_help+0x1c8>)
 800270e:	f7ff feb9 	bl	8002484 <print>
				break;
 8002712:	bf00      	nop
			}
			print (" ");
 8002714:	4817      	ldr	r0, [pc, #92]	; (8002774 <print_help+0x1b8>)
 8002716:	f7ff feb5 	bl	8002484 <print>
			print (microrl_actions[i].help_msg);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	222c      	movs	r2, #44	; 0x2c
 800271e:	fb02 f303 	mul.w	r3, r2, r3
 8002722:	3308      	adds	r3, #8
 8002724:	4a10      	ldr	r2, [pc, #64]	; (8002768 <print_help+0x1ac>)
 8002726:	4413      	add	r3, r2
 8002728:	3305      	adds	r3, #5
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff feaa 	bl	8002484 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3301      	adds	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b0a      	cmp	r3, #10
 800273a:	f67f af5d 	bls.w	80025f8 <print_help+0x3c>
		}
	}
	print(ENDL);
 800273e:	4805      	ldr	r0, [pc, #20]	; (8002754 <print_help+0x198>)
 8002740:	f7ff fea0 	bl	8002484 <print>
	return 0;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	bd90      	pop	{r4, r7, pc}
 800274e:	bf00      	nop
 8002750:	0800c940 	.word	0x0800c940
 8002754:	0800c958 	.word	0x0800c958
 8002758:	0800c95c 	.word	0x0800c95c
 800275c:	0800c964 	.word	0x0800c964
 8002760:	0800c968 	.word	0x0800c968
 8002764:	0800c97c 	.word	0x0800c97c
 8002768:	0800ca88 	.word	0x0800ca88
 800276c:	0800c990 	.word	0x0800c990
 8002770:	0800c998 	.word	0x0800c998
 8002774:	0800c99c 	.word	0x0800c99c
 8002778:	0800cd28 	.word	0x0800cd28
 800277c:	0800c9a0 	.word	0x0800c9a0
 8002780:	0800c9a4 	.word	0x0800c9a4
 8002784:	0800c9a8 	.word	0x0800c9a8

08002788 <execute>:



int execute (int argc, const char * const * argv)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
	int (*func)   (int argc, const char * const * argv ) = NULL;
 8002792:	2300      	movs	r3, #0
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 800279e:	2300      	movs	r3, #0
 80027a0:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	e056      	b.n	8002856 <execute+0xce>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	e045      	b.n	800283a <execute+0xb2>
		{
			tokens_found = false;
 80027ae:	2300      	movs	r3, #0
 80027b0:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 80027b2:	4a55      	ldr	r2, [pc, #340]	; (8002908 <execute+0x180>)
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	212c      	movs	r1, #44	; 0x2c
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d001      	beq.n	80027ce <execute+0x46>
				synonym_level = current_level; // save the synonym level
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d003      	beq.n	80027de <execute+0x56>
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	429a      	cmp	r2, r3
 80027dc:	db31      	blt.n	8002842 <execute+0xba>
				break;
			if (current_level == i)
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d101      	bne.n	80027ea <execute+0x62>
				last_main_synonym = n;
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	4413      	add	r3, r2
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4942      	ldr	r1, [pc, #264]	; (8002908 <execute+0x180>)
 80027fe:	440b      	add	r3, r1
 8002800:	3304      	adds	r3, #4
 8002802:	4619      	mov	r1, r3
 8002804:	4610      	mov	r0, r2
 8002806:	f7fd fca1 	bl	800014c <strcmp>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d111      	bne.n	8002834 <execute+0xac>
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	429a      	cmp	r2, r3
 8002816:	d10d      	bne.n	8002834 <execute+0xac>
					(i == synonym_level))
			{
				tokens_found = true;
 8002818:	2301      	movs	r3, #1
 800281a:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	623a      	str	r2, [r7, #32]
 8002822:	4a39      	ldr	r2, [pc, #228]	; (8002908 <execute+0x180>)
 8002824:	212c      	movs	r1, #44	; 0x2c
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	3328      	adds	r3, #40	; 0x28
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8002832:	e007      	b.n	8002844 <execute+0xbc>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	3301      	adds	r3, #1
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	2b0a      	cmp	r3, #10
 800283e:	d9b6      	bls.n	80027ae <execute+0x26>
 8002840:	e000      	b.n	8002844 <execute+0xbc>
				break;
 8002842:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 8002844:	7efb      	ldrb	r3, [r7, #27]
 8002846:	f083 0301 	eor.w	r3, r3, #1
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d107      	bne.n	8002860 <execute+0xd8>
	for (int i = 0; i < argc; i++)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	3301      	adds	r3, #1
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	429a      	cmp	r2, r3
 800285c:	dba4      	blt.n	80027a8 <execute+0x20>
 800285e:	e000      	b.n	8002862 <execute+0xda>
			break;
 8002860:	bf00      	nop
	}

	if (func != NULL)
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <execute+0xec>
	{
		return func(argc, argv); // function found
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	6839      	ldr	r1, [r7, #0]
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	4798      	blx	r3
 8002870:	4603      	mov	r3, r0
 8002872:	e045      	b.n	8002900 <execute+0x178>
	} else if (tokens_found)
 8002874:	7efb      	ldrb	r3, [r7, #27]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d021      	beq.n	80028be <execute+0x136>
	{
		print_color ("command: '", C_L_RED);
 800287a:	210a      	movs	r1, #10
 800287c:	4823      	ldr	r0, [pc, #140]	; (800290c <execute+0x184>)
 800287e:	f7ff fe61 	bl	8002544 <print_color>
		print_color ((char*)argv[0], C_L_RED);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	210a      	movs	r1, #10
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fe5b 	bl	8002544 <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 800288e:	210a      	movs	r1, #10
 8002890:	481f      	ldr	r0, [pc, #124]	; (8002910 <execute+0x188>)
 8002892:	f7ff fe57 	bl	8002544 <print_color>
		print(ENDL);
 8002896:	481f      	ldr	r0, [pc, #124]	; (8002914 <execute+0x18c>)
 8002898:	f7ff fdf4 	bl	8002484 <print>
		print_color ("use '", C_NC);
 800289c:	2100      	movs	r1, #0
 800289e:	481e      	ldr	r0, [pc, #120]	; (8002918 <execute+0x190>)
 80028a0:	f7ff fe50 	bl	8002544 <print_color>
		print_color ("?", C_GREEN);
 80028a4:	2105      	movs	r1, #5
 80028a6:	481d      	ldr	r0, [pc, #116]	; (800291c <execute+0x194>)
 80028a8:	f7ff fe4c 	bl	8002544 <print_color>
		print_color ("' for help", C_NC);
 80028ac:	2100      	movs	r1, #0
 80028ae:	481c      	ldr	r0, [pc, #112]	; (8002920 <execute+0x198>)
 80028b0:	f7ff fe48 	bl	8002544 <print_color>
		print (ENDL);
 80028b4:	4817      	ldr	r0, [pc, #92]	; (8002914 <execute+0x18c>)
 80028b6:	f7ff fde5 	bl	8002484 <print>
		return 1;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e020      	b.n	8002900 <execute+0x178>
	}
	else
	{
		print_color ("command: '", C_RED);
 80028be:	2109      	movs	r1, #9
 80028c0:	4812      	ldr	r0, [pc, #72]	; (800290c <execute+0x184>)
 80028c2:	f7ff fe3f 	bl	8002544 <print_color>
		print_color ((char*)argv[0], C_RED);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2109      	movs	r1, #9
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fe39 	bl	8002544 <print_color>
		print_color ("' not found", C_RED);
 80028d2:	2109      	movs	r1, #9
 80028d4:	4813      	ldr	r0, [pc, #76]	; (8002924 <execute+0x19c>)
 80028d6:	f7ff fe35 	bl	8002544 <print_color>
		print(ENDL);
 80028da:	480e      	ldr	r0, [pc, #56]	; (8002914 <execute+0x18c>)
 80028dc:	f7ff fdd2 	bl	8002484 <print>
		print_color ("use '", C_NC);
 80028e0:	2100      	movs	r1, #0
 80028e2:	480d      	ldr	r0, [pc, #52]	; (8002918 <execute+0x190>)
 80028e4:	f7ff fe2e 	bl	8002544 <print_color>
		print_color ("?", C_GREEN);
 80028e8:	2105      	movs	r1, #5
 80028ea:	480c      	ldr	r0, [pc, #48]	; (800291c <execute+0x194>)
 80028ec:	f7ff fe2a 	bl	8002544 <print_color>
		print_color ("' for help", C_NC);
 80028f0:	2100      	movs	r1, #0
 80028f2:	480b      	ldr	r0, [pc, #44]	; (8002920 <execute+0x198>)
 80028f4:	f7ff fe26 	bl	8002544 <print_color>
		print (ENDL);
 80028f8:	4806      	ldr	r0, [pc, #24]	; (8002914 <execute+0x18c>)
 80028fa:	f7ff fdc3 	bl	8002484 <print>
		return 1;
 80028fe:	2301      	movs	r3, #1

	}
}
 8002900:	4618      	mov	r0, r3
 8002902:	3728      	adds	r7, #40	; 0x28
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	0800ca88 	.word	0x0800ca88
 800290c:	0800c9ac 	.word	0x0800c9ac
 8002910:	0800c9b8 	.word	0x0800c9b8
 8002914:	0800c958 	.word	0x0800c958
 8002918:	0800c9d8 	.word	0x0800c9d8
 800291c:	0800c9e0 	.word	0x0800c9e0
 8002920:	0800c9e4 	.word	0x0800c9e4
 8002924:	0800c9f0 	.word	0x0800c9f0

08002928 <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08c      	sub	sp, #48	; 0x30
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
	int j = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 8002936:	4b63      	ldr	r3, [pc, #396]	; (8002ac4 <complet+0x19c>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d11f      	bne.n	8002982 <complet+0x5a>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 8002942:	2300      	movs	r3, #0
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
 8002946:	e018      	b.n	800297a <complet+0x52>
			if (microrl_actions[i].level == 0)
 8002948:	4a5f      	ldr	r2, [pc, #380]	; (8002ac8 <complet+0x1a0>)
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	212c      	movs	r1, #44	; 0x2c
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	4413      	add	r3, r2
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10c      	bne.n	8002974 <complet+0x4c>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f202 	mul.w	r2, r1, r2
 8002968:	4957      	ldr	r1, [pc, #348]	; (8002ac8 <complet+0x1a0>)
 800296a:	440a      	add	r2, r1
 800296c:	3204      	adds	r2, #4
 800296e:	4955      	ldr	r1, [pc, #340]	; (8002ac4 <complet+0x19c>)
 8002970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 8002974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002976:	3301      	adds	r3, #1
 8002978:	62bb      	str	r3, [r7, #40]	; 0x28
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	2b0a      	cmp	r3, #10
 800297e:	d9e3      	bls.n	8002948 <complet+0x20>
 8002980:	e095      	b.n	8002aae <complet+0x186>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002988:	3b01      	subs	r3, #1
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	4413      	add	r3, r2
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 800299c:	2300      	movs	r3, #0
 800299e:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	e07c      	b.n	8002aa0 <complet+0x178>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	e06b      	b.n	8002a84 <complet+0x15c>
			{
				tokens_found = false;
 80029ac:	2300      	movs	r3, #0
 80029ae:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 80029b0:	4a45      	ldr	r2, [pc, #276]	; (8002ac8 <complet+0x1a0>)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c6:	d001      	beq.n	80029cc <complet+0xa4>
					synonym_level = current_level; // save the synonym level
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d2:	d003      	beq.n	80029dc <complet+0xb4>
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	429a      	cmp	r2, r3
 80029da:	db57      	blt.n	8002a8c <complet+0x164>
					break;
				if (current_level == i)
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d101      	bne.n	80029e8 <complet+0xc0>
					last_main_synonym = n;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d128      	bne.n	8002a44 <complet+0x11c>
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	222c      	movs	r2, #44	; 0x2c
 80029f6:	fb02 f303 	mul.w	r3, r2, r3
 80029fa:	4a33      	ldr	r2, [pc, #204]	; (8002ac8 <complet+0x1a0>)
 80029fc:	4413      	add	r3, r2
 80029fe:	3304      	adds	r3, #4
 8002a00:	6939      	ldr	r1, [r7, #16]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f009 fe48 	bl	800c698 <strstr>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	492d      	ldr	r1, [pc, #180]	; (8002ac8 <complet+0x1a0>)
 8002a14:	440b      	add	r3, r1
 8002a16:	3304      	adds	r3, #4
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d113      	bne.n	8002a44 <complet+0x11c>
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d10f      	bne.n	8002a44 <complet+0x11c>
										(i == synonym_level))
				{
					tokens_found = true;
 8002a24:	2301      	movs	r3, #1
 8002a26:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 8002a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f202 	mul.w	r2, r1, r2
 8002a36:	4924      	ldr	r1, [pc, #144]	; (8002ac8 <complet+0x1a0>)
 8002a38:	440a      	add	r2, r1
 8002a3a:	3204      	adds	r2, #4
 8002a3c:	4921      	ldr	r1, [pc, #132]	; (8002ac4 <complet+0x19c>)
 8002a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002a42:	e01c      	b.n	8002a7e <complet+0x156>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	212c      	movs	r1, #44	; 0x2c
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	491c      	ldr	r1, [pc, #112]	; (8002ac8 <complet+0x1a0>)
 8002a58:	440b      	add	r3, r1
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	f7fd fb74 	bl	800014c <strcmp>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <complet+0x156>
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d105      	bne.n	8002a7e <complet+0x156>
				{
					last_main_synonym++;
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	3301      	adds	r3, #1
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	77fb      	strb	r3, [r7, #31]
					break;
 8002a7c:	e007      	b.n	8002a8e <complet+0x166>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	3301      	adds	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2b0a      	cmp	r3, #10
 8002a88:	d990      	bls.n	80029ac <complet+0x84>
 8002a8a:	e000      	b.n	8002a8e <complet+0x166>
					break;
 8002a8c:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 8002a8e:	7ffb      	ldrb	r3, [r7, #31]
 8002a90:	f083 0301 	eor.w	r3, r3, #1
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d108      	bne.n	8002aac <complet+0x184>
		for (int i = 0; i < argc; i++)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	f6ff af7e 	blt.w	80029a6 <complet+0x7e>
 8002aaa:	e000      	b.n	8002aae <complet+0x186>
				break;
 8002aac:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 8002aae:	4a05      	ldr	r2, [pc, #20]	; (8002ac4 <complet+0x19c>)
 8002ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 8002ab8:	4b02      	ldr	r3, [pc, #8]	; (8002ac4 <complet+0x19c>)
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3730      	adds	r7, #48	; 0x30
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000688 	.word	0x20000688
 8002ac8:	0800ca88 	.word	0x0800ca88

08002acc <init_microrl>:
#endif

void init_microrl(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <init_microrl+0x38>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	490c      	ldr	r1, [pc, #48]	; (8002b08 <init_microrl+0x3c>)
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe ff88 	bl	80019ec <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 8002adc:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <init_microrl+0x38>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	490a      	ldr	r1, [pc, #40]	; (8002b0c <init_microrl+0x40>)
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe ffce 	bl	8001a84 <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <init_microrl+0x38>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4908      	ldr	r1, [pc, #32]	; (8002b10 <init_microrl+0x44>)
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe ffba 	bl	8001a68 <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <init_microrl+0x38>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4906      	ldr	r1, [pc, #24]	; (8002b14 <init_microrl+0x48>)
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe ffd0 	bl	8001aa0 <microrl_set_sigint_callback>
}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	2000000c 	.word	0x2000000c
 8002b08:	08002485 	.word	0x08002485
 8002b0c:	08002789 	.word	0x08002789
 8002b10:	08002929 	.word	0x08002929
 8002b14:	08000bf1 	.word	0x08000bf1

08002b18 <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 8002b22:	4805      	ldr	r0, [pc, #20]	; (8002b38 <clear_screen+0x20>)
 8002b24:	f7ff fcae 	bl	8002484 <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 8002b28:	4804      	ldr	r0, [pc, #16]	; (8002b3c <clear_screen+0x24>)
 8002b2a:	f7ff fcab 	bl	8002484 <print>
	return 0;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	0800c9fc 	.word	0x0800c9fc
 8002b3c:	0800ca04 	.word	0x0800ca04

08002b40 <color_toggle>:

int color_toggle 	(int argc, const char * const * argv)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <color_toggle+0x30>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	f083 0301 	eor.w	r3, r3, #1
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf14      	ite	ne
 8002b58:	2301      	movne	r3, #1
 8002b5a:	2300      	moveq	r3, #0
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <color_toggle+0x30>)
 8002b60:	701a      	strb	r2, [r3, #0]
	return 0;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	20000010 	.word	0x20000010

08002b74 <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
	color_out = 1;
 8002b7e:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <color_on+0x28>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 8002b84:	2105      	movs	r1, #5
 8002b86:	4806      	ldr	r0, [pc, #24]	; (8002ba0 <color_on+0x2c>)
 8002b88:	f7ff fcdc 	bl	8002544 <print_color>
	print(ENDL);
 8002b8c:	4805      	ldr	r0, [pc, #20]	; (8002ba4 <color_on+0x30>)
 8002b8e:	f7ff fc79 	bl	8002484 <print>
	return 0;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000010 	.word	0x20000010
 8002ba0:	0800ca08 	.word	0x0800ca08
 8002ba4:	0800c958 	.word	0x0800c958

08002ba8 <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
	color_out = 0;
 8002bb2:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <color_off+0x28>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 8002bb8:	4806      	ldr	r0, [pc, #24]	; (8002bd4 <color_off+0x2c>)
 8002bba:	f7ff fc63 	bl	8002484 <print>
	print(ENDL);
 8002bbe:	4806      	ldr	r0, [pc, #24]	; (8002bd8 <color_off+0x30>)
 8002bc0:	f7ff fc60 	bl	8002484 <print>
	return 0;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000010 	.word	0x20000010
 8002bd4:	0800ca1c 	.word	0x0800ca1c
 8002bd8:	0800c958 	.word	0x0800c958

08002bdc <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
	if (color_out)
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <color_show+0x34>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d004      	beq.n	8002bf8 <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 8002bee:	2105      	movs	r1, #5
 8002bf0:	4808      	ldr	r0, [pc, #32]	; (8002c14 <color_show+0x38>)
 8002bf2:	f7ff fca7 	bl	8002544 <print_color>
 8002bf6:	e002      	b.n	8002bfe <color_show+0x22>
	else
		print ("Color output is OFF");
 8002bf8:	4807      	ldr	r0, [pc, #28]	; (8002c18 <color_show+0x3c>)
 8002bfa:	f7ff fc43 	bl	8002484 <print>
	print(ENDL);
 8002bfe:	4807      	ldr	r0, [pc, #28]	; (8002c1c <color_show+0x40>)
 8002c00:	f7ff fc40 	bl	8002484 <print>
	return 0;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000010 	.word	0x20000010
 8002c14:	0800ca08 	.word	0x0800ca08
 8002c18:	0800ca1c 	.word	0x0800ca1c
 8002c1c:	0800c958 	.word	0x0800c958

08002c20 <nrf24l01p_get_clear_irq_flags>:
{
  nrf24l01p_write_reg(NRF24L01P_CONFIG, BIT_COND(nrf24l01p_read_reg(NRF24L01P_CONFIG), int_source, !irq_state));
}

uint8_t nrf24l01p_get_clear_irq_flags(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  enum { IRQ_FLAGS = BIT(NRF24L01P_IRQ_MAX_RT) | BIT(NRF24L01P_IRQ_TX_DS) | BIT(NRF24L01P_IRQ_RX_DR) };
  return nrf24l01p_write_reg(NRF24L01P_STATUS, IRQ_FLAGS) & IRQ_FLAGS;
 8002c24:	2170      	movs	r1, #112	; 0x70
 8002c26:	2007      	movs	r0, #7
 8002c28:	f000 fa3b 	bl	80030a2 <nrf24l01p_write_reg>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c32:	b2db      	uxtb	r3, r3
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <nrf24l01p_clear_irq_flag>:

void nrf24l01p_clear_irq_flag(nrf24l01p_irq_source_t int_source)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_STATUS, BIT(int_source));
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	2201      	movs	r2, #1
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	2007      	movs	r0, #7
 8002c50:	f000 fa27 	bl	80030a2 <nrf24l01p_write_reg>
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <nrf24l01p_get_irq_flags>:
{
  return !(nrf24l01p_read_reg(NRF24L01P_CONFIG) & BIT(int_type));
}

uint8_t nrf24l01p_get_irq_flags(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  return nrf24l01p_nop() & (BIT(6)|BIT(5)|BIT(4));
 8002c60:	f000 f9df 	bl	8003022 <nrf24l01p_nop>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c6a:	b2db      	uxtb	r3, r3
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <nrf24l01p_set_crc_mode>:

void nrf24l01p_set_crc_mode(nrf24l01p_crc_mode_t crc_mode)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_CONFIG, (nrf24l01p_read_reg(NRF24L01P_CONFIG) & ~(BIT(3)|BIT(2))) | ((uint8_t)crc_mode<<2u));
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f000 f9f8 	bl	8003070 <nrf24l01p_read_reg>
 8002c80:	4603      	mov	r3, r0
 8002c82:	b25b      	sxtb	r3, r3
 8002c84:	f023 030c 	bic.w	r3, r3, #12
 8002c88:	b25a      	sxtb	r2, r3
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	b25b      	sxtb	r3, r3
 8002c90:	4313      	orrs	r3, r2
 8002c92:	b25b      	sxtb	r3, r3
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	4619      	mov	r1, r3
 8002c98:	2000      	movs	r0, #0
 8002c9a:	f000 fa02 	bl	80030a2 <nrf24l01p_write_reg>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <nrf24l01p_open_pipe>:

void nrf24l01p_open_pipe(nrf24l01p_address_t pipe_num, bool auto_ack)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	460a      	mov	r2, r1
 8002cb0:	71fb      	strb	r3, [r7, #7]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	71bb      	strb	r3, [r7, #6]
  switch(pipe_num)
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	2b05      	cmp	r3, #5
 8002cba:	dc02      	bgt.n	8002cc2 <nrf24l01p_open_pipe+0x1c>
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	da03      	bge.n	8002cc8 <nrf24l01p_open_pipe+0x22>
      else
        nrf24l01p_write_reg(NRF24L01P_EN_AA, 0);
      break;
      
    default:
      break;
 8002cc0:	e044      	b.n	8002d4c <nrf24l01p_open_pipe+0xa6>
  switch(pipe_num)
 8002cc2:	2bff      	cmp	r3, #255	; 0xff
 8002cc4:	d031      	beq.n	8002d2a <nrf24l01p_open_pipe+0x84>
      break;
 8002cc6:	e041      	b.n	8002d4c <nrf24l01p_open_pipe+0xa6>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, nrf24l01p_read_reg(NRF24L01P_EN_RXADDR) | BIT(pipe_num));
 8002cc8:	2002      	movs	r0, #2
 8002cca:	f000 f9d1 	bl	8003070 <nrf24l01p_read_reg>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	b25a      	sxtb	r2, r3
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cda:	b25b      	sxtb	r3, r3
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	b25b      	sxtb	r3, r3
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	2002      	movs	r0, #2
 8002ce6:	f000 f9dc 	bl	80030a2 <nrf24l01p_write_reg>
      nrf24l01p_write_reg(NRF24L01P_EN_AA, BIT_COND(nrf24l01p_read_reg(NRF24L01P_EN_AA), pipe_num, auto_ack));
 8002cea:	2001      	movs	r0, #1
 8002cec:	f000 f9c0 	bl	8003070 <nrf24l01p_read_reg>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	b25a      	sxtb	r2, r3
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfc:	b25b      	sxtb	r3, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	b25b      	sxtb	r3, r3
 8002d02:	4013      	ands	r3, r2
 8002d04:	b25a      	sxtb	r2, r3
 8002d06:	79bb      	ldrb	r3, [r7, #6]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <nrf24l01p_open_pipe+0x72>
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	2101      	movs	r1, #1
 8002d10:	fa01 f303 	lsl.w	r3, r1, r3
 8002d14:	b25b      	sxtb	r3, r3
 8002d16:	e000      	b.n	8002d1a <nrf24l01p_open_pipe+0x74>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	b25b      	sxtb	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	4619      	mov	r1, r3
 8002d22:	2001      	movs	r0, #1
 8002d24:	f000 f9bd 	bl	80030a2 <nrf24l01p_write_reg>
      break;
 8002d28:	e010      	b.n	8002d4c <nrf24l01p_open_pipe+0xa6>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, (uint8_t)~(BIT(7)|BIT(6)));
 8002d2a:	213f      	movs	r1, #63	; 0x3f
 8002d2c:	2002      	movs	r0, #2
 8002d2e:	f000 f9b8 	bl	80030a2 <nrf24l01p_write_reg>
      if(auto_ack)
 8002d32:	79bb      	ldrb	r3, [r7, #6]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d004      	beq.n	8002d42 <nrf24l01p_open_pipe+0x9c>
        nrf24l01p_write_reg(NRF24L01P_EN_AA, (uint8_t)~(BIT(7)|BIT(6)));
 8002d38:	213f      	movs	r1, #63	; 0x3f
 8002d3a:	2001      	movs	r0, #1
 8002d3c:	f000 f9b1 	bl	80030a2 <nrf24l01p_write_reg>
      break;
 8002d40:	e003      	b.n	8002d4a <nrf24l01p_open_pipe+0xa4>
        nrf24l01p_write_reg(NRF24L01P_EN_AA, 0);
 8002d42:	2100      	movs	r1, #0
 8002d44:	2001      	movs	r0, #1
 8002d46:	f000 f9ac 	bl	80030a2 <nrf24l01p_write_reg>
      break;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <nrf24l01p_close_pipe>:

void nrf24l01p_close_pipe(nrf24l01p_address_t pipe_num)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
  switch(pipe_num)
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	2b05      	cmp	r3, #5
 8002d62:	dc02      	bgt.n	8002d6a <nrf24l01p_close_pipe+0x16>
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	da03      	bge.n	8002d70 <nrf24l01p_close_pipe+0x1c>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, 0);
      nrf24l01p_write_reg(NRF24L01P_EN_AA, 0);
      break;
      
    default:
      break;
 8002d68:	e032      	b.n	8002dd0 <nrf24l01p_close_pipe+0x7c>
  switch(pipe_num)
 8002d6a:	2bff      	cmp	r3, #255	; 0xff
 8002d6c:	d027      	beq.n	8002dbe <nrf24l01p_close_pipe+0x6a>
      break;
 8002d6e:	e02f      	b.n	8002dd0 <nrf24l01p_close_pipe+0x7c>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, nrf24l01p_read_reg(NRF24L01P_EN_RXADDR) & ~BIT(pipe_num));
 8002d70:	2002      	movs	r0, #2
 8002d72:	f000 f97d 	bl	8003070 <nrf24l01p_read_reg>
 8002d76:	4603      	mov	r3, r0
 8002d78:	b25a      	sxtb	r2, r3
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d82:	b25b      	sxtb	r3, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	b25b      	sxtb	r3, r3
 8002d88:	4013      	ands	r3, r2
 8002d8a:	b25b      	sxtb	r3, r3
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	4619      	mov	r1, r3
 8002d90:	2002      	movs	r0, #2
 8002d92:	f000 f986 	bl	80030a2 <nrf24l01p_write_reg>
      nrf24l01p_write_reg(NRF24L01P_EN_AA, nrf24l01p_read_reg(NRF24L01P_EN_AA) & ~BIT(pipe_num));
 8002d96:	2001      	movs	r0, #1
 8002d98:	f000 f96a 	bl	8003070 <nrf24l01p_read_reg>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	b25a      	sxtb	r2, r3
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	2101      	movs	r1, #1
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	b25b      	sxtb	r3, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	b25b      	sxtb	r3, r3
 8002dae:	4013      	ands	r3, r2
 8002db0:	b25b      	sxtb	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	4619      	mov	r1, r3
 8002db6:	2001      	movs	r0, #1
 8002db8:	f000 f973 	bl	80030a2 <nrf24l01p_write_reg>
      break;
 8002dbc:	e008      	b.n	8002dd0 <nrf24l01p_close_pipe+0x7c>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, 0);
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	2002      	movs	r0, #2
 8002dc2:	f000 f96e 	bl	80030a2 <nrf24l01p_write_reg>
      nrf24l01p_write_reg(NRF24L01P_EN_AA, 0);
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	2001      	movs	r0, #1
 8002dca:	f000 f96a 	bl	80030a2 <nrf24l01p_write_reg>
      break;
 8002dce:	bf00      	nop
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <nrf24l01p_set_address>:

void nrf24l01p_set_address(nrf24l01p_address_t address, const uint8_t *addr)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	6039      	str	r1, [r7, #0]
 8002de2:	71fb      	strb	r3, [r7, #7]
  switch(address)
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	2b06      	cmp	r3, #6
 8002de8:	d00a      	beq.n	8002e00 <nrf24l01p_set_address+0x28>
 8002dea:	2b06      	cmp	r3, #6
 8002dec:	dc19      	bgt.n	8002e22 <nrf24l01p_set_address+0x4a>
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	dc02      	bgt.n	8002df8 <nrf24l01p_set_address+0x20>
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	da04      	bge.n	8002e00 <nrf24l01p_set_address+0x28>
    case NRF24L01P_PIPE5:
      nrf24l01p_write_reg(NRF24L01P_RX_ADDR_P0 + (uint8_t)address, *addr);
      break;

    default:
      break;
 8002df6:	e014      	b.n	8002e22 <nrf24l01p_set_address+0x4a>
 8002df8:	3b02      	subs	r3, #2
  switch(address)
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d811      	bhi.n	8002e22 <nrf24l01p_set_address+0x4a>
 8002dfe:	e006      	b.n	8002e0e <nrf24l01p_set_address+0x36>
      nrf24l01p_write_multibyte_reg((uint8_t) address, addr, 0);
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	2200      	movs	r2, #0
 8002e04:	6839      	ldr	r1, [r7, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f9e8 	bl	80031dc <nrf24l01p_write_multibyte_reg>
      break;
 8002e0c:	e00a      	b.n	8002e24 <nrf24l01p_set_address+0x4c>
      nrf24l01p_write_reg(NRF24L01P_RX_ADDR_P0 + (uint8_t)address, *addr);
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	330a      	adds	r3, #10
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f000 f941 	bl	80030a2 <nrf24l01p_write_reg>
      break;
 8002e20:	e000      	b.n	8002e24 <nrf24l01p_set_address+0x4c>
      break;
 8002e22:	bf00      	nop
  }
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <nrf24l01p_set_auto_retr>:

void nrf24l01p_set_auto_retr(uint8_t retr, uint16_t delay)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	460a      	mov	r2, r1
 8002e36:	71fb      	strb	r3, [r7, #7]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	80bb      	strh	r3, [r7, #4]
  nrf24l01p_write_reg(NRF24L01P_SETUP_RETR, (((delay/250)-1)<<4) | retr);
 8002e3c:	88bb      	ldrh	r3, [r7, #4]
 8002e3e:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <nrf24l01p_set_auto_retr+0x3c>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	b25a      	sxtb	r2, r3
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	b25b      	sxtb	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	4619      	mov	r1, r3
 8002e5a:	2004      	movs	r0, #4
 8002e5c:	f000 f921 	bl	80030a2 <nrf24l01p_write_reg>
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	10624dd3 	.word	0x10624dd3

08002e6c <nrf24l01p_set_address_width>:

void nrf24l01p_set_address_width(nrf24l01p_address_width_t address_width)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_SETUP_AW, (uint8_t)address_width - 2);
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	3b02      	subs	r3, #2
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	2003      	movs	r0, #3
 8002e80:	f000 f90f 	bl	80030a2 <nrf24l01p_write_reg>
}
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <nrf24l01p_set_rx_payload_width>:

void nrf24l01p_set_rx_payload_width(uint8_t pipe_num, uint8_t payload_width)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	460a      	mov	r2, r1
 8002e96:	71fb      	strb	r3, [r7, #7]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	71bb      	strb	r3, [r7, #6]
  nrf24l01p_write_reg(NRF24L01P_RX_PW_P0 + pipe_num, payload_width);
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	3311      	adds	r3, #17
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	79ba      	ldrb	r2, [r7, #6]
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 f8fb 	bl	80030a2 <nrf24l01p_write_reg>
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <nrf24l01p_get_address_width>:
{
  return (nrf24l01p_read_reg(NRF24L01P_OBSERVE_TX) & (BIT(7)|BIT(6)|BIT(5)|BIT(4))) >> 4;
}

uint8_t nrf24l01p_get_address_width(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  return (nrf24l01p_read_reg(NRF24L01P_SETUP_AW) + 2);
 8002eb8:	2003      	movs	r0, #3
 8002eba:	f000 f8d9 	bl	8003070 <nrf24l01p_read_reg>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	b2db      	uxtb	r3, r3
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <nrf24l01p_set_operation_mode>:
{
  return nrf24l01p_read_reg(NRF24L01P_RX_PW_P0 + pipe_num);
}

void nrf24l01p_set_operation_mode(nrf24l01p_operation_mode_t op_mode)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_CONFIG, BIT_COND(nrf24l01p_read_reg(NRF24L01P_CONFIG), NRF24L01P_CONFIG_PRIM_RX, op_mode == NRF24L01P_PRX));
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f000 f8cc 	bl	8003070 <nrf24l01p_read_reg>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	b25b      	sxtb	r3, r3
 8002edc:	f023 0301 	bic.w	r3, r3, #1
 8002ee0:	b25a      	sxtb	r2, r3
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	b25b      	sxtb	r3, r3
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	b25b      	sxtb	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	2000      	movs	r0, #0
 8002efa:	f000 f8d2 	bl	80030a2 <nrf24l01p_write_reg>
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <nrf24l01p_set_power_mode>:

void nrf24l01p_set_power_mode(nrf24l01p_pwr_mode_t pwr_mode)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_CONFIG, BIT_COND(nrf24l01p_read_reg(NRF24L01P_CONFIG), NRF24L01P_CONFIG_PWR_UP, pwr_mode == NRF24L01P_PWR_UP));
 8002f10:	2000      	movs	r0, #0
 8002f12:	f000 f8ad 	bl	8003070 <nrf24l01p_read_reg>
 8002f16:	4603      	mov	r3, r0
 8002f18:	b25b      	sxtb	r3, r3
 8002f1a:	f023 0302 	bic.w	r3, r3, #2
 8002f1e:	b25b      	sxtb	r3, r3
 8002f20:	79fa      	ldrb	r2, [r7, #7]
 8002f22:	2a01      	cmp	r2, #1
 8002f24:	d101      	bne.n	8002f2a <nrf24l01p_set_power_mode+0x24>
 8002f26:	2202      	movs	r2, #2
 8002f28:	e000      	b.n	8002f2c <nrf24l01p_set_power_mode+0x26>
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	b25b      	sxtb	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	4619      	mov	r1, r3
 8002f34:	2000      	movs	r0, #0
 8002f36:	f000 f8b4 	bl	80030a2 <nrf24l01p_write_reg>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(uint8_t channel)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	4603      	mov	r3, r0
 8002f4a:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_RF_CH, channel);
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	4619      	mov	r1, r3
 8002f50:	2005      	movs	r0, #5
 8002f52:	f000 f8a6 	bl	80030a2 <nrf24l01p_write_reg>
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <nrf24l01p_rx_fifo_empty>:
{
  return (nrf24l01p_read_reg(NRF24L01P_RF_SETUP) & (1<<NRF24L01P_RF_SETUP_RF_DR)) >> NRF24L01P_RF_SETUP_RF_DR;
}

bool nrf24l01p_rx_fifo_empty(void)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	af00      	add	r7, sp, #0
  return nrf24l01p_get_rx_data_source() == 7;
 8002f62:	f000 f83d 	bl	8002fe0 <nrf24l01p_get_rx_data_source>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b07      	cmp	r3, #7
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <nrf24l01p_get_carrier_detect>:
{
  return nrf24l01p_read_reg(NRF24L01P_OBSERVE_TX) & (BIT(3)|BIT(2)|BIT(1)|BIT(0));
}

bool nrf24l01p_get_carrier_detect(void)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	af00      	add	r7, sp, #0
  return nrf24l01p_read_reg(NRF24L01P_CD) & 1;
 8002f7a:	2009      	movs	r0, #9
 8002f7c:	f000 f878 	bl	8003070 <nrf24l01p_read_reg>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	bf14      	ite	ne
 8002f8a:	2301      	movne	r3, #1
 8002f8c:	2300      	moveq	r3, #0
 8002f8e:	b2db      	uxtb	r3, r3
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <nrf24l01p_write_tx_payload>:

void nrf24l01p_write_tx_payload(const uint8_t *tx_payload, uint8_t length)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	70fb      	strb	r3, [r7, #3]
  nrf24l01p_write_multibyte_reg(NRF24L01P_TX_PAYLOAD, tx_payload, length);
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	2007      	movs	r0, #7
 8002fa8:	f000 f918 	bl	80031dc <nrf24l01p_write_multibyte_reg>
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <nrf24l01p_read_rx_fifo_payload_width>:

  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
}

uint8_t nrf24l01p_read_rx_fifo_payload_width()
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
  uint8_t temp;
  
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 8002fba:	2000      	movs	r0, #0
 8002fbc:	f7fd f9e6 	bl	800038c <nrf24l01p_spi_ss>

  nrf24l01p_spi_rw(NRF24L01P_RD_RX_PAYLOAD_WIDTH);
 8002fc0:	2060      	movs	r0, #96	; 0x60
 8002fc2:	f7fd fa0d 	bl	80003e0 <nrf24l01p_spi_rw>
  temp = nrf24l01p_spi_rw(0);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f7fd fa0a 	bl	80003e0 <nrf24l01p_spi_rw>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f7fd f9db 	bl	800038c <nrf24l01p_spi_ss>

  return temp;
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <nrf24l01p_get_rx_data_source>:

  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
}

uint8_t nrf24l01p_get_rx_data_source(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  return ((nrf24l01p_nop() & (BIT(3)|BIT(2)|BIT(1))) >> 1);
 8002fe4:	f000 f81d 	bl	8003022 <nrf24l01p_nop>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	105b      	asrs	r3, r3, #1
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	b2db      	uxtb	r3, r3
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <nrf24l01p_read_rx_payload>:

// Fixed: returns length==0 and pipe==7 means FIFO empty

uint16_t nrf24l01p_read_rx_payload(uint8_t *rx_payload)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  return nrf24l01p_read_multibyte_reg(NRF24L01P_RX_PAYLOAD, rx_payload);
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	2008      	movs	r0, #8
 8003004:	f000 f88d 	bl	8003122 <nrf24l01p_read_multibyte_reg>
 8003008:	4603      	mov	r3, r0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <nrf24l01p_flush_tx>:
{
  nrf24l01p_write_reg(NRF24L01P_FLUSH_RX, 0);
}

void nrf24l01p_flush_tx(void)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	af00      	add	r7, sp, #0
  nrf24l01p_write_reg(NRF24L01P_FLUSH_TX, 0);
 8003016:	2100      	movs	r1, #0
 8003018:	20e1      	movs	r0, #225	; 0xe1
 800301a:	f000 f842 	bl	80030a2 <nrf24l01p_write_reg>
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}

08003022 <nrf24l01p_nop>:

uint8_t nrf24l01p_nop(void)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	af00      	add	r7, sp, #0
  return nrf24l01p_write_reg(NRF24L01P_NOP,0);
 8003026:	2100      	movs	r1, #0
 8003028:	20ff      	movs	r0, #255	; 0xff
 800302a:	f000 f83a 	bl	80030a2 <nrf24l01p_write_reg>
 800302e:	4603      	mov	r3, r0
}
 8003030:	4618      	mov	r0, r3
 8003032:	bd80      	pop	{r7, pc}

08003034 <nrf24l01p_set_pll_mode>:

void nrf24l01p_set_pll_mode(nrf24l01p_pll_mode_t pll_mode)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_RF_SETUP, BIT_COND(nrf24l01p_read_reg(NRF24L01P_RF_SETUP), NRF24L01P_RF_SETUP_PLL_LOCK, pll_mode == NRF24L01P_PLL_LOCK));
 800303e:	2006      	movs	r0, #6
 8003040:	f000 f816 	bl	8003070 <nrf24l01p_read_reg>
 8003044:	4603      	mov	r3, r0
 8003046:	b25b      	sxtb	r3, r3
 8003048:	f023 0310 	bic.w	r3, r3, #16
 800304c:	b25b      	sxtb	r3, r3
 800304e:	79fa      	ldrb	r2, [r7, #7]
 8003050:	2a01      	cmp	r2, #1
 8003052:	d101      	bne.n	8003058 <nrf24l01p_set_pll_mode+0x24>
 8003054:	2210      	movs	r2, #16
 8003056:	e000      	b.n	800305a <nrf24l01p_set_pll_mode+0x26>
 8003058:	2200      	movs	r2, #0
 800305a:	4313      	orrs	r3, r2
 800305c:	b25b      	sxtb	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	4619      	mov	r1, r3
 8003062:	2006      	movs	r0, #6
 8003064:	f000 f81d 	bl	80030a2 <nrf24l01p_write_reg>
}
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <nrf24l01p_read_reg>:
{
  return (nrf24l01p_lna_mode_t) ( (nrf24l01p_read_reg(NRF24L01P_RF_SETUP) & (1<<NRF24L01P_LNA_HCURR)) >> NRF24L01P_LNA_HCURR );
}

uint8_t nrf24l01p_read_reg(uint8_t reg)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	71fb      	strb	r3, [r7, #7]
uint8_t temp;
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 800307a:	2000      	movs	r0, #0
 800307c:	f7fd f986 	bl	800038c <nrf24l01p_spi_ss>
  nrf24l01p_spi_rw(reg);
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd f9ac 	bl	80003e0 <nrf24l01p_spi_rw>
  temp = nrf24l01p_spi_rw(0);
 8003088:	2000      	movs	r0, #0
 800308a:	f7fd f9a9 	bl	80003e0 <nrf24l01p_spi_rw>
 800308e:	4603      	mov	r3, r0
 8003090:	73fb      	strb	r3, [r7, #15]
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 8003092:	2001      	movs	r0, #1
 8003094:	f7fd f97a 	bl	800038c <nrf24l01p_spi_ss>

  return temp;
 8003098:	7bfb      	ldrb	r3, [r7, #15]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <nrf24l01p_write_reg>:

uint8_t nrf24l01p_write_reg(uint8_t reg, uint8_t value)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	460a      	mov	r2, r1
 80030ac:	71fb      	strb	r3, [r7, #7]
 80030ae:	4613      	mov	r3, r2
 80030b0:	71bb      	strb	r3, [r7, #6]
  uint8_t retval;
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 80030b2:	2000      	movs	r0, #0
 80030b4:	f7fd f96a 	bl	800038c <nrf24l01p_spi_ss>
  if(reg < NRF24L01P_NRF_WRITE_REG)   // i.e. this is a register access
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	2b1f      	cmp	r3, #31
 80030bc:	d80c      	bhi.n	80030d8 <nrf24l01p_write_reg+0x36>
  {
    retval = nrf24l01p_spi_rw(NRF24L01P_NRF_WRITE_REG + reg);
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	3320      	adds	r3, #32
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fd f98b 	bl	80003e0 <nrf24l01p_spi_rw>
 80030ca:	4603      	mov	r3, r0
 80030cc:	73fb      	strb	r3, [r7, #15]
    nrf24l01p_spi_rw(value);
 80030ce:	79bb      	ldrb	r3, [r7, #6]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fd f985 	bl	80003e0 <nrf24l01p_spi_rw>
 80030d6:	e01c      	b.n	8003112 <nrf24l01p_write_reg+0x70>
  }
  else            // single byte cmd OR future command/register access
  {
    if(!(reg == NRF24L01P_FLUSH_TX) && !(reg == NRF24L01P_FLUSH_RX) && !(reg == NRF24L01P_REUSE_TX_PL) && !(reg == NRF24L01P_NOP))
 80030d8:	79fb      	ldrb	r3, [r7, #7]
 80030da:	2be1      	cmp	r3, #225	; 0xe1
 80030dc:	d013      	beq.n	8003106 <nrf24l01p_write_reg+0x64>
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	2be2      	cmp	r3, #226	; 0xe2
 80030e2:	d010      	beq.n	8003106 <nrf24l01p_write_reg+0x64>
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	2be3      	cmp	r3, #227	; 0xe3
 80030e8:	d00d      	beq.n	8003106 <nrf24l01p_write_reg+0x64>
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	2bff      	cmp	r3, #255	; 0xff
 80030ee:	d00a      	beq.n	8003106 <nrf24l01p_write_reg+0x64>
    {
      retval = nrf24l01p_spi_rw(reg);
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fd f974 	bl	80003e0 <nrf24l01p_spi_rw>
 80030f8:	4603      	mov	r3, r0
 80030fa:	73fb      	strb	r3, [r7, #15]
      nrf24l01p_spi_rw(value);
 80030fc:	79bb      	ldrb	r3, [r7, #6]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fd f96e 	bl	80003e0 <nrf24l01p_spi_rw>
 8003104:	e005      	b.n	8003112 <nrf24l01p_write_reg+0x70>
    }
    else          // single byte L01 command
    {
      retval = nrf24l01p_spi_rw(reg);
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd f969 	bl	80003e0 <nrf24l01p_spi_rw>
 800310e:	4603      	mov	r3, r0
 8003110:	73fb      	strb	r3, [r7, #15]
    }
  }
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 8003112:	2001      	movs	r0, #1
 8003114:	f7fd f93a 	bl	800038c <nrf24l01p_spi_ss>

  return retval;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <nrf24l01p_read_multibyte_reg>:

uint16_t nrf24l01p_read_multibyte_reg(uint8_t reg, uint8_t *pbuf)
{
 8003122:	b590      	push	{r4, r7, lr}
 8003124:	b085      	sub	sp, #20
 8003126:	af00      	add	r7, sp, #0
 8003128:	4603      	mov	r3, r0
 800312a:	6039      	str	r1, [r7, #0]
 800312c:	71fb      	strb	r3, [r7, #7]
uint8_t ctr, length;
  switch(reg)
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	2b08      	cmp	r3, #8
 8003132:	d018      	beq.n	8003166 <nrf24l01p_read_multibyte_reg+0x44>
 8003134:	2b08      	cmp	r3, #8
 8003136:	dc2f      	bgt.n	8003198 <nrf24l01p_read_multibyte_reg+0x76>
 8003138:	2b01      	cmp	r3, #1
 800313a:	dc02      	bgt.n	8003142 <nrf24l01p_read_multibyte_reg+0x20>
 800313c:	2b00      	cmp	r3, #0
 800313e:	da02      	bge.n	8003146 <nrf24l01p_read_multibyte_reg+0x24>
 8003140:	e02a      	b.n	8003198 <nrf24l01p_read_multibyte_reg+0x76>
 8003142:	2b06      	cmp	r3, #6
 8003144:	d128      	bne.n	8003198 <nrf24l01p_read_multibyte_reg+0x76>
  {
    case NRF24L01P_PIPE0:
    case NRF24L01P_PIPE1:
    case NRF24L01P_TX:
      length = ctr = nrf24l01p_get_address_width();
 8003146:	f7ff feb5 	bl	8002eb4 <nrf24l01p_get_address_width>
 800314a:	4603      	mov	r3, r0
 800314c:	73fb      	strb	r3, [r7, #15]
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	73bb      	strb	r3, [r7, #14]
      nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 8003152:	2000      	movs	r0, #0
 8003154:	f7fd f91a 	bl	800038c <nrf24l01p_spi_ss>
      nrf24l01p_spi_rw(NRF24L01P_RX_ADDR_P0 + reg);
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	330a      	adds	r3, #10
 800315c:	b2db      	uxtb	r3, r3
 800315e:	4618      	mov	r0, r3
 8003160:	f7fd f93e 	bl	80003e0 <nrf24l01p_spi_rw>
      break;
 8003164:	e01d      	b.n	80031a2 <nrf24l01p_read_multibyte_reg+0x80>
      
    case NRF24L01P_RX_PAYLOAD:
      if( (reg = nrf24l01p_get_rx_data_source()) < 7)
 8003166:	f7ff ff3b 	bl	8002fe0 <nrf24l01p_get_rx_data_source>
 800316a:	4603      	mov	r3, r0
 800316c:	71fb      	strb	r3, [r7, #7]
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	2b06      	cmp	r3, #6
 8003172:	d80c      	bhi.n	800318e <nrf24l01p_read_multibyte_reg+0x6c>
      {
        length = ctr = nrf24l01p_read_rx_fifo_payload_width();
 8003174:	f7ff ff1e 	bl	8002fb4 <nrf24l01p_read_rx_fifo_payload_width>
 8003178:	4603      	mov	r3, r0
 800317a:	73fb      	strb	r3, [r7, #15]
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	73bb      	strb	r3, [r7, #14]

        nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 8003180:	2000      	movs	r0, #0
 8003182:	f7fd f903 	bl	800038c <nrf24l01p_spi_ss>
        nrf24l01p_spi_rw(NRF24L01P_RD_RX_PAYLOAD);
 8003186:	2061      	movs	r0, #97	; 0x61
 8003188:	f7fd f92a 	bl	80003e0 <nrf24l01p_spi_rw>
      }
      else
      {
       ctr = length = 0;
      }
      break;
 800318c:	e009      	b.n	80031a2 <nrf24l01p_read_multibyte_reg+0x80>
       ctr = length = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	73bb      	strb	r3, [r7, #14]
 8003192:	7bbb      	ldrb	r3, [r7, #14]
 8003194:	73fb      	strb	r3, [r7, #15]
      break;
 8003196:	e004      	b.n	80031a2 <nrf24l01p_read_multibyte_reg+0x80>

    default:
      ctr = length = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	73bb      	strb	r3, [r7, #14]
 800319c:	7bbb      	ldrb	r3, [r7, #14]
 800319e:	73fb      	strb	r3, [r7, #15]
      break;
 80031a0:	bf00      	nop
  }

  while(ctr--)
 80031a2:	e007      	b.n	80031b4 <nrf24l01p_read_multibyte_reg+0x92>
  {
    *pbuf++ = nrf24l01p_spi_rw(0);
 80031a4:	683c      	ldr	r4, [r7, #0]
 80031a6:	1c63      	adds	r3, r4, #1
 80031a8:	603b      	str	r3, [r7, #0]
 80031aa:	2000      	movs	r0, #0
 80031ac:	f7fd f918 	bl	80003e0 <nrf24l01p_spi_rw>
 80031b0:	4603      	mov	r3, r0
 80031b2:	7023      	strb	r3, [r4, #0]
  while(ctr--)
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	1e5a      	subs	r2, r3, #1
 80031b8:	73fa      	strb	r2, [r7, #15]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f2      	bne.n	80031a4 <nrf24l01p_read_multibyte_reg+0x82>
  }

  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 80031be:	2001      	movs	r0, #1
 80031c0:	f7fd f8e4 	bl	800038c <nrf24l01p_spi_ss>

  return (((uint16_t) reg << 8) | length);
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	b21a      	sxth	r2, r3
 80031ca:	7bbb      	ldrb	r3, [r7, #14]
 80031cc:	b21b      	sxth	r3, r3
 80031ce:	4313      	orrs	r3, r2
 80031d0:	b21b      	sxth	r3, r3
 80031d2:	b29b      	uxth	r3, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd90      	pop	{r4, r7, pc}

080031dc <nrf24l01p_write_multibyte_reg>:

void nrf24l01p_write_multibyte_reg(uint8_t reg, const uint8_t *pbuf, uint8_t length)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	6039      	str	r1, [r7, #0]
 80031e6:	71fb      	strb	r3, [r7, #7]
 80031e8:	4613      	mov	r3, r2
 80031ea:	71bb      	strb	r3, [r7, #6]
  switch(reg)
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	2b07      	cmp	r3, #7
 80031f0:	d016      	beq.n	8003220 <nrf24l01p_write_multibyte_reg+0x44>
 80031f2:	2b07      	cmp	r3, #7
 80031f4:	dc1b      	bgt.n	800322e <nrf24l01p_write_multibyte_reg+0x52>
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	dc02      	bgt.n	8003200 <nrf24l01p_write_multibyte_reg+0x24>
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	da02      	bge.n	8003204 <nrf24l01p_write_multibyte_reg+0x28>
    case NRF24L01P_TX_PAYLOAD:
      nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
      nrf24l01p_spi_rw(NRF24L01P_WR_TX_PAYLOAD);
      break;      
    default:
      break;
 80031fe:	e016      	b.n	800322e <nrf24l01p_write_multibyte_reg+0x52>
  switch(reg)
 8003200:	2b06      	cmp	r3, #6
 8003202:	d114      	bne.n	800322e <nrf24l01p_write_multibyte_reg+0x52>
      length = nrf24l01p_get_address_width();
 8003204:	f7ff fe56 	bl	8002eb4 <nrf24l01p_get_address_width>
 8003208:	4603      	mov	r3, r0
 800320a:	71bb      	strb	r3, [r7, #6]
      nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 800320c:	2000      	movs	r0, #0
 800320e:	f7fd f8bd 	bl	800038c <nrf24l01p_spi_ss>
      nrf24l01p_spi_rw(NRF24L01P_NRF_WRITE_REG + NRF24L01P_RX_ADDR_P0 + reg);
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	332a      	adds	r3, #42	; 0x2a
 8003216:	b2db      	uxtb	r3, r3
 8003218:	4618      	mov	r0, r3
 800321a:	f7fd f8e1 	bl	80003e0 <nrf24l01p_spi_rw>
      break;
 800321e:	e007      	b.n	8003230 <nrf24l01p_write_multibyte_reg+0x54>
      nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 8003220:	2000      	movs	r0, #0
 8003222:	f7fd f8b3 	bl	800038c <nrf24l01p_spi_ss>
      nrf24l01p_spi_rw(NRF24L01P_WR_TX_PAYLOAD);
 8003226:	20a0      	movs	r0, #160	; 0xa0
 8003228:	f7fd f8da 	bl	80003e0 <nrf24l01p_spi_rw>
      break;      
 800322c:	e000      	b.n	8003230 <nrf24l01p_write_multibyte_reg+0x54>
      break;
 800322e:	bf00      	nop
  }

  while(length--)
 8003230:	e006      	b.n	8003240 <nrf24l01p_write_multibyte_reg+0x64>
    nrf24l01p_spi_rw(*pbuf++);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	603a      	str	r2, [r7, #0]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd f8d0 	bl	80003e0 <nrf24l01p_spi_rw>
  while(length--)
 8003240:	79bb      	ldrb	r3, [r7, #6]
 8003242:	1e5a      	subs	r2, r3, #1
 8003244:	71ba      	strb	r2, [r7, #6]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f3      	bne.n	8003232 <nrf24l01p_write_multibyte_reg+0x56>

  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 800324a:	2001      	movs	r0, #1
 800324c:	f7fd f89e 	bl	800038c <nrf24l01p_spi_ss>
}
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800325e:	4b15      	ldr	r3, [pc, #84]	; (80032b4 <HAL_MspInit+0x5c>)
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	4a14      	ldr	r2, [pc, #80]	; (80032b4 <HAL_MspInit+0x5c>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	6193      	str	r3, [r2, #24]
 800326a:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <HAL_MspInit+0x5c>)
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003276:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <HAL_MspInit+0x5c>)
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	4a0e      	ldr	r2, [pc, #56]	; (80032b4 <HAL_MspInit+0x5c>)
 800327c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003280:	61d3      	str	r3, [r2, #28]
 8003282:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <HAL_MspInit+0x5c>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328a:	607b      	str	r3, [r7, #4]
 800328c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800328e:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <HAL_MspInit+0x60>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	4a04      	ldr	r2, [pc, #16]	; (80032b8 <HAL_MspInit+0x60>)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40010000 	.word	0x40010000

080032bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c4:	f107 0310 	add.w	r3, r7, #16
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a15      	ldr	r2, [pc, #84]	; (800332c <HAL_I2C_MspInit+0x70>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d123      	bne.n	8003324 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032dc:	4b14      	ldr	r3, [pc, #80]	; (8003330 <HAL_I2C_MspInit+0x74>)
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	4a13      	ldr	r2, [pc, #76]	; (8003330 <HAL_I2C_MspInit+0x74>)
 80032e2:	f043 0308 	orr.w	r3, r3, #8
 80032e6:	6193      	str	r3, [r2, #24]
 80032e8:	4b11      	ldr	r3, [pc, #68]	; (8003330 <HAL_I2C_MspInit+0x74>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032f4:	23c0      	movs	r3, #192	; 0xc0
 80032f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032f8:	2312      	movs	r3, #18
 80032fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032fc:	2303      	movs	r3, #3
 80032fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003300:	f107 0310 	add.w	r3, r7, #16
 8003304:	4619      	mov	r1, r3
 8003306:	480b      	ldr	r0, [pc, #44]	; (8003334 <HAL_I2C_MspInit+0x78>)
 8003308:	f000 fcbc 	bl	8003c84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800330c:	4b08      	ldr	r3, [pc, #32]	; (8003330 <HAL_I2C_MspInit+0x74>)
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	4a07      	ldr	r2, [pc, #28]	; (8003330 <HAL_I2C_MspInit+0x74>)
 8003312:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003316:	61d3      	str	r3, [r2, #28]
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_I2C_MspInit+0x74>)
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003324:	bf00      	nop
 8003326:	3720      	adds	r7, #32
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40005400 	.word	0x40005400
 8003330:	40021000 	.word	0x40021000
 8003334:	40010c00 	.word	0x40010c00

08003338 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b088      	sub	sp, #32
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003340:	f107 0310 	add.w	r3, r7, #16
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a1c      	ldr	r2, [pc, #112]	; (80033c4 <HAL_SPI_MspInit+0x8c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d131      	bne.n	80033bc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003358:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <HAL_SPI_MspInit+0x90>)
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	4a1a      	ldr	r2, [pc, #104]	; (80033c8 <HAL_SPI_MspInit+0x90>)
 800335e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003362:	61d3      	str	r3, [r2, #28]
 8003364:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <HAL_SPI_MspInit+0x90>)
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003370:	4b15      	ldr	r3, [pc, #84]	; (80033c8 <HAL_SPI_MspInit+0x90>)
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	4a14      	ldr	r2, [pc, #80]	; (80033c8 <HAL_SPI_MspInit+0x90>)
 8003376:	f043 0308 	orr.w	r3, r3, #8
 800337a:	6193      	str	r3, [r2, #24]
 800337c:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <HAL_SPI_MspInit+0x90>)
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003388:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800338c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338e:	2302      	movs	r3, #2
 8003390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003392:	2303      	movs	r3, #3
 8003394:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003396:	f107 0310 	add.w	r3, r7, #16
 800339a:	4619      	mov	r1, r3
 800339c:	480b      	ldr	r0, [pc, #44]	; (80033cc <HAL_SPI_MspInit+0x94>)
 800339e:	f000 fc71 	bl	8003c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80033a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b0:	f107 0310 	add.w	r3, r7, #16
 80033b4:	4619      	mov	r1, r3
 80033b6:	4805      	ldr	r0, [pc, #20]	; (80033cc <HAL_SPI_MspInit+0x94>)
 80033b8:	f000 fc64 	bl	8003c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80033bc:	bf00      	nop
 80033be:	3720      	adds	r7, #32
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40003800 	.word	0x40003800
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40010c00 	.word	0x40010c00

080033d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a09      	ldr	r2, [pc, #36]	; (8003404 <HAL_TIM_Base_MspInit+0x34>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d10b      	bne.n	80033fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033e2:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_TIM_Base_MspInit+0x38>)
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	4a08      	ldr	r2, [pc, #32]	; (8003408 <HAL_TIM_Base_MspInit+0x38>)
 80033e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033ec:	6193      	str	r3, [r2, #24]
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_TIM_Base_MspInit+0x38>)
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr
 8003404:	40012c00 	.word	0x40012c00
 8003408:	40021000 	.word	0x40021000

0800340c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003410:	e7fe      	b.n	8003410 <NMI_Handler+0x4>

08003412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003412:	b480      	push	{r7}
 8003414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003416:	e7fe      	b.n	8003416 <HardFault_Handler+0x4>

08003418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800341c:	e7fe      	b.n	800341c <MemManage_Handler+0x4>

0800341e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800341e:	b480      	push	{r7}
 8003420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003422:	e7fe      	b.n	8003422 <BusFault_Handler+0x4>

08003424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003428:	e7fe      	b.n	8003428 <UsageFault_Handler+0x4>

0800342a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800342a:	b480      	push	{r7}
 800342c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr

08003436 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003436:	b480      	push	{r7}
 8003438:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800343a:	bf00      	nop
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr

08003442 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003442:	b480      	push	{r7}
 8003444:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003446:	bf00      	nop
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003452:	f000 fac9 	bl	80039e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003460:	4802      	ldr	r0, [pc, #8]	; (800346c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003462:	f001 ff0c 	bl	800527e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20001424 	.word	0x20001424

08003470 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003474:	bf00      	nop
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr

0800347c <_vfd_get_char_code>:

/**
 * Returns code for display from character code
 */
uint16_t _vfd_get_char_code(char code)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
	if ('0' <= code && code <= '9')
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	2b2f      	cmp	r3, #47	; 0x2f
 800348a:	d908      	bls.n	800349e <_vfd_get_char_code+0x22>
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	2b39      	cmp	r3, #57	; 0x39
 8003490:	d805      	bhi.n	800349e <_vfd_get_char_code+0x22>
		return _VFD_MAP_DIGITS[code - '0'];
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	3b30      	subs	r3, #48	; 0x30
 8003496:	4a2b      	ldr	r2, [pc, #172]	; (8003544 <_vfd_get_char_code+0xc8>)
 8003498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800349c:	e04c      	b.n	8003538 <_vfd_get_char_code+0xbc>
	if (0 <= code && code <= 9)
 800349e:	79fb      	ldrb	r3, [r7, #7]
 80034a0:	2b09      	cmp	r3, #9
 80034a2:	d804      	bhi.n	80034ae <_vfd_get_char_code+0x32>
		return _VFD_MAP_DIGITS[(uint8_t)code];
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	4a27      	ldr	r2, [pc, #156]	; (8003544 <_vfd_get_char_code+0xc8>)
 80034a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034ac:	e044      	b.n	8003538 <_vfd_get_char_code+0xbc>
	for (int i = 0; i < _VFD_SIZE_SPECIAL; i++)
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	e00e      	b.n	80034d2 <_vfd_get_char_code+0x56>
		if (_VFD_MAP_SPECIAL_CHAR[i] == code)
 80034b4:	4a24      	ldr	r2, [pc, #144]	; (8003548 <_vfd_get_char_code+0xcc>)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4413      	add	r3, r2
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	79fa      	ldrb	r2, [r7, #7]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d104      	bne.n	80034cc <_vfd_get_char_code+0x50>
			return _VFD_MAP_SPECIAL[i];
 80034c2:	4a22      	ldr	r2, [pc, #136]	; (800354c <_vfd_get_char_code+0xd0>)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034ca:	e035      	b.n	8003538 <_vfd_get_char_code+0xbc>
	for (int i = 0; i < _VFD_SIZE_SPECIAL; i++)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	3301      	adds	r3, #1
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	231a      	movs	r3, #26
 80034d4:	461a      	mov	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4293      	cmp	r3, r2
 80034da:	dbeb      	blt.n	80034b4 <_vfd_get_char_code+0x38>
	if ('a' <= code && code <= 'z')
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	2b60      	cmp	r3, #96	; 0x60
 80034e0:	d908      	bls.n	80034f4 <_vfd_get_char_code+0x78>
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	2b7a      	cmp	r3, #122	; 0x7a
 80034e6:	d805      	bhi.n	80034f4 <_vfd_get_char_code+0x78>
		return _VFD_MAP_ALPHA[code - 'a'];
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	3b61      	subs	r3, #97	; 0x61
 80034ec:	4a18      	ldr	r2, [pc, #96]	; (8003550 <_vfd_get_char_code+0xd4>)
 80034ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034f2:	e021      	b.n	8003538 <_vfd_get_char_code+0xbc>
	if ('A' <= code && code <= 'Z')
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	2b40      	cmp	r3, #64	; 0x40
 80034f8:	d908      	bls.n	800350c <_vfd_get_char_code+0x90>
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	2b5a      	cmp	r3, #90	; 0x5a
 80034fe:	d805      	bhi.n	800350c <_vfd_get_char_code+0x90>
		return _VFD_MAP_ALPHA[code - 'A'];
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	3b41      	subs	r3, #65	; 0x41
 8003504:	4a12      	ldr	r2, [pc, #72]	; (8003550 <_vfd_get_char_code+0xd4>)
 8003506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800350a:	e015      	b.n	8003538 <_vfd_get_char_code+0xbc>
	if (192 <= code && code <= 223) // russian upper letters
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	2bbf      	cmp	r3, #191	; 0xbf
 8003510:	d908      	bls.n	8003524 <_vfd_get_char_code+0xa8>
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	2bdf      	cmp	r3, #223	; 0xdf
 8003516:	d805      	bhi.n	8003524 <_vfd_get_char_code+0xa8>
		return _VFD_MAP_ALPHA_RU[code - 192];
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	3bc0      	subs	r3, #192	; 0xc0
 800351c:	4a0d      	ldr	r2, [pc, #52]	; (8003554 <_vfd_get_char_code+0xd8>)
 800351e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003522:	e009      	b.n	8003538 <_vfd_get_char_code+0xbc>
	if (224 <= code && code <= 255) // russian lower letters
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	2bdf      	cmp	r3, #223	; 0xdf
 8003528:	d905      	bls.n	8003536 <_vfd_get_char_code+0xba>
		return _VFD_MAP_ALPHA_RU[code - 224];
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	3be0      	subs	r3, #224	; 0xe0
 800352e:	4a09      	ldr	r2, [pc, #36]	; (8003554 <_vfd_get_char_code+0xd8>)
 8003530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003534:	e000      	b.n	8003538 <_vfd_get_char_code+0xbc>
	return 0;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	0800cd44 	.word	0x0800cd44
 8003548:	0800ce00 	.word	0x0800ce00
 800354c:	0800cdcc 	.word	0x0800cdcc
 8003550:	0800cd58 	.word	0x0800cd58
 8003554:	0800cd8c 	.word	0x0800cd8c

08003558 <vfd_put_string>:

/**
 * put string in buffer
 */
void vfd_put_string(char * str)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
	uint16_t buf;
	// erase letters only
	for (int i = 10; i > 0; i --)
 8003560:	230a      	movs	r3, #10
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	e028      	b.n	80035b8 <vfd_put_string+0x60>
	{
		 vfd.arr2[i][0] &= 1<<0;
 8003566:	493e      	ldr	r1, [pc, #248]	; (8003660 <vfd_put_string+0x108>)
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4613      	mov	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	4413      	add	r3, r2
 8003570:	440b      	add	r3, r1
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	b2d8      	uxtb	r0, r3
 800357a:	4939      	ldr	r1, [pc, #228]	; (8003660 <vfd_put_string+0x108>)
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4613      	mov	r3, r2
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	4413      	add	r3, r2
 8003584:	440b      	add	r3, r1
 8003586:	4602      	mov	r2, r0
 8003588:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] &= 1<<7;
 800358a:	4935      	ldr	r1, [pc, #212]	; (8003660 <vfd_put_string+0x108>)
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4613      	mov	r3, r2
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	4413      	add	r3, r2
 8003594:	440b      	add	r3, r1
 8003596:	3301      	adds	r3, #1
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800359e:	b2d8      	uxtb	r0, r3
 80035a0:	492f      	ldr	r1, [pc, #188]	; (8003660 <vfd_put_string+0x108>)
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4613      	mov	r3, r2
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	4413      	add	r3, r2
 80035aa:	440b      	add	r3, r1
 80035ac:	3301      	adds	r3, #1
 80035ae:	4602      	mov	r2, r0
 80035b0:	701a      	strb	r2, [r3, #0]
	for (int i = 10; i > 0; i --)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	dcd3      	bgt.n	8003566 <vfd_put_string+0xe>
	}
	uint8_t i = 10;
 80035be:	230a      	movs	r3, #10
 80035c0:	72fb      	strb	r3, [r7, #11]
	while (*str)
 80035c2:	e042      	b.n	800364a <vfd_put_string+0xf2>
	{
		 buf = _vfd_get_char_code(*(str++));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	607a      	str	r2, [r7, #4]
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff ff55 	bl	800347c <_vfd_get_char_code>
 80035d2:	4603      	mov	r3, r0
 80035d4:	813b      	strh	r3, [r7, #8]
		 vfd.arr2[i][0] |= buf & (~(1<<0));
 80035d6:	7afa      	ldrb	r2, [r7, #11]
 80035d8:	4921      	ldr	r1, [pc, #132]	; (8003660 <vfd_put_string+0x108>)
 80035da:	4613      	mov	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4413      	add	r3, r2
 80035e0:	440b      	add	r3, r1
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	b25a      	sxtb	r2, r3
 80035e6:	893b      	ldrh	r3, [r7, #8]
 80035e8:	b25b      	sxtb	r3, r3
 80035ea:	f023 0301 	bic.w	r3, r3, #1
 80035ee:	b25b      	sxtb	r3, r3
 80035f0:	4313      	orrs	r3, r2
 80035f2:	b25b      	sxtb	r3, r3
 80035f4:	7afa      	ldrb	r2, [r7, #11]
 80035f6:	b2d8      	uxtb	r0, r3
 80035f8:	4919      	ldr	r1, [pc, #100]	; (8003660 <vfd_put_string+0x108>)
 80035fa:	4613      	mov	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4413      	add	r3, r2
 8003600:	440b      	add	r3, r1
 8003602:	4602      	mov	r2, r0
 8003604:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] |= (buf>>8)&(~(1<<7));
 8003606:	7afa      	ldrb	r2, [r7, #11]
 8003608:	4915      	ldr	r1, [pc, #84]	; (8003660 <vfd_put_string+0x108>)
 800360a:	4613      	mov	r3, r2
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	4413      	add	r3, r2
 8003610:	440b      	add	r3, r1
 8003612:	3301      	adds	r3, #1
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	b25a      	sxtb	r2, r3
 8003618:	893b      	ldrh	r3, [r7, #8]
 800361a:	0a1b      	lsrs	r3, r3, #8
 800361c:	b29b      	uxth	r3, r3
 800361e:	b25b      	sxtb	r3, r3
 8003620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003624:	b25b      	sxtb	r3, r3
 8003626:	4313      	orrs	r3, r2
 8003628:	b25b      	sxtb	r3, r3
 800362a:	7afa      	ldrb	r2, [r7, #11]
 800362c:	b2d8      	uxtb	r0, r3
 800362e:	490c      	ldr	r1, [pc, #48]	; (8003660 <vfd_put_string+0x108>)
 8003630:	4613      	mov	r3, r2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4413      	add	r3, r2
 8003636:	440b      	add	r3, r1
 8003638:	3301      	adds	r3, #1
 800363a:	4602      	mov	r2, r0
 800363c:	701a      	strb	r2, [r3, #0]
		 if (!--i)
 800363e:	7afb      	ldrb	r3, [r7, #11]
 8003640:	3b01      	subs	r3, #1
 8003642:	72fb      	strb	r3, [r7, #11]
 8003644:	7afb      	ldrb	r3, [r7, #11]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d004      	beq.n	8003654 <vfd_put_string+0xfc>
	while (*str)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1b8      	bne.n	80035c4 <vfd_put_string+0x6c>
			 break;
	}
}
 8003652:	e000      	b.n	8003656 <vfd_put_string+0xfe>
			 break;
 8003654:	bf00      	nop
}
 8003656:	bf00      	nop
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	2000061c 	.word	0x2000061c

08003664 <vfd_set_symbols>:

/**
 * set symbols mask in buffer
 */
void vfd_set_symbols(uint32_t symbols)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < _VFD_SIZE_SYMBOLS; i++)
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	e041      	b.n	80036f6 <vfd_set_symbols+0x92>
	{
		if (symbols & (1<<i))
 8003672:	2201      	movs	r2, #1
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	461a      	mov	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4013      	ands	r3, r2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d035      	beq.n	80036f0 <vfd_set_symbols+0x8c>
		{
			// set symbol
			for (int b = 0; b < 3; b++)
 8003684:	2300      	movs	r3, #0
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	e02f      	b.n	80036ea <vfd_set_symbols+0x86>
			  vfd.arr2[_VFD_MAP_SYMBOLS[i][0]][b] |= ((1<<_VFD_MAP_SYMBOLS[i][1])>>(b<<3))&0xFF;
 800368a:	4a20      	ldr	r2, [pc, #128]	; (800370c <vfd_set_symbols+0xa8>)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003692:	4619      	mov	r1, r3
 8003694:	4a1e      	ldr	r2, [pc, #120]	; (8003710 <vfd_set_symbols+0xac>)
 8003696:	460b      	mov	r3, r1
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	440b      	add	r3, r1
 800369c:	441a      	add	r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	4413      	add	r3, r2
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	b25a      	sxtb	r2, r3
 80036a6:	4919      	ldr	r1, [pc, #100]	; (800370c <vfd_set_symbols+0xa8>)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	440b      	add	r3, r1
 80036ae:	785b      	ldrb	r3, [r3, #1]
 80036b0:	4619      	mov	r1, r3
 80036b2:	2301      	movs	r3, #1
 80036b4:	fa03 f101 	lsl.w	r1, r3, r1
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	fa41 f303 	asr.w	r3, r1, r3
 80036c0:	b25b      	sxtb	r3, r3
 80036c2:	4313      	orrs	r3, r2
 80036c4:	b258      	sxtb	r0, r3
 80036c6:	4a11      	ldr	r2, [pc, #68]	; (800370c <vfd_set_symbols+0xa8>)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80036ce:	4619      	mov	r1, r3
 80036d0:	b2c0      	uxtb	r0, r0
 80036d2:	4a0f      	ldr	r2, [pc, #60]	; (8003710 <vfd_set_symbols+0xac>)
 80036d4:	460b      	mov	r3, r1
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	440b      	add	r3, r1
 80036da:	441a      	add	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4413      	add	r3, r2
 80036e0:	4602      	mov	r2, r0
 80036e2:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	3301      	adds	r3, #1
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	ddcc      	ble.n	800368a <vfd_set_symbols+0x26>
	for (int i = 0; i < _VFD_SIZE_SYMBOLS; i++)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3301      	adds	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	2319      	movs	r3, #25
 80036f8:	461a      	mov	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4293      	cmp	r3, r2
 80036fe:	dbb8      	blt.n	8003672 <vfd_set_symbols+0xe>
		}
	}
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	0800ce1c 	.word	0x0800ce1c
 8003710:	2000061c 	.word	0x2000061c

08003714 <vfd_clr_symbols>:

/**
 * put symbols mask in buffer
 */
void vfd_clr_symbols(uint32_t symbols)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < _VFD_SIZE_SYMBOLS; i++)
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	e043      	b.n	80037aa <vfd_clr_symbols+0x96>
	{
		if (symbols & (1<<i))
 8003722:	2201      	movs	r2, #1
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	461a      	mov	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d037      	beq.n	80037a4 <vfd_clr_symbols+0x90>
		{
			// reset symbol
			for (int b = 0; b < 3; b++)
 8003734:	2300      	movs	r3, #0
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	e031      	b.n	800379e <vfd_clr_symbols+0x8a>
			  vfd.arr2[_VFD_MAP_SYMBOLS[i][0]][b] &= ~(((1<<_VFD_MAP_SYMBOLS[i][1])>>(b<<3))&0xFF);
 800373a:	4a21      	ldr	r2, [pc, #132]	; (80037c0 <vfd_clr_symbols+0xac>)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003742:	4619      	mov	r1, r3
 8003744:	4a1f      	ldr	r2, [pc, #124]	; (80037c4 <vfd_clr_symbols+0xb0>)
 8003746:	460b      	mov	r3, r1
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	440b      	add	r3, r1
 800374c:	441a      	add	r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	4413      	add	r3, r2
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	b25a      	sxtb	r2, r3
 8003756:	491a      	ldr	r1, [pc, #104]	; (80037c0 <vfd_clr_symbols+0xac>)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	440b      	add	r3, r1
 800375e:	785b      	ldrb	r3, [r3, #1]
 8003760:	4619      	mov	r1, r3
 8003762:	2301      	movs	r3, #1
 8003764:	fa03 f101 	lsl.w	r1, r3, r1
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	fa41 f303 	asr.w	r3, r1, r3
 8003770:	b25b      	sxtb	r3, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	b25b      	sxtb	r3, r3
 8003776:	4013      	ands	r3, r2
 8003778:	b258      	sxtb	r0, r3
 800377a:	4a11      	ldr	r2, [pc, #68]	; (80037c0 <vfd_clr_symbols+0xac>)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003782:	4619      	mov	r1, r3
 8003784:	b2c0      	uxtb	r0, r0
 8003786:	4a0f      	ldr	r2, [pc, #60]	; (80037c4 <vfd_clr_symbols+0xb0>)
 8003788:	460b      	mov	r3, r1
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	440b      	add	r3, r1
 800378e:	441a      	add	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4413      	add	r3, r2
 8003794:	4602      	mov	r2, r0
 8003796:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	3301      	adds	r3, #1
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	ddca      	ble.n	800373a <vfd_clr_symbols+0x26>
	for (int i = 0; i < _VFD_SIZE_SYMBOLS; i++)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	3301      	adds	r3, #1
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	2319      	movs	r3, #25
 80037ac:	461a      	mov	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4293      	cmp	r3, r2
 80037b2:	dbb6      	blt.n	8003722 <vfd_clr_symbols+0xe>
		}
	}
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	0800ce1c 	.word	0x0800ce1c
 80037c4:	2000061c 	.word	0x2000061c

080037c8 <vfd_clear_buf>:

/**
 * clear buffer
 */
void vfd_clear_buf(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 80037ce:	2300      	movs	r3, #0
 80037d0:	607b      	str	r3, [r7, #4]
 80037d2:	e007      	b.n	80037e4 <vfd_clear_buf+0x1c>
		  vfd.arr1[a] = 0;
 80037d4:	4a08      	ldr	r2, [pc, #32]	; (80037f8 <vfd_clear_buf+0x30>)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4413      	add	r3, r2
 80037da:	2200      	movs	r2, #0
 80037dc:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3301      	adds	r3, #1
 80037e2:	607b      	str	r3, [r7, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	d9f4      	bls.n	80037d4 <vfd_clear_buf+0xc>
}
 80037ea:	bf00      	nop
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	2000061c 	.word	0x2000061c

080037fc <vfd_update>:
}

/**
 * update data on VFD display
 */
void vfd_update(void) {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
	uint8_t data;

	vfd_spi_cs(VFD_CS_LOW);
 8003802:	2000      	movs	r0, #0
 8003804:	f7fc fe02 	bl	800040c <vfd_spi_cs>
	data = VFD_COM_DATA_SETTING|VFD_DS_WRITE_DISP; // command 2, write display
 8003808:	2340      	movs	r3, #64	; 0x40
 800380a:	71fb      	strb	r3, [r7, #7]
	vfd_spi_tx(&data, 1);
 800380c:	1dfb      	adds	r3, r7, #7
 800380e:	2101      	movs	r1, #1
 8003810:	4618      	mov	r0, r3
 8003812:	f7fc fe0d 	bl	8000430 <vfd_spi_tx>
	vfd_spi_cs(VFD_CS_HIGH);
 8003816:	2001      	movs	r0, #1
 8003818:	f7fc fdf8 	bl	800040c <vfd_spi_cs>

	vfd_spi_cs(VFD_CS_LOW);
 800381c:	2000      	movs	r0, #0
 800381e:	f7fc fdf5 	bl	800040c <vfd_spi_cs>
	data = VFD_COM_ADDRESS_SETTING; // command 3, set address to 0
 8003822:	23c0      	movs	r3, #192	; 0xc0
 8003824:	71fb      	strb	r3, [r7, #7]
	vfd_spi_tx(&data, 1);
 8003826:	1dfb      	adds	r3, r7, #7
 8003828:	2101      	movs	r1, #1
 800382a:	4618      	mov	r0, r3
 800382c:	f7fc fe00 	bl	8000430 <vfd_spi_tx>
	vfd_spi_tx(vfd.arr1, sizeof(vfd.arr1)); // transmit data
 8003830:	2121      	movs	r1, #33	; 0x21
 8003832:	4805      	ldr	r0, [pc, #20]	; (8003848 <vfd_update+0x4c>)
 8003834:	f7fc fdfc 	bl	8000430 <vfd_spi_tx>
	vfd_spi_cs(VFD_CS_HIGH);
 8003838:	2001      	movs	r0, #1
 800383a:	f7fc fde7 	bl	800040c <vfd_spi_cs>
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	2000061c 	.word	0x2000061c

0800384c <vfd_leds>:

/**
 * enable disable leds mask (4 leds available)
 */
void vfd_leds(uint8_t leds)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	71fb      	strb	r3, [r7, #7]
	uint8_t data = VFD_COM_DATA_SETTING|VFD_DS_WRITE_LED; // command 2, write to LED port
 8003856:	2341      	movs	r3, #65	; 0x41
 8003858:	73fb      	strb	r3, [r7, #15]
	vfd_spi_cs(VFD_CS_LOW);
 800385a:	2000      	movs	r0, #0
 800385c:	f7fc fdd6 	bl	800040c <vfd_spi_cs>
	vfd_spi_tx(&data, 1);
 8003860:	f107 030f 	add.w	r3, r7, #15
 8003864:	2101      	movs	r1, #1
 8003866:	4618      	mov	r0, r3
 8003868:	f7fc fde2 	bl	8000430 <vfd_spi_tx>
	data = (~leds)&0b1111;
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	43db      	mvns	r3, r3
 8003870:	b2db      	uxtb	r3, r3
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	b2db      	uxtb	r3, r3
 8003878:	73fb      	strb	r3, [r7, #15]
	vfd_spi_tx(&data, 1);
 800387a:	f107 030f 	add.w	r3, r7, #15
 800387e:	2101      	movs	r1, #1
 8003880:	4618      	mov	r0, r3
 8003882:	f7fc fdd5 	bl	8000430 <vfd_spi_tx>
	vfd_spi_cs(VFD_CS_HIGH);
 8003886:	2001      	movs	r0, #1
 8003888:	f7fc fdc0 	bl	800040c <vfd_spi_cs>
}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <vfd_init>:

/**
 * sets correct grid & segments count
 */
void vfd_init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
	uint8_t data;

	vfd_spi_cs(VFD_CS_LOW);
 800389a:	2000      	movs	r0, #0
 800389c:	f7fc fdb6 	bl	800040c <vfd_spi_cs>
	data = VFD_COM_DISPLAY_MODE_SETTING|VFD_DMS_11dig_17seg; // command 2, write display
 80038a0:	2307      	movs	r3, #7
 80038a2:	71fb      	strb	r3, [r7, #7]
	vfd_spi_tx(&data, 1);
 80038a4:	1dfb      	adds	r3, r7, #7
 80038a6:	2101      	movs	r1, #1
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fc fdc1 	bl	8000430 <vfd_spi_tx>
	vfd_spi_cs(VFD_CS_HIGH);
 80038ae:	2001      	movs	r0, #1
 80038b0:	f7fc fdac 	bl	800040c <vfd_spi_cs>

}
 80038b4:	bf00      	nop
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <vfd_control>:

/**
 * enable/disable display and set dimming (0..7)
 */
void vfd_control(bool enable, uint8_t dimm)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	460a      	mov	r2, r1
 80038c6:	71fb      	strb	r3, [r7, #7]
 80038c8:	4613      	mov	r3, r2
 80038ca:	71bb      	strb	r3, [r7, #6]
	uint8_t data;

	vfd_spi_cs(VFD_CS_LOW);
 80038cc:	2000      	movs	r0, #0
 80038ce:	f7fc fd9d 	bl	800040c <vfd_spi_cs>
	data = VFD_COM_DISPLAY_CONTROL|(enable?VFD_DC_DISP_ON:0)|(dimm&0b111); // command 4
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <vfd_control+0x22>
 80038d8:	f06f 0277 	mvn.w	r2, #119	; 0x77
 80038dc:	e001      	b.n	80038e2 <vfd_control+0x26>
 80038de:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80038e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	b25b      	sxtb	r3, r3
 80038ec:	4313      	orrs	r3, r2
 80038ee:	b25b      	sxtb	r3, r3
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	73fb      	strb	r3, [r7, #15]
	vfd_spi_tx(&data, 1);
 80038f4:	f107 030f 	add.w	r3, r7, #15
 80038f8:	2101      	movs	r1, #1
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fc fd98 	bl	8000430 <vfd_spi_tx>
	vfd_spi_cs(VFD_CS_HIGH);
 8003900:	2001      	movs	r0, #1
 8003902:	f7fc fd83 	bl	800040c <vfd_spi_cs>
}
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003910:	480c      	ldr	r0, [pc, #48]	; (8003944 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003912:	490d      	ldr	r1, [pc, #52]	; (8003948 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003914:	4a0d      	ldr	r2, [pc, #52]	; (800394c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003918:	e002      	b.n	8003920 <LoopCopyDataInit>

0800391a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800391a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800391c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800391e:	3304      	adds	r3, #4

08003920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003924:	d3f9      	bcc.n	800391a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003926:	4a0a      	ldr	r2, [pc, #40]	; (8003950 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003928:	4c0a      	ldr	r4, [pc, #40]	; (8003954 <LoopFillZerobss+0x22>)
  movs r3, #0
 800392a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800392c:	e001      	b.n	8003932 <LoopFillZerobss>

0800392e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800392e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003930:	3204      	adds	r2, #4

08003932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003934:	d3fb      	bcc.n	800392e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003936:	f7ff fd9b 	bl	8003470 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800393a:	f008 fe59 	bl	800c5f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800393e:	f7fd fa8b 	bl	8000e58 <main>
  bx lr
 8003942:	4770      	bx	lr
  ldr r0, =_sdata
 8003944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003948:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 800394c:	0800ce58 	.word	0x0800ce58
  ldr r2, =_sbss
 8003950:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8003954:	20001710 	.word	0x20001710

08003958 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003958:	e7fe      	b.n	8003958 <ADC1_2_IRQHandler>
	...

0800395c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003960:	4b08      	ldr	r3, [pc, #32]	; (8003984 <HAL_Init+0x28>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a07      	ldr	r2, [pc, #28]	; (8003984 <HAL_Init+0x28>)
 8003966:	f043 0310 	orr.w	r3, r3, #16
 800396a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800396c:	2003      	movs	r0, #3
 800396e:	f000 f947 	bl	8003c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003972:	200f      	movs	r0, #15
 8003974:	f000 f808 	bl	8003988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003978:	f7ff fc6e 	bl	8003258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40022000 	.word	0x40022000

08003988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003990:	4b12      	ldr	r3, [pc, #72]	; (80039dc <HAL_InitTick+0x54>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <HAL_InitTick+0x58>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	4619      	mov	r1, r3
 800399a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800399e:	fbb3 f3f1 	udiv	r3, r3, r1
 80039a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 f95f 	bl	8003c6a <HAL_SYSTICK_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e00e      	b.n	80039d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b0f      	cmp	r3, #15
 80039ba:	d80a      	bhi.n	80039d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039bc:	2200      	movs	r2, #0
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	f04f 30ff 	mov.w	r0, #4294967295
 80039c4:	f000 f927 	bl	8003c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039c8:	4a06      	ldr	r2, [pc, #24]	; (80039e4 <HAL_InitTick+0x5c>)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	e000      	b.n	80039d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20000014 	.word	0x20000014
 80039e0:	2000001c 	.word	0x2000001c
 80039e4:	20000018 	.word	0x20000018

080039e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039ec:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <HAL_IncTick+0x1c>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
 80039f2:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <HAL_IncTick+0x20>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4413      	add	r3, r2
 80039f8:	4a03      	ldr	r2, [pc, #12]	; (8003a08 <HAL_IncTick+0x20>)
 80039fa:	6013      	str	r3, [r2, #0]
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr
 8003a04:	2000001c 	.word	0x2000001c
 8003a08:	2000078c 	.word	0x2000078c

08003a0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a10:	4b02      	ldr	r3, [pc, #8]	; (8003a1c <HAL_GetTick+0x10>)
 8003a12:	681b      	ldr	r3, [r3, #0]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr
 8003a1c:	2000078c 	.word	0x2000078c

08003a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a28:	f7ff fff0 	bl	8003a0c <HAL_GetTick>
 8003a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d005      	beq.n	8003a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a3a:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <HAL_Delay+0x44>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4413      	add	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a46:	bf00      	nop
 8003a48:	f7ff ffe0 	bl	8003a0c <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d8f7      	bhi.n	8003a48 <HAL_Delay+0x28>
  {
  }
}
 8003a58:	bf00      	nop
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	2000001c 	.word	0x2000001c

08003a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a78:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <__NVIC_SetPriorityGrouping+0x44>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a84:	4013      	ands	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a9a:	4a04      	ldr	r2, [pc, #16]	; (8003aac <__NVIC_SetPriorityGrouping+0x44>)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	60d3      	str	r3, [r2, #12]
}
 8003aa0:	bf00      	nop
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	e000ed00 	.word	0xe000ed00

08003ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ab4:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	0a1b      	lsrs	r3, r3, #8
 8003aba:	f003 0307 	and.w	r3, r3, #7
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	e000ed00 	.word	0xe000ed00

08003acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	db0b      	blt.n	8003af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	f003 021f 	and.w	r2, r3, #31
 8003ae4:	4906      	ldr	r1, [pc, #24]	; (8003b00 <__NVIC_EnableIRQ+0x34>)
 8003ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	2001      	movs	r0, #1
 8003aee:	fa00 f202 	lsl.w	r2, r0, r2
 8003af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr
 8003b00:	e000e100 	.word	0xe000e100

08003b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	6039      	str	r1, [r7, #0]
 8003b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	db0a      	blt.n	8003b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	490c      	ldr	r1, [pc, #48]	; (8003b50 <__NVIC_SetPriority+0x4c>)
 8003b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b22:	0112      	lsls	r2, r2, #4
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	440b      	add	r3, r1
 8003b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b2c:	e00a      	b.n	8003b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	4908      	ldr	r1, [pc, #32]	; (8003b54 <__NVIC_SetPriority+0x50>)
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	3b04      	subs	r3, #4
 8003b3c:	0112      	lsls	r2, r2, #4
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	440b      	add	r3, r1
 8003b42:	761a      	strb	r2, [r3, #24]
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	e000e100 	.word	0xe000e100
 8003b54:	e000ed00 	.word	0xe000ed00

08003b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b089      	sub	sp, #36	; 0x24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f1c3 0307 	rsb	r3, r3, #7
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	bf28      	it	cs
 8003b76:	2304      	movcs	r3, #4
 8003b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	2b06      	cmp	r3, #6
 8003b80:	d902      	bls.n	8003b88 <NVIC_EncodePriority+0x30>
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	3b03      	subs	r3, #3
 8003b86:	e000      	b.n	8003b8a <NVIC_EncodePriority+0x32>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43da      	mvns	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	401a      	ands	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8003baa:	43d9      	mvns	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bb0:	4313      	orrs	r3, r2
         );
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3724      	adds	r7, #36	; 0x24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr

08003bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bcc:	d301      	bcc.n	8003bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e00f      	b.n	8003bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	; (8003bfc <SysTick_Config+0x40>)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bda:	210f      	movs	r1, #15
 8003bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003be0:	f7ff ff90 	bl	8003b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003be4:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <SysTick_Config+0x40>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bea:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <SysTick_Config+0x40>)
 8003bec:	2207      	movs	r2, #7
 8003bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	e000e010 	.word	0xe000e010

08003c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff ff2d 	bl	8003a68 <__NVIC_SetPriorityGrouping>
}
 8003c0e:	bf00      	nop
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b086      	sub	sp, #24
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	607a      	str	r2, [r7, #4]
 8003c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c28:	f7ff ff42 	bl	8003ab0 <__NVIC_GetPriorityGrouping>
 8003c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68b9      	ldr	r1, [r7, #8]
 8003c32:	6978      	ldr	r0, [r7, #20]
 8003c34:	f7ff ff90 	bl	8003b58 <NVIC_EncodePriority>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff ff5f 	bl	8003b04 <__NVIC_SetPriority>
}
 8003c46:	bf00      	nop
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b082      	sub	sp, #8
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	4603      	mov	r3, r0
 8003c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff ff35 	bl	8003acc <__NVIC_EnableIRQ>
}
 8003c62:	bf00      	nop
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b082      	sub	sp, #8
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff ffa2 	bl	8003bbc <SysTick_Config>
 8003c78:	4603      	mov	r3, r0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b08b      	sub	sp, #44	; 0x2c
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c92:	2300      	movs	r3, #0
 8003c94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c96:	e169      	b.n	8003f6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c98:	2201      	movs	r2, #1
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69fa      	ldr	r2, [r7, #28]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	f040 8158 	bne.w	8003f66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	4a9a      	ldr	r2, [pc, #616]	; (8003f24 <HAL_GPIO_Init+0x2a0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d05e      	beq.n	8003d7e <HAL_GPIO_Init+0xfa>
 8003cc0:	4a98      	ldr	r2, [pc, #608]	; (8003f24 <HAL_GPIO_Init+0x2a0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d875      	bhi.n	8003db2 <HAL_GPIO_Init+0x12e>
 8003cc6:	4a98      	ldr	r2, [pc, #608]	; (8003f28 <HAL_GPIO_Init+0x2a4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d058      	beq.n	8003d7e <HAL_GPIO_Init+0xfa>
 8003ccc:	4a96      	ldr	r2, [pc, #600]	; (8003f28 <HAL_GPIO_Init+0x2a4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d86f      	bhi.n	8003db2 <HAL_GPIO_Init+0x12e>
 8003cd2:	4a96      	ldr	r2, [pc, #600]	; (8003f2c <HAL_GPIO_Init+0x2a8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d052      	beq.n	8003d7e <HAL_GPIO_Init+0xfa>
 8003cd8:	4a94      	ldr	r2, [pc, #592]	; (8003f2c <HAL_GPIO_Init+0x2a8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d869      	bhi.n	8003db2 <HAL_GPIO_Init+0x12e>
 8003cde:	4a94      	ldr	r2, [pc, #592]	; (8003f30 <HAL_GPIO_Init+0x2ac>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d04c      	beq.n	8003d7e <HAL_GPIO_Init+0xfa>
 8003ce4:	4a92      	ldr	r2, [pc, #584]	; (8003f30 <HAL_GPIO_Init+0x2ac>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d863      	bhi.n	8003db2 <HAL_GPIO_Init+0x12e>
 8003cea:	4a92      	ldr	r2, [pc, #584]	; (8003f34 <HAL_GPIO_Init+0x2b0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d046      	beq.n	8003d7e <HAL_GPIO_Init+0xfa>
 8003cf0:	4a90      	ldr	r2, [pc, #576]	; (8003f34 <HAL_GPIO_Init+0x2b0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d85d      	bhi.n	8003db2 <HAL_GPIO_Init+0x12e>
 8003cf6:	2b12      	cmp	r3, #18
 8003cf8:	d82a      	bhi.n	8003d50 <HAL_GPIO_Init+0xcc>
 8003cfa:	2b12      	cmp	r3, #18
 8003cfc:	d859      	bhi.n	8003db2 <HAL_GPIO_Init+0x12e>
 8003cfe:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <HAL_GPIO_Init+0x80>)
 8003d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d04:	08003d7f 	.word	0x08003d7f
 8003d08:	08003d59 	.word	0x08003d59
 8003d0c:	08003d6b 	.word	0x08003d6b
 8003d10:	08003dad 	.word	0x08003dad
 8003d14:	08003db3 	.word	0x08003db3
 8003d18:	08003db3 	.word	0x08003db3
 8003d1c:	08003db3 	.word	0x08003db3
 8003d20:	08003db3 	.word	0x08003db3
 8003d24:	08003db3 	.word	0x08003db3
 8003d28:	08003db3 	.word	0x08003db3
 8003d2c:	08003db3 	.word	0x08003db3
 8003d30:	08003db3 	.word	0x08003db3
 8003d34:	08003db3 	.word	0x08003db3
 8003d38:	08003db3 	.word	0x08003db3
 8003d3c:	08003db3 	.word	0x08003db3
 8003d40:	08003db3 	.word	0x08003db3
 8003d44:	08003db3 	.word	0x08003db3
 8003d48:	08003d61 	.word	0x08003d61
 8003d4c:	08003d75 	.word	0x08003d75
 8003d50:	4a79      	ldr	r2, [pc, #484]	; (8003f38 <HAL_GPIO_Init+0x2b4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d013      	beq.n	8003d7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d56:	e02c      	b.n	8003db2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	623b      	str	r3, [r7, #32]
          break;
 8003d5e:	e029      	b.n	8003db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	3304      	adds	r3, #4
 8003d66:	623b      	str	r3, [r7, #32]
          break;
 8003d68:	e024      	b.n	8003db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	3308      	adds	r3, #8
 8003d70:	623b      	str	r3, [r7, #32]
          break;
 8003d72:	e01f      	b.n	8003db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	623b      	str	r3, [r7, #32]
          break;
 8003d7c:	e01a      	b.n	8003db4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d102      	bne.n	8003d8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d86:	2304      	movs	r3, #4
 8003d88:	623b      	str	r3, [r7, #32]
          break;
 8003d8a:	e013      	b.n	8003db4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d105      	bne.n	8003da0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d94:	2308      	movs	r3, #8
 8003d96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	611a      	str	r2, [r3, #16]
          break;
 8003d9e:	e009      	b.n	8003db4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003da0:	2308      	movs	r3, #8
 8003da2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	615a      	str	r2, [r3, #20]
          break;
 8003daa:	e003      	b.n	8003db4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003dac:	2300      	movs	r3, #0
 8003dae:	623b      	str	r3, [r7, #32]
          break;
 8003db0:	e000      	b.n	8003db4 <HAL_GPIO_Init+0x130>
          break;
 8003db2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	2bff      	cmp	r3, #255	; 0xff
 8003db8:	d801      	bhi.n	8003dbe <HAL_GPIO_Init+0x13a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	e001      	b.n	8003dc2 <HAL_GPIO_Init+0x13e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2bff      	cmp	r3, #255	; 0xff
 8003dc8:	d802      	bhi.n	8003dd0 <HAL_GPIO_Init+0x14c>
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	e002      	b.n	8003dd6 <HAL_GPIO_Init+0x152>
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	3b08      	subs	r3, #8
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	210f      	movs	r1, #15
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	fa01 f303 	lsl.w	r3, r1, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	401a      	ands	r2, r3
 8003de8:	6a39      	ldr	r1, [r7, #32]
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	fa01 f303 	lsl.w	r3, r1, r3
 8003df0:	431a      	orrs	r2, r3
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 80b1 	beq.w	8003f66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e04:	4b4d      	ldr	r3, [pc, #308]	; (8003f3c <HAL_GPIO_Init+0x2b8>)
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	4a4c      	ldr	r2, [pc, #304]	; (8003f3c <HAL_GPIO_Init+0x2b8>)
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	6193      	str	r3, [r2, #24]
 8003e10:	4b4a      	ldr	r3, [pc, #296]	; (8003f3c <HAL_GPIO_Init+0x2b8>)
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e1c:	4a48      	ldr	r2, [pc, #288]	; (8003f40 <HAL_GPIO_Init+0x2bc>)
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	089b      	lsrs	r3, r3, #2
 8003e22:	3302      	adds	r3, #2
 8003e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	f003 0303 	and.w	r3, r3, #3
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	220f      	movs	r2, #15
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a40      	ldr	r2, [pc, #256]	; (8003f44 <HAL_GPIO_Init+0x2c0>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d013      	beq.n	8003e70 <HAL_GPIO_Init+0x1ec>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a3f      	ldr	r2, [pc, #252]	; (8003f48 <HAL_GPIO_Init+0x2c4>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00d      	beq.n	8003e6c <HAL_GPIO_Init+0x1e8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a3e      	ldr	r2, [pc, #248]	; (8003f4c <HAL_GPIO_Init+0x2c8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d007      	beq.n	8003e68 <HAL_GPIO_Init+0x1e4>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a3d      	ldr	r2, [pc, #244]	; (8003f50 <HAL_GPIO_Init+0x2cc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d101      	bne.n	8003e64 <HAL_GPIO_Init+0x1e0>
 8003e60:	2303      	movs	r3, #3
 8003e62:	e006      	b.n	8003e72 <HAL_GPIO_Init+0x1ee>
 8003e64:	2304      	movs	r3, #4
 8003e66:	e004      	b.n	8003e72 <HAL_GPIO_Init+0x1ee>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e002      	b.n	8003e72 <HAL_GPIO_Init+0x1ee>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e000      	b.n	8003e72 <HAL_GPIO_Init+0x1ee>
 8003e70:	2300      	movs	r3, #0
 8003e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e74:	f002 0203 	and.w	r2, r2, #3
 8003e78:	0092      	lsls	r2, r2, #2
 8003e7a:	4093      	lsls	r3, r2
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e82:	492f      	ldr	r1, [pc, #188]	; (8003f40 <HAL_GPIO_Init+0x2bc>)
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	089b      	lsrs	r3, r3, #2
 8003e88:	3302      	adds	r3, #2
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d006      	beq.n	8003eaa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e9c:	4b2d      	ldr	r3, [pc, #180]	; (8003f54 <HAL_GPIO_Init+0x2d0>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	492c      	ldr	r1, [pc, #176]	; (8003f54 <HAL_GPIO_Init+0x2d0>)
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	600b      	str	r3, [r1, #0]
 8003ea8:	e006      	b.n	8003eb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003eaa:	4b2a      	ldr	r3, [pc, #168]	; (8003f54 <HAL_GPIO_Init+0x2d0>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	4928      	ldr	r1, [pc, #160]	; (8003f54 <HAL_GPIO_Init+0x2d0>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d006      	beq.n	8003ed2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ec4:	4b23      	ldr	r3, [pc, #140]	; (8003f54 <HAL_GPIO_Init+0x2d0>)
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	4922      	ldr	r1, [pc, #136]	; (8003f54 <HAL_GPIO_Init+0x2d0>)
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	604b      	str	r3, [r1, #4]
 8003ed0:	e006      	b.n	8003ee0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ed2:	4b20      	ldr	r3, [pc, #128]	; (8003f54 <HAL_GPIO_Init+0x2d0>)
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	491e      	ldr	r1, [pc, #120]	; (8003f54 <HAL_GPIO_Init+0x2d0>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d006      	beq.n	8003efa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003eec:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <HAL_GPIO_Init+0x2d0>)
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	4918      	ldr	r1, [pc, #96]	; (8003f54 <HAL_GPIO_Init+0x2d0>)
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	608b      	str	r3, [r1, #8]
 8003ef8:	e006      	b.n	8003f08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003efa:	4b16      	ldr	r3, [pc, #88]	; (8003f54 <HAL_GPIO_Init+0x2d0>)
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	43db      	mvns	r3, r3
 8003f02:	4914      	ldr	r1, [pc, #80]	; (8003f54 <HAL_GPIO_Init+0x2d0>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d021      	beq.n	8003f58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f14:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <HAL_GPIO_Init+0x2d0>)
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	490e      	ldr	r1, [pc, #56]	; (8003f54 <HAL_GPIO_Init+0x2d0>)
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60cb      	str	r3, [r1, #12]
 8003f20:	e021      	b.n	8003f66 <HAL_GPIO_Init+0x2e2>
 8003f22:	bf00      	nop
 8003f24:	10320000 	.word	0x10320000
 8003f28:	10310000 	.word	0x10310000
 8003f2c:	10220000 	.word	0x10220000
 8003f30:	10210000 	.word	0x10210000
 8003f34:	10120000 	.word	0x10120000
 8003f38:	10110000 	.word	0x10110000
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40010800 	.word	0x40010800
 8003f48:	40010c00 	.word	0x40010c00
 8003f4c:	40011000 	.word	0x40011000
 8003f50:	40011400 	.word	0x40011400
 8003f54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_GPIO_Init+0x304>)
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	4909      	ldr	r1, [pc, #36]	; (8003f88 <HAL_GPIO_Init+0x304>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	3301      	adds	r3, #1
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	fa22 f303 	lsr.w	r3, r2, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f47f ae8e 	bne.w	8003c98 <HAL_GPIO_Init+0x14>
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	bf00      	nop
 8003f80:	372c      	adds	r7, #44	; 0x2c
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr
 8003f88:	40010400 	.word	0x40010400

08003f8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	887b      	ldrh	r3, [r7, #2]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	73fb      	strb	r3, [r7, #15]
 8003fa8:	e001      	b.n	8003fae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003faa:	2300      	movs	r3, #0
 8003fac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc80      	pop	{r7}
 8003fb8:	4770      	bx	lr

08003fba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	807b      	strh	r3, [r7, #2]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fca:	787b      	ldrb	r3, [r7, #1]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fd0:	887a      	ldrh	r2, [r7, #2]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003fd6:	e003      	b.n	8003fe0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fd8:	887b      	ldrh	r3, [r7, #2]
 8003fda:	041a      	lsls	r2, r3, #16
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	611a      	str	r2, [r3, #16]
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bc80      	pop	{r7}
 8003fe8:	4770      	bx	lr

08003fea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b085      	sub	sp, #20
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ffc:	887a      	ldrh	r2, [r7, #2]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4013      	ands	r3, r2
 8004002:	041a      	lsls	r2, r3, #16
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	43d9      	mvns	r1, r3
 8004008:	887b      	ldrh	r3, [r7, #2]
 800400a:	400b      	ands	r3, r1
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	611a      	str	r2, [r3, #16]
}
 8004012:	bf00      	nop
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e12b      	b.n	8004286 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff f93a 	bl	80032bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2224      	movs	r2, #36	; 0x24
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0201 	bic.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800406e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800407e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004080:	f003 f868 	bl	8007154 <HAL_RCC_GetPCLK1Freq>
 8004084:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	4a81      	ldr	r2, [pc, #516]	; (8004290 <HAL_I2C_Init+0x274>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d807      	bhi.n	80040a0 <HAL_I2C_Init+0x84>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4a80      	ldr	r2, [pc, #512]	; (8004294 <HAL_I2C_Init+0x278>)
 8004094:	4293      	cmp	r3, r2
 8004096:	bf94      	ite	ls
 8004098:	2301      	movls	r3, #1
 800409a:	2300      	movhi	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	e006      	b.n	80040ae <HAL_I2C_Init+0x92>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4a7d      	ldr	r2, [pc, #500]	; (8004298 <HAL_I2C_Init+0x27c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	bf94      	ite	ls
 80040a8:	2301      	movls	r3, #1
 80040aa:	2300      	movhi	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e0e7      	b.n	8004286 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4a78      	ldr	r2, [pc, #480]	; (800429c <HAL_I2C_Init+0x280>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	0c9b      	lsrs	r3, r3, #18
 80040c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	4a6a      	ldr	r2, [pc, #424]	; (8004290 <HAL_I2C_Init+0x274>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d802      	bhi.n	80040f0 <HAL_I2C_Init+0xd4>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	3301      	adds	r3, #1
 80040ee:	e009      	b.n	8004104 <HAL_I2C_Init+0xe8>
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040f6:	fb02 f303 	mul.w	r3, r2, r3
 80040fa:	4a69      	ldr	r2, [pc, #420]	; (80042a0 <HAL_I2C_Init+0x284>)
 80040fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004100:	099b      	lsrs	r3, r3, #6
 8004102:	3301      	adds	r3, #1
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	430b      	orrs	r3, r1
 800410a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004116:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	495c      	ldr	r1, [pc, #368]	; (8004290 <HAL_I2C_Init+0x274>)
 8004120:	428b      	cmp	r3, r1
 8004122:	d819      	bhi.n	8004158 <HAL_I2C_Init+0x13c>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	1e59      	subs	r1, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004132:	1c59      	adds	r1, r3, #1
 8004134:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004138:	400b      	ands	r3, r1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <HAL_I2C_Init+0x138>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	1e59      	subs	r1, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	fbb1 f3f3 	udiv	r3, r1, r3
 800414c:	3301      	adds	r3, #1
 800414e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004152:	e051      	b.n	80041f8 <HAL_I2C_Init+0x1dc>
 8004154:	2304      	movs	r3, #4
 8004156:	e04f      	b.n	80041f8 <HAL_I2C_Init+0x1dc>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d111      	bne.n	8004184 <HAL_I2C_Init+0x168>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	1e58      	subs	r0, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6859      	ldr	r1, [r3, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	440b      	add	r3, r1
 800416e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004172:	3301      	adds	r3, #1
 8004174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004178:	2b00      	cmp	r3, #0
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	e012      	b.n	80041aa <HAL_I2C_Init+0x18e>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	1e58      	subs	r0, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6859      	ldr	r1, [r3, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	0099      	lsls	r1, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	fbb0 f3f3 	udiv	r3, r0, r3
 800419a:	3301      	adds	r3, #1
 800419c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bf0c      	ite	eq
 80041a4:	2301      	moveq	r3, #1
 80041a6:	2300      	movne	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_I2C_Init+0x196>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e022      	b.n	80041f8 <HAL_I2C_Init+0x1dc>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10e      	bne.n	80041d8 <HAL_I2C_Init+0x1bc>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	1e58      	subs	r0, r3, #1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6859      	ldr	r1, [r3, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	440b      	add	r3, r1
 80041c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80041cc:	3301      	adds	r3, #1
 80041ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d6:	e00f      	b.n	80041f8 <HAL_I2C_Init+0x1dc>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	1e58      	subs	r0, r3, #1
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6859      	ldr	r1, [r3, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	0099      	lsls	r1, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ee:	3301      	adds	r3, #1
 80041f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	6809      	ldr	r1, [r1, #0]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69da      	ldr	r2, [r3, #28]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004226:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6911      	ldr	r1, [r2, #16]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	68d2      	ldr	r2, [r2, #12]
 8004232:	4311      	orrs	r1, r2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	430b      	orrs	r3, r1
 800423a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	000186a0 	.word	0x000186a0
 8004294:	001e847f 	.word	0x001e847f
 8004298:	003d08ff 	.word	0x003d08ff
 800429c:	431bde83 	.word	0x431bde83
 80042a0:	10624dd3 	.word	0x10624dd3

080042a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	4608      	mov	r0, r1
 80042ae:	4611      	mov	r1, r2
 80042b0:	461a      	mov	r2, r3
 80042b2:	4603      	mov	r3, r0
 80042b4:	817b      	strh	r3, [r7, #10]
 80042b6:	460b      	mov	r3, r1
 80042b8:	813b      	strh	r3, [r7, #8]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042be:	f7ff fba5 	bl	8003a0c <HAL_GetTick>
 80042c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	f040 80d9 	bne.w	8004484 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	2319      	movs	r3, #25
 80042d8:	2201      	movs	r2, #1
 80042da:	496d      	ldr	r1, [pc, #436]	; (8004490 <HAL_I2C_Mem_Write+0x1ec>)
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 fcc1 	bl	8004c64 <I2C_WaitOnFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80042e8:	2302      	movs	r3, #2
 80042ea:	e0cc      	b.n	8004486 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_I2C_Mem_Write+0x56>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e0c5      	b.n	8004486 <HAL_I2C_Mem_Write+0x1e2>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b01      	cmp	r3, #1
 800430e:	d007      	beq.n	8004320 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800432e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2221      	movs	r2, #33	; 0x21
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2240      	movs	r2, #64	; 0x40
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a3a      	ldr	r2, [r7, #32]
 800434a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004350:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4a4d      	ldr	r2, [pc, #308]	; (8004494 <HAL_I2C_Mem_Write+0x1f0>)
 8004360:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004362:	88f8      	ldrh	r0, [r7, #6]
 8004364:	893a      	ldrh	r2, [r7, #8]
 8004366:	8979      	ldrh	r1, [r7, #10]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	4603      	mov	r3, r0
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 faf8 	bl	8004968 <I2C_RequestMemoryWrite>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d052      	beq.n	8004424 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e081      	b.n	8004486 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fd42 	bl	8004e10 <I2C_WaitOnTXEFlagUntilTimeout>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00d      	beq.n	80043ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	2b04      	cmp	r3, #4
 8004398:	d107      	bne.n	80043aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e06b      	b.n	8004486 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	781a      	ldrb	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d11b      	bne.n	8004424 <HAL_I2C_Mem_Write+0x180>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d017      	beq.n	8004424 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	781a      	ldrb	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1aa      	bne.n	8004382 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 fd2e 	bl	8004e92 <I2C_WaitOnBTFFlagUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00d      	beq.n	8004458 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	2b04      	cmp	r3, #4
 8004442:	d107      	bne.n	8004454 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004452:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e016      	b.n	8004486 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	e000      	b.n	8004486 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004484:	2302      	movs	r3, #2
  }
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	00100002 	.word	0x00100002
 8004494:	ffff0000 	.word	0xffff0000

08004498 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08c      	sub	sp, #48	; 0x30
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	4608      	mov	r0, r1
 80044a2:	4611      	mov	r1, r2
 80044a4:	461a      	mov	r2, r3
 80044a6:	4603      	mov	r3, r0
 80044a8:	817b      	strh	r3, [r7, #10]
 80044aa:	460b      	mov	r3, r1
 80044ac:	813b      	strh	r3, [r7, #8]
 80044ae:	4613      	mov	r3, r2
 80044b0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044b6:	f7ff faa9 	bl	8003a0c <HAL_GetTick>
 80044ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b20      	cmp	r3, #32
 80044c6:	f040 8244 	bne.w	8004952 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	2319      	movs	r3, #25
 80044d0:	2201      	movs	r2, #1
 80044d2:	4982      	ldr	r1, [pc, #520]	; (80046dc <HAL_I2C_Mem_Read+0x244>)
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 fbc5 	bl	8004c64 <I2C_WaitOnFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80044e0:	2302      	movs	r3, #2
 80044e2:	e237      	b.n	8004954 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_I2C_Mem_Read+0x5a>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e230      	b.n	8004954 <HAL_I2C_Mem_Read+0x4bc>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b01      	cmp	r3, #1
 8004506:	d007      	beq.n	8004518 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0201 	orr.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004526:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2222      	movs	r2, #34	; 0x22
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2240      	movs	r2, #64	; 0x40
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004542:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004548:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4a62      	ldr	r2, [pc, #392]	; (80046e0 <HAL_I2C_Mem_Read+0x248>)
 8004558:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800455a:	88f8      	ldrh	r0, [r7, #6]
 800455c:	893a      	ldrh	r2, [r7, #8]
 800455e:	8979      	ldrh	r1, [r7, #10]
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	9301      	str	r3, [sp, #4]
 8004564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	4603      	mov	r3, r0
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 fa92 	bl	8004a94 <I2C_RequestMemoryRead>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e1ec      	b.n	8004954 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457e:	2b00      	cmp	r3, #0
 8004580:	d113      	bne.n	80045aa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004582:	2300      	movs	r3, #0
 8004584:	61fb      	str	r3, [r7, #28]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	61fb      	str	r3, [r7, #28]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	e1c0      	b.n	800492c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d11e      	bne.n	80045f0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045c2:	b672      	cpsid	i
}
 80045c4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c6:	2300      	movs	r3, #0
 80045c8:	61bb      	str	r3, [r7, #24]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80045ec:	b662      	cpsie	i
}
 80045ee:	e035      	b.n	800465c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d11e      	bne.n	8004636 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004606:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004608:	b672      	cpsid	i
}
 800460a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004630:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004632:	b662      	cpsie	i
}
 8004634:	e012      	b.n	800465c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004644:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004646:	2300      	movs	r3, #0
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	613b      	str	r3, [r7, #16]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800465c:	e166      	b.n	800492c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004662:	2b03      	cmp	r3, #3
 8004664:	f200 811f 	bhi.w	80048a6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466c:	2b01      	cmp	r3, #1
 800466e:	d123      	bne.n	80046b8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004672:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fc4d 	bl	8004f14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e167      	b.n	8004954 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046b6:	e139      	b.n	800492c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d152      	bne.n	8004766 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c6:	2200      	movs	r2, #0
 80046c8:	4906      	ldr	r1, [pc, #24]	; (80046e4 <HAL_I2C_Mem_Read+0x24c>)
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 faca 	bl	8004c64 <I2C_WaitOnFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d008      	beq.n	80046e8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e13c      	b.n	8004954 <HAL_I2C_Mem_Read+0x4bc>
 80046da:	bf00      	nop
 80046dc:	00100002 	.word	0x00100002
 80046e0:	ffff0000 	.word	0xffff0000
 80046e4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80046e8:	b672      	cpsid	i
}
 80046ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691a      	ldr	r2, [r3, #16]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004724:	b29b      	uxth	r3, r3
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800472e:	b662      	cpsie	i
}
 8004730:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	b2d2      	uxtb	r2, r2
 800473e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474e:	3b01      	subs	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475a:	b29b      	uxth	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004764:	e0e2      	b.n	800492c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476c:	2200      	movs	r2, #0
 800476e:	497b      	ldr	r1, [pc, #492]	; (800495c <HAL_I2C_Mem_Read+0x4c4>)
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 fa77 	bl	8004c64 <I2C_WaitOnFlagUntilTimeout>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0e9      	b.n	8004954 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800478e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004790:	b672      	cpsid	i
}
 8004792:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691a      	ldr	r2, [r3, #16]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047bc:	b29b      	uxth	r3, r3
 80047be:	3b01      	subs	r3, #1
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80047c6:	4b66      	ldr	r3, [pc, #408]	; (8004960 <HAL_I2C_Mem_Read+0x4c8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	08db      	lsrs	r3, r3, #3
 80047cc:	4a65      	ldr	r2, [pc, #404]	; (8004964 <HAL_I2C_Mem_Read+0x4cc>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	0a1a      	lsrs	r2, r3, #8
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	00da      	lsls	r2, r3, #3
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d118      	bne.n	800481e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f043 0220 	orr.w	r2, r3, #32
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800480e:	b662      	cpsie	i
}
 8004810:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e09a      	b.n	8004954 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b04      	cmp	r3, #4
 800482a:	d1d9      	bne.n	80047e0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004858:	3b01      	subs	r3, #1
 800485a:	b29a      	uxth	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800486e:	b662      	cpsie	i
}
 8004870:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048a4:	e042      	b.n	800492c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 fb32 	bl	8004f14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e04c      	b.n	8004954 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d118      	bne.n	800492c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004930:	2b00      	cmp	r3, #0
 8004932:	f47f ae94 	bne.w	800465e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	e000      	b.n	8004954 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004952:	2302      	movs	r3, #2
  }
}
 8004954:	4618      	mov	r0, r3
 8004956:	3728      	adds	r7, #40	; 0x28
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	00010004 	.word	0x00010004
 8004960:	20000014 	.word	0x20000014
 8004964:	14f8b589 	.word	0x14f8b589

08004968 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af02      	add	r7, sp, #8
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	4608      	mov	r0, r1
 8004972:	4611      	mov	r1, r2
 8004974:	461a      	mov	r2, r3
 8004976:	4603      	mov	r3, r0
 8004978:	817b      	strh	r3, [r7, #10]
 800497a:	460b      	mov	r3, r1
 800497c:	813b      	strh	r3, [r7, #8]
 800497e:	4613      	mov	r3, r2
 8004980:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004990:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	2200      	movs	r2, #0
 800499a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 f960 	bl	8004c64 <I2C_WaitOnFlagUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00d      	beq.n	80049c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b8:	d103      	bne.n	80049c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e05f      	b.n	8004a86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049c6:	897b      	ldrh	r3, [r7, #10]
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	461a      	mov	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	6a3a      	ldr	r2, [r7, #32]
 80049da:	492d      	ldr	r1, [pc, #180]	; (8004a90 <I2C_RequestMemoryWrite+0x128>)
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 f998 	bl	8004d12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e04c      	b.n	8004a86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a04:	6a39      	ldr	r1, [r7, #32]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 fa02 	bl	8004e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00d      	beq.n	8004a2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d107      	bne.n	8004a2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e02b      	b.n	8004a86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a2e:	88fb      	ldrh	r3, [r7, #6]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d105      	bne.n	8004a40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a34:	893b      	ldrh	r3, [r7, #8]
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	611a      	str	r2, [r3, #16]
 8004a3e:	e021      	b.n	8004a84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a40:	893b      	ldrh	r3, [r7, #8]
 8004a42:	0a1b      	lsrs	r3, r3, #8
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a50:	6a39      	ldr	r1, [r7, #32]
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 f9dc 	bl	8004e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00d      	beq.n	8004a7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d107      	bne.n	8004a76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e005      	b.n	8004a86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a7a:	893b      	ldrh	r3, [r7, #8]
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	00010002 	.word	0x00010002

08004a94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b088      	sub	sp, #32
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	4608      	mov	r0, r1
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	817b      	strh	r3, [r7, #10]
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	813b      	strh	r3, [r7, #8]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004abc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004acc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f8c2 	bl	8004c64 <I2C_WaitOnFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00d      	beq.n	8004b02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af4:	d103      	bne.n	8004afe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004afc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e0aa      	b.n	8004c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b02:	897b      	ldrh	r3, [r7, #10]
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	461a      	mov	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	6a3a      	ldr	r2, [r7, #32]
 8004b16:	4952      	ldr	r1, [pc, #328]	; (8004c60 <I2C_RequestMemoryRead+0x1cc>)
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f8fa 	bl	8004d12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e097      	b.n	8004c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b28:	2300      	movs	r3, #0
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b40:	6a39      	ldr	r1, [r7, #32]
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 f964 	bl	8004e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00d      	beq.n	8004b6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d107      	bne.n	8004b66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e076      	b.n	8004c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b6a:	88fb      	ldrh	r3, [r7, #6]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d105      	bne.n	8004b7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b70:	893b      	ldrh	r3, [r7, #8]
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	611a      	str	r2, [r3, #16]
 8004b7a:	e021      	b.n	8004bc0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b7c:	893b      	ldrh	r3, [r7, #8]
 8004b7e:	0a1b      	lsrs	r3, r3, #8
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8c:	6a39      	ldr	r1, [r7, #32]
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 f93e 	bl	8004e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00d      	beq.n	8004bb6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d107      	bne.n	8004bb2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e050      	b.n	8004c58 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bb6:	893b      	ldrh	r3, [r7, #8]
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc2:	6a39      	ldr	r1, [r7, #32]
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f923 	bl	8004e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00d      	beq.n	8004bec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d107      	bne.n	8004be8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e035      	b.n	8004c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bfa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f82b 	bl	8004c64 <I2C_WaitOnFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00d      	beq.n	8004c30 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c22:	d103      	bne.n	8004c2c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e013      	b.n	8004c58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c30:	897b      	ldrh	r3, [r7, #10]
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	f043 0301 	orr.w	r3, r3, #1
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	6a3a      	ldr	r2, [r7, #32]
 8004c44:	4906      	ldr	r1, [pc, #24]	; (8004c60 <I2C_RequestMemoryRead+0x1cc>)
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 f863 	bl	8004d12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	00010002 	.word	0x00010002

08004c64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	603b      	str	r3, [r7, #0]
 8004c70:	4613      	mov	r3, r2
 8004c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c74:	e025      	b.n	8004cc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7c:	d021      	beq.n	8004cc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7e:	f7fe fec5 	bl	8003a0c <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d302      	bcc.n	8004c94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d116      	bne.n	8004cc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	f043 0220 	orr.w	r2, r3, #32
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e023      	b.n	8004d0a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d10d      	bne.n	8004ce8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	43da      	mvns	r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	bf0c      	ite	eq
 8004cde:	2301      	moveq	r3, #1
 8004ce0:	2300      	movne	r3, #0
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	e00c      	b.n	8004d02 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	43da      	mvns	r2, r3
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	bf0c      	ite	eq
 8004cfa:	2301      	moveq	r3, #1
 8004cfc:	2300      	movne	r3, #0
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	461a      	mov	r2, r3
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d0b6      	beq.n	8004c76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b084      	sub	sp, #16
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	607a      	str	r2, [r7, #4]
 8004d1e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d20:	e051      	b.n	8004dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d30:	d123      	bne.n	8004d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d40:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d4a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f043 0204 	orr.w	r2, r3, #4
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e046      	b.n	8004e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d80:	d021      	beq.n	8004dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d82:	f7fe fe43 	bl	8003a0c <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d302      	bcc.n	8004d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d116      	bne.n	8004dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	f043 0220 	orr.w	r2, r3, #32
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e020      	b.n	8004e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	0c1b      	lsrs	r3, r3, #16
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d10c      	bne.n	8004dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	43da      	mvns	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	bf14      	ite	ne
 8004de2:	2301      	movne	r3, #1
 8004de4:	2300      	moveq	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	e00b      	b.n	8004e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	43da      	mvns	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4013      	ands	r3, r2
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf14      	ite	ne
 8004dfc:	2301      	movne	r3, #1
 8004dfe:	2300      	moveq	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d18d      	bne.n	8004d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e1c:	e02d      	b.n	8004e7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f8ce 	bl	8004fc0 <I2C_IsAcknowledgeFailed>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e02d      	b.n	8004e8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e34:	d021      	beq.n	8004e7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e36:	f7fe fde9 	bl	8003a0c <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d302      	bcc.n	8004e4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d116      	bne.n	8004e7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f043 0220 	orr.w	r2, r3, #32
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e007      	b.n	8004e8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e84:	2b80      	cmp	r3, #128	; 0x80
 8004e86:	d1ca      	bne.n	8004e1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b084      	sub	sp, #16
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e9e:	e02d      	b.n	8004efc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 f88d 	bl	8004fc0 <I2C_IsAcknowledgeFailed>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e02d      	b.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb6:	d021      	beq.n	8004efc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb8:	f7fe fda8 	bl	8003a0c <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d302      	bcc.n	8004ece <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d116      	bne.n	8004efc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	f043 0220 	orr.w	r2, r3, #32
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e007      	b.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d1ca      	bne.n	8004ea0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f20:	e042      	b.n	8004fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	f003 0310 	and.w	r3, r3, #16
 8004f2c:	2b10      	cmp	r3, #16
 8004f2e:	d119      	bne.n	8004f64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f06f 0210 	mvn.w	r2, #16
 8004f38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e029      	b.n	8004fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f64:	f7fe fd52 	bl	8003a0c <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d302      	bcc.n	8004f7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d116      	bne.n	8004fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	f043 0220 	orr.w	r2, r3, #32
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e007      	b.n	8004fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb2:	2b40      	cmp	r3, #64	; 0x40
 8004fb4:	d1b5      	bne.n	8004f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd6:	d11b      	bne.n	8005010 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fe0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffc:	f043 0204 	orr.w	r2, r3, #4
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e000      	b.n	8005012 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr

0800501c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800501c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800501e:	b08b      	sub	sp, #44	; 0x2c
 8005020:	af06      	add	r7, sp, #24
 8005022:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e0fd      	b.n	800522a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f007 f82a 	bl	800c09c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2203      	movs	r2, #3
 800504c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f003 f847 	bl	80080e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	687e      	ldr	r6, [r7, #4]
 8005062:	466d      	mov	r5, sp
 8005064:	f106 0410 	add.w	r4, r6, #16
 8005068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800506a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	602b      	str	r3, [r5, #0]
 8005070:	1d33      	adds	r3, r6, #4
 8005072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005074:	6838      	ldr	r0, [r7, #0]
 8005076:	f003 f811 	bl	800809c <USB_CoreInit>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e0ce      	b.n	800522a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2100      	movs	r1, #0
 8005092:	4618      	mov	r0, r3
 8005094:	f003 f842 	bl	800811c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005098:	2300      	movs	r3, #0
 800509a:	73fb      	strb	r3, [r7, #15]
 800509c:	e04c      	b.n	8005138 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800509e:	7bfb      	ldrb	r3, [r7, #15]
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	4613      	mov	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	440b      	add	r3, r1
 80050ae:	3301      	adds	r3, #1
 80050b0:	2201      	movs	r2, #1
 80050b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	440b      	add	r3, r1
 80050c4:	7bfa      	ldrb	r2, [r7, #15]
 80050c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050c8:	7bfa      	ldrb	r2, [r7, #15]
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	b298      	uxth	r0, r3
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	440b      	add	r3, r1
 80050da:	3336      	adds	r3, #54	; 0x36
 80050dc:	4602      	mov	r2, r0
 80050de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	440b      	add	r3, r1
 80050f0:	3303      	adds	r3, #3
 80050f2:	2200      	movs	r2, #0
 80050f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050f6:	7bfa      	ldrb	r2, [r7, #15]
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	00db      	lsls	r3, r3, #3
 8005102:	440b      	add	r3, r1
 8005104:	3338      	adds	r3, #56	; 0x38
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800510a:	7bfa      	ldrb	r2, [r7, #15]
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	440b      	add	r3, r1
 8005118:	333c      	adds	r3, #60	; 0x3c
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800511e:	7bfa      	ldrb	r2, [r7, #15]
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	440b      	add	r3, r1
 800512c:	3340      	adds	r3, #64	; 0x40
 800512e:	2200      	movs	r2, #0
 8005130:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005132:	7bfb      	ldrb	r3, [r7, #15]
 8005134:	3301      	adds	r3, #1
 8005136:	73fb      	strb	r3, [r7, #15]
 8005138:	7bfa      	ldrb	r2, [r7, #15]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	429a      	cmp	r2, r3
 8005140:	d3ad      	bcc.n	800509e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005142:	2300      	movs	r3, #0
 8005144:	73fb      	strb	r3, [r7, #15]
 8005146:	e044      	b.n	80051d2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005148:	7bfa      	ldrb	r2, [r7, #15]
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	440b      	add	r3, r1
 8005156:	f203 1369 	addw	r3, r3, #361	; 0x169
 800515a:	2200      	movs	r2, #0
 800515c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800515e:	7bfa      	ldrb	r2, [r7, #15]
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	4613      	mov	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	440b      	add	r3, r1
 800516c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005170:	7bfa      	ldrb	r2, [r7, #15]
 8005172:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005174:	7bfa      	ldrb	r2, [r7, #15]
 8005176:	6879      	ldr	r1, [r7, #4]
 8005178:	4613      	mov	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	440b      	add	r3, r1
 8005182:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800518a:	7bfa      	ldrb	r2, [r7, #15]
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	440b      	add	r3, r1
 8005198:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80051a0:	7bfa      	ldrb	r2, [r7, #15]
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	440b      	add	r3, r1
 80051ae:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051b6:	7bfa      	ldrb	r2, [r7, #15]
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	4613      	mov	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	440b      	add	r3, r1
 80051c4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	3301      	adds	r3, #1
 80051d0:	73fb      	strb	r3, [r7, #15]
 80051d2:	7bfa      	ldrb	r2, [r7, #15]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d3b5      	bcc.n	8005148 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	603b      	str	r3, [r7, #0]
 80051e2:	687e      	ldr	r6, [r7, #4]
 80051e4:	466d      	mov	r5, sp
 80051e6:	f106 0410 	add.w	r4, r6, #16
 80051ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	602b      	str	r3, [r5, #0]
 80051f2:	1d33      	adds	r3, r6, #4
 80051f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051f6:	6838      	ldr	r0, [r7, #0]
 80051f8:	f002 ff9c 	bl	8008134 <USB_DevInit>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2202      	movs	r2, #2
 8005206:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e00d      	b.n	800522a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f005 f90d 	bl	800a442 <USB_DevDisconnect>

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005232 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b082      	sub	sp, #8
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <HAL_PCD_Start+0x16>
 8005244:	2302      	movs	r3, #2
 8005246:	e016      	b.n	8005276 <HAL_PCD_Start+0x44>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4618      	mov	r0, r3
 8005256:	f002 ff31 	bl	80080bc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800525a:	2101      	movs	r1, #1
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f007 f990 	bl	800c582 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f005 f8e1 	bl	800a42e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b088      	sub	sp, #32
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f005 f8e3 	bl	800a456 <USB_ReadInterrupts>
 8005290:	4603      	mov	r3, r0
 8005292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800529a:	d102      	bne.n	80052a2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fb61 	bl	8005964 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f005 f8d5 	bl	800a456 <USB_ReadInterrupts>
 80052ac:	4603      	mov	r3, r0
 80052ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b6:	d112      	bne.n	80052de <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ca:	b292      	uxth	r2, r2
 80052cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f006 ff5e 	bl	800c192 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80052d6:	2100      	movs	r1, #0
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f925 	bl	8005528 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f005 f8b7 	bl	800a456 <USB_ReadInterrupts>
 80052e8:	4603      	mov	r3, r0
 80052ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052f2:	d10b      	bne.n	800530c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005306:	b292      	uxth	r2, r2
 8005308:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4618      	mov	r0, r3
 8005312:	f005 f8a0 	bl	800a456 <USB_ReadInterrupts>
 8005316:	4603      	mov	r3, r0
 8005318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800531c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005320:	d10b      	bne.n	800533a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800532a:	b29a      	uxth	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005334:	b292      	uxth	r2, r2
 8005336:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f005 f889 	bl	800a456 <USB_ReadInterrupts>
 8005344:	4603      	mov	r3, r0
 8005346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800534a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534e:	d126      	bne.n	800539e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005358:	b29a      	uxth	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0204 	bic.w	r2, r2, #4
 8005362:	b292      	uxth	r2, r2
 8005364:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005370:	b29a      	uxth	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0208 	bic.w	r2, r2, #8
 800537a:	b292      	uxth	r2, r2
 800537c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f006 ff3f 	bl	800c204 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800538e:	b29a      	uxth	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005398:	b292      	uxth	r2, r2
 800539a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f005 f857 	bl	800a456 <USB_ReadInterrupts>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b2:	f040 8084 	bne.w	80054be <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80053b6:	2300      	movs	r3, #0
 80053b8:	77fb      	strb	r3, [r7, #31]
 80053ba:	e011      	b.n	80053e0 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	461a      	mov	r2, r3
 80053c2:	7ffb      	ldrb	r3, [r7, #31]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	441a      	add	r2, r3
 80053c8:	7ffb      	ldrb	r3, [r7, #31]
 80053ca:	8812      	ldrh	r2, [r2, #0]
 80053cc:	b292      	uxth	r2, r2
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	f107 0120 	add.w	r1, r7, #32
 80053d4:	440b      	add	r3, r1
 80053d6:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80053da:	7ffb      	ldrb	r3, [r7, #31]
 80053dc:	3301      	adds	r3, #1
 80053de:	77fb      	strb	r3, [r7, #31]
 80053e0:	7ffb      	ldrb	r3, [r7, #31]
 80053e2:	2b07      	cmp	r3, #7
 80053e4:	d9ea      	bls.n	80053bc <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 0201 	orr.w	r2, r2, #1
 80053f8:	b292      	uxth	r2, r2
 80053fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005406:	b29a      	uxth	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0201 	bic.w	r2, r2, #1
 8005410:	b292      	uxth	r2, r2
 8005412:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005416:	bf00      	nop
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005420:	b29b      	uxth	r3, r3
 8005422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f6      	beq.n	8005418 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005432:	b29a      	uxth	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800543c:	b292      	uxth	r2, r2
 800543e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005442:	2300      	movs	r3, #0
 8005444:	77fb      	strb	r3, [r7, #31]
 8005446:	e010      	b.n	800546a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005448:	7ffb      	ldrb	r3, [r7, #31]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6812      	ldr	r2, [r2, #0]
 800544e:	4611      	mov	r1, r2
 8005450:	7ffa      	ldrb	r2, [r7, #31]
 8005452:	0092      	lsls	r2, r2, #2
 8005454:	440a      	add	r2, r1
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	f107 0120 	add.w	r1, r7, #32
 800545c:	440b      	add	r3, r1
 800545e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005462:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005464:	7ffb      	ldrb	r3, [r7, #31]
 8005466:	3301      	adds	r3, #1
 8005468:	77fb      	strb	r3, [r7, #31]
 800546a:	7ffb      	ldrb	r3, [r7, #31]
 800546c:	2b07      	cmp	r3, #7
 800546e:	d9eb      	bls.n	8005448 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005478:	b29a      	uxth	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0208 	orr.w	r2, r2, #8
 8005482:	b292      	uxth	r2, r2
 8005484:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005490:	b29a      	uxth	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800549a:	b292      	uxth	r2, r2
 800549c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0204 	orr.w	r2, r2, #4
 80054b2:	b292      	uxth	r2, r2
 80054b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f006 fe89 	bl	800c1d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f004 ffc7 	bl	800a456 <USB_ReadInterrupts>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d2:	d10e      	bne.n	80054f2 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054dc:	b29a      	uxth	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80054e6:	b292      	uxth	r2, r2
 80054e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f006 fe42 	bl	800c176 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f004 ffad 	bl	800a456 <USB_ReadInterrupts>
 80054fc:	4603      	mov	r3, r0
 80054fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005506:	d10b      	bne.n	8005520 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005510:	b29a      	uxth	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800551a:	b292      	uxth	r2, r2
 800551c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8005520:	bf00      	nop
 8005522:	3720      	adds	r7, #32
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	460b      	mov	r3, r1
 8005532:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800553a:	2b01      	cmp	r3, #1
 800553c:	d101      	bne.n	8005542 <HAL_PCD_SetAddress+0x1a>
 800553e:	2302      	movs	r3, #2
 8005540:	e013      	b.n	800556a <HAL_PCD_SetAddress+0x42>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	78fa      	ldrb	r2, [r7, #3]
 800554e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	78fa      	ldrb	r2, [r7, #3]
 8005558:	4611      	mov	r1, r2
 800555a:	4618      	mov	r0, r3
 800555c:	f004 ff54 	bl	800a408 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b084      	sub	sp, #16
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	4608      	mov	r0, r1
 800557c:	4611      	mov	r1, r2
 800557e:	461a      	mov	r2, r3
 8005580:	4603      	mov	r3, r0
 8005582:	70fb      	strb	r3, [r7, #3]
 8005584:	460b      	mov	r3, r1
 8005586:	803b      	strh	r3, [r7, #0]
 8005588:	4613      	mov	r3, r2
 800558a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005590:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005594:	2b00      	cmp	r3, #0
 8005596:	da0e      	bge.n	80055b6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	f003 0307 	and.w	r3, r3, #7
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	4613      	mov	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	4413      	add	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2201      	movs	r2, #1
 80055b2:	705a      	strb	r2, [r3, #1]
 80055b4:	e00e      	b.n	80055d4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055b6:	78fb      	ldrb	r3, [r7, #3]
 80055b8:	f003 0207 	and.w	r2, r3, #7
 80055bc:	4613      	mov	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	4413      	add	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80055e0:	883a      	ldrh	r2, [r7, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	78ba      	ldrb	r2, [r7, #2]
 80055ea:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	785b      	ldrb	r3, [r3, #1]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d004      	beq.n	80055fe <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80055fe:	78bb      	ldrb	r3, [r7, #2]
 8005600:	2b02      	cmp	r3, #2
 8005602:	d102      	bne.n	800560a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_PCD_EP_Open+0xa6>
 8005614:	2302      	movs	r3, #2
 8005616:	e00e      	b.n	8005636 <HAL_PCD_EP_Open+0xc4>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68f9      	ldr	r1, [r7, #12]
 8005626:	4618      	mov	r0, r3
 8005628:	f002 fda4 	bl	8008174 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005634:	7afb      	ldrb	r3, [r7, #11]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b084      	sub	sp, #16
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	460b      	mov	r3, r1
 8005648:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800564a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800564e:	2b00      	cmp	r3, #0
 8005650:	da0e      	bge.n	8005670 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005652:	78fb      	ldrb	r3, [r7, #3]
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	4613      	mov	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	4413      	add	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2201      	movs	r2, #1
 800566c:	705a      	strb	r2, [r3, #1]
 800566e:	e00e      	b.n	800568e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	f003 0207 	and.w	r2, r3, #7
 8005676:	4613      	mov	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	4413      	add	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800568e:	78fb      	ldrb	r3, [r7, #3]
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	b2da      	uxtb	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <HAL_PCD_EP_Close+0x6a>
 80056a4:	2302      	movs	r3, #2
 80056a6:	e00e      	b.n	80056c6 <HAL_PCD_EP_Close+0x88>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68f9      	ldr	r1, [r7, #12]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f003 f8c6 	bl	8008848 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b086      	sub	sp, #24
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	607a      	str	r2, [r7, #4]
 80056d8:	603b      	str	r3, [r7, #0]
 80056da:	460b      	mov	r3, r1
 80056dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056de:	7afb      	ldrb	r3, [r7, #11]
 80056e0:	f003 0207 	and.w	r2, r3, #7
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4413      	add	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2200      	movs	r2, #0
 8005706:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2200      	movs	r2, #0
 800570c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800570e:	7afb      	ldrb	r3, [r7, #11]
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	b2da      	uxtb	r2, r3
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800571a:	7afb      	ldrb	r3, [r7, #11]
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	2b00      	cmp	r3, #0
 8005722:	d106      	bne.n	8005732 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6979      	ldr	r1, [r7, #20]
 800572a:	4618      	mov	r0, r3
 800572c:	f003 fa78 	bl	8008c20 <USB_EPStartXfer>
 8005730:	e005      	b.n	800573e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6979      	ldr	r1, [r7, #20]
 8005738:	4618      	mov	r0, r3
 800573a:	f003 fa71 	bl	8008c20 <USB_EPStartXfer>
  }

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	f003 0207 	and.w	r2, r3, #7
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	4613      	mov	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	440b      	add	r3, r1
 8005766:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800576a:	681b      	ldr	r3, [r3, #0]
}
 800576c:	4618      	mov	r0, r3
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	bc80      	pop	{r7}
 8005774:	4770      	bx	lr

08005776 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b086      	sub	sp, #24
 800577a:	af00      	add	r7, sp, #0
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	603b      	str	r3, [r7, #0]
 8005782:	460b      	mov	r3, r1
 8005784:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005786:	7afb      	ldrb	r3, [r7, #11]
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4413      	add	r3, r2
 800579a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2200      	movs	r2, #0
 80057ba:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2201      	movs	r2, #1
 80057c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057c2:	7afb      	ldrb	r3, [r7, #11]
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057ce:	7afb      	ldrb	r3, [r7, #11]
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d106      	bne.n	80057e6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6979      	ldr	r1, [r7, #20]
 80057de:	4618      	mov	r0, r3
 80057e0:	f003 fa1e 	bl	8008c20 <USB_EPStartXfer>
 80057e4:	e005      	b.n	80057f2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6979      	ldr	r1, [r7, #20]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f003 fa17 	bl	8008c20 <USB_EPStartXfer>
  }

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	460b      	mov	r3, r1
 8005806:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005808:	78fb      	ldrb	r3, [r7, #3]
 800580a:	f003 0207 	and.w	r2, r3, #7
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	429a      	cmp	r2, r3
 8005814:	d901      	bls.n	800581a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e04c      	b.n	80058b4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800581a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800581e:	2b00      	cmp	r3, #0
 8005820:	da0e      	bge.n	8005840 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005822:	78fb      	ldrb	r3, [r7, #3]
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	4613      	mov	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	4413      	add	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2201      	movs	r2, #1
 800583c:	705a      	strb	r2, [r3, #1]
 800583e:	e00c      	b.n	800585a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005840:	78fa      	ldrb	r2, [r7, #3]
 8005842:	4613      	mov	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	4413      	add	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2201      	movs	r2, #1
 800585e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	b2da      	uxtb	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005872:	2b01      	cmp	r3, #1
 8005874:	d101      	bne.n	800587a <HAL_PCD_EP_SetStall+0x7e>
 8005876:	2302      	movs	r3, #2
 8005878:	e01c      	b.n	80058b4 <HAL_PCD_EP_SetStall+0xb8>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68f9      	ldr	r1, [r7, #12]
 8005888:	4618      	mov	r0, r3
 800588a:	f004 fcc0 	bl	800a20e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800588e:	78fb      	ldrb	r3, [r7, #3]
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	2b00      	cmp	r3, #0
 8005896:	d108      	bne.n	80058aa <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80058a2:	4619      	mov	r1, r3
 80058a4:	4610      	mov	r0, r2
 80058a6:	f004 fde5 	bl	800a474 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	460b      	mov	r3, r1
 80058c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058c8:	78fb      	ldrb	r3, [r7, #3]
 80058ca:	f003 020f 	and.w	r2, r3, #15
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d901      	bls.n	80058da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e040      	b.n	800595c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	da0e      	bge.n	8005900 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058e2:	78fb      	ldrb	r3, [r7, #3]
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	4613      	mov	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	4413      	add	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2201      	movs	r2, #1
 80058fc:	705a      	strb	r2, [r3, #1]
 80058fe:	e00e      	b.n	800591e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	f003 0207 	and.w	r2, r3, #7
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	4413      	add	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	b2da      	uxtb	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005936:	2b01      	cmp	r3, #1
 8005938:	d101      	bne.n	800593e <HAL_PCD_EP_ClrStall+0x82>
 800593a:	2302      	movs	r3, #2
 800593c:	e00e      	b.n	800595c <HAL_PCD_EP_ClrStall+0xa0>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68f9      	ldr	r1, [r7, #12]
 800594c:	4618      	mov	r0, r3
 800594e:	f004 fcae 	bl	800a2ae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b08e      	sub	sp, #56	; 0x38
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800596c:	e2ec      	b.n	8005f48 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005976:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005978:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800597a:	b2db      	uxtb	r3, r3
 800597c:	f003 030f 	and.w	r3, r3, #15
 8005980:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005984:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005988:	2b00      	cmp	r3, #0
 800598a:	f040 8161 	bne.w	8005c50 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800598e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	2b00      	cmp	r3, #0
 8005996:	d152      	bne.n	8005a3e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80059a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a8:	81fb      	strh	r3, [r7, #14]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	89fb      	ldrh	r3, [r7, #14]
 80059b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3328      	adds	r3, #40	; 0x28
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	4413      	add	r3, r2
 80059d6:	3302      	adds	r3, #2
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6812      	ldr	r2, [r2, #0]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	695a      	ldr	r2, [r3, #20]
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	441a      	add	r2, r3
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80059fc:	2100      	movs	r1, #0
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f006 fb9f 	bl	800c142 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 829b 	beq.w	8005f48 <PCD_EP_ISR_Handler+0x5e4>
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f040 8296 	bne.w	8005f48 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	b292      	uxth	r2, r2
 8005a30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005a3c:	e284      	b.n	8005f48 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005a4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d034      	beq.n	8005ac2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	461a      	mov	r2, r3
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	4413      	add	r3, r2
 8005a6c:	3306      	adds	r3, #6
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6812      	ldr	r2, [r2, #0]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	f004 fd3c 	bl	800a514 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	823b      	strh	r3, [r7, #16]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	8a3a      	ldrh	r2, [r7, #16]
 8005ab2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ab6:	b292      	uxth	r2, r2
 8005ab8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f006 fb14 	bl	800c0e8 <HAL_PCD_SetupStageCallback>
 8005ac0:	e242      	b.n	8005f48 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005ac2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f280 823e 	bge.w	8005f48 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005ad8:	4013      	ands	r3, r2
 8005ada:	83bb      	strh	r3, [r7, #28]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	8bba      	ldrh	r2, [r7, #28]
 8005ae2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ae6:	b292      	uxth	r2, r2
 8005ae8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	4413      	add	r3, r2
 8005afe:	3306      	adds	r3, #6
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6812      	ldr	r2, [r2, #0]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d019      	beq.n	8005b52 <PCD_EP_ISR_Handler+0x1ee>
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d015      	beq.n	8005b52 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6818      	ldr	r0, [r3, #0]
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	6959      	ldr	r1, [r3, #20]
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	f004 fcec 	bl	800a514 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	695a      	ldr	r2, [r3, #20]
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	441a      	add	r2, r3
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f006 fadd 	bl	800c10c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f040 81f2 	bne.w	8005f48 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	61bb      	str	r3, [r7, #24]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	461a      	mov	r2, r3
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	4413      	add	r3, r2
 8005b7a:	61bb      	str	r3, [r7, #24]
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d112      	bne.n	8005bb2 <PCD_EP_ISR_Handler+0x24e>
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	801a      	strh	r2, [r3, #0]
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	801a      	strh	r2, [r3, #0]
 8005bb0:	e02f      	b.n	8005c12 <PCD_EP_ISR_Handler+0x2ae>
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2b3e      	cmp	r3, #62	; 0x3e
 8005bb8:	d813      	bhi.n	8005be2 <PCD_EP_ISR_Handler+0x27e>
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	085b      	lsrs	r3, r3, #1
 8005bc0:	633b      	str	r3, [r7, #48]	; 0x30
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <PCD_EP_ISR_Handler+0x270>
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	633b      	str	r3, [r7, #48]	; 0x30
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	029b      	lsls	r3, r3, #10
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	e017      	b.n	8005c12 <PCD_EP_ISR_Handler+0x2ae>
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	095b      	lsrs	r3, r3, #5
 8005be8:	633b      	str	r3, [r7, #48]	; 0x30
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 031f 	and.w	r3, r3, #31
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d102      	bne.n	8005bfc <PCD_EP_ISR_Handler+0x298>
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	633b      	str	r3, [r7, #48]	; 0x30
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	029b      	lsls	r3, r3, #10
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c22:	827b      	strh	r3, [r7, #18]
 8005c24:	8a7b      	ldrh	r3, [r7, #18]
 8005c26:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c2a:	827b      	strh	r3, [r7, #18]
 8005c2c:	8a7b      	ldrh	r3, [r7, #18]
 8005c2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c32:	827b      	strh	r3, [r7, #18]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	8a7b      	ldrh	r3, [r7, #18]
 8005c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	8013      	strh	r3, [r2, #0]
 8005c4e:	e17b      	b.n	8005f48 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	461a      	mov	r2, r3
 8005c56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005c62:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f280 80ea 	bge.w	8005e40 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	461a      	mov	r2, r3
 8005c72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005c82:	4013      	ands	r3, r2
 8005c84:	853b      	strh	r3, [r7, #40]	; 0x28
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005c96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c9a:	b292      	uxth	r2, r2
 8005c9c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005c9e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	7b1b      	ldrb	r3, [r3, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d122      	bne.n	8005d02 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	4413      	add	r3, r2
 8005cd0:	3306      	adds	r3, #6
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6812      	ldr	r2, [r2, #0]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ce4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005ce6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 8087 	beq.w	8005dfc <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	6959      	ldr	r1, [r3, #20]
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	88da      	ldrh	r2, [r3, #6]
 8005cfa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005cfc:	f004 fc0a 	bl	800a514 <USB_ReadPMA>
 8005d00:	e07c      	b.n	8005dfc <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	78db      	ldrb	r3, [r3, #3]
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d108      	bne.n	8005d1c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005d0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f927 	bl	8005f64 <HAL_PCD_EP_DB_Receive>
 8005d16:	4603      	mov	r3, r0
 8005d18:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005d1a:	e06f      	b.n	8005dfc <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	461a      	mov	r2, r3
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d36:	847b      	strh	r3, [r7, #34]	; 0x22
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	441a      	add	r2, r3
 8005d46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	461a      	mov	r2, r3
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d021      	beq.n	8005dba <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	461a      	mov	r2, r3
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	4413      	add	r3, r2
 8005d8a:	3302      	adds	r3, #2
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d9e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005da0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d02a      	beq.n	8005dfc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6818      	ldr	r0, [r3, #0]
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	6959      	ldr	r1, [r3, #20]
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	891a      	ldrh	r2, [r3, #8]
 8005db2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005db4:	f004 fbae 	bl	800a514 <USB_ReadPMA>
 8005db8:	e020      	b.n	8005dfc <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	4413      	add	r3, r2
 8005dce:	3306      	adds	r3, #6
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6812      	ldr	r2, [r2, #0]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005de2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005de4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d008      	beq.n	8005dfc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	6959      	ldr	r1, [r3, #20]
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	895a      	ldrh	r2, [r3, #10]
 8005df6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005df8:	f004 fb8c 	bl	800a514 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	69da      	ldr	r2, [r3, #28]
 8005e00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e02:	441a      	add	r2, r3
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	695a      	ldr	r2, [r3, #20]
 8005e0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e0e:	441a      	add	r2, r3
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d004      	beq.n	8005e26 <PCD_EP_ISR_Handler+0x4c2>
 8005e1c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d206      	bcs.n	8005e34 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f006 f96d 	bl	800c10c <HAL_PCD_DataOutStageCallback>
 8005e32:	e005      	b.n	8005e40 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f002 fef0 	bl	8008c20 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005e40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d07e      	beq.n	8005f48 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005e4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	4613      	mov	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e78:	843b      	strh	r3, [r7, #32]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	441a      	add	r2, r3
 8005e88:	8c3b      	ldrh	r3, [r7, #32]
 8005e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	78db      	ldrb	r3, [r3, #3]
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d00c      	beq.n	8005eb8 <PCD_EP_ISR_Handler+0x554>
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	78db      	ldrb	r3, [r3, #3]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d008      	beq.n	8005eb8 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d146      	bne.n	8005f3c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005eae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d141      	bne.n	8005f3c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	4413      	add	r3, r2
 8005ecc:	3302      	adds	r3, #2
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	6812      	ldr	r2, [r2, #0]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ee0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	699a      	ldr	r2, [r3, #24]
 8005ee6:	8bfb      	ldrh	r3, [r7, #30]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d906      	bls.n	8005efa <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	699a      	ldr	r2, [r3, #24]
 8005ef0:	8bfb      	ldrh	r3, [r7, #30]
 8005ef2:	1ad2      	subs	r2, r2, r3
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	619a      	str	r2, [r3, #24]
 8005ef8:	e002      	b.n	8005f00 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	2200      	movs	r2, #0
 8005efe:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d106      	bne.n	8005f16 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f006 f917 	bl	800c142 <HAL_PCD_DataInStageCallback>
 8005f14:	e018      	b.n	8005f48 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	695a      	ldr	r2, [r3, #20]
 8005f1a:	8bfb      	ldrh	r3, [r7, #30]
 8005f1c:	441a      	add	r2, r3
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	69da      	ldr	r2, [r3, #28]
 8005f26:	8bfb      	ldrh	r3, [r7, #30]
 8005f28:	441a      	add	r2, r3
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f34:	4618      	mov	r0, r3
 8005f36:	f002 fe73 	bl	8008c20 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005f3a:	e005      	b.n	8005f48 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005f3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005f3e:	461a      	mov	r2, r3
 8005f40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f91b 	bl	800617e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	b21b      	sxth	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f6ff ad0a 	blt.w	800596e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3738      	adds	r7, #56	; 0x38
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005f72:	88fb      	ldrh	r3, [r7, #6]
 8005f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d07e      	beq.n	800607a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	461a      	mov	r2, r3
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	00db      	lsls	r3, r3, #3
 8005f8e:	4413      	add	r3, r2
 8005f90:	3302      	adds	r3, #2
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	6812      	ldr	r2, [r2, #0]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fa4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	699a      	ldr	r2, [r3, #24]
 8005faa:	8b7b      	ldrh	r3, [r7, #26]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d306      	bcc.n	8005fbe <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	699a      	ldr	r2, [r3, #24]
 8005fb4:	8b7b      	ldrh	r3, [r7, #26]
 8005fb6:	1ad2      	subs	r2, r2, r3
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	619a      	str	r2, [r3, #24]
 8005fbc:	e002      	b.n	8005fc4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d123      	bne.n	8006014 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe6:	833b      	strh	r3, [r7, #24]
 8005fe8:	8b3b      	ldrh	r3, [r7, #24]
 8005fea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fee:	833b      	strh	r3, [r7, #24]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	441a      	add	r2, r3
 8005ffe:	8b3b      	ldrh	r3, [r7, #24]
 8006000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800600c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006010:	b29b      	uxth	r3, r3
 8006012:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006014:	88fb      	ldrh	r3, [r7, #6]
 8006016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601a:	2b00      	cmp	r3, #0
 800601c:	d01f      	beq.n	800605e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	461a      	mov	r2, r3
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b29b      	uxth	r3, r3
 8006030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006038:	82fb      	strh	r3, [r7, #22]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	461a      	mov	r2, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	441a      	add	r2, r3
 8006048:	8afb      	ldrh	r3, [r7, #22]
 800604a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800604e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006056:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800605a:	b29b      	uxth	r3, r3
 800605c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800605e:	8b7b      	ldrh	r3, [r7, #26]
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 8087 	beq.w	8006174 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6818      	ldr	r0, [r3, #0]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	6959      	ldr	r1, [r3, #20]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	891a      	ldrh	r2, [r3, #8]
 8006072:	8b7b      	ldrh	r3, [r7, #26]
 8006074:	f004 fa4e 	bl	800a514 <USB_ReadPMA>
 8006078:	e07c      	b.n	8006174 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006082:	b29b      	uxth	r3, r3
 8006084:	461a      	mov	r2, r3
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	4413      	add	r3, r2
 800608e:	3306      	adds	r3, #6
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	6812      	ldr	r2, [r2, #0]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060a2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	699a      	ldr	r2, [r3, #24]
 80060a8:	8b7b      	ldrh	r3, [r7, #26]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d306      	bcc.n	80060bc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	699a      	ldr	r2, [r3, #24]
 80060b2:	8b7b      	ldrh	r3, [r7, #26]
 80060b4:	1ad2      	subs	r2, r2, r3
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	619a      	str	r2, [r3, #24]
 80060ba:	e002      	b.n	80060c2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	2200      	movs	r2, #0
 80060c0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d123      	bne.n	8006112 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e4:	83fb      	strh	r3, [r7, #30]
 80060e6:	8bfb      	ldrh	r3, [r7, #30]
 80060e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060ec:	83fb      	strh	r3, [r7, #30]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	441a      	add	r2, r3
 80060fc:	8bfb      	ldrh	r3, [r7, #30]
 80060fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800610a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800610e:	b29b      	uxth	r3, r3
 8006110:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006112:	88fb      	ldrh	r3, [r7, #6]
 8006114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006118:	2b00      	cmp	r3, #0
 800611a:	d11f      	bne.n	800615c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	461a      	mov	r2, r3
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	b29b      	uxth	r3, r3
 800612e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006136:	83bb      	strh	r3, [r7, #28]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	441a      	add	r2, r3
 8006146:	8bbb      	ldrh	r3, [r7, #28]
 8006148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800614c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006154:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006158:	b29b      	uxth	r3, r3
 800615a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800615c:	8b7b      	ldrh	r3, [r7, #26]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d008      	beq.n	8006174 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6818      	ldr	r0, [r3, #0]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	6959      	ldr	r1, [r3, #20]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	895a      	ldrh	r2, [r3, #10]
 800616e:	8b7b      	ldrh	r3, [r7, #26]
 8006170:	f004 f9d0 	bl	800a514 <USB_ReadPMA>
    }
  }

  return count;
 8006174:	8b7b      	ldrh	r3, [r7, #26]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3720      	adds	r7, #32
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b0a2      	sub	sp, #136	; 0x88
 8006182:	af00      	add	r7, sp, #0
 8006184:	60f8      	str	r0, [r7, #12]
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	4613      	mov	r3, r2
 800618a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800618c:	88fb      	ldrh	r3, [r7, #6]
 800618e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 81c7 	beq.w	8006526 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	4413      	add	r3, r2
 80061ac:	3302      	adds	r3, #2
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	6812      	ldr	r2, [r2, #0]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	699a      	ldr	r2, [r3, #24]
 80061c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d907      	bls.n	80061e0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	699a      	ldr	r2, [r3, #24]
 80061d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80061d8:	1ad2      	subs	r2, r2, r3
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	619a      	str	r2, [r3, #24]
 80061de:	e002      	b.n	80061e6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2200      	movs	r2, #0
 80061e4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f040 80b9 	bne.w	8006362 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	785b      	ldrb	r3, [r3, #1]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d126      	bne.n	8006246 <HAL_PCD_EP_DB_Transmit+0xc8>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006206:	b29b      	uxth	r3, r3
 8006208:	461a      	mov	r2, r3
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	4413      	add	r3, r2
 800620e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	011a      	lsls	r2, r3, #4
 8006216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006218:	4413      	add	r3, r2
 800621a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800621e:	627b      	str	r3, [r7, #36]	; 0x24
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	b29b      	uxth	r3, r3
 8006226:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800622a:	b29a      	uxth	r2, r3
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	801a      	strh	r2, [r3, #0]
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	b29b      	uxth	r3, r3
 8006236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800623a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800623e:	b29a      	uxth	r2, r3
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	801a      	strh	r2, [r3, #0]
 8006244:	e01a      	b.n	800627c <HAL_PCD_EP_DB_Transmit+0xfe>
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	785b      	ldrb	r3, [r3, #1]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d116      	bne.n	800627c <HAL_PCD_EP_DB_Transmit+0xfe>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	633b      	str	r3, [r7, #48]	; 0x30
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800625c:	b29b      	uxth	r3, r3
 800625e:	461a      	mov	r2, r3
 8006260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006262:	4413      	add	r3, r2
 8006264:	633b      	str	r3, [r7, #48]	; 0x30
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	011a      	lsls	r2, r3, #4
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	4413      	add	r3, r2
 8006270:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006278:	2200      	movs	r2, #0
 800627a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	623b      	str	r3, [r7, #32]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	785b      	ldrb	r3, [r3, #1]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d126      	bne.n	80062d8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	61bb      	str	r3, [r7, #24]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006298:	b29b      	uxth	r3, r3
 800629a:	461a      	mov	r2, r3
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	4413      	add	r3, r2
 80062a0:	61bb      	str	r3, [r7, #24]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	011a      	lsls	r2, r3, #4
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	4413      	add	r3, r2
 80062ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062b0:	617b      	str	r3, [r7, #20]
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062bc:	b29a      	uxth	r2, r3
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	801a      	strh	r2, [r3, #0]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	801a      	strh	r2, [r3, #0]
 80062d6:	e017      	b.n	8006308 <HAL_PCD_EP_DB_Transmit+0x18a>
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	785b      	ldrb	r3, [r3, #1]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d113      	bne.n	8006308 <HAL_PCD_EP_DB_Transmit+0x18a>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	461a      	mov	r2, r3
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	4413      	add	r3, r2
 80062f0:	623b      	str	r3, [r7, #32]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	011a      	lsls	r2, r3, #4
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	4413      	add	r3, r2
 80062fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006300:	61fb      	str	r3, [r7, #28]
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	2200      	movs	r2, #0
 8006306:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	4619      	mov	r1, r3
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f005 ff17 	bl	800c142 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006314:	88fb      	ldrh	r3, [r7, #6]
 8006316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 82d4 	beq.w	80068c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	461a      	mov	r2, r3
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	b29b      	uxth	r3, r3
 8006332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633a:	827b      	strh	r3, [r7, #18]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	461a      	mov	r2, r3
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	441a      	add	r2, r3
 800634a:	8a7b      	ldrh	r3, [r7, #18]
 800634c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006354:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800635c:	b29b      	uxth	r3, r3
 800635e:	8013      	strh	r3, [r2, #0]
 8006360:	e2b2      	b.n	80068c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006362:	88fb      	ldrh	r3, [r7, #6]
 8006364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d021      	beq.n	80063b0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	461a      	mov	r2, r3
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	b29b      	uxth	r3, r3
 800637e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006386:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	441a      	add	r2, r3
 8006398:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800639c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	f040 8286 	bne.w	80068c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	695a      	ldr	r2, [r3, #20]
 80063c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80063c4:	441a      	add	r2, r3
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	69da      	ldr	r2, [r3, #28]
 80063ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80063d2:	441a      	add	r2, r3
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	6a1a      	ldr	r2, [r3, #32]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d309      	bcc.n	80063f8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	6a1a      	ldr	r2, [r3, #32]
 80063ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063f0:	1ad2      	subs	r2, r2, r3
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	621a      	str	r2, [r3, #32]
 80063f6:	e015      	b.n	8006424 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d107      	bne.n	8006410 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8006400:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006404:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800640e:	e009      	b.n	8006424 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2200      	movs	r2, #0
 8006422:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	785b      	ldrb	r3, [r3, #1]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d155      	bne.n	80064d8 <HAL_PCD_EP_DB_Transmit+0x35a>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	63bb      	str	r3, [r7, #56]	; 0x38
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800643a:	b29b      	uxth	r3, r3
 800643c:	461a      	mov	r2, r3
 800643e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006440:	4413      	add	r3, r2
 8006442:	63bb      	str	r3, [r7, #56]	; 0x38
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	011a      	lsls	r2, r3, #4
 800644a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644c:	4413      	add	r3, r2
 800644e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006452:	637b      	str	r3, [r7, #52]	; 0x34
 8006454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006456:	2b00      	cmp	r3, #0
 8006458:	d112      	bne.n	8006480 <HAL_PCD_EP_DB_Transmit+0x302>
 800645a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006464:	b29a      	uxth	r2, r3
 8006466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006468:	801a      	strh	r2, [r3, #0]
 800646a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	b29b      	uxth	r3, r3
 8006470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006478:	b29a      	uxth	r2, r3
 800647a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647c:	801a      	strh	r2, [r3, #0]
 800647e:	e047      	b.n	8006510 <HAL_PCD_EP_DB_Transmit+0x392>
 8006480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006482:	2b3e      	cmp	r3, #62	; 0x3e
 8006484:	d811      	bhi.n	80064aa <HAL_PCD_EP_DB_Transmit+0x32c>
 8006486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006488:	085b      	lsrs	r3, r3, #1
 800648a:	64bb      	str	r3, [r7, #72]	; 0x48
 800648c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <HAL_PCD_EP_DB_Transmit+0x31e>
 8006496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006498:	3301      	adds	r3, #1
 800649a:	64bb      	str	r3, [r7, #72]	; 0x48
 800649c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800649e:	b29b      	uxth	r3, r3
 80064a0:	029b      	lsls	r3, r3, #10
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a6:	801a      	strh	r2, [r3, #0]
 80064a8:	e032      	b.n	8006510 <HAL_PCD_EP_DB_Transmit+0x392>
 80064aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80064b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064b2:	f003 031f 	and.w	r3, r3, #31
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d102      	bne.n	80064c0 <HAL_PCD_EP_DB_Transmit+0x342>
 80064ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064bc:	3b01      	subs	r3, #1
 80064be:	64bb      	str	r3, [r7, #72]	; 0x48
 80064c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	029b      	lsls	r3, r3, #10
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d4:	801a      	strh	r2, [r3, #0]
 80064d6:	e01b      	b.n	8006510 <HAL_PCD_EP_DB_Transmit+0x392>
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	785b      	ldrb	r3, [r3, #1]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d117      	bne.n	8006510 <HAL_PCD_EP_DB_Transmit+0x392>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	643b      	str	r3, [r7, #64]	; 0x40
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	461a      	mov	r2, r3
 80064f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064f4:	4413      	add	r3, r2
 80064f6:	643b      	str	r3, [r7, #64]	; 0x40
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	011a      	lsls	r2, r3, #4
 80064fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006500:	4413      	add	r3, r2
 8006502:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800650a:	b29a      	uxth	r2, r3
 800650c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800650e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6818      	ldr	r0, [r3, #0]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	6959      	ldr	r1, [r3, #20]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	891a      	ldrh	r2, [r3, #8]
 800651c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800651e:	b29b      	uxth	r3, r3
 8006520:	f003 ffb3 	bl	800a48a <USB_WritePMA>
 8006524:	e1d0      	b.n	80068c8 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800652e:	b29b      	uxth	r3, r3
 8006530:	461a      	mov	r2, r3
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	4413      	add	r3, r2
 800653a:	3306      	adds	r3, #6
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	6812      	ldr	r2, [r2, #0]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800654e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	699a      	ldr	r2, [r3, #24]
 8006556:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800655a:	429a      	cmp	r2, r3
 800655c:	d307      	bcc.n	800656e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	699a      	ldr	r2, [r3, #24]
 8006562:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006566:	1ad2      	subs	r2, r2, r3
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	619a      	str	r2, [r3, #24]
 800656c:	e002      	b.n	8006574 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2200      	movs	r2, #0
 8006572:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	2b00      	cmp	r3, #0
 800657a:	f040 80c4 	bne.w	8006706 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	785b      	ldrb	r3, [r3, #1]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d126      	bne.n	80065d4 <HAL_PCD_EP_DB_Transmit+0x456>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006594:	b29b      	uxth	r3, r3
 8006596:	461a      	mov	r2, r3
 8006598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800659a:	4413      	add	r3, r2
 800659c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	011a      	lsls	r2, r3, #4
 80065a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a6:	4413      	add	r3, r2
 80065a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80065ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065bc:	801a      	strh	r2, [r3, #0]
 80065be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065d0:	801a      	strh	r2, [r3, #0]
 80065d2:	e01a      	b.n	800660a <HAL_PCD_EP_DB_Transmit+0x48c>
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	785b      	ldrb	r3, [r3, #1]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d116      	bne.n	800660a <HAL_PCD_EP_DB_Transmit+0x48c>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	677b      	str	r3, [r7, #116]	; 0x74
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	461a      	mov	r2, r3
 80065ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065f0:	4413      	add	r3, r2
 80065f2:	677b      	str	r3, [r7, #116]	; 0x74
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	011a      	lsls	r2, r3, #4
 80065fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065fc:	4413      	add	r3, r2
 80065fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006602:	673b      	str	r3, [r7, #112]	; 0x70
 8006604:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006606:	2200      	movs	r2, #0
 8006608:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	785b      	ldrb	r3, [r3, #1]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d12f      	bne.n	8006678 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006628:	b29b      	uxth	r3, r3
 800662a:	461a      	mov	r2, r3
 800662c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006630:	4413      	add	r3, r2
 8006632:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	011a      	lsls	r2, r3, #4
 800663c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006640:	4413      	add	r3, r2
 8006642:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006646:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800664a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	b29b      	uxth	r3, r3
 8006652:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006656:	b29a      	uxth	r2, r3
 8006658:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800665c:	801a      	strh	r2, [r3, #0]
 800665e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	b29b      	uxth	r3, r3
 8006666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800666a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800666e:	b29a      	uxth	r2, r3
 8006670:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006674:	801a      	strh	r2, [r3, #0]
 8006676:	e017      	b.n	80066a8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	785b      	ldrb	r3, [r3, #1]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d113      	bne.n	80066a8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006688:	b29b      	uxth	r3, r3
 800668a:	461a      	mov	r2, r3
 800668c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800668e:	4413      	add	r3, r2
 8006690:	67bb      	str	r3, [r7, #120]	; 0x78
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	011a      	lsls	r2, r3, #4
 8006698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800669a:	4413      	add	r3, r2
 800669c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80066a4:	2200      	movs	r2, #0
 80066a6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	4619      	mov	r1, r3
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f005 fd47 	bl	800c142 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80066b4:	88fb      	ldrh	r3, [r7, #6]
 80066b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f040 8104 	bne.w	80068c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	461a      	mov	r2, r3
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	881b      	ldrh	r3, [r3, #0]
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	441a      	add	r2, r3
 80066ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80066f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006700:	b29b      	uxth	r3, r3
 8006702:	8013      	strh	r3, [r2, #0]
 8006704:	e0e0      	b.n	80068c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006706:	88fb      	ldrh	r3, [r7, #6]
 8006708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d121      	bne.n	8006754 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	461a      	mov	r2, r3
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	881b      	ldrh	r3, [r3, #0]
 8006720:	b29b      	uxth	r3, r3
 8006722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	441a      	add	r2, r3
 800673c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800674c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006750:	b29b      	uxth	r3, r3
 8006752:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800675a:	2b01      	cmp	r3, #1
 800675c:	f040 80b4 	bne.w	80068c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	695a      	ldr	r2, [r3, #20]
 8006764:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006768:	441a      	add	r2, r3
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	69da      	ldr	r2, [r3, #28]
 8006772:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006776:	441a      	add	r2, r3
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	6a1a      	ldr	r2, [r3, #32]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	429a      	cmp	r2, r3
 8006786:	d309      	bcc.n	800679c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	6a1a      	ldr	r2, [r3, #32]
 8006792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006794:	1ad2      	subs	r2, r2, r3
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	621a      	str	r2, [r3, #32]
 800679a:	e015      	b.n	80067c8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d107      	bne.n	80067b4 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80067a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80067a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80067b2:	e009      	b.n	80067c8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2200      	movs	r2, #0
 80067be:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	667b      	str	r3, [r7, #100]	; 0x64
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	785b      	ldrb	r3, [r3, #1]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d155      	bne.n	8006882 <HAL_PCD_EP_DB_Transmit+0x704>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	461a      	mov	r2, r3
 80067e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067ea:	4413      	add	r3, r2
 80067ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	011a      	lsls	r2, r3, #4
 80067f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067f6:	4413      	add	r3, r2
 80067f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80067fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006800:	2b00      	cmp	r3, #0
 8006802:	d112      	bne.n	800682a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006804:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	b29b      	uxth	r3, r3
 800680a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800680e:	b29a      	uxth	r2, r3
 8006810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006812:	801a      	strh	r2, [r3, #0]
 8006814:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006822:	b29a      	uxth	r2, r3
 8006824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006826:	801a      	strh	r2, [r3, #0]
 8006828:	e044      	b.n	80068b4 <HAL_PCD_EP_DB_Transmit+0x736>
 800682a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800682c:	2b3e      	cmp	r3, #62	; 0x3e
 800682e:	d811      	bhi.n	8006854 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006832:	085b      	lsrs	r3, r3, #1
 8006834:	657b      	str	r3, [r7, #84]	; 0x54
 8006836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006842:	3301      	adds	r3, #1
 8006844:	657b      	str	r3, [r7, #84]	; 0x54
 8006846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006848:	b29b      	uxth	r3, r3
 800684a:	029b      	lsls	r3, r3, #10
 800684c:	b29a      	uxth	r2, r3
 800684e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006850:	801a      	strh	r2, [r3, #0]
 8006852:	e02f      	b.n	80068b4 <HAL_PCD_EP_DB_Transmit+0x736>
 8006854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006856:	095b      	lsrs	r3, r3, #5
 8006858:	657b      	str	r3, [r7, #84]	; 0x54
 800685a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800685c:	f003 031f 	and.w	r3, r3, #31
 8006860:	2b00      	cmp	r3, #0
 8006862:	d102      	bne.n	800686a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8006864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006866:	3b01      	subs	r3, #1
 8006868:	657b      	str	r3, [r7, #84]	; 0x54
 800686a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800686c:	b29b      	uxth	r3, r3
 800686e:	029b      	lsls	r3, r3, #10
 8006870:	b29b      	uxth	r3, r3
 8006872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800687a:	b29a      	uxth	r2, r3
 800687c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800687e:	801a      	strh	r2, [r3, #0]
 8006880:	e018      	b.n	80068b4 <HAL_PCD_EP_DB_Transmit+0x736>
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	785b      	ldrb	r3, [r3, #1]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d114      	bne.n	80068b4 <HAL_PCD_EP_DB_Transmit+0x736>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006892:	b29b      	uxth	r3, r3
 8006894:	461a      	mov	r2, r3
 8006896:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006898:	4413      	add	r3, r2
 800689a:	667b      	str	r3, [r7, #100]	; 0x64
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	011a      	lsls	r2, r3, #4
 80068a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068a4:	4413      	add	r3, r2
 80068a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068aa:	663b      	str	r3, [r7, #96]	; 0x60
 80068ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068b2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6818      	ldr	r0, [r3, #0]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	6959      	ldr	r1, [r3, #20]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	895a      	ldrh	r2, [r3, #10]
 80068c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	f003 fde1 	bl	800a48a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	461a      	mov	r2, r3
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e2:	823b      	strh	r3, [r7, #16]
 80068e4:	8a3b      	ldrh	r3, [r7, #16]
 80068e6:	f083 0310 	eor.w	r3, r3, #16
 80068ea:	823b      	strh	r3, [r7, #16]
 80068ec:	8a3b      	ldrh	r3, [r7, #16]
 80068ee:	f083 0320 	eor.w	r3, r3, #32
 80068f2:	823b      	strh	r3, [r7, #16]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	461a      	mov	r2, r3
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	441a      	add	r2, r3
 8006902:	8a3b      	ldrh	r3, [r7, #16]
 8006904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800690c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006914:	b29b      	uxth	r3, r3
 8006916:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3788      	adds	r7, #136	; 0x88
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006922:	b480      	push	{r7}
 8006924:	b087      	sub	sp, #28
 8006926:	af00      	add	r7, sp, #0
 8006928:	60f8      	str	r0, [r7, #12]
 800692a:	607b      	str	r3, [r7, #4]
 800692c:	460b      	mov	r3, r1
 800692e:	817b      	strh	r3, [r7, #10]
 8006930:	4613      	mov	r3, r2
 8006932:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006934:	897b      	ldrh	r3, [r7, #10]
 8006936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693a:	b29b      	uxth	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00b      	beq.n	8006958 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006940:	897b      	ldrh	r3, [r7, #10]
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	4613      	mov	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4413      	add	r3, r2
 8006954:	617b      	str	r3, [r7, #20]
 8006956:	e009      	b.n	800696c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006958:	897a      	ldrh	r2, [r7, #10]
 800695a:	4613      	mov	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	00db      	lsls	r3, r3, #3
 8006962:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	4413      	add	r3, r2
 800696a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800696c:	893b      	ldrh	r3, [r7, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d107      	bne.n	8006982 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2200      	movs	r2, #0
 8006976:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	b29a      	uxth	r2, r3
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	80da      	strh	r2, [r3, #6]
 8006980:	e00b      	b.n	800699a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2201      	movs	r2, #1
 8006986:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	b29a      	uxth	r2, r3
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	0c1b      	lsrs	r3, r3, #16
 8006994:	b29a      	uxth	r2, r3
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	371c      	adds	r7, #28
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bc80      	pop	{r7}
 80069a4:	4770      	bx	lr
	...

080069a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d101      	bne.n	80069ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e26c      	b.n	8006e94 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 8087 	beq.w	8006ad6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80069c8:	4b92      	ldr	r3, [pc, #584]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f003 030c 	and.w	r3, r3, #12
 80069d0:	2b04      	cmp	r3, #4
 80069d2:	d00c      	beq.n	80069ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80069d4:	4b8f      	ldr	r3, [pc, #572]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f003 030c 	and.w	r3, r3, #12
 80069dc:	2b08      	cmp	r3, #8
 80069de:	d112      	bne.n	8006a06 <HAL_RCC_OscConfig+0x5e>
 80069e0:	4b8c      	ldr	r3, [pc, #560]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ec:	d10b      	bne.n	8006a06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069ee:	4b89      	ldr	r3, [pc, #548]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d06c      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x12c>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d168      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e246      	b.n	8006e94 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a0e:	d106      	bne.n	8006a1e <HAL_RCC_OscConfig+0x76>
 8006a10:	4b80      	ldr	r3, [pc, #512]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a7f      	ldr	r2, [pc, #508]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	e02e      	b.n	8006a7c <HAL_RCC_OscConfig+0xd4>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10c      	bne.n	8006a40 <HAL_RCC_OscConfig+0x98>
 8006a26:	4b7b      	ldr	r3, [pc, #492]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a7a      	ldr	r2, [pc, #488]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	4b78      	ldr	r3, [pc, #480]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a77      	ldr	r2, [pc, #476]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a3c:	6013      	str	r3, [r2, #0]
 8006a3e:	e01d      	b.n	8006a7c <HAL_RCC_OscConfig+0xd4>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a48:	d10c      	bne.n	8006a64 <HAL_RCC_OscConfig+0xbc>
 8006a4a:	4b72      	ldr	r3, [pc, #456]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a71      	ldr	r2, [pc, #452]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	4b6f      	ldr	r3, [pc, #444]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a6e      	ldr	r2, [pc, #440]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	e00b      	b.n	8006a7c <HAL_RCC_OscConfig+0xd4>
 8006a64:	4b6b      	ldr	r3, [pc, #428]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a6a      	ldr	r2, [pc, #424]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	4b68      	ldr	r3, [pc, #416]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a67      	ldr	r2, [pc, #412]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d013      	beq.n	8006aac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a84:	f7fc ffc2 	bl	8003a0c <HAL_GetTick>
 8006a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a8c:	f7fc ffbe 	bl	8003a0c <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b64      	cmp	r3, #100	; 0x64
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e1fa      	b.n	8006e94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a9e:	4b5d      	ldr	r3, [pc, #372]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0f0      	beq.n	8006a8c <HAL_RCC_OscConfig+0xe4>
 8006aaa:	e014      	b.n	8006ad6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aac:	f7fc ffae 	bl	8003a0c <HAL_GetTick>
 8006ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ab4:	f7fc ffaa 	bl	8003a0c <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b64      	cmp	r3, #100	; 0x64
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e1e6      	b.n	8006e94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ac6:	4b53      	ldr	r3, [pc, #332]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1f0      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x10c>
 8006ad2:	e000      	b.n	8006ad6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d063      	beq.n	8006baa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ae2:	4b4c      	ldr	r3, [pc, #304]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f003 030c 	and.w	r3, r3, #12
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00b      	beq.n	8006b06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006aee:	4b49      	ldr	r3, [pc, #292]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f003 030c 	and.w	r3, r3, #12
 8006af6:	2b08      	cmp	r3, #8
 8006af8:	d11c      	bne.n	8006b34 <HAL_RCC_OscConfig+0x18c>
 8006afa:	4b46      	ldr	r3, [pc, #280]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d116      	bne.n	8006b34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b06:	4b43      	ldr	r3, [pc, #268]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d005      	beq.n	8006b1e <HAL_RCC_OscConfig+0x176>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d001      	beq.n	8006b1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e1ba      	b.n	8006e94 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b1e:	4b3d      	ldr	r3, [pc, #244]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	4939      	ldr	r1, [pc, #228]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b32:	e03a      	b.n	8006baa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d020      	beq.n	8006b7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b3c:	4b36      	ldr	r3, [pc, #216]	; (8006c18 <HAL_RCC_OscConfig+0x270>)
 8006b3e:	2201      	movs	r2, #1
 8006b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b42:	f7fc ff63 	bl	8003a0c <HAL_GetTick>
 8006b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b48:	e008      	b.n	8006b5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b4a:	f7fc ff5f 	bl	8003a0c <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d901      	bls.n	8006b5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e19b      	b.n	8006e94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b5c:	4b2d      	ldr	r3, [pc, #180]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d0f0      	beq.n	8006b4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b68:	4b2a      	ldr	r3, [pc, #168]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	00db      	lsls	r3, r3, #3
 8006b76:	4927      	ldr	r1, [pc, #156]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	600b      	str	r3, [r1, #0]
 8006b7c:	e015      	b.n	8006baa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b7e:	4b26      	ldr	r3, [pc, #152]	; (8006c18 <HAL_RCC_OscConfig+0x270>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b84:	f7fc ff42 	bl	8003a0c <HAL_GetTick>
 8006b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b8a:	e008      	b.n	8006b9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b8c:	f7fc ff3e 	bl	8003a0c <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e17a      	b.n	8006e94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b9e:	4b1d      	ldr	r3, [pc, #116]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1f0      	bne.n	8006b8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0308 	and.w	r3, r3, #8
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d03a      	beq.n	8006c2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d019      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bbe:	4b17      	ldr	r3, [pc, #92]	; (8006c1c <HAL_RCC_OscConfig+0x274>)
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bc4:	f7fc ff22 	bl	8003a0c <HAL_GetTick>
 8006bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bca:	e008      	b.n	8006bde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bcc:	f7fc ff1e 	bl	8003a0c <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e15a      	b.n	8006e94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bde:	4b0d      	ldr	r3, [pc, #52]	; (8006c14 <HAL_RCC_OscConfig+0x26c>)
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0f0      	beq.n	8006bcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006bea:	2001      	movs	r0, #1
 8006bec:	f000 fac6 	bl	800717c <RCC_Delay>
 8006bf0:	e01c      	b.n	8006c2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bf2:	4b0a      	ldr	r3, [pc, #40]	; (8006c1c <HAL_RCC_OscConfig+0x274>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bf8:	f7fc ff08 	bl	8003a0c <HAL_GetTick>
 8006bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bfe:	e00f      	b.n	8006c20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c00:	f7fc ff04 	bl	8003a0c <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d908      	bls.n	8006c20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e140      	b.n	8006e94 <HAL_RCC_OscConfig+0x4ec>
 8006c12:	bf00      	nop
 8006c14:	40021000 	.word	0x40021000
 8006c18:	42420000 	.word	0x42420000
 8006c1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c20:	4b9e      	ldr	r3, [pc, #632]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1e9      	bne.n	8006c00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0304 	and.w	r3, r3, #4
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 80a6 	beq.w	8006d86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c3e:	4b97      	ldr	r3, [pc, #604]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10d      	bne.n	8006c66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c4a:	4b94      	ldr	r3, [pc, #592]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	4a93      	ldr	r2, [pc, #588]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c54:	61d3      	str	r3, [r2, #28]
 8006c56:	4b91      	ldr	r3, [pc, #580]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c5e:	60bb      	str	r3, [r7, #8]
 8006c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c62:	2301      	movs	r3, #1
 8006c64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c66:	4b8e      	ldr	r3, [pc, #568]	; (8006ea0 <HAL_RCC_OscConfig+0x4f8>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d118      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c72:	4b8b      	ldr	r3, [pc, #556]	; (8006ea0 <HAL_RCC_OscConfig+0x4f8>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a8a      	ldr	r2, [pc, #552]	; (8006ea0 <HAL_RCC_OscConfig+0x4f8>)
 8006c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c7e:	f7fc fec5 	bl	8003a0c <HAL_GetTick>
 8006c82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c84:	e008      	b.n	8006c98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c86:	f7fc fec1 	bl	8003a0c <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	2b64      	cmp	r3, #100	; 0x64
 8006c92:	d901      	bls.n	8006c98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e0fd      	b.n	8006e94 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c98:	4b81      	ldr	r3, [pc, #516]	; (8006ea0 <HAL_RCC_OscConfig+0x4f8>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d0f0      	beq.n	8006c86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d106      	bne.n	8006cba <HAL_RCC_OscConfig+0x312>
 8006cac:	4b7b      	ldr	r3, [pc, #492]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	4a7a      	ldr	r2, [pc, #488]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006cb2:	f043 0301 	orr.w	r3, r3, #1
 8006cb6:	6213      	str	r3, [r2, #32]
 8006cb8:	e02d      	b.n	8006d16 <HAL_RCC_OscConfig+0x36e>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10c      	bne.n	8006cdc <HAL_RCC_OscConfig+0x334>
 8006cc2:	4b76      	ldr	r3, [pc, #472]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	4a75      	ldr	r2, [pc, #468]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006cc8:	f023 0301 	bic.w	r3, r3, #1
 8006ccc:	6213      	str	r3, [r2, #32]
 8006cce:	4b73      	ldr	r3, [pc, #460]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	4a72      	ldr	r2, [pc, #456]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006cd4:	f023 0304 	bic.w	r3, r3, #4
 8006cd8:	6213      	str	r3, [r2, #32]
 8006cda:	e01c      	b.n	8006d16 <HAL_RCC_OscConfig+0x36e>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	2b05      	cmp	r3, #5
 8006ce2:	d10c      	bne.n	8006cfe <HAL_RCC_OscConfig+0x356>
 8006ce4:	4b6d      	ldr	r3, [pc, #436]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	4a6c      	ldr	r2, [pc, #432]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006cea:	f043 0304 	orr.w	r3, r3, #4
 8006cee:	6213      	str	r3, [r2, #32]
 8006cf0:	4b6a      	ldr	r3, [pc, #424]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	4a69      	ldr	r2, [pc, #420]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006cf6:	f043 0301 	orr.w	r3, r3, #1
 8006cfa:	6213      	str	r3, [r2, #32]
 8006cfc:	e00b      	b.n	8006d16 <HAL_RCC_OscConfig+0x36e>
 8006cfe:	4b67      	ldr	r3, [pc, #412]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	4a66      	ldr	r2, [pc, #408]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006d04:	f023 0301 	bic.w	r3, r3, #1
 8006d08:	6213      	str	r3, [r2, #32]
 8006d0a:	4b64      	ldr	r3, [pc, #400]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	4a63      	ldr	r2, [pc, #396]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006d10:	f023 0304 	bic.w	r3, r3, #4
 8006d14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d015      	beq.n	8006d4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d1e:	f7fc fe75 	bl	8003a0c <HAL_GetTick>
 8006d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d24:	e00a      	b.n	8006d3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d26:	f7fc fe71 	bl	8003a0c <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d901      	bls.n	8006d3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e0ab      	b.n	8006e94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d3c:	4b57      	ldr	r3, [pc, #348]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006d3e:	6a1b      	ldr	r3, [r3, #32]
 8006d40:	f003 0302 	and.w	r3, r3, #2
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0ee      	beq.n	8006d26 <HAL_RCC_OscConfig+0x37e>
 8006d48:	e014      	b.n	8006d74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d4a:	f7fc fe5f 	bl	8003a0c <HAL_GetTick>
 8006d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d50:	e00a      	b.n	8006d68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d52:	f7fc fe5b 	bl	8003a0c <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d901      	bls.n	8006d68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e095      	b.n	8006e94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d68:	4b4c      	ldr	r3, [pc, #304]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1ee      	bne.n	8006d52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d105      	bne.n	8006d86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d7a:	4b48      	ldr	r3, [pc, #288]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	4a47      	ldr	r2, [pc, #284]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f000 8081 	beq.w	8006e92 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d90:	4b42      	ldr	r3, [pc, #264]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f003 030c 	and.w	r3, r3, #12
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	d061      	beq.n	8006e60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d146      	bne.n	8006e32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006da4:	4b3f      	ldr	r3, [pc, #252]	; (8006ea4 <HAL_RCC_OscConfig+0x4fc>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006daa:	f7fc fe2f 	bl	8003a0c <HAL_GetTick>
 8006dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006db0:	e008      	b.n	8006dc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006db2:	f7fc fe2b 	bl	8003a0c <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d901      	bls.n	8006dc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e067      	b.n	8006e94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dc4:	4b35      	ldr	r3, [pc, #212]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1f0      	bne.n	8006db2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd8:	d108      	bne.n	8006dec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006dda:	4b30      	ldr	r3, [pc, #192]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	492d      	ldr	r1, [pc, #180]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006dec:	4b2b      	ldr	r3, [pc, #172]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a19      	ldr	r1, [r3, #32]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	430b      	orrs	r3, r1
 8006dfe:	4927      	ldr	r1, [pc, #156]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e04:	4b27      	ldr	r3, [pc, #156]	; (8006ea4 <HAL_RCC_OscConfig+0x4fc>)
 8006e06:	2201      	movs	r2, #1
 8006e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e0a:	f7fc fdff 	bl	8003a0c <HAL_GetTick>
 8006e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e10:	e008      	b.n	8006e24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e12:	f7fc fdfb 	bl	8003a0c <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d901      	bls.n	8006e24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e037      	b.n	8006e94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e24:	4b1d      	ldr	r3, [pc, #116]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d0f0      	beq.n	8006e12 <HAL_RCC_OscConfig+0x46a>
 8006e30:	e02f      	b.n	8006e92 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e32:	4b1c      	ldr	r3, [pc, #112]	; (8006ea4 <HAL_RCC_OscConfig+0x4fc>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e38:	f7fc fde8 	bl	8003a0c <HAL_GetTick>
 8006e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e3e:	e008      	b.n	8006e52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e40:	f7fc fde4 	bl	8003a0c <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d901      	bls.n	8006e52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e020      	b.n	8006e94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e52:	4b12      	ldr	r3, [pc, #72]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1f0      	bne.n	8006e40 <HAL_RCC_OscConfig+0x498>
 8006e5e:	e018      	b.n	8006e92 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d101      	bne.n	8006e6c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e013      	b.n	8006e94 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006e6c:	4b0b      	ldr	r3, [pc, #44]	; (8006e9c <HAL_RCC_OscConfig+0x4f4>)
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d106      	bne.n	8006e8e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d001      	beq.n	8006e92 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e000      	b.n	8006e94 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	40021000 	.word	0x40021000
 8006ea0:	40007000 	.word	0x40007000
 8006ea4:	42420060 	.word	0x42420060

08006ea8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e0d0      	b.n	800705e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ebc:	4b6a      	ldr	r3, [pc, #424]	; (8007068 <HAL_RCC_ClockConfig+0x1c0>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0307 	and.w	r3, r3, #7
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d910      	bls.n	8006eec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eca:	4b67      	ldr	r3, [pc, #412]	; (8007068 <HAL_RCC_ClockConfig+0x1c0>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f023 0207 	bic.w	r2, r3, #7
 8006ed2:	4965      	ldr	r1, [pc, #404]	; (8007068 <HAL_RCC_ClockConfig+0x1c0>)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eda:	4b63      	ldr	r3, [pc, #396]	; (8007068 <HAL_RCC_ClockConfig+0x1c0>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d001      	beq.n	8006eec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e0b8      	b.n	800705e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d020      	beq.n	8006f3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d005      	beq.n	8006f10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f04:	4b59      	ldr	r3, [pc, #356]	; (800706c <HAL_RCC_ClockConfig+0x1c4>)
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	4a58      	ldr	r2, [pc, #352]	; (800706c <HAL_RCC_ClockConfig+0x1c4>)
 8006f0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006f0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0308 	and.w	r3, r3, #8
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d005      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f1c:	4b53      	ldr	r3, [pc, #332]	; (800706c <HAL_RCC_ClockConfig+0x1c4>)
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	4a52      	ldr	r2, [pc, #328]	; (800706c <HAL_RCC_ClockConfig+0x1c4>)
 8006f22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006f26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f28:	4b50      	ldr	r3, [pc, #320]	; (800706c <HAL_RCC_ClockConfig+0x1c4>)
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	494d      	ldr	r1, [pc, #308]	; (800706c <HAL_RCC_ClockConfig+0x1c4>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d040      	beq.n	8006fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d107      	bne.n	8006f5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f4e:	4b47      	ldr	r3, [pc, #284]	; (800706c <HAL_RCC_ClockConfig+0x1c4>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d115      	bne.n	8006f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e07f      	b.n	800705e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d107      	bne.n	8006f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f66:	4b41      	ldr	r3, [pc, #260]	; (800706c <HAL_RCC_ClockConfig+0x1c4>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d109      	bne.n	8006f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e073      	b.n	800705e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f76:	4b3d      	ldr	r3, [pc, #244]	; (800706c <HAL_RCC_ClockConfig+0x1c4>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e06b      	b.n	800705e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f86:	4b39      	ldr	r3, [pc, #228]	; (800706c <HAL_RCC_ClockConfig+0x1c4>)
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f023 0203 	bic.w	r2, r3, #3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	4936      	ldr	r1, [pc, #216]	; (800706c <HAL_RCC_ClockConfig+0x1c4>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f98:	f7fc fd38 	bl	8003a0c <HAL_GetTick>
 8006f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f9e:	e00a      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fa0:	f7fc fd34 	bl	8003a0c <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e053      	b.n	800705e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fb6:	4b2d      	ldr	r3, [pc, #180]	; (800706c <HAL_RCC_ClockConfig+0x1c4>)
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f003 020c 	and.w	r2, r3, #12
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d1eb      	bne.n	8006fa0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fc8:	4b27      	ldr	r3, [pc, #156]	; (8007068 <HAL_RCC_ClockConfig+0x1c0>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0307 	and.w	r3, r3, #7
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d210      	bcs.n	8006ff8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fd6:	4b24      	ldr	r3, [pc, #144]	; (8007068 <HAL_RCC_ClockConfig+0x1c0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f023 0207 	bic.w	r2, r3, #7
 8006fde:	4922      	ldr	r1, [pc, #136]	; (8007068 <HAL_RCC_ClockConfig+0x1c0>)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fe6:	4b20      	ldr	r3, [pc, #128]	; (8007068 <HAL_RCC_ClockConfig+0x1c0>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0307 	and.w	r3, r3, #7
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d001      	beq.n	8006ff8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e032      	b.n	800705e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b00      	cmp	r3, #0
 8007002:	d008      	beq.n	8007016 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007004:	4b19      	ldr	r3, [pc, #100]	; (800706c <HAL_RCC_ClockConfig+0x1c4>)
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	4916      	ldr	r1, [pc, #88]	; (800706c <HAL_RCC_ClockConfig+0x1c4>)
 8007012:	4313      	orrs	r3, r2
 8007014:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0308 	and.w	r3, r3, #8
 800701e:	2b00      	cmp	r3, #0
 8007020:	d009      	beq.n	8007036 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007022:	4b12      	ldr	r3, [pc, #72]	; (800706c <HAL_RCC_ClockConfig+0x1c4>)
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	00db      	lsls	r3, r3, #3
 8007030:	490e      	ldr	r1, [pc, #56]	; (800706c <HAL_RCC_ClockConfig+0x1c4>)
 8007032:	4313      	orrs	r3, r2
 8007034:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007036:	f000 f821 	bl	800707c <HAL_RCC_GetSysClockFreq>
 800703a:	4602      	mov	r2, r0
 800703c:	4b0b      	ldr	r3, [pc, #44]	; (800706c <HAL_RCC_ClockConfig+0x1c4>)
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	091b      	lsrs	r3, r3, #4
 8007042:	f003 030f 	and.w	r3, r3, #15
 8007046:	490a      	ldr	r1, [pc, #40]	; (8007070 <HAL_RCC_ClockConfig+0x1c8>)
 8007048:	5ccb      	ldrb	r3, [r1, r3]
 800704a:	fa22 f303 	lsr.w	r3, r2, r3
 800704e:	4a09      	ldr	r2, [pc, #36]	; (8007074 <HAL_RCC_ClockConfig+0x1cc>)
 8007050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007052:	4b09      	ldr	r3, [pc, #36]	; (8007078 <HAL_RCC_ClockConfig+0x1d0>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4618      	mov	r0, r3
 8007058:	f7fc fc96 	bl	8003988 <HAL_InitTick>

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	40022000 	.word	0x40022000
 800706c:	40021000 	.word	0x40021000
 8007070:	0800cd2c 	.word	0x0800cd2c
 8007074:	20000014 	.word	0x20000014
 8007078:	20000018 	.word	0x20000018

0800707c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800707c:	b490      	push	{r4, r7}
 800707e:	b08a      	sub	sp, #40	; 0x28
 8007080:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007082:	4b2a      	ldr	r3, [pc, #168]	; (800712c <HAL_RCC_GetSysClockFreq+0xb0>)
 8007084:	1d3c      	adds	r4, r7, #4
 8007086:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007088:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800708c:	f240 2301 	movw	r3, #513	; 0x201
 8007090:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007092:	2300      	movs	r3, #0
 8007094:	61fb      	str	r3, [r7, #28]
 8007096:	2300      	movs	r3, #0
 8007098:	61bb      	str	r3, [r7, #24]
 800709a:	2300      	movs	r3, #0
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
 800709e:	2300      	movs	r3, #0
 80070a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80070a6:	4b22      	ldr	r3, [pc, #136]	; (8007130 <HAL_RCC_GetSysClockFreq+0xb4>)
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	f003 030c 	and.w	r3, r3, #12
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	d002      	beq.n	80070bc <HAL_RCC_GetSysClockFreq+0x40>
 80070b6:	2b08      	cmp	r3, #8
 80070b8:	d003      	beq.n	80070c2 <HAL_RCC_GetSysClockFreq+0x46>
 80070ba:	e02d      	b.n	8007118 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80070bc:	4b1d      	ldr	r3, [pc, #116]	; (8007134 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070be:	623b      	str	r3, [r7, #32]
      break;
 80070c0:	e02d      	b.n	800711e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	0c9b      	lsrs	r3, r3, #18
 80070c6:	f003 030f 	and.w	r3, r3, #15
 80070ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80070ce:	4413      	add	r3, r2
 80070d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80070d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d013      	beq.n	8007108 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80070e0:	4b13      	ldr	r3, [pc, #76]	; (8007130 <HAL_RCC_GetSysClockFreq+0xb4>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	0c5b      	lsrs	r3, r3, #17
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80070ee:	4413      	add	r3, r2
 80070f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80070f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	4a0e      	ldr	r2, [pc, #56]	; (8007134 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070fa:	fb02 f203 	mul.w	r2, r2, r3
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	fbb2 f3f3 	udiv	r3, r2, r3
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
 8007106:	e004      	b.n	8007112 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	4a0b      	ldr	r2, [pc, #44]	; (8007138 <HAL_RCC_GetSysClockFreq+0xbc>)
 800710c:	fb02 f303 	mul.w	r3, r2, r3
 8007110:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	623b      	str	r3, [r7, #32]
      break;
 8007116:	e002      	b.n	800711e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007118:	4b08      	ldr	r3, [pc, #32]	; (800713c <HAL_RCC_GetSysClockFreq+0xc0>)
 800711a:	623b      	str	r3, [r7, #32]
      break;
 800711c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800711e:	6a3b      	ldr	r3, [r7, #32]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3728      	adds	r7, #40	; 0x28
 8007124:	46bd      	mov	sp, r7
 8007126:	bc90      	pop	{r4, r7}
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	0800ca30 	.word	0x0800ca30
 8007130:	40021000 	.word	0x40021000
 8007134:	00f42400 	.word	0x00f42400
 8007138:	003d0900 	.word	0x003d0900
 800713c:	007a1200 	.word	0x007a1200

08007140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007140:	b480      	push	{r7}
 8007142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007144:	4b02      	ldr	r3, [pc, #8]	; (8007150 <HAL_RCC_GetHCLKFreq+0x10>)
 8007146:	681b      	ldr	r3, [r3, #0]
}
 8007148:	4618      	mov	r0, r3
 800714a:	46bd      	mov	sp, r7
 800714c:	bc80      	pop	{r7}
 800714e:	4770      	bx	lr
 8007150:	20000014 	.word	0x20000014

08007154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007158:	f7ff fff2 	bl	8007140 <HAL_RCC_GetHCLKFreq>
 800715c:	4602      	mov	r2, r0
 800715e:	4b05      	ldr	r3, [pc, #20]	; (8007174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	0a1b      	lsrs	r3, r3, #8
 8007164:	f003 0307 	and.w	r3, r3, #7
 8007168:	4903      	ldr	r1, [pc, #12]	; (8007178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800716a:	5ccb      	ldrb	r3, [r1, r3]
 800716c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007170:	4618      	mov	r0, r3
 8007172:	bd80      	pop	{r7, pc}
 8007174:	40021000 	.word	0x40021000
 8007178:	0800cd3c 	.word	0x0800cd3c

0800717c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007184:	4b0a      	ldr	r3, [pc, #40]	; (80071b0 <RCC_Delay+0x34>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a0a      	ldr	r2, [pc, #40]	; (80071b4 <RCC_Delay+0x38>)
 800718a:	fba2 2303 	umull	r2, r3, r2, r3
 800718e:	0a5b      	lsrs	r3, r3, #9
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	fb02 f303 	mul.w	r3, r2, r3
 8007196:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007198:	bf00      	nop
  }
  while (Delay --);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	1e5a      	subs	r2, r3, #1
 800719e:	60fa      	str	r2, [r7, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1f9      	bne.n	8007198 <RCC_Delay+0x1c>
}
 80071a4:	bf00      	nop
 80071a6:	bf00      	nop
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bc80      	pop	{r7}
 80071ae:	4770      	bx	lr
 80071b0:	20000014 	.word	0x20000014
 80071b4:	10624dd3 	.word	0x10624dd3

080071b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	613b      	str	r3, [r7, #16]
 80071c4:	2300      	movs	r3, #0
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d07d      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80071d4:	2300      	movs	r3, #0
 80071d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071d8:	4b4f      	ldr	r3, [pc, #316]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10d      	bne.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071e4:	4b4c      	ldr	r3, [pc, #304]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	4a4b      	ldr	r2, [pc, #300]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ee:	61d3      	str	r3, [r2, #28]
 80071f0:	4b49      	ldr	r3, [pc, #292]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071f8:	60bb      	str	r3, [r7, #8]
 80071fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071fc:	2301      	movs	r3, #1
 80071fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007200:	4b46      	ldr	r3, [pc, #280]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007208:	2b00      	cmp	r3, #0
 800720a:	d118      	bne.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800720c:	4b43      	ldr	r3, [pc, #268]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a42      	ldr	r2, [pc, #264]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007216:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007218:	f7fc fbf8 	bl	8003a0c <HAL_GetTick>
 800721c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800721e:	e008      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007220:	f7fc fbf4 	bl	8003a0c <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	2b64      	cmp	r3, #100	; 0x64
 800722c:	d901      	bls.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e06d      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007232:	4b3a      	ldr	r3, [pc, #232]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0f0      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800723e:	4b36      	ldr	r3, [pc, #216]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007246:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d02e      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	429a      	cmp	r2, r3
 800725a:	d027      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800725c:	4b2e      	ldr	r3, [pc, #184]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007264:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007266:	4b2e      	ldr	r3, [pc, #184]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007268:	2201      	movs	r2, #1
 800726a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800726c:	4b2c      	ldr	r3, [pc, #176]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800726e:	2200      	movs	r2, #0
 8007270:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007272:	4a29      	ldr	r2, [pc, #164]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d014      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007282:	f7fc fbc3 	bl	8003a0c <HAL_GetTick>
 8007286:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007288:	e00a      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800728a:	f7fc fbbf 	bl	8003a0c <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	f241 3288 	movw	r2, #5000	; 0x1388
 8007298:	4293      	cmp	r3, r2
 800729a:	d901      	bls.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e036      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072a0:	4b1d      	ldr	r3, [pc, #116]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d0ee      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072ac:	4b1a      	ldr	r3, [pc, #104]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072ae:	6a1b      	ldr	r3, [r3, #32]
 80072b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	4917      	ldr	r1, [pc, #92]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80072be:	7dfb      	ldrb	r3, [r7, #23]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d105      	bne.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072c4:	4b14      	ldr	r3, [pc, #80]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072c6:	69db      	ldr	r3, [r3, #28]
 80072c8:	4a13      	ldr	r2, [pc, #76]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d008      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072dc:	4b0e      	ldr	r3, [pc, #56]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	490b      	ldr	r1, [pc, #44]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0310 	and.w	r3, r3, #16
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d008      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072fa:	4b07      	ldr	r3, [pc, #28]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	4904      	ldr	r1, [pc, #16]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007308:	4313      	orrs	r3, r2
 800730a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	40021000 	.word	0x40021000
 800731c:	40007000 	.word	0x40007000
 8007320:	42420440 	.word	0x42420440

08007324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e076      	b.n	8007424 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	2b00      	cmp	r3, #0
 800733c:	d108      	bne.n	8007350 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007346:	d009      	beq.n	800735c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	61da      	str	r2, [r3, #28]
 800734e:	e005      	b.n	800735c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d106      	bne.n	800737c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7fb ffde 	bl	8003338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007392:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80073a4:	431a      	orrs	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073ae:	431a      	orrs	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	f003 0302 	and.w	r3, r3, #2
 80073b8:	431a      	orrs	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	431a      	orrs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073cc:	431a      	orrs	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073d6:	431a      	orrs	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e0:	ea42 0103 	orr.w	r1, r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	0c1a      	lsrs	r2, r3, #16
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f002 0204 	and.w	r2, r2, #4
 8007402:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	69da      	ldr	r2, [r3, #28]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007412:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b088      	sub	sp, #32
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	603b      	str	r3, [r7, #0]
 8007438:	4613      	mov	r3, r2
 800743a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800743c:	2300      	movs	r3, #0
 800743e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007446:	2b01      	cmp	r3, #1
 8007448:	d101      	bne.n	800744e <HAL_SPI_Transmit+0x22>
 800744a:	2302      	movs	r3, #2
 800744c:	e126      	b.n	800769c <HAL_SPI_Transmit+0x270>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007456:	f7fc fad9 	bl	8003a0c <HAL_GetTick>
 800745a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800745c:	88fb      	ldrh	r3, [r7, #6]
 800745e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b01      	cmp	r3, #1
 800746a:	d002      	beq.n	8007472 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800746c:	2302      	movs	r3, #2
 800746e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007470:	e10b      	b.n	800768a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <HAL_SPI_Transmit+0x52>
 8007478:	88fb      	ldrh	r3, [r7, #6]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d102      	bne.n	8007484 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007482:	e102      	b.n	800768a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2203      	movs	r2, #3
 8007488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	88fa      	ldrh	r2, [r7, #6]
 800749c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	88fa      	ldrh	r2, [r7, #6]
 80074a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ca:	d10f      	bne.n	80074ec <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f6:	2b40      	cmp	r3, #64	; 0x40
 80074f8:	d007      	beq.n	800750a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007508:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007512:	d14b      	bne.n	80075ac <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d002      	beq.n	8007522 <HAL_SPI_Transmit+0xf6>
 800751c:	8afb      	ldrh	r3, [r7, #22]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d13e      	bne.n	80075a0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007526:	881a      	ldrh	r2, [r3, #0]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007532:	1c9a      	adds	r2, r3, #2
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800753c:	b29b      	uxth	r3, r3
 800753e:	3b01      	subs	r3, #1
 8007540:	b29a      	uxth	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007546:	e02b      	b.n	80075a0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	2b02      	cmp	r3, #2
 8007554:	d112      	bne.n	800757c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755a:	881a      	ldrh	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007566:	1c9a      	adds	r2, r3, #2
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007570:	b29b      	uxth	r3, r3
 8007572:	3b01      	subs	r3, #1
 8007574:	b29a      	uxth	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	86da      	strh	r2, [r3, #54]	; 0x36
 800757a:	e011      	b.n	80075a0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800757c:	f7fc fa46 	bl	8003a0c <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	429a      	cmp	r2, r3
 800758a:	d803      	bhi.n	8007594 <HAL_SPI_Transmit+0x168>
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007592:	d102      	bne.n	800759a <HAL_SPI_Transmit+0x16e>
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d102      	bne.n	80075a0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800759e:	e074      	b.n	800768a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1ce      	bne.n	8007548 <HAL_SPI_Transmit+0x11c>
 80075aa:	e04c      	b.n	8007646 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d002      	beq.n	80075ba <HAL_SPI_Transmit+0x18e>
 80075b4:	8afb      	ldrh	r3, [r7, #22]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d140      	bne.n	800763c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	330c      	adds	r3, #12
 80075c4:	7812      	ldrb	r2, [r2, #0]
 80075c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	3b01      	subs	r3, #1
 80075da:	b29a      	uxth	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80075e0:	e02c      	b.n	800763c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f003 0302 	and.w	r3, r3, #2
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d113      	bne.n	8007618 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	330c      	adds	r3, #12
 80075fa:	7812      	ldrb	r2, [r2, #0]
 80075fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007602:	1c5a      	adds	r2, r3, #1
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800760c:	b29b      	uxth	r3, r3
 800760e:	3b01      	subs	r3, #1
 8007610:	b29a      	uxth	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	86da      	strh	r2, [r3, #54]	; 0x36
 8007616:	e011      	b.n	800763c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007618:	f7fc f9f8 	bl	8003a0c <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	429a      	cmp	r2, r3
 8007626:	d803      	bhi.n	8007630 <HAL_SPI_Transmit+0x204>
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762e:	d102      	bne.n	8007636 <HAL_SPI_Transmit+0x20a>
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d102      	bne.n	800763c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	77fb      	strb	r3, [r7, #31]
          goto error;
 800763a:	e026      	b.n	800768a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007640:	b29b      	uxth	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1cd      	bne.n	80075e2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007646:	69ba      	ldr	r2, [r7, #24]
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 fa54 	bl	8007af8 <SPI_EndRxTxTransaction>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d002      	beq.n	800765c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2220      	movs	r2, #32
 800765a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10a      	bne.n	800767a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007664:	2300      	movs	r3, #0
 8007666:	613b      	str	r3, [r7, #16]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	613b      	str	r3, [r7, #16]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	613b      	str	r3, [r7, #16]
 8007678:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767e:	2b00      	cmp	r3, #0
 8007680:	d002      	beq.n	8007688 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	77fb      	strb	r3, [r7, #31]
 8007686:	e000      	b.n	800768a <HAL_SPI_Transmit+0x25e>
  }

error:
 8007688:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800769a:	7ffb      	ldrb	r3, [r7, #31]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3720      	adds	r7, #32
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b08c      	sub	sp, #48	; 0x30
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
 80076b0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80076b2:	2301      	movs	r3, #1
 80076b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d101      	bne.n	80076ca <HAL_SPI_TransmitReceive+0x26>
 80076c6:	2302      	movs	r3, #2
 80076c8:	e18a      	b.n	80079e0 <HAL_SPI_TransmitReceive+0x33c>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076d2:	f7fc f99b 	bl	8003a0c <HAL_GetTick>
 80076d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80076e8:	887b      	ldrh	r3, [r7, #2]
 80076ea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d00f      	beq.n	8007714 <HAL_SPI_TransmitReceive+0x70>
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076fa:	d107      	bne.n	800770c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d103      	bne.n	800770c <HAL_SPI_TransmitReceive+0x68>
 8007704:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007708:	2b04      	cmp	r3, #4
 800770a:	d003      	beq.n	8007714 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800770c:	2302      	movs	r3, #2
 800770e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007712:	e15b      	b.n	80079cc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d005      	beq.n	8007726 <HAL_SPI_TransmitReceive+0x82>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <HAL_SPI_TransmitReceive+0x82>
 8007720:	887b      	ldrh	r3, [r7, #2]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d103      	bne.n	800772e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800772c:	e14e      	b.n	80079cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b04      	cmp	r3, #4
 8007738:	d003      	beq.n	8007742 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2205      	movs	r2, #5
 800773e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	887a      	ldrh	r2, [r7, #2]
 8007752:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	887a      	ldrh	r2, [r7, #2]
 8007758:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	887a      	ldrh	r2, [r7, #2]
 8007764:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	887a      	ldrh	r2, [r7, #2]
 800776a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007782:	2b40      	cmp	r3, #64	; 0x40
 8007784:	d007      	beq.n	8007796 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007794:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800779e:	d178      	bne.n	8007892 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <HAL_SPI_TransmitReceive+0x10a>
 80077a8:	8b7b      	ldrh	r3, [r7, #26]
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d166      	bne.n	800787c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b2:	881a      	ldrh	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077be:	1c9a      	adds	r2, r3, #2
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	3b01      	subs	r3, #1
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077d2:	e053      	b.n	800787c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f003 0302 	and.w	r3, r3, #2
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d11b      	bne.n	800781a <HAL_SPI_TransmitReceive+0x176>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d016      	beq.n	800781a <HAL_SPI_TransmitReceive+0x176>
 80077ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d113      	bne.n	800781a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f6:	881a      	ldrh	r2, [r3, #0]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007802:	1c9a      	adds	r2, r3, #2
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800780c:	b29b      	uxth	r3, r3
 800780e:	3b01      	subs	r3, #1
 8007810:	b29a      	uxth	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b01      	cmp	r3, #1
 8007826:	d119      	bne.n	800785c <HAL_SPI_TransmitReceive+0x1b8>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800782c:	b29b      	uxth	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d014      	beq.n	800785c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68da      	ldr	r2, [r3, #12]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783c:	b292      	uxth	r2, r2
 800783e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007844:	1c9a      	adds	r2, r3, #2
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800784e:	b29b      	uxth	r3, r3
 8007850:	3b01      	subs	r3, #1
 8007852:	b29a      	uxth	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007858:	2301      	movs	r3, #1
 800785a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800785c:	f7fc f8d6 	bl	8003a0c <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007868:	429a      	cmp	r2, r3
 800786a:	d807      	bhi.n	800787c <HAL_SPI_TransmitReceive+0x1d8>
 800786c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007872:	d003      	beq.n	800787c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800787a:	e0a7      	b.n	80079cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007880:	b29b      	uxth	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1a6      	bne.n	80077d4 <HAL_SPI_TransmitReceive+0x130>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800788a:	b29b      	uxth	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1a1      	bne.n	80077d4 <HAL_SPI_TransmitReceive+0x130>
 8007890:	e07c      	b.n	800798c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <HAL_SPI_TransmitReceive+0x1fc>
 800789a:	8b7b      	ldrh	r3, [r7, #26]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d16b      	bne.n	8007978 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	330c      	adds	r3, #12
 80078aa:	7812      	ldrb	r2, [r2, #0]
 80078ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b2:	1c5a      	adds	r2, r3, #1
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078bc:	b29b      	uxth	r3, r3
 80078be:	3b01      	subs	r3, #1
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078c6:	e057      	b.n	8007978 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d11c      	bne.n	8007910 <HAL_SPI_TransmitReceive+0x26c>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078da:	b29b      	uxth	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d017      	beq.n	8007910 <HAL_SPI_TransmitReceive+0x26c>
 80078e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d114      	bne.n	8007910 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	330c      	adds	r3, #12
 80078f0:	7812      	ldrb	r2, [r2, #0]
 80078f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f8:	1c5a      	adds	r2, r3, #1
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007902:	b29b      	uxth	r3, r3
 8007904:	3b01      	subs	r3, #1
 8007906:	b29a      	uxth	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b01      	cmp	r3, #1
 800791c:	d119      	bne.n	8007952 <HAL_SPI_TransmitReceive+0x2ae>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007922:	b29b      	uxth	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	d014      	beq.n	8007952 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68da      	ldr	r2, [r3, #12]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007932:	b2d2      	uxtb	r2, r2
 8007934:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793a:	1c5a      	adds	r2, r3, #1
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007944:	b29b      	uxth	r3, r3
 8007946:	3b01      	subs	r3, #1
 8007948:	b29a      	uxth	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800794e:	2301      	movs	r3, #1
 8007950:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007952:	f7fc f85b 	bl	8003a0c <HAL_GetTick>
 8007956:	4602      	mov	r2, r0
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800795e:	429a      	cmp	r2, r3
 8007960:	d803      	bhi.n	800796a <HAL_SPI_TransmitReceive+0x2c6>
 8007962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007968:	d102      	bne.n	8007970 <HAL_SPI_TransmitReceive+0x2cc>
 800796a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796c:	2b00      	cmp	r3, #0
 800796e:	d103      	bne.n	8007978 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007976:	e029      	b.n	80079cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800797c:	b29b      	uxth	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1a2      	bne.n	80078c8 <HAL_SPI_TransmitReceive+0x224>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007986:	b29b      	uxth	r3, r3
 8007988:	2b00      	cmp	r3, #0
 800798a:	d19d      	bne.n	80078c8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800798c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800798e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 f8b1 	bl	8007af8 <SPI_EndRxTxTransaction>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d006      	beq.n	80079aa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2220      	movs	r2, #32
 80079a6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80079a8:	e010      	b.n	80079cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10b      	bne.n	80079ca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079b2:	2300      	movs	r3, #0
 80079b4:	617b      	str	r3, [r7, #20]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	617b      	str	r3, [r7, #20]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	617b      	str	r3, [r7, #20]
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	e000      	b.n	80079cc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80079ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3730      	adds	r7, #48	; 0x30
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b088      	sub	sp, #32
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	603b      	str	r3, [r7, #0]
 80079f4:	4613      	mov	r3, r2
 80079f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079f8:	f7fc f808 	bl	8003a0c <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a00:	1a9b      	subs	r3, r3, r2
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	4413      	add	r3, r2
 8007a06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a08:	f7fc f800 	bl	8003a0c <HAL_GetTick>
 8007a0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a0e:	4b39      	ldr	r3, [pc, #228]	; (8007af4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	015b      	lsls	r3, r3, #5
 8007a14:	0d1b      	lsrs	r3, r3, #20
 8007a16:	69fa      	ldr	r2, [r7, #28]
 8007a18:	fb02 f303 	mul.w	r3, r2, r3
 8007a1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a1e:	e054      	b.n	8007aca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a26:	d050      	beq.n	8007aca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a28:	f7fb fff0 	bl	8003a0c <HAL_GetTick>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	69fa      	ldr	r2, [r7, #28]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d902      	bls.n	8007a3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d13d      	bne.n	8007aba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a56:	d111      	bne.n	8007a7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a60:	d004      	beq.n	8007a6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a6a:	d107      	bne.n	8007a7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a84:	d10f      	bne.n	8007aa6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007aa4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e017      	b.n	8007aea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d101      	bne.n	8007ac4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689a      	ldr	r2, [r3, #8]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	bf0c      	ite	eq
 8007ada:	2301      	moveq	r3, #1
 8007adc:	2300      	movne	r3, #0
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	79fb      	ldrb	r3, [r7, #7]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d19b      	bne.n	8007a20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3720      	adds	r7, #32
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	20000014 	.word	0x20000014

08007af8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af02      	add	r7, sp, #8
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	2180      	movs	r1, #128	; 0x80
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f7ff ff6a 	bl	80079e8 <SPI_WaitFlagStateUntilTimeout>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d007      	beq.n	8007b2a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b1e:	f043 0220 	orr.w	r2, r3, #32
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e000      	b.n	8007b2c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e041      	b.n	8007bca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d106      	bne.n	8007b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7fb fc38 	bl	80033d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3304      	adds	r3, #4
 8007b70:	4619      	mov	r1, r3
 8007b72:	4610      	mov	r0, r2
 8007b74:	f000 f93c 	bl	8007df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
	...

08007bd4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d001      	beq.n	8007bec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e032      	b.n	8007c52 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a18      	ldr	r2, [pc, #96]	; (8007c5c <HAL_TIM_Base_Start+0x88>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d00e      	beq.n	8007c1c <HAL_TIM_Base_Start+0x48>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c06:	d009      	beq.n	8007c1c <HAL_TIM_Base_Start+0x48>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a14      	ldr	r2, [pc, #80]	; (8007c60 <HAL_TIM_Base_Start+0x8c>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d004      	beq.n	8007c1c <HAL_TIM_Base_Start+0x48>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a13      	ldr	r2, [pc, #76]	; (8007c64 <HAL_TIM_Base_Start+0x90>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d111      	bne.n	8007c40 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f003 0307 	and.w	r3, r3, #7
 8007c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2b06      	cmp	r3, #6
 8007c2c:	d010      	beq.n	8007c50 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f042 0201 	orr.w	r2, r2, #1
 8007c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c3e:	e007      	b.n	8007c50 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f042 0201 	orr.w	r2, r2, #1
 8007c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bc80      	pop	{r7}
 8007c5a:	4770      	bx	lr
 8007c5c:	40012c00 	.word	0x40012c00
 8007c60:	40000400 	.word	0x40000400
 8007c64:	40000800 	.word	0x40000800

08007c68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d101      	bne.n	8007c80 <HAL_TIM_ConfigClockSource+0x18>
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	e0b3      	b.n	8007de8 <HAL_TIM_ConfigClockSource+0x180>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007c9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ca6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cb8:	d03e      	beq.n	8007d38 <HAL_TIM_ConfigClockSource+0xd0>
 8007cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cbe:	f200 8087 	bhi.w	8007dd0 <HAL_TIM_ConfigClockSource+0x168>
 8007cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cc6:	f000 8085 	beq.w	8007dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8007cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cce:	d87f      	bhi.n	8007dd0 <HAL_TIM_ConfigClockSource+0x168>
 8007cd0:	2b70      	cmp	r3, #112	; 0x70
 8007cd2:	d01a      	beq.n	8007d0a <HAL_TIM_ConfigClockSource+0xa2>
 8007cd4:	2b70      	cmp	r3, #112	; 0x70
 8007cd6:	d87b      	bhi.n	8007dd0 <HAL_TIM_ConfigClockSource+0x168>
 8007cd8:	2b60      	cmp	r3, #96	; 0x60
 8007cda:	d050      	beq.n	8007d7e <HAL_TIM_ConfigClockSource+0x116>
 8007cdc:	2b60      	cmp	r3, #96	; 0x60
 8007cde:	d877      	bhi.n	8007dd0 <HAL_TIM_ConfigClockSource+0x168>
 8007ce0:	2b50      	cmp	r3, #80	; 0x50
 8007ce2:	d03c      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0xf6>
 8007ce4:	2b50      	cmp	r3, #80	; 0x50
 8007ce6:	d873      	bhi.n	8007dd0 <HAL_TIM_ConfigClockSource+0x168>
 8007ce8:	2b40      	cmp	r3, #64	; 0x40
 8007cea:	d058      	beq.n	8007d9e <HAL_TIM_ConfigClockSource+0x136>
 8007cec:	2b40      	cmp	r3, #64	; 0x40
 8007cee:	d86f      	bhi.n	8007dd0 <HAL_TIM_ConfigClockSource+0x168>
 8007cf0:	2b30      	cmp	r3, #48	; 0x30
 8007cf2:	d064      	beq.n	8007dbe <HAL_TIM_ConfigClockSource+0x156>
 8007cf4:	2b30      	cmp	r3, #48	; 0x30
 8007cf6:	d86b      	bhi.n	8007dd0 <HAL_TIM_ConfigClockSource+0x168>
 8007cf8:	2b20      	cmp	r3, #32
 8007cfa:	d060      	beq.n	8007dbe <HAL_TIM_ConfigClockSource+0x156>
 8007cfc:	2b20      	cmp	r3, #32
 8007cfe:	d867      	bhi.n	8007dd0 <HAL_TIM_ConfigClockSource+0x168>
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d05c      	beq.n	8007dbe <HAL_TIM_ConfigClockSource+0x156>
 8007d04:	2b10      	cmp	r3, #16
 8007d06:	d05a      	beq.n	8007dbe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007d08:	e062      	b.n	8007dd0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6818      	ldr	r0, [r3, #0]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	6899      	ldr	r1, [r3, #8]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	f000 f942 	bl	8007fa2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	609a      	str	r2, [r3, #8]
      break;
 8007d36:	e04e      	b.n	8007dd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6818      	ldr	r0, [r3, #0]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	6899      	ldr	r1, [r3, #8]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	f000 f92b 	bl	8007fa2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689a      	ldr	r2, [r3, #8]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d5a:	609a      	str	r2, [r3, #8]
      break;
 8007d5c:	e03b      	b.n	8007dd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6818      	ldr	r0, [r3, #0]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	6859      	ldr	r1, [r3, #4]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f000 f8a2 	bl	8007eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2150      	movs	r1, #80	; 0x50
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 f8f9 	bl	8007f6e <TIM_ITRx_SetConfig>
      break;
 8007d7c:	e02b      	b.n	8007dd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6818      	ldr	r0, [r3, #0]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	6859      	ldr	r1, [r3, #4]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f000 f8c0 	bl	8007f10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2160      	movs	r1, #96	; 0x60
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 f8e9 	bl	8007f6e <TIM_ITRx_SetConfig>
      break;
 8007d9c:	e01b      	b.n	8007dd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6818      	ldr	r0, [r3, #0]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	6859      	ldr	r1, [r3, #4]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	461a      	mov	r2, r3
 8007dac:	f000 f882 	bl	8007eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2140      	movs	r1, #64	; 0x40
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 f8d9 	bl	8007f6e <TIM_ITRx_SetConfig>
      break;
 8007dbc:	e00b      	b.n	8007dd6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	4610      	mov	r0, r2
 8007dca:	f000 f8d0 	bl	8007f6e <TIM_ITRx_SetConfig>
        break;
 8007dce:	e002      	b.n	8007dd6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007dd0:	bf00      	nop
 8007dd2:	e000      	b.n	8007dd6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007dd4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a29      	ldr	r2, [pc, #164]	; (8007ea8 <TIM_Base_SetConfig+0xb8>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d00b      	beq.n	8007e20 <TIM_Base_SetConfig+0x30>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e0e:	d007      	beq.n	8007e20 <TIM_Base_SetConfig+0x30>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a26      	ldr	r2, [pc, #152]	; (8007eac <TIM_Base_SetConfig+0xbc>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d003      	beq.n	8007e20 <TIM_Base_SetConfig+0x30>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a25      	ldr	r2, [pc, #148]	; (8007eb0 <TIM_Base_SetConfig+0xc0>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d108      	bne.n	8007e32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a1c      	ldr	r2, [pc, #112]	; (8007ea8 <TIM_Base_SetConfig+0xb8>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d00b      	beq.n	8007e52 <TIM_Base_SetConfig+0x62>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e40:	d007      	beq.n	8007e52 <TIM_Base_SetConfig+0x62>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a19      	ldr	r2, [pc, #100]	; (8007eac <TIM_Base_SetConfig+0xbc>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d003      	beq.n	8007e52 <TIM_Base_SetConfig+0x62>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a18      	ldr	r2, [pc, #96]	; (8007eb0 <TIM_Base_SetConfig+0xc0>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d108      	bne.n	8007e64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a07      	ldr	r2, [pc, #28]	; (8007ea8 <TIM_Base_SetConfig+0xb8>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d103      	bne.n	8007e98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	691a      	ldr	r2, [r3, #16]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	615a      	str	r2, [r3, #20]
}
 8007e9e:	bf00      	nop
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bc80      	pop	{r7}
 8007ea6:	4770      	bx	lr
 8007ea8:	40012c00 	.word	0x40012c00
 8007eac:	40000400 	.word	0x40000400
 8007eb0:	40000800 	.word	0x40000800

08007eb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6a1b      	ldr	r3, [r3, #32]
 8007ec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	f023 0201 	bic.w	r2, r3, #1
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	011b      	lsls	r3, r3, #4
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f023 030a 	bic.w	r3, r3, #10
 8007ef0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	621a      	str	r2, [r3, #32]
}
 8007f06:	bf00      	nop
 8007f08:	371c      	adds	r7, #28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bc80      	pop	{r7}
 8007f0e:	4770      	bx	lr

08007f10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b087      	sub	sp, #28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a1b      	ldr	r3, [r3, #32]
 8007f20:	f023 0210 	bic.w	r2, r3, #16
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	031b      	lsls	r3, r3, #12
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	011b      	lsls	r3, r3, #4
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	621a      	str	r2, [r3, #32]
}
 8007f64:	bf00      	nop
 8007f66:	371c      	adds	r7, #28
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bc80      	pop	{r7}
 8007f6c:	4770      	bx	lr

08007f6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b085      	sub	sp, #20
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	f043 0307 	orr.w	r3, r3, #7
 8007f90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	609a      	str	r2, [r3, #8]
}
 8007f98:	bf00      	nop
 8007f9a:	3714      	adds	r7, #20
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bc80      	pop	{r7}
 8007fa0:	4770      	bx	lr

08007fa2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b087      	sub	sp, #28
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	60f8      	str	r0, [r7, #12]
 8007faa:	60b9      	str	r1, [r7, #8]
 8007fac:	607a      	str	r2, [r7, #4]
 8007fae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	021a      	lsls	r2, r3, #8
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	431a      	orrs	r2, r3
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	609a      	str	r2, [r3, #8]
}
 8007fd6:	bf00      	nop
 8007fd8:	371c      	adds	r7, #28
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bc80      	pop	{r7}
 8007fde:	4770      	bx	lr

08007fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d101      	bne.n	8007ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	e046      	b.n	8008086 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2202      	movs	r2, #2
 8008004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800801e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a16      	ldr	r2, [pc, #88]	; (8008090 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d00e      	beq.n	800805a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008044:	d009      	beq.n	800805a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a12      	ldr	r2, [pc, #72]	; (8008094 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d004      	beq.n	800805a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a10      	ldr	r2, [pc, #64]	; (8008098 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d10c      	bne.n	8008074 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	4313      	orrs	r3, r2
 800806a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	bc80      	pop	{r7}
 800808e:	4770      	bx	lr
 8008090:	40012c00 	.word	0x40012c00
 8008094:	40000400 	.word	0x40000400
 8008098:	40000800 	.word	0x40000800

0800809c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800809c:	b084      	sub	sp, #16
 800809e:	b480      	push	{r7}
 80080a0:	b083      	sub	sp, #12
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	f107 0014 	add.w	r0, r7, #20
 80080aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bc80      	pop	{r7}
 80080b8:	b004      	add	sp, #16
 80080ba:	4770      	bx	lr

080080bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80080cc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80080d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bc80      	pop	{r7}
 80080e6:	4770      	bx	lr

080080e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80080f0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80080f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	b29b      	uxth	r3, r3
 8008102:	43db      	mvns	r3, r3
 8008104:	b29b      	uxth	r3, r3
 8008106:	4013      	ands	r3, r2
 8008108:	b29a      	uxth	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	bc80      	pop	{r7}
 800811a:	4770      	bx	lr

0800811c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	460b      	mov	r3, r1
 8008126:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	bc80      	pop	{r7}
 8008132:	4770      	bx	lr

08008134 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008134:	b084      	sub	sp, #16
 8008136:	b480      	push	{r7}
 8008138:	b083      	sub	sp, #12
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	f107 0014 	add.w	r0, r7, #20
 8008142:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	bc80      	pop	{r7}
 8008170:	b004      	add	sp, #16
 8008172:	4770      	bx	lr

08008174 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008174:	b480      	push	{r7}
 8008176:	b09b      	sub	sp, #108	; 0x6c
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	b29b      	uxth	r3, r3
 8008192:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800819a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	78db      	ldrb	r3, [r3, #3]
 80081a2:	2b03      	cmp	r3, #3
 80081a4:	d81f      	bhi.n	80081e6 <USB_ActivateEndpoint+0x72>
 80081a6:	a201      	add	r2, pc, #4	; (adr r2, 80081ac <USB_ActivateEndpoint+0x38>)
 80081a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ac:	080081bd 	.word	0x080081bd
 80081b0:	080081d9 	.word	0x080081d9
 80081b4:	080081ef 	.word	0x080081ef
 80081b8:	080081cb 	.word	0x080081cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80081bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80081c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081c4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80081c8:	e012      	b.n	80081f0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80081ca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80081ce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80081d2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80081d6:	e00b      	b.n	80081f0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80081d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80081dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80081e0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80081e4:	e004      	b.n	80081f0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80081ec:	e000      	b.n	80081f0 <USB_ActivateEndpoint+0x7c>
      break;
 80081ee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	441a      	add	r2, r3
 80081fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80081fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800820a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800820e:	b29b      	uxth	r3, r3
 8008210:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4413      	add	r3, r2
 800821c:	881b      	ldrh	r3, [r3, #0]
 800821e:	b29b      	uxth	r3, r3
 8008220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008228:	b29a      	uxth	r2, r3
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	b29b      	uxth	r3, r3
 8008230:	4313      	orrs	r3, r2
 8008232:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	441a      	add	r2, r3
 8008240:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800824c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008254:	b29b      	uxth	r3, r3
 8008256:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	7b1b      	ldrb	r3, [r3, #12]
 800825c:	2b00      	cmp	r3, #0
 800825e:	f040 8149 	bne.w	80084f4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	785b      	ldrb	r3, [r3, #1]
 8008266:	2b00      	cmp	r3, #0
 8008268:	f000 8084 	beq.w	8008374 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	617b      	str	r3, [r7, #20]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008276:	b29b      	uxth	r3, r3
 8008278:	461a      	mov	r2, r3
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	4413      	add	r3, r2
 800827e:	617b      	str	r3, [r7, #20]
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	011a      	lsls	r2, r3, #4
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800828e:	613b      	str	r3, [r7, #16]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	88db      	ldrh	r3, [r3, #6]
 8008294:	085b      	lsrs	r3, r3, #1
 8008296:	b29b      	uxth	r3, r3
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	b29a      	uxth	r2, r3
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	881b      	ldrh	r3, [r3, #0]
 80082ac:	81fb      	strh	r3, [r7, #14]
 80082ae:	89fb      	ldrh	r3, [r7, #14]
 80082b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d01b      	beq.n	80082f0 <USB_ActivateEndpoint+0x17c>
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ce:	81bb      	strh	r3, [r7, #12]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	441a      	add	r2, r3
 80082da:	89bb      	ldrh	r3, [r7, #12]
 80082dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	78db      	ldrb	r3, [r3, #3]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d020      	beq.n	800833a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	b29b      	uxth	r3, r3
 8008306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800830a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800830e:	813b      	strh	r3, [r7, #8]
 8008310:	893b      	ldrh	r3, [r7, #8]
 8008312:	f083 0320 	eor.w	r3, r3, #32
 8008316:	813b      	strh	r3, [r7, #8]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	441a      	add	r2, r3
 8008322:	893b      	ldrh	r3, [r7, #8]
 8008324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800832c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008334:	b29b      	uxth	r3, r3
 8008336:	8013      	strh	r3, [r2, #0]
 8008338:	e27f      	b.n	800883a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4413      	add	r3, r2
 8008344:	881b      	ldrh	r3, [r3, #0]
 8008346:	b29b      	uxth	r3, r3
 8008348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800834c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008350:	817b      	strh	r3, [r7, #10]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	441a      	add	r2, r3
 800835c:	897b      	ldrh	r3, [r7, #10]
 800835e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800836a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800836e:	b29b      	uxth	r3, r3
 8008370:	8013      	strh	r3, [r2, #0]
 8008372:	e262      	b.n	800883a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800837e:	b29b      	uxth	r3, r3
 8008380:	461a      	mov	r2, r3
 8008382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008384:	4413      	add	r3, r2
 8008386:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	011a      	lsls	r2, r3, #4
 800838e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008390:	4413      	add	r3, r2
 8008392:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008396:	62bb      	str	r3, [r7, #40]	; 0x28
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	88db      	ldrh	r3, [r3, #6]
 800839c:	085b      	lsrs	r3, r3, #1
 800839e:	b29b      	uxth	r3, r3
 80083a0:	005b      	lsls	r3, r3, #1
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	627b      	str	r3, [r7, #36]	; 0x24
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	461a      	mov	r2, r3
 80083b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b8:	4413      	add	r3, r2
 80083ba:	627b      	str	r3, [r7, #36]	; 0x24
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	011a      	lsls	r2, r3, #4
 80083c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c4:	4413      	add	r3, r2
 80083c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80083ca:	623b      	str	r3, [r7, #32]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d112      	bne.n	80083fa <USB_ActivateEndpoint+0x286>
 80083d4:	6a3b      	ldr	r3, [r7, #32]
 80083d6:	881b      	ldrh	r3, [r3, #0]
 80083d8:	b29b      	uxth	r3, r3
 80083da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083de:	b29a      	uxth	r2, r3
 80083e0:	6a3b      	ldr	r3, [r7, #32]
 80083e2:	801a      	strh	r2, [r3, #0]
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	801a      	strh	r2, [r3, #0]
 80083f8:	e02f      	b.n	800845a <USB_ActivateEndpoint+0x2e6>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	2b3e      	cmp	r3, #62	; 0x3e
 8008400:	d813      	bhi.n	800842a <USB_ActivateEndpoint+0x2b6>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	085b      	lsrs	r3, r3, #1
 8008408:	663b      	str	r3, [r7, #96]	; 0x60
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <USB_ActivateEndpoint+0x2a8>
 8008416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008418:	3301      	adds	r3, #1
 800841a:	663b      	str	r3, [r7, #96]	; 0x60
 800841c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800841e:	b29b      	uxth	r3, r3
 8008420:	029b      	lsls	r3, r3, #10
 8008422:	b29a      	uxth	r2, r3
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	801a      	strh	r2, [r3, #0]
 8008428:	e017      	b.n	800845a <USB_ActivateEndpoint+0x2e6>
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	095b      	lsrs	r3, r3, #5
 8008430:	663b      	str	r3, [r7, #96]	; 0x60
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	f003 031f 	and.w	r3, r3, #31
 800843a:	2b00      	cmp	r3, #0
 800843c:	d102      	bne.n	8008444 <USB_ActivateEndpoint+0x2d0>
 800843e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008440:	3b01      	subs	r3, #1
 8008442:	663b      	str	r3, [r7, #96]	; 0x60
 8008444:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008446:	b29b      	uxth	r3, r3
 8008448:	029b      	lsls	r3, r3, #10
 800844a:	b29b      	uxth	r3, r3
 800844c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008454:	b29a      	uxth	r2, r3
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	83fb      	strh	r3, [r7, #30]
 8008468:	8bfb      	ldrh	r3, [r7, #30]
 800846a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d01b      	beq.n	80084aa <USB_ActivateEndpoint+0x336>
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	b29b      	uxth	r3, r3
 8008480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008488:	83bb      	strh	r3, [r7, #28]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	441a      	add	r2, r3
 8008494:	8bbb      	ldrh	r3, [r7, #28]
 8008496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800849a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800849e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c0:	837b      	strh	r3, [r7, #26]
 80084c2:	8b7b      	ldrh	r3, [r7, #26]
 80084c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80084c8:	837b      	strh	r3, [r7, #26]
 80084ca:	8b7b      	ldrh	r3, [r7, #26]
 80084cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80084d0:	837b      	strh	r3, [r7, #26]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	441a      	add	r2, r3
 80084dc:	8b7b      	ldrh	r3, [r7, #26]
 80084de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	8013      	strh	r3, [r2, #0]
 80084f2:	e1a2      	b.n	800883a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	b29b      	uxth	r3, r3
 8008502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800850a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	441a      	add	r2, r3
 8008518:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800851c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008524:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800852c:	b29b      	uxth	r3, r3
 800852e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	65bb      	str	r3, [r7, #88]	; 0x58
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800853a:	b29b      	uxth	r3, r3
 800853c:	461a      	mov	r2, r3
 800853e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008540:	4413      	add	r3, r2
 8008542:	65bb      	str	r3, [r7, #88]	; 0x58
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	011a      	lsls	r2, r3, #4
 800854a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800854c:	4413      	add	r3, r2
 800854e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008552:	657b      	str	r3, [r7, #84]	; 0x54
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	891b      	ldrh	r3, [r3, #8]
 8008558:	085b      	lsrs	r3, r3, #1
 800855a:	b29b      	uxth	r3, r3
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	b29a      	uxth	r2, r3
 8008560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008562:	801a      	strh	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	653b      	str	r3, [r7, #80]	; 0x50
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800856e:	b29b      	uxth	r3, r3
 8008570:	461a      	mov	r2, r3
 8008572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008574:	4413      	add	r3, r2
 8008576:	653b      	str	r3, [r7, #80]	; 0x50
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	011a      	lsls	r2, r3, #4
 800857e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008580:	4413      	add	r3, r2
 8008582:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	895b      	ldrh	r3, [r3, #10]
 800858c:	085b      	lsrs	r3, r3, #1
 800858e:	b29b      	uxth	r3, r3
 8008590:	005b      	lsls	r3, r3, #1
 8008592:	b29a      	uxth	r2, r3
 8008594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008596:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	785b      	ldrb	r3, [r3, #1]
 800859c:	2b00      	cmp	r3, #0
 800859e:	f040 8091 	bne.w	80086c4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80085b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80085b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d01b      	beq.n	80085f2 <USB_ActivateEndpoint+0x47e>
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085d0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	441a      	add	r2, r3
 80085dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80085de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	873b      	strh	r3, [r7, #56]	; 0x38
 8008600:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008606:	2b00      	cmp	r3, #0
 8008608:	d01b      	beq.n	8008642 <USB_ActivateEndpoint+0x4ce>
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	881b      	ldrh	r3, [r3, #0]
 8008616:	b29b      	uxth	r3, r3
 8008618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800861c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008620:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	441a      	add	r2, r3
 800862c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800862e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800863a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800863e:	b29b      	uxth	r3, r3
 8008640:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4413      	add	r3, r2
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	b29b      	uxth	r3, r3
 8008650:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008658:	86bb      	strh	r3, [r7, #52]	; 0x34
 800865a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800865c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008660:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008662:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008664:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008668:	86bb      	strh	r3, [r7, #52]	; 0x34
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	441a      	add	r2, r3
 8008674:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800867a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800867e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008686:	b29b      	uxth	r3, r3
 8008688:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	b29b      	uxth	r3, r3
 8008698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800869c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086a0:	867b      	strh	r3, [r7, #50]	; 0x32
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	441a      	add	r2, r3
 80086ac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80086ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086be:	b29b      	uxth	r3, r3
 80086c0:	8013      	strh	r3, [r2, #0]
 80086c2:	e0ba      	b.n	800883a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	881b      	ldrh	r3, [r3, #0]
 80086d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80086d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80086d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d01d      	beq.n	800871c <USB_ActivateEndpoint+0x5a8>
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	881b      	ldrh	r3, [r3, #0]
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	441a      	add	r2, r3
 8008704:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800870c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008718:	b29b      	uxth	r3, r3
 800871a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800872c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008734:	2b00      	cmp	r3, #0
 8008736:	d01d      	beq.n	8008774 <USB_ActivateEndpoint+0x600>
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	881b      	ldrh	r3, [r3, #0]
 8008744:	b29b      	uxth	r3, r3
 8008746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800874a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800874e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	441a      	add	r2, r3
 800875c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800876c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008770:	b29b      	uxth	r3, r3
 8008772:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	78db      	ldrb	r3, [r3, #3]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d024      	beq.n	80087c6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4413      	add	r3, r2
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	b29b      	uxth	r3, r3
 800878a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800878e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008792:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008796:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800879a:	f083 0320 	eor.w	r3, r3, #32
 800879e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	441a      	add	r2, r3
 80087ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80087b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	8013      	strh	r3, [r2, #0]
 80087c4:	e01d      	b.n	8008802 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	881b      	ldrh	r3, [r3, #0]
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	441a      	add	r2, r3
 80087ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80087ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087fe:	b29b      	uxth	r3, r3
 8008800:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	881b      	ldrh	r3, [r3, #0]
 800880e:	b29b      	uxth	r3, r3
 8008810:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008818:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	441a      	add	r2, r3
 8008824:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800882a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800882e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008836:	b29b      	uxth	r3, r3
 8008838:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800883a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800883e:	4618      	mov	r0, r3
 8008840:	376c      	adds	r7, #108	; 0x6c
 8008842:	46bd      	mov	sp, r7
 8008844:	bc80      	pop	{r7}
 8008846:	4770      	bx	lr

08008848 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008848:	b480      	push	{r7}
 800884a:	b08d      	sub	sp, #52	; 0x34
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	7b1b      	ldrb	r3, [r3, #12]
 8008856:	2b00      	cmp	r3, #0
 8008858:	f040 808e 	bne.w	8008978 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	785b      	ldrb	r3, [r3, #1]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d044      	beq.n	80088ee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	4413      	add	r3, r2
 800886e:	881b      	ldrh	r3, [r3, #0]
 8008870:	81bb      	strh	r3, [r7, #12]
 8008872:	89bb      	ldrh	r3, [r7, #12]
 8008874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008878:	2b00      	cmp	r3, #0
 800887a:	d01b      	beq.n	80088b4 <USB_DeactivateEndpoint+0x6c>
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	4413      	add	r3, r2
 8008886:	881b      	ldrh	r3, [r3, #0]
 8008888:	b29b      	uxth	r3, r3
 800888a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800888e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008892:	817b      	strh	r3, [r7, #10]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	441a      	add	r2, r3
 800889e:	897b      	ldrh	r3, [r7, #10]
 80088a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4413      	add	r3, r2
 80088be:	881b      	ldrh	r3, [r3, #0]
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088ca:	813b      	strh	r3, [r7, #8]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	441a      	add	r2, r3
 80088d6:	893b      	ldrh	r3, [r7, #8]
 80088d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	8013      	strh	r3, [r2, #0]
 80088ec:	e192      	b.n	8008c14 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	881b      	ldrh	r3, [r3, #0]
 80088fa:	827b      	strh	r3, [r7, #18]
 80088fc:	8a7b      	ldrh	r3, [r7, #18]
 80088fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008902:	2b00      	cmp	r3, #0
 8008904:	d01b      	beq.n	800893e <USB_DeactivateEndpoint+0xf6>
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	4413      	add	r3, r2
 8008910:	881b      	ldrh	r3, [r3, #0]
 8008912:	b29b      	uxth	r3, r3
 8008914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800891c:	823b      	strh	r3, [r7, #16]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	441a      	add	r2, r3
 8008928:	8a3b      	ldrh	r3, [r7, #16]
 800892a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800892e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008932:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800893a:	b29b      	uxth	r3, r3
 800893c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4413      	add	r3, r2
 8008948:	881b      	ldrh	r3, [r3, #0]
 800894a:	b29b      	uxth	r3, r3
 800894c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008954:	81fb      	strh	r3, [r7, #14]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	441a      	add	r2, r3
 8008960:	89fb      	ldrh	r3, [r7, #14]
 8008962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800896a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800896e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008972:	b29b      	uxth	r3, r3
 8008974:	8013      	strh	r3, [r2, #0]
 8008976:	e14d      	b.n	8008c14 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	785b      	ldrb	r3, [r3, #1]
 800897c:	2b00      	cmp	r3, #0
 800897e:	f040 80a5 	bne.w	8008acc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	843b      	strh	r3, [r7, #32]
 8008990:	8c3b      	ldrh	r3, [r7, #32]
 8008992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d01b      	beq.n	80089d2 <USB_DeactivateEndpoint+0x18a>
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	881b      	ldrh	r3, [r3, #0]
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089b0:	83fb      	strh	r3, [r7, #30]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	441a      	add	r2, r3
 80089bc:	8bfb      	ldrh	r3, [r7, #30]
 80089be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80089ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	4413      	add	r3, r2
 80089dc:	881b      	ldrh	r3, [r3, #0]
 80089de:	83bb      	strh	r3, [r7, #28]
 80089e0:	8bbb      	ldrh	r3, [r7, #28]
 80089e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d01b      	beq.n	8008a22 <USB_DeactivateEndpoint+0x1da>
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4413      	add	r3, r2
 80089f4:	881b      	ldrh	r3, [r3, #0]
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a00:	837b      	strh	r3, [r7, #26]
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	441a      	add	r2, r3
 8008a0c:	8b7b      	ldrh	r3, [r7, #26]
 8008a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	881b      	ldrh	r3, [r3, #0]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a38:	833b      	strh	r3, [r7, #24]
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	441a      	add	r2, r3
 8008a44:	8b3b      	ldrh	r3, [r7, #24]
 8008a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	881b      	ldrh	r3, [r3, #0]
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a70:	82fb      	strh	r3, [r7, #22]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	441a      	add	r2, r3
 8008a7c:	8afb      	ldrh	r3, [r7, #22]
 8008a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	4413      	add	r3, r2
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aa8:	82bb      	strh	r3, [r7, #20]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	441a      	add	r2, r3
 8008ab4:	8abb      	ldrh	r3, [r7, #20]
 8008ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	8013      	strh	r3, [r2, #0]
 8008aca:	e0a3      	b.n	8008c14 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	4413      	add	r3, r2
 8008ad6:	881b      	ldrh	r3, [r3, #0]
 8008ad8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008ada:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d01b      	beq.n	8008b1c <USB_DeactivateEndpoint+0x2d4>
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4413      	add	r3, r2
 8008aee:	881b      	ldrh	r3, [r3, #0]
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008afa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	441a      	add	r2, r3
 8008b06:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008b08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008b2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d01b      	beq.n	8008b6c <USB_DeactivateEndpoint+0x324>
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b4a:	853b      	strh	r3, [r7, #40]	; 0x28
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	441a      	add	r2, r3
 8008b56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4413      	add	r3, r2
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b82:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	441a      	add	r2, r3
 8008b8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	881b      	ldrh	r3, [r3, #0]
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bba:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	441a      	add	r2, r3
 8008bc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4413      	add	r3, r2
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bf2:	847b      	strh	r3, [r7, #34]	; 0x22
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	441a      	add	r2, r3
 8008bfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3734      	adds	r7, #52	; 0x34
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bc80      	pop	{r7}
 8008c1e:	4770      	bx	lr

08008c20 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b0cc      	sub	sp, #304	; 0x130
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	1d3b      	adds	r3, r7, #4
 8008c28:	6018      	str	r0, [r3, #0]
 8008c2a:	463b      	mov	r3, r7
 8008c2c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c2e:	463b      	mov	r3, r7
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	785b      	ldrb	r3, [r3, #1]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	f040 872e 	bne.w	8009a96 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008c3a:	463b      	mov	r3, r7
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	699a      	ldr	r2, [r3, #24]
 8008c40:	463b      	mov	r3, r7
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d905      	bls.n	8008c56 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008c4a:	463b      	mov	r3, r7
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008c54:	e004      	b.n	8008c60 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008c56:	463b      	mov	r3, r7
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008c60:	463b      	mov	r3, r7
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	7b1b      	ldrb	r3, [r3, #12]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d134      	bne.n	8008cd4 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008c6a:	463b      	mov	r3, r7
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	6959      	ldr	r1, [r3, #20]
 8008c70:	463b      	mov	r3, r7
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	88da      	ldrh	r2, [r3, #6]
 8008c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	1d38      	adds	r0, r7, #4
 8008c7e:	6800      	ldr	r0, [r0, #0]
 8008c80:	f001 fc03 	bl	800a48a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008c84:	f107 0310 	add.w	r3, r7, #16
 8008c88:	1d3a      	adds	r2, r7, #4
 8008c8a:	6812      	ldr	r2, [r2, #0]
 8008c8c:	601a      	str	r2, [r3, #0]
 8008c8e:	1d3b      	adds	r3, r7, #4
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	4619      	mov	r1, r3
 8008c9a:	f107 0310 	add.w	r3, r7, #16
 8008c9e:	f107 0210 	add.w	r2, r7, #16
 8008ca2:	6812      	ldr	r2, [r2, #0]
 8008ca4:	440a      	add	r2, r1
 8008ca6:	601a      	str	r2, [r3, #0]
 8008ca8:	463b      	mov	r3, r7
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	011a      	lsls	r2, r3, #4
 8008cb0:	f107 0310 	add.w	r3, r7, #16
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008cbc:	f107 030c 	add.w	r3, r7, #12
 8008cc0:	601a      	str	r2, [r3, #0]
 8008cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	f107 030c 	add.w	r3, r7, #12
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	801a      	strh	r2, [r3, #0]
 8008cd0:	f000 beac 	b.w	8009a2c <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008cd4:	463b      	mov	r3, r7
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	78db      	ldrb	r3, [r3, #3]
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	f040 838c 	bne.w	80093f8 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008ce0:	463b      	mov	r3, r7
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6a1a      	ldr	r2, [r3, #32]
 8008ce6:	463b      	mov	r3, r7
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	f240 8330 	bls.w	8009352 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008cf2:	1d3b      	adds	r3, r7, #4
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	463b      	mov	r3, r7
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	4413      	add	r3, r2
 8008d00:	881b      	ldrh	r3, [r3, #0]
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d0c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008d10:	1d3b      	adds	r3, r7, #4
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	463b      	mov	r3, r7
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	441a      	add	r2, r3
 8008d1e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d2a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008d36:	463b      	mov	r3, r7
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	6a1a      	ldr	r2, [r3, #32]
 8008d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d40:	1ad2      	subs	r2, r2, r3
 8008d42:	463b      	mov	r3, r7
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d48:	1d3b      	adds	r3, r7, #4
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	463b      	mov	r3, r7
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	4413      	add	r3, r2
 8008d56:	881b      	ldrh	r3, [r3, #0]
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 819e 	beq.w	80090a0 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d68:	1d3a      	adds	r2, r7, #4
 8008d6a:	6812      	ldr	r2, [r2, #0]
 8008d6c:	601a      	str	r2, [r3, #0]
 8008d6e:	463b      	mov	r3, r7
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	785b      	ldrb	r3, [r3, #1]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d17a      	bne.n	8008e6e <USB_EPStartXfer+0x24e>
 8008d78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008d7c:	1d3a      	adds	r2, r7, #4
 8008d7e:	6812      	ldr	r2, [r2, #0]
 8008d80:	601a      	str	r2, [r3, #0]
 8008d82:	1d3b      	adds	r3, r7, #4
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008d92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008d96:	6812      	ldr	r2, [r2, #0]
 8008d98:	440a      	add	r2, r1
 8008d9a:	601a      	str	r2, [r3, #0]
 8008d9c:	463b      	mov	r3, r7
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	011a      	lsls	r2, r3, #4
 8008da4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4413      	add	r3, r2
 8008dac:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d11a      	bne.n	8008df4 <USB_EPStartXfer+0x1d4>
 8008dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	881b      	ldrh	r3, [r3, #0]
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	801a      	strh	r2, [r3, #0]
 8008dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	881b      	ldrh	r3, [r3, #0]
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	801a      	strh	r2, [r3, #0]
 8008df2:	e062      	b.n	8008eba <USB_EPStartXfer+0x29a>
 8008df4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008df8:	2b3e      	cmp	r3, #62	; 0x3e
 8008dfa:	d819      	bhi.n	8008e30 <USB_EPStartXfer+0x210>
 8008dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e00:	085b      	lsrs	r3, r3, #1
 8008e02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e0a:	f003 0301 	and.w	r3, r3, #1
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d004      	beq.n	8008e1c <USB_EPStartXfer+0x1fc>
 8008e12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e16:	3301      	adds	r3, #1
 8008e18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008e1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	029b      	lsls	r3, r3, #10
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	801a      	strh	r2, [r3, #0]
 8008e2e:	e044      	b.n	8008eba <USB_EPStartXfer+0x29a>
 8008e30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e34:	095b      	lsrs	r3, r3, #5
 8008e36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e3e:	f003 031f 	and.w	r3, r3, #31
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d104      	bne.n	8008e50 <USB_EPStartXfer+0x230>
 8008e46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008e50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	029b      	lsls	r3, r3, #10
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	801a      	strh	r2, [r3, #0]
 8008e6c:	e025      	b.n	8008eba <USB_EPStartXfer+0x29a>
 8008e6e:	463b      	mov	r3, r7
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	785b      	ldrb	r3, [r3, #1]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d120      	bne.n	8008eba <USB_EPStartXfer+0x29a>
 8008e78:	1d3b      	adds	r3, r7, #4
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	4619      	mov	r1, r3
 8008e84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e88:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008e8c:	6812      	ldr	r2, [r2, #0]
 8008e8e:	440a      	add	r2, r1
 8008e90:	601a      	str	r2, [r3, #0]
 8008e92:	463b      	mov	r3, r7
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	011a      	lsls	r2, r3, #4
 8008e9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008ea6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008eaa:	601a      	str	r2, [r3, #0]
 8008eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008eba:	463b      	mov	r3, r7
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	895b      	ldrh	r3, [r3, #10]
 8008ec0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ec4:	463b      	mov	r3, r7
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6959      	ldr	r1, [r3, #20]
 8008eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ed4:	1d38      	adds	r0, r7, #4
 8008ed6:	6800      	ldr	r0, [r0, #0]
 8008ed8:	f001 fad7 	bl	800a48a <USB_WritePMA>
            ep->xfer_buff += len;
 8008edc:	463b      	mov	r3, r7
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	695a      	ldr	r2, [r3, #20]
 8008ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ee6:	441a      	add	r2, r3
 8008ee8:	463b      	mov	r3, r7
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008eee:	463b      	mov	r3, r7
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	6a1a      	ldr	r2, [r3, #32]
 8008ef4:	463b      	mov	r3, r7
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d909      	bls.n	8008f12 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8008efe:	463b      	mov	r3, r7
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6a1a      	ldr	r2, [r3, #32]
 8008f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f08:	1ad2      	subs	r2, r2, r3
 8008f0a:	463b      	mov	r3, r7
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	621a      	str	r2, [r3, #32]
 8008f10:	e008      	b.n	8008f24 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8008f12:	463b      	mov	r3, r7
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008f1c:	463b      	mov	r3, r7
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2200      	movs	r2, #0
 8008f22:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f24:	463b      	mov	r3, r7
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	785b      	ldrb	r3, [r3, #1]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d17a      	bne.n	8009024 <USB_EPStartXfer+0x404>
 8008f2e:	f107 0318 	add.w	r3, r7, #24
 8008f32:	1d3a      	adds	r2, r7, #4
 8008f34:	6812      	ldr	r2, [r2, #0]
 8008f36:	601a      	str	r2, [r3, #0]
 8008f38:	1d3b      	adds	r3, r7, #4
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	4619      	mov	r1, r3
 8008f44:	f107 0318 	add.w	r3, r7, #24
 8008f48:	f107 0218 	add.w	r2, r7, #24
 8008f4c:	6812      	ldr	r2, [r2, #0]
 8008f4e:	440a      	add	r2, r1
 8008f50:	601a      	str	r2, [r3, #0]
 8008f52:	463b      	mov	r3, r7
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	011a      	lsls	r2, r3, #4
 8008f5a:	f107 0318 	add.w	r3, r7, #24
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4413      	add	r3, r2
 8008f62:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008f66:	f107 0314 	add.w	r3, r7, #20
 8008f6a:	601a      	str	r2, [r3, #0]
 8008f6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d11a      	bne.n	8008faa <USB_EPStartXfer+0x38a>
 8008f74:	f107 0314 	add.w	r3, r7, #20
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	f107 0314 	add.w	r3, r7, #20
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	801a      	strh	r2, [r3, #0]
 8008f8c:	f107 0314 	add.w	r3, r7, #20
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	f107 0314 	add.w	r3, r7, #20
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	801a      	strh	r2, [r3, #0]
 8008fa8:	e067      	b.n	800907a <USB_EPStartXfer+0x45a>
 8008faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fae:	2b3e      	cmp	r3, #62	; 0x3e
 8008fb0:	d819      	bhi.n	8008fe6 <USB_EPStartXfer+0x3c6>
 8008fb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fb6:	085b      	lsrs	r3, r3, #1
 8008fb8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d004      	beq.n	8008fd2 <USB_EPStartXfer+0x3b2>
 8008fc8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008fcc:	3301      	adds	r3, #1
 8008fce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008fd2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	029b      	lsls	r3, r3, #10
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	f107 0314 	add.w	r3, r7, #20
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	801a      	strh	r2, [r3, #0]
 8008fe4:	e049      	b.n	800907a <USB_EPStartXfer+0x45a>
 8008fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fea:	095b      	lsrs	r3, r3, #5
 8008fec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ff4:	f003 031f 	and.w	r3, r3, #31
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d104      	bne.n	8009006 <USB_EPStartXfer+0x3e6>
 8008ffc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009000:	3b01      	subs	r3, #1
 8009002:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009006:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800900a:	b29b      	uxth	r3, r3
 800900c:	029b      	lsls	r3, r3, #10
 800900e:	b29b      	uxth	r3, r3
 8009010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009018:	b29a      	uxth	r2, r3
 800901a:	f107 0314 	add.w	r3, r7, #20
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	801a      	strh	r2, [r3, #0]
 8009022:	e02a      	b.n	800907a <USB_EPStartXfer+0x45a>
 8009024:	463b      	mov	r3, r7
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	785b      	ldrb	r3, [r3, #1]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d125      	bne.n	800907a <USB_EPStartXfer+0x45a>
 800902e:	f107 0320 	add.w	r3, r7, #32
 8009032:	1d3a      	adds	r2, r7, #4
 8009034:	6812      	ldr	r2, [r2, #0]
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	1d3b      	adds	r3, r7, #4
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009040:	b29b      	uxth	r3, r3
 8009042:	4619      	mov	r1, r3
 8009044:	f107 0320 	add.w	r3, r7, #32
 8009048:	f107 0220 	add.w	r2, r7, #32
 800904c:	6812      	ldr	r2, [r2, #0]
 800904e:	440a      	add	r2, r1
 8009050:	601a      	str	r2, [r3, #0]
 8009052:	463b      	mov	r3, r7
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	011a      	lsls	r2, r3, #4
 800905a:	f107 0320 	add.w	r3, r7, #32
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4413      	add	r3, r2
 8009062:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009066:	f107 031c 	add.w	r3, r7, #28
 800906a:	601a      	str	r2, [r3, #0]
 800906c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009070:	b29a      	uxth	r2, r3
 8009072:	f107 031c 	add.w	r3, r7, #28
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800907a:	463b      	mov	r3, r7
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	891b      	ldrh	r3, [r3, #8]
 8009080:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009084:	463b      	mov	r3, r7
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6959      	ldr	r1, [r3, #20]
 800908a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800908e:	b29b      	uxth	r3, r3
 8009090:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009094:	1d38      	adds	r0, r7, #4
 8009096:	6800      	ldr	r0, [r0, #0]
 8009098:	f001 f9f7 	bl	800a48a <USB_WritePMA>
 800909c:	f000 bcc6 	b.w	8009a2c <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80090a0:	463b      	mov	r3, r7
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	785b      	ldrb	r3, [r3, #1]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d164      	bne.n	8009174 <USB_EPStartXfer+0x554>
 80090aa:	1d3b      	adds	r3, r7, #4
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80090b0:	1d3b      	adds	r3, r7, #4
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	461a      	mov	r2, r3
 80090bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090be:	4413      	add	r3, r2
 80090c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80090c2:	463b      	mov	r3, r7
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	011a      	lsls	r2, r3, #4
 80090ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090cc:	4413      	add	r3, r2
 80090ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090d2:	647b      	str	r3, [r7, #68]	; 0x44
 80090d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d112      	bne.n	8009102 <USB_EPStartXfer+0x4e2>
 80090dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ea:	801a      	strh	r2, [r3, #0]
 80090ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ee:	881b      	ldrh	r3, [r3, #0]
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090fe:	801a      	strh	r2, [r3, #0]
 8009100:	e057      	b.n	80091b2 <USB_EPStartXfer+0x592>
 8009102:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009106:	2b3e      	cmp	r3, #62	; 0x3e
 8009108:	d817      	bhi.n	800913a <USB_EPStartXfer+0x51a>
 800910a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800910e:	085b      	lsrs	r3, r3, #1
 8009110:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009118:	f003 0301 	and.w	r3, r3, #1
 800911c:	2b00      	cmp	r3, #0
 800911e:	d004      	beq.n	800912a <USB_EPStartXfer+0x50a>
 8009120:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009124:	3301      	adds	r3, #1
 8009126:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800912a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800912e:	b29b      	uxth	r3, r3
 8009130:	029b      	lsls	r3, r3, #10
 8009132:	b29a      	uxth	r2, r3
 8009134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009136:	801a      	strh	r2, [r3, #0]
 8009138:	e03b      	b.n	80091b2 <USB_EPStartXfer+0x592>
 800913a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800913e:	095b      	lsrs	r3, r3, #5
 8009140:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009148:	f003 031f 	and.w	r3, r3, #31
 800914c:	2b00      	cmp	r3, #0
 800914e:	d104      	bne.n	800915a <USB_EPStartXfer+0x53a>
 8009150:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009154:	3b01      	subs	r3, #1
 8009156:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800915a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800915e:	b29b      	uxth	r3, r3
 8009160:	029b      	lsls	r3, r3, #10
 8009162:	b29b      	uxth	r3, r3
 8009164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800916c:	b29a      	uxth	r2, r3
 800916e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009170:	801a      	strh	r2, [r3, #0]
 8009172:	e01e      	b.n	80091b2 <USB_EPStartXfer+0x592>
 8009174:	463b      	mov	r3, r7
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	785b      	ldrb	r3, [r3, #1]
 800917a:	2b01      	cmp	r3, #1
 800917c:	d119      	bne.n	80091b2 <USB_EPStartXfer+0x592>
 800917e:	1d3b      	adds	r3, r7, #4
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	653b      	str	r3, [r7, #80]	; 0x50
 8009184:	1d3b      	adds	r3, r7, #4
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800918c:	b29b      	uxth	r3, r3
 800918e:	461a      	mov	r2, r3
 8009190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009192:	4413      	add	r3, r2
 8009194:	653b      	str	r3, [r7, #80]	; 0x50
 8009196:	463b      	mov	r3, r7
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	011a      	lsls	r2, r3, #4
 800919e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091a0:	4413      	add	r3, r2
 80091a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80091b2:	463b      	mov	r3, r7
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	891b      	ldrh	r3, [r3, #8]
 80091b8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091bc:	463b      	mov	r3, r7
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6959      	ldr	r1, [r3, #20]
 80091c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80091cc:	1d38      	adds	r0, r7, #4
 80091ce:	6800      	ldr	r0, [r0, #0]
 80091d0:	f001 f95b 	bl	800a48a <USB_WritePMA>
            ep->xfer_buff += len;
 80091d4:	463b      	mov	r3, r7
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	695a      	ldr	r2, [r3, #20]
 80091da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091de:	441a      	add	r2, r3
 80091e0:	463b      	mov	r3, r7
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80091e6:	463b      	mov	r3, r7
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	6a1a      	ldr	r2, [r3, #32]
 80091ec:	463b      	mov	r3, r7
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d909      	bls.n	800920a <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 80091f6:	463b      	mov	r3, r7
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	6a1a      	ldr	r2, [r3, #32]
 80091fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009200:	1ad2      	subs	r2, r2, r3
 8009202:	463b      	mov	r3, r7
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	621a      	str	r2, [r3, #32]
 8009208:	e008      	b.n	800921c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800920a:	463b      	mov	r3, r7
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	6a1b      	ldr	r3, [r3, #32]
 8009210:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8009214:	463b      	mov	r3, r7
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2200      	movs	r2, #0
 800921a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800921c:	1d3b      	adds	r3, r7, #4
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	643b      	str	r3, [r7, #64]	; 0x40
 8009222:	463b      	mov	r3, r7
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	785b      	ldrb	r3, [r3, #1]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d164      	bne.n	80092f6 <USB_EPStartXfer+0x6d6>
 800922c:	1d3b      	adds	r3, r7, #4
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	63bb      	str	r3, [r7, #56]	; 0x38
 8009232:	1d3b      	adds	r3, r7, #4
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800923a:	b29b      	uxth	r3, r3
 800923c:	461a      	mov	r2, r3
 800923e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009240:	4413      	add	r3, r2
 8009242:	63bb      	str	r3, [r7, #56]	; 0x38
 8009244:	463b      	mov	r3, r7
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	011a      	lsls	r2, r3, #4
 800924c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924e:	4413      	add	r3, r2
 8009250:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009254:	637b      	str	r3, [r7, #52]	; 0x34
 8009256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800925a:	2b00      	cmp	r3, #0
 800925c:	d112      	bne.n	8009284 <USB_EPStartXfer+0x664>
 800925e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009260:	881b      	ldrh	r3, [r3, #0]
 8009262:	b29b      	uxth	r3, r3
 8009264:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009268:	b29a      	uxth	r2, r3
 800926a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800926c:	801a      	strh	r2, [r3, #0]
 800926e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	b29b      	uxth	r3, r3
 8009274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800927c:	b29a      	uxth	r2, r3
 800927e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009280:	801a      	strh	r2, [r3, #0]
 8009282:	e054      	b.n	800932e <USB_EPStartXfer+0x70e>
 8009284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009288:	2b3e      	cmp	r3, #62	; 0x3e
 800928a:	d817      	bhi.n	80092bc <USB_EPStartXfer+0x69c>
 800928c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009290:	085b      	lsrs	r3, r3, #1
 8009292:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800929a:	f003 0301 	and.w	r3, r3, #1
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d004      	beq.n	80092ac <USB_EPStartXfer+0x68c>
 80092a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80092a6:	3301      	adds	r3, #1
 80092a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80092ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	029b      	lsls	r3, r3, #10
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b8:	801a      	strh	r2, [r3, #0]
 80092ba:	e038      	b.n	800932e <USB_EPStartXfer+0x70e>
 80092bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092c0:	095b      	lsrs	r3, r3, #5
 80092c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80092c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092ca:	f003 031f 	and.w	r3, r3, #31
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d104      	bne.n	80092dc <USB_EPStartXfer+0x6bc>
 80092d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80092d6:	3b01      	subs	r3, #1
 80092d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80092dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	029b      	lsls	r3, r3, #10
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f2:	801a      	strh	r2, [r3, #0]
 80092f4:	e01b      	b.n	800932e <USB_EPStartXfer+0x70e>
 80092f6:	463b      	mov	r3, r7
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	785b      	ldrb	r3, [r3, #1]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d116      	bne.n	800932e <USB_EPStartXfer+0x70e>
 8009300:	1d3b      	adds	r3, r7, #4
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009308:	b29b      	uxth	r3, r3
 800930a:	461a      	mov	r2, r3
 800930c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800930e:	4413      	add	r3, r2
 8009310:	643b      	str	r3, [r7, #64]	; 0x40
 8009312:	463b      	mov	r3, r7
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	011a      	lsls	r2, r3, #4
 800931a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800931c:	4413      	add	r3, r2
 800931e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009324:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009328:	b29a      	uxth	r2, r3
 800932a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800932c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800932e:	463b      	mov	r3, r7
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	895b      	ldrh	r3, [r3, #10]
 8009334:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009338:	463b      	mov	r3, r7
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	6959      	ldr	r1, [r3, #20]
 800933e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009342:	b29b      	uxth	r3, r3
 8009344:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009348:	1d38      	adds	r0, r7, #4
 800934a:	6800      	ldr	r0, [r0, #0]
 800934c:	f001 f89d 	bl	800a48a <USB_WritePMA>
 8009350:	e36c      	b.n	8009a2c <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009352:	463b      	mov	r3, r7
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	6a1b      	ldr	r3, [r3, #32]
 8009358:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800935c:	1d3b      	adds	r3, r7, #4
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	463b      	mov	r3, r7
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	881b      	ldrh	r3, [r3, #0]
 800936c:	b29b      	uxth	r3, r3
 800936e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009376:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800937a:	1d3b      	adds	r3, r7, #4
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	463b      	mov	r3, r7
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	441a      	add	r2, r3
 8009388:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800938c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800939c:	b29b      	uxth	r3, r3
 800939e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80093a0:	1d3b      	adds	r3, r7, #4
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093a6:	1d3b      	adds	r3, r7, #4
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	461a      	mov	r2, r3
 80093b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093b4:	4413      	add	r3, r2
 80093b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093b8:	463b      	mov	r3, r7
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	011a      	lsls	r2, r3, #4
 80093c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093c2:	4413      	add	r3, r2
 80093c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80093c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80093ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80093d4:	463b      	mov	r3, r7
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	891b      	ldrh	r3, [r3, #8]
 80093da:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093de:	463b      	mov	r3, r7
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	6959      	ldr	r1, [r3, #20]
 80093e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80093ee:	1d38      	adds	r0, r7, #4
 80093f0:	6800      	ldr	r0, [r0, #0]
 80093f2:	f001 f84a 	bl	800a48a <USB_WritePMA>
 80093f6:	e319      	b.n	8009a2c <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80093f8:	1d3b      	adds	r3, r7, #4
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	463b      	mov	r3, r7
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	881b      	ldrh	r3, [r3, #0]
 8009408:	b29b      	uxth	r3, r3
 800940a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800940e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009412:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009416:	1d3b      	adds	r3, r7, #4
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	463b      	mov	r3, r7
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	441a      	add	r2, r3
 8009424:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800942c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009430:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009438:	b29b      	uxth	r3, r3
 800943a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800943c:	463b      	mov	r3, r7
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	6a1a      	ldr	r2, [r3, #32]
 8009442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009446:	1ad2      	subs	r2, r2, r3
 8009448:	463b      	mov	r3, r7
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800944e:	1d3b      	adds	r3, r7, #4
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	463b      	mov	r3, r7
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	881b      	ldrh	r3, [r3, #0]
 800945e:	b29b      	uxth	r3, r3
 8009460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009464:	2b00      	cmp	r3, #0
 8009466:	f000 8162 	beq.w	800972e <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800946a:	1d3b      	adds	r3, r7, #4
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009472:	463b      	mov	r3, r7
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	785b      	ldrb	r3, [r3, #1]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d164      	bne.n	8009546 <USB_EPStartXfer+0x926>
 800947c:	1d3b      	adds	r3, r7, #4
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	67bb      	str	r3, [r7, #120]	; 0x78
 8009482:	1d3b      	adds	r3, r7, #4
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800948a:	b29b      	uxth	r3, r3
 800948c:	461a      	mov	r2, r3
 800948e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009490:	4413      	add	r3, r2
 8009492:	67bb      	str	r3, [r7, #120]	; 0x78
 8009494:	463b      	mov	r3, r7
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	011a      	lsls	r2, r3, #4
 800949c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800949e:	4413      	add	r3, r2
 80094a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094a4:	677b      	str	r3, [r7, #116]	; 0x74
 80094a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d112      	bne.n	80094d4 <USB_EPStartXfer+0x8b4>
 80094ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094b0:	881b      	ldrh	r3, [r3, #0]
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094bc:	801a      	strh	r2, [r3, #0]
 80094be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094c0:	881b      	ldrh	r3, [r3, #0]
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094d0:	801a      	strh	r2, [r3, #0]
 80094d2:	e057      	b.n	8009584 <USB_EPStartXfer+0x964>
 80094d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094d8:	2b3e      	cmp	r3, #62	; 0x3e
 80094da:	d817      	bhi.n	800950c <USB_EPStartXfer+0x8ec>
 80094dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094e0:	085b      	lsrs	r3, r3, #1
 80094e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80094e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d004      	beq.n	80094fc <USB_EPStartXfer+0x8dc>
 80094f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80094f6:	3301      	adds	r3, #1
 80094f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80094fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009500:	b29b      	uxth	r3, r3
 8009502:	029b      	lsls	r3, r3, #10
 8009504:	b29a      	uxth	r2, r3
 8009506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009508:	801a      	strh	r2, [r3, #0]
 800950a:	e03b      	b.n	8009584 <USB_EPStartXfer+0x964>
 800950c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009510:	095b      	lsrs	r3, r3, #5
 8009512:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800951a:	f003 031f 	and.w	r3, r3, #31
 800951e:	2b00      	cmp	r3, #0
 8009520:	d104      	bne.n	800952c <USB_EPStartXfer+0x90c>
 8009522:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009526:	3b01      	subs	r3, #1
 8009528:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800952c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009530:	b29b      	uxth	r3, r3
 8009532:	029b      	lsls	r3, r3, #10
 8009534:	b29b      	uxth	r3, r3
 8009536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800953a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800953e:	b29a      	uxth	r2, r3
 8009540:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009542:	801a      	strh	r2, [r3, #0]
 8009544:	e01e      	b.n	8009584 <USB_EPStartXfer+0x964>
 8009546:	463b      	mov	r3, r7
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	785b      	ldrb	r3, [r3, #1]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d119      	bne.n	8009584 <USB_EPStartXfer+0x964>
 8009550:	1d3b      	adds	r3, r7, #4
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009558:	b29b      	uxth	r3, r3
 800955a:	461a      	mov	r2, r3
 800955c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009560:	4413      	add	r3, r2
 8009562:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009566:	463b      	mov	r3, r7
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	011a      	lsls	r2, r3, #4
 800956e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009572:	4413      	add	r3, r2
 8009574:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009578:	67fb      	str	r3, [r7, #124]	; 0x7c
 800957a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800957e:	b29a      	uxth	r2, r3
 8009580:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009582:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009584:	463b      	mov	r3, r7
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	895b      	ldrh	r3, [r3, #10]
 800958a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800958e:	463b      	mov	r3, r7
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	6959      	ldr	r1, [r3, #20]
 8009594:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009598:	b29b      	uxth	r3, r3
 800959a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800959e:	1d38      	adds	r0, r7, #4
 80095a0:	6800      	ldr	r0, [r0, #0]
 80095a2:	f000 ff72 	bl	800a48a <USB_WritePMA>
          ep->xfer_buff += len;
 80095a6:	463b      	mov	r3, r7
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	695a      	ldr	r2, [r3, #20]
 80095ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095b0:	441a      	add	r2, r3
 80095b2:	463b      	mov	r3, r7
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80095b8:	463b      	mov	r3, r7
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	6a1a      	ldr	r2, [r3, #32]
 80095be:	463b      	mov	r3, r7
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d909      	bls.n	80095dc <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80095c8:	463b      	mov	r3, r7
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6a1a      	ldr	r2, [r3, #32]
 80095ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095d2:	1ad2      	subs	r2, r2, r3
 80095d4:	463b      	mov	r3, r7
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	621a      	str	r2, [r3, #32]
 80095da:	e008      	b.n	80095ee <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80095dc:	463b      	mov	r3, r7
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	6a1b      	ldr	r3, [r3, #32]
 80095e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80095e6:	463b      	mov	r3, r7
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2200      	movs	r2, #0
 80095ec:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80095ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f000 821a 	beq.w	8009a2c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80095f8:	463b      	mov	r3, r7
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	785b      	ldrb	r3, [r3, #1]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d164      	bne.n	80096cc <USB_EPStartXfer+0xaac>
 8009602:	1d3b      	adds	r3, r7, #4
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	66bb      	str	r3, [r7, #104]	; 0x68
 8009608:	1d3b      	adds	r3, r7, #4
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009610:	b29b      	uxth	r3, r3
 8009612:	461a      	mov	r2, r3
 8009614:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009616:	4413      	add	r3, r2
 8009618:	66bb      	str	r3, [r7, #104]	; 0x68
 800961a:	463b      	mov	r3, r7
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	011a      	lsls	r2, r3, #4
 8009622:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009624:	4413      	add	r3, r2
 8009626:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800962a:	667b      	str	r3, [r7, #100]	; 0x64
 800962c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009630:	2b00      	cmp	r3, #0
 8009632:	d112      	bne.n	800965a <USB_EPStartXfer+0xa3a>
 8009634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009636:	881b      	ldrh	r3, [r3, #0]
 8009638:	b29b      	uxth	r3, r3
 800963a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800963e:	b29a      	uxth	r2, r3
 8009640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009642:	801a      	strh	r2, [r3, #0]
 8009644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009646:	881b      	ldrh	r3, [r3, #0]
 8009648:	b29b      	uxth	r3, r3
 800964a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800964e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009652:	b29a      	uxth	r2, r3
 8009654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009656:	801a      	strh	r2, [r3, #0]
 8009658:	e057      	b.n	800970a <USB_EPStartXfer+0xaea>
 800965a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800965e:	2b3e      	cmp	r3, #62	; 0x3e
 8009660:	d817      	bhi.n	8009692 <USB_EPStartXfer+0xa72>
 8009662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009666:	085b      	lsrs	r3, r3, #1
 8009668:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800966c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009670:	f003 0301 	and.w	r3, r3, #1
 8009674:	2b00      	cmp	r3, #0
 8009676:	d004      	beq.n	8009682 <USB_EPStartXfer+0xa62>
 8009678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800967c:	3301      	adds	r3, #1
 800967e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009686:	b29b      	uxth	r3, r3
 8009688:	029b      	lsls	r3, r3, #10
 800968a:	b29a      	uxth	r2, r3
 800968c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800968e:	801a      	strh	r2, [r3, #0]
 8009690:	e03b      	b.n	800970a <USB_EPStartXfer+0xaea>
 8009692:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009696:	095b      	lsrs	r3, r3, #5
 8009698:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800969c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096a0:	f003 031f 	and.w	r3, r3, #31
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d104      	bne.n	80096b2 <USB_EPStartXfer+0xa92>
 80096a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ac:	3b01      	subs	r3, #1
 80096ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80096b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	029b      	lsls	r3, r3, #10
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096c8:	801a      	strh	r2, [r3, #0]
 80096ca:	e01e      	b.n	800970a <USB_EPStartXfer+0xaea>
 80096cc:	463b      	mov	r3, r7
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	785b      	ldrb	r3, [r3, #1]
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d119      	bne.n	800970a <USB_EPStartXfer+0xaea>
 80096d6:	1d3b      	adds	r3, r7, #4
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	673b      	str	r3, [r7, #112]	; 0x70
 80096dc:	1d3b      	adds	r3, r7, #4
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	461a      	mov	r2, r3
 80096e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096ea:	4413      	add	r3, r2
 80096ec:	673b      	str	r3, [r7, #112]	; 0x70
 80096ee:	463b      	mov	r3, r7
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	011a      	lsls	r2, r3, #4
 80096f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096f8:	4413      	add	r3, r2
 80096fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80096fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009704:	b29a      	uxth	r2, r3
 8009706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009708:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800970a:	463b      	mov	r3, r7
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	891b      	ldrh	r3, [r3, #8]
 8009710:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009714:	463b      	mov	r3, r7
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6959      	ldr	r1, [r3, #20]
 800971a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800971e:	b29b      	uxth	r3, r3
 8009720:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009724:	1d38      	adds	r0, r7, #4
 8009726:	6800      	ldr	r0, [r0, #0]
 8009728:	f000 feaf 	bl	800a48a <USB_WritePMA>
 800972c:	e17e      	b.n	8009a2c <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800972e:	463b      	mov	r3, r7
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	785b      	ldrb	r3, [r3, #1]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d16f      	bne.n	8009818 <USB_EPStartXfer+0xbf8>
 8009738:	1d3b      	adds	r3, r7, #4
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009740:	1d3b      	adds	r3, r7, #4
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009748:	b29b      	uxth	r3, r3
 800974a:	461a      	mov	r2, r3
 800974c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009750:	4413      	add	r3, r2
 8009752:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009756:	463b      	mov	r3, r7
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	011a      	lsls	r2, r3, #4
 800975e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009762:	4413      	add	r3, r2
 8009764:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800976c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009770:	2b00      	cmp	r3, #0
 8009772:	d116      	bne.n	80097a2 <USB_EPStartXfer+0xb82>
 8009774:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	b29b      	uxth	r3, r3
 800977c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009780:	b29a      	uxth	r2, r3
 8009782:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009786:	801a      	strh	r2, [r3, #0]
 8009788:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800978c:	881b      	ldrh	r3, [r3, #0]
 800978e:	b29b      	uxth	r3, r3
 8009790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009798:	b29a      	uxth	r2, r3
 800979a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800979e:	801a      	strh	r2, [r3, #0]
 80097a0:	e05f      	b.n	8009862 <USB_EPStartXfer+0xc42>
 80097a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097a6:	2b3e      	cmp	r3, #62	; 0x3e
 80097a8:	d818      	bhi.n	80097dc <USB_EPStartXfer+0xbbc>
 80097aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097ae:	085b      	lsrs	r3, r3, #1
 80097b0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80097b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097b8:	f003 0301 	and.w	r3, r3, #1
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d004      	beq.n	80097ca <USB_EPStartXfer+0xbaa>
 80097c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80097c4:	3301      	adds	r3, #1
 80097c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80097ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	029b      	lsls	r3, r3, #10
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097d8:	801a      	strh	r2, [r3, #0]
 80097da:	e042      	b.n	8009862 <USB_EPStartXfer+0xc42>
 80097dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097e0:	095b      	lsrs	r3, r3, #5
 80097e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80097e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097ea:	f003 031f 	and.w	r3, r3, #31
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d104      	bne.n	80097fc <USB_EPStartXfer+0xbdc>
 80097f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80097f6:	3b01      	subs	r3, #1
 80097f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80097fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009800:	b29b      	uxth	r3, r3
 8009802:	029b      	lsls	r3, r3, #10
 8009804:	b29b      	uxth	r3, r3
 8009806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800980a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800980e:	b29a      	uxth	r2, r3
 8009810:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009814:	801a      	strh	r2, [r3, #0]
 8009816:	e024      	b.n	8009862 <USB_EPStartXfer+0xc42>
 8009818:	463b      	mov	r3, r7
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	785b      	ldrb	r3, [r3, #1]
 800981e:	2b01      	cmp	r3, #1
 8009820:	d11f      	bne.n	8009862 <USB_EPStartXfer+0xc42>
 8009822:	1d3b      	adds	r3, r7, #4
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800982a:	1d3b      	adds	r3, r7, #4
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009832:	b29b      	uxth	r3, r3
 8009834:	461a      	mov	r2, r3
 8009836:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800983a:	4413      	add	r3, r2
 800983c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009840:	463b      	mov	r3, r7
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	011a      	lsls	r2, r3, #4
 8009848:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800984c:	4413      	add	r3, r2
 800984e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009856:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800985a:	b29a      	uxth	r2, r3
 800985c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009860:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009862:	463b      	mov	r3, r7
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	891b      	ldrh	r3, [r3, #8]
 8009868:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800986c:	463b      	mov	r3, r7
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	6959      	ldr	r1, [r3, #20]
 8009872:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009876:	b29b      	uxth	r3, r3
 8009878:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800987c:	1d38      	adds	r0, r7, #4
 800987e:	6800      	ldr	r0, [r0, #0]
 8009880:	f000 fe03 	bl	800a48a <USB_WritePMA>
          ep->xfer_buff += len;
 8009884:	463b      	mov	r3, r7
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	695a      	ldr	r2, [r3, #20]
 800988a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800988e:	441a      	add	r2, r3
 8009890:	463b      	mov	r3, r7
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009896:	463b      	mov	r3, r7
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	6a1a      	ldr	r2, [r3, #32]
 800989c:	463b      	mov	r3, r7
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d909      	bls.n	80098ba <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80098a6:	463b      	mov	r3, r7
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	6a1a      	ldr	r2, [r3, #32]
 80098ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098b0:	1ad2      	subs	r2, r2, r3
 80098b2:	463b      	mov	r3, r7
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	621a      	str	r2, [r3, #32]
 80098b8:	e008      	b.n	80098cc <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80098ba:	463b      	mov	r3, r7
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	6a1b      	ldr	r3, [r3, #32]
 80098c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80098c4:	463b      	mov	r3, r7
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2200      	movs	r2, #0
 80098ca:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80098cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f000 80ab 	beq.w	8009a2c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80098d6:	1d3b      	adds	r3, r7, #4
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098de:	463b      	mov	r3, r7
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	785b      	ldrb	r3, [r3, #1]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d16f      	bne.n	80099c8 <USB_EPStartXfer+0xda8>
 80098e8:	1d3b      	adds	r3, r7, #4
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80098f0:	1d3b      	adds	r3, r7, #4
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	461a      	mov	r2, r3
 80098fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009900:	4413      	add	r3, r2
 8009902:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009906:	463b      	mov	r3, r7
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	011a      	lsls	r2, r3, #4
 800990e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009912:	4413      	add	r3, r2
 8009914:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009918:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800991c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009920:	2b00      	cmp	r3, #0
 8009922:	d116      	bne.n	8009952 <USB_EPStartXfer+0xd32>
 8009924:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009928:	881b      	ldrh	r3, [r3, #0]
 800992a:	b29b      	uxth	r3, r3
 800992c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009930:	b29a      	uxth	r2, r3
 8009932:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009936:	801a      	strh	r2, [r3, #0]
 8009938:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800993c:	881b      	ldrh	r3, [r3, #0]
 800993e:	b29b      	uxth	r3, r3
 8009940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009948:	b29a      	uxth	r2, r3
 800994a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800994e:	801a      	strh	r2, [r3, #0]
 8009950:	e05b      	b.n	8009a0a <USB_EPStartXfer+0xdea>
 8009952:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009956:	2b3e      	cmp	r3, #62	; 0x3e
 8009958:	d818      	bhi.n	800998c <USB_EPStartXfer+0xd6c>
 800995a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800995e:	085b      	lsrs	r3, r3, #1
 8009960:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009968:	f003 0301 	and.w	r3, r3, #1
 800996c:	2b00      	cmp	r3, #0
 800996e:	d004      	beq.n	800997a <USB_EPStartXfer+0xd5a>
 8009970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009974:	3301      	adds	r3, #1
 8009976:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800997a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800997e:	b29b      	uxth	r3, r3
 8009980:	029b      	lsls	r3, r3, #10
 8009982:	b29a      	uxth	r2, r3
 8009984:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009988:	801a      	strh	r2, [r3, #0]
 800998a:	e03e      	b.n	8009a0a <USB_EPStartXfer+0xdea>
 800998c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009990:	095b      	lsrs	r3, r3, #5
 8009992:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009996:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800999a:	f003 031f 	and.w	r3, r3, #31
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d104      	bne.n	80099ac <USB_EPStartXfer+0xd8c>
 80099a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099a6:	3b01      	subs	r3, #1
 80099a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80099ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	029b      	lsls	r3, r3, #10
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099be:	b29a      	uxth	r2, r3
 80099c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80099c4:	801a      	strh	r2, [r3, #0]
 80099c6:	e020      	b.n	8009a0a <USB_EPStartXfer+0xdea>
 80099c8:	463b      	mov	r3, r7
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	785b      	ldrb	r3, [r3, #1]
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d11b      	bne.n	8009a0a <USB_EPStartXfer+0xdea>
 80099d2:	1d3b      	adds	r3, r7, #4
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099da:	b29b      	uxth	r3, r3
 80099dc:	461a      	mov	r2, r3
 80099de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099e2:	4413      	add	r3, r2
 80099e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80099e8:	463b      	mov	r3, r7
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	011a      	lsls	r2, r3, #4
 80099f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099f4:	4413      	add	r3, r2
 80099f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80099fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80099fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a08:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009a0a:	463b      	mov	r3, r7
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	895b      	ldrh	r3, [r3, #10]
 8009a10:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a14:	463b      	mov	r3, r7
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6959      	ldr	r1, [r3, #20]
 8009a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009a24:	1d38      	adds	r0, r7, #4
 8009a26:	6800      	ldr	r0, [r0, #0]
 8009a28:	f000 fd2f 	bl	800a48a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009a2c:	1d3b      	adds	r3, r7, #4
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	463b      	mov	r3, r7
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4413      	add	r3, r2
 8009a3a:	881b      	ldrh	r3, [r3, #0]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	f107 020a 	add.w	r2, r7, #10
 8009a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a4a:	8013      	strh	r3, [r2, #0]
 8009a4c:	f107 030a 	add.w	r3, r7, #10
 8009a50:	f107 020a 	add.w	r2, r7, #10
 8009a54:	8812      	ldrh	r2, [r2, #0]
 8009a56:	f082 0210 	eor.w	r2, r2, #16
 8009a5a:	801a      	strh	r2, [r3, #0]
 8009a5c:	f107 030a 	add.w	r3, r7, #10
 8009a60:	f107 020a 	add.w	r2, r7, #10
 8009a64:	8812      	ldrh	r2, [r2, #0]
 8009a66:	f082 0220 	eor.w	r2, r2, #32
 8009a6a:	801a      	strh	r2, [r3, #0]
 8009a6c:	1d3b      	adds	r3, r7, #4
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	463b      	mov	r3, r7
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	441a      	add	r2, r3
 8009a7a:	f107 030a 	add.w	r3, r7, #10
 8009a7e:	881b      	ldrh	r3, [r3, #0]
 8009a80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	8013      	strh	r3, [r2, #0]
 8009a94:	e3b5      	b.n	800a202 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009a96:	463b      	mov	r3, r7
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	7b1b      	ldrb	r3, [r3, #12]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f040 8090 	bne.w	8009bc2 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009aa2:	463b      	mov	r3, r7
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	699a      	ldr	r2, [r3, #24]
 8009aa8:	463b      	mov	r3, r7
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d90e      	bls.n	8009ad0 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8009ab2:	463b      	mov	r3, r7
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009abc:	463b      	mov	r3, r7
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	699a      	ldr	r2, [r3, #24]
 8009ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ac6:	1ad2      	subs	r2, r2, r3
 8009ac8:	463b      	mov	r3, r7
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	619a      	str	r2, [r3, #24]
 8009ace:	e008      	b.n	8009ae2 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8009ad0:	463b      	mov	r3, r7
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009ada:	463b      	mov	r3, r7
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009ae2:	1d3b      	adds	r3, r7, #4
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009aea:	1d3b      	adds	r3, r7, #4
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	461a      	mov	r2, r3
 8009af6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009afa:	4413      	add	r3, r2
 8009afc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b00:	463b      	mov	r3, r7
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	011a      	lsls	r2, r3, #4
 8009b08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d116      	bne.n	8009b4c <USB_EPStartXfer+0xf2c>
 8009b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b30:	801a      	strh	r2, [r3, #0]
 8009b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b36:	881b      	ldrh	r3, [r3, #0]
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b48:	801a      	strh	r2, [r3, #0]
 8009b4a:	e32c      	b.n	800a1a6 <USB_EPStartXfer+0x1586>
 8009b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b50:	2b3e      	cmp	r3, #62	; 0x3e
 8009b52:	d818      	bhi.n	8009b86 <USB_EPStartXfer+0xf66>
 8009b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b58:	085b      	lsrs	r3, r3, #1
 8009b5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d004      	beq.n	8009b74 <USB_EPStartXfer+0xf54>
 8009b6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009b6e:	3301      	adds	r3, #1
 8009b70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009b74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	029b      	lsls	r3, r3, #10
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b82:	801a      	strh	r2, [r3, #0]
 8009b84:	e30f      	b.n	800a1a6 <USB_EPStartXfer+0x1586>
 8009b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b8a:	095b      	lsrs	r3, r3, #5
 8009b8c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b94:	f003 031f 	and.w	r3, r3, #31
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d104      	bne.n	8009ba6 <USB_EPStartXfer+0xf86>
 8009b9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009ba6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	029b      	lsls	r3, r3, #10
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bbe:	801a      	strh	r2, [r3, #0]
 8009bc0:	e2f1      	b.n	800a1a6 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009bc2:	463b      	mov	r3, r7
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	78db      	ldrb	r3, [r3, #3]
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	f040 818f 	bne.w	8009eec <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009bce:	463b      	mov	r3, r7
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	785b      	ldrb	r3, [r3, #1]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d175      	bne.n	8009cc4 <USB_EPStartXfer+0x10a4>
 8009bd8:	1d3b      	adds	r3, r7, #4
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009be0:	1d3b      	adds	r3, r7, #4
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	461a      	mov	r2, r3
 8009bec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009bf0:	4413      	add	r3, r2
 8009bf2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009bf6:	463b      	mov	r3, r7
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	011a      	lsls	r2, r3, #4
 8009bfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c02:	4413      	add	r3, r2
 8009c04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009c08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c0c:	463b      	mov	r3, r7
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d116      	bne.n	8009c44 <USB_EPStartXfer+0x1024>
 8009c16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c28:	801a      	strh	r2, [r3, #0]
 8009c2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c2e:	881b      	ldrh	r3, [r3, #0]
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c40:	801a      	strh	r2, [r3, #0]
 8009c42:	e065      	b.n	8009d10 <USB_EPStartXfer+0x10f0>
 8009c44:	463b      	mov	r3, r7
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	2b3e      	cmp	r3, #62	; 0x3e
 8009c4c:	d81a      	bhi.n	8009c84 <USB_EPStartXfer+0x1064>
 8009c4e:	463b      	mov	r3, r7
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	691b      	ldr	r3, [r3, #16]
 8009c54:	085b      	lsrs	r3, r3, #1
 8009c56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009c5a:	463b      	mov	r3, r7
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	691b      	ldr	r3, [r3, #16]
 8009c60:	f003 0301 	and.w	r3, r3, #1
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d004      	beq.n	8009c72 <USB_EPStartXfer+0x1052>
 8009c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	029b      	lsls	r3, r3, #10
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c80:	801a      	strh	r2, [r3, #0]
 8009c82:	e045      	b.n	8009d10 <USB_EPStartXfer+0x10f0>
 8009c84:	463b      	mov	r3, r7
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	095b      	lsrs	r3, r3, #5
 8009c8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009c90:	463b      	mov	r3, r7
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	f003 031f 	and.w	r3, r3, #31
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d104      	bne.n	8009ca8 <USB_EPStartXfer+0x1088>
 8009c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	029b      	lsls	r3, r3, #10
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cc0:	801a      	strh	r2, [r3, #0]
 8009cc2:	e025      	b.n	8009d10 <USB_EPStartXfer+0x10f0>
 8009cc4:	463b      	mov	r3, r7
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	785b      	ldrb	r3, [r3, #1]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d120      	bne.n	8009d10 <USB_EPStartXfer+0x10f0>
 8009cce:	1d3b      	adds	r3, r7, #4
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009cd6:	1d3b      	adds	r3, r7, #4
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009cec:	463b      	mov	r3, r7
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	011a      	lsls	r2, r3, #4
 8009cf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009cf8:	4413      	add	r3, r2
 8009cfa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009cfe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d02:	463b      	mov	r3, r7
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	b29a      	uxth	r2, r3
 8009d0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009d0e:	801a      	strh	r2, [r3, #0]
 8009d10:	1d3b      	adds	r3, r7, #4
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d18:	463b      	mov	r3, r7
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	785b      	ldrb	r3, [r3, #1]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d175      	bne.n	8009e0e <USB_EPStartXfer+0x11ee>
 8009d22:	1d3b      	adds	r3, r7, #4
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009d2a:	1d3b      	adds	r3, r7, #4
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	461a      	mov	r2, r3
 8009d36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009d3a:	4413      	add	r3, r2
 8009d3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009d40:	463b      	mov	r3, r7
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	011a      	lsls	r2, r3, #4
 8009d48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009d4c:	4413      	add	r3, r2
 8009d4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d56:	463b      	mov	r3, r7
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d116      	bne.n	8009d8e <USB_EPStartXfer+0x116e>
 8009d60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d64:	881b      	ldrh	r3, [r3, #0]
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d72:	801a      	strh	r2, [r3, #0]
 8009d74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d78:	881b      	ldrh	r3, [r3, #0]
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d84:	b29a      	uxth	r2, r3
 8009d86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d8a:	801a      	strh	r2, [r3, #0]
 8009d8c:	e061      	b.n	8009e52 <USB_EPStartXfer+0x1232>
 8009d8e:	463b      	mov	r3, r7
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	2b3e      	cmp	r3, #62	; 0x3e
 8009d96:	d81a      	bhi.n	8009dce <USB_EPStartXfer+0x11ae>
 8009d98:	463b      	mov	r3, r7
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	085b      	lsrs	r3, r3, #1
 8009da0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009da4:	463b      	mov	r3, r7
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	f003 0301 	and.w	r3, r3, #1
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d004      	beq.n	8009dbc <USB_EPStartXfer+0x119c>
 8009db2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009db6:	3301      	adds	r3, #1
 8009db8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009dbc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	029b      	lsls	r3, r3, #10
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009dca:	801a      	strh	r2, [r3, #0]
 8009dcc:	e041      	b.n	8009e52 <USB_EPStartXfer+0x1232>
 8009dce:	463b      	mov	r3, r7
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	095b      	lsrs	r3, r3, #5
 8009dd6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009dda:	463b      	mov	r3, r7
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	f003 031f 	and.w	r3, r3, #31
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d104      	bne.n	8009df2 <USB_EPStartXfer+0x11d2>
 8009de8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009dec:	3b01      	subs	r3, #1
 8009dee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009df2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	029b      	lsls	r3, r3, #10
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e0a:	801a      	strh	r2, [r3, #0]
 8009e0c:	e021      	b.n	8009e52 <USB_EPStartXfer+0x1232>
 8009e0e:	463b      	mov	r3, r7
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	785b      	ldrb	r3, [r3, #1]
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d11c      	bne.n	8009e52 <USB_EPStartXfer+0x1232>
 8009e18:	1d3b      	adds	r3, r7, #4
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	461a      	mov	r2, r3
 8009e24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009e28:	4413      	add	r3, r2
 8009e2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e2e:	463b      	mov	r3, r7
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	011a      	lsls	r2, r3, #4
 8009e36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009e40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e44:	463b      	mov	r3, r7
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e50:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009e52:	463b      	mov	r3, r7
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	69db      	ldr	r3, [r3, #28]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f000 81a4 	beq.w	800a1a6 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009e5e:	1d3b      	adds	r3, r7, #4
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	463b      	mov	r3, r7
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	4413      	add	r3, r2
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009e72:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d005      	beq.n	8009e8a <USB_EPStartXfer+0x126a>
 8009e7e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d10d      	bne.n	8009ea6 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009e8a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f040 8187 	bne.w	800a1a6 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009e98:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f040 8180 	bne.w	800a1a6 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009ea6:	1d3b      	adds	r3, r7, #4
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	463b      	mov	r3, r7
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4413      	add	r3, r2
 8009eb4:	881b      	ldrh	r3, [r3, #0]
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ec0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8009ec4:	1d3b      	adds	r3, r7, #4
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	463b      	mov	r3, r7
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	441a      	add	r2, r3
 8009ed2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8009ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ee2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	8013      	strh	r3, [r2, #0]
 8009eea:	e15c      	b.n	800a1a6 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009eec:	463b      	mov	r3, r7
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	78db      	ldrb	r3, [r3, #3]
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	f040 8155 	bne.w	800a1a2 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009ef8:	463b      	mov	r3, r7
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	699a      	ldr	r2, [r3, #24]
 8009efe:	463b      	mov	r3, r7
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d90e      	bls.n	8009f26 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8009f08:	463b      	mov	r3, r7
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8009f12:	463b      	mov	r3, r7
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	699a      	ldr	r2, [r3, #24]
 8009f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f1c:	1ad2      	subs	r2, r2, r3
 8009f1e:	463b      	mov	r3, r7
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	619a      	str	r2, [r3, #24]
 8009f24:	e008      	b.n	8009f38 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8009f26:	463b      	mov	r3, r7
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	699b      	ldr	r3, [r3, #24]
 8009f2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8009f30:	463b      	mov	r3, r7
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2200      	movs	r2, #0
 8009f36:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009f38:	463b      	mov	r3, r7
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	785b      	ldrb	r3, [r3, #1]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d16f      	bne.n	800a022 <USB_EPStartXfer+0x1402>
 8009f42:	1d3b      	adds	r3, r7, #4
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009f4a:	1d3b      	adds	r3, r7, #4
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	461a      	mov	r2, r3
 8009f56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009f60:	463b      	mov	r3, r7
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	011a      	lsls	r2, r3, #4
 8009f68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009f6c:	4413      	add	r3, r2
 8009f6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d116      	bne.n	8009fac <USB_EPStartXfer+0x138c>
 8009f7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009f82:	881b      	ldrh	r3, [r3, #0]
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009f90:	801a      	strh	r2, [r3, #0]
 8009f92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009f96:	881b      	ldrh	r3, [r3, #0]
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fa2:	b29a      	uxth	r2, r3
 8009fa4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009fa8:	801a      	strh	r2, [r3, #0]
 8009faa:	e05f      	b.n	800a06c <USB_EPStartXfer+0x144c>
 8009fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fb0:	2b3e      	cmp	r3, #62	; 0x3e
 8009fb2:	d818      	bhi.n	8009fe6 <USB_EPStartXfer+0x13c6>
 8009fb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fb8:	085b      	lsrs	r3, r3, #1
 8009fba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fc2:	f003 0301 	and.w	r3, r3, #1
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d004      	beq.n	8009fd4 <USB_EPStartXfer+0x13b4>
 8009fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fce:	3301      	adds	r3, #1
 8009fd0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	029b      	lsls	r3, r3, #10
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009fe2:	801a      	strh	r2, [r3, #0]
 8009fe4:	e042      	b.n	800a06c <USB_EPStartXfer+0x144c>
 8009fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fea:	095b      	lsrs	r3, r3, #5
 8009fec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ff4:	f003 031f 	and.w	r3, r3, #31
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d104      	bne.n	800a006 <USB_EPStartXfer+0x13e6>
 8009ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a000:	3b01      	subs	r3, #1
 800a002:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	029b      	lsls	r3, r3, #10
 800a00e:	b29b      	uxth	r3, r3
 800a010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a018:	b29a      	uxth	r2, r3
 800a01a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a01e:	801a      	strh	r2, [r3, #0]
 800a020:	e024      	b.n	800a06c <USB_EPStartXfer+0x144c>
 800a022:	463b      	mov	r3, r7
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	785b      	ldrb	r3, [r3, #1]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d11f      	bne.n	800a06c <USB_EPStartXfer+0x144c>
 800a02c:	1d3b      	adds	r3, r7, #4
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a034:	1d3b      	adds	r3, r7, #4
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	461a      	mov	r2, r3
 800a040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a044:	4413      	add	r3, r2
 800a046:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a04a:	463b      	mov	r3, r7
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	011a      	lsls	r2, r3, #4
 800a052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a056:	4413      	add	r3, r2
 800a058:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a05c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a064:	b29a      	uxth	r2, r3
 800a066:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a06a:	801a      	strh	r2, [r3, #0]
 800a06c:	1d3b      	adds	r3, r7, #4
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a074:	463b      	mov	r3, r7
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	785b      	ldrb	r3, [r3, #1]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d16f      	bne.n	800a15e <USB_EPStartXfer+0x153e>
 800a07e:	1d3b      	adds	r3, r7, #4
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a086:	1d3b      	adds	r3, r7, #4
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a08e:	b29b      	uxth	r3, r3
 800a090:	461a      	mov	r2, r3
 800a092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a096:	4413      	add	r3, r2
 800a098:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a09c:	463b      	mov	r3, r7
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	011a      	lsls	r2, r3, #4
 800a0a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0a8:	4413      	add	r3, r2
 800a0aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a0ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a0b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d116      	bne.n	800a0e8 <USB_EPStartXfer+0x14c8>
 800a0ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0be:	881b      	ldrh	r3, [r3, #0]
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0cc:	801a      	strh	r2, [r3, #0]
 800a0ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0d2:	881b      	ldrh	r3, [r3, #0]
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0de:	b29a      	uxth	r2, r3
 800a0e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0e4:	801a      	strh	r2, [r3, #0]
 800a0e6:	e05e      	b.n	800a1a6 <USB_EPStartXfer+0x1586>
 800a0e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0ec:	2b3e      	cmp	r3, #62	; 0x3e
 800a0ee:	d818      	bhi.n	800a122 <USB_EPStartXfer+0x1502>
 800a0f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0f4:	085b      	lsrs	r3, r3, #1
 800a0f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a0fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0fe:	f003 0301 	and.w	r3, r3, #1
 800a102:	2b00      	cmp	r3, #0
 800a104:	d004      	beq.n	800a110 <USB_EPStartXfer+0x14f0>
 800a106:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a10a:	3301      	adds	r3, #1
 800a10c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a110:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a114:	b29b      	uxth	r3, r3
 800a116:	029b      	lsls	r3, r3, #10
 800a118:	b29a      	uxth	r2, r3
 800a11a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a11e:	801a      	strh	r2, [r3, #0]
 800a120:	e041      	b.n	800a1a6 <USB_EPStartXfer+0x1586>
 800a122:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a126:	095b      	lsrs	r3, r3, #5
 800a128:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a12c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a130:	f003 031f 	and.w	r3, r3, #31
 800a134:	2b00      	cmp	r3, #0
 800a136:	d104      	bne.n	800a142 <USB_EPStartXfer+0x1522>
 800a138:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a13c:	3b01      	subs	r3, #1
 800a13e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a142:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a146:	b29b      	uxth	r3, r3
 800a148:	029b      	lsls	r3, r3, #10
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a154:	b29a      	uxth	r2, r3
 800a156:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a15a:	801a      	strh	r2, [r3, #0]
 800a15c:	e023      	b.n	800a1a6 <USB_EPStartXfer+0x1586>
 800a15e:	463b      	mov	r3, r7
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	785b      	ldrb	r3, [r3, #1]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d11e      	bne.n	800a1a6 <USB_EPStartXfer+0x1586>
 800a168:	1d3b      	adds	r3, r7, #4
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a170:	b29b      	uxth	r3, r3
 800a172:	461a      	mov	r2, r3
 800a174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a178:	4413      	add	r3, r2
 800a17a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a17e:	463b      	mov	r3, r7
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	011a      	lsls	r2, r3, #4
 800a186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a18a:	4413      	add	r3, r2
 800a18c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a190:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a194:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a198:	b29a      	uxth	r2, r3
 800a19a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a19e:	801a      	strh	r2, [r3, #0]
 800a1a0:	e001      	b.n	800a1a6 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e02e      	b.n	800a204 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a1a6:	1d3b      	adds	r3, r7, #4
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	463b      	mov	r3, r7
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4413      	add	r3, r2
 800a1b4:	881b      	ldrh	r3, [r3, #0]
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1c0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a1c4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a1c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a1cc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a1d0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a1d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a1d8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a1dc:	1d3b      	adds	r3, r7, #4
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	463b      	mov	r3, r7
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	441a      	add	r2, r3
 800a1ea:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a1ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a202:	2300      	movs	r3, #0
}
 800a204:	4618      	mov	r0, r3
 800a206:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a20e:	b480      	push	{r7}
 800a210:	b085      	sub	sp, #20
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	785b      	ldrb	r3, [r3, #1]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d020      	beq.n	800a262 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	4413      	add	r3, r2
 800a22a:	881b      	ldrh	r3, [r3, #0]
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a236:	81bb      	strh	r3, [r7, #12]
 800a238:	89bb      	ldrh	r3, [r7, #12]
 800a23a:	f083 0310 	eor.w	r3, r3, #16
 800a23e:	81bb      	strh	r3, [r7, #12]
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	441a      	add	r2, r3
 800a24a:	89bb      	ldrh	r3, [r7, #12]
 800a24c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	8013      	strh	r3, [r2, #0]
 800a260:	e01f      	b.n	800a2a2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	4413      	add	r3, r2
 800a26c:	881b      	ldrh	r3, [r3, #0]
 800a26e:	b29b      	uxth	r3, r3
 800a270:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a278:	81fb      	strh	r3, [r7, #14]
 800a27a:	89fb      	ldrh	r3, [r7, #14]
 800a27c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a280:	81fb      	strh	r3, [r7, #14]
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	441a      	add	r2, r3
 800a28c:	89fb      	ldrh	r3, [r7, #14]
 800a28e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a29a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3714      	adds	r7, #20
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bc80      	pop	{r7}
 800a2ac:	4770      	bx	lr

0800a2ae <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a2ae:	b480      	push	{r7}
 800a2b0:	b087      	sub	sp, #28
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
 800a2b6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	7b1b      	ldrb	r3, [r3, #12]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f040 809d 	bne.w	800a3fc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	785b      	ldrb	r3, [r3, #1]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d04c      	beq.n	800a364 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	4413      	add	r3, r2
 800a2d4:	881b      	ldrh	r3, [r3, #0]
 800a2d6:	823b      	strh	r3, [r7, #16]
 800a2d8:	8a3b      	ldrh	r3, [r7, #16]
 800a2da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d01b      	beq.n	800a31a <USB_EPClearStall+0x6c>
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	4413      	add	r3, r2
 800a2ec:	881b      	ldrh	r3, [r3, #0]
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2f8:	81fb      	strh	r3, [r7, #14]
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	441a      	add	r2, r3
 800a304:	89fb      	ldrh	r3, [r7, #14]
 800a306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a30a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a30e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a312:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a316:	b29b      	uxth	r3, r3
 800a318:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	78db      	ldrb	r3, [r3, #3]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d06c      	beq.n	800a3fc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4413      	add	r3, r2
 800a32c:	881b      	ldrh	r3, [r3, #0]
 800a32e:	b29b      	uxth	r3, r3
 800a330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a338:	81bb      	strh	r3, [r7, #12]
 800a33a:	89bb      	ldrh	r3, [r7, #12]
 800a33c:	f083 0320 	eor.w	r3, r3, #32
 800a340:	81bb      	strh	r3, [r7, #12]
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	441a      	add	r2, r3
 800a34c:	89bb      	ldrh	r3, [r7, #12]
 800a34e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a35a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a35e:	b29b      	uxth	r3, r3
 800a360:	8013      	strh	r3, [r2, #0]
 800a362:	e04b      	b.n	800a3fc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	4413      	add	r3, r2
 800a36e:	881b      	ldrh	r3, [r3, #0]
 800a370:	82fb      	strh	r3, [r7, #22]
 800a372:	8afb      	ldrh	r3, [r7, #22]
 800a374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d01b      	beq.n	800a3b4 <USB_EPClearStall+0x106>
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	4413      	add	r3, r2
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	b29b      	uxth	r3, r3
 800a38a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a38e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a392:	82bb      	strh	r3, [r7, #20]
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	441a      	add	r2, r3
 800a39e:	8abb      	ldrh	r3, [r7, #20]
 800a3a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a3ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	4413      	add	r3, r2
 800a3be:	881b      	ldrh	r3, [r3, #0]
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3ca:	827b      	strh	r3, [r7, #18]
 800a3cc:	8a7b      	ldrh	r3, [r7, #18]
 800a3ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a3d2:	827b      	strh	r3, [r7, #18]
 800a3d4:	8a7b      	ldrh	r3, [r7, #18]
 800a3d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a3da:	827b      	strh	r3, [r7, #18]
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	441a      	add	r2, r3
 800a3e6:	8a7b      	ldrh	r3, [r7, #18]
 800a3e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	371c      	adds	r7, #28
 800a402:	46bd      	mov	sp, r7
 800a404:	bc80      	pop	{r7}
 800a406:	4770      	bx	lr

0800a408 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	460b      	mov	r3, r1
 800a412:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a414:	78fb      	ldrb	r3, [r7, #3]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d103      	bne.n	800a422 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2280      	movs	r2, #128	; 0x80
 800a41e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	bc80      	pop	{r7}
 800a42c:	4770      	bx	lr

0800a42e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a42e:	b480      	push	{r7}
 800a430:	b083      	sub	sp, #12
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bc80      	pop	{r7}
 800a440:	4770      	bx	lr

0800a442 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a442:	b480      	push	{r7}
 800a444:	b083      	sub	sp, #12
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	bc80      	pop	{r7}
 800a454:	4770      	bx	lr

0800a456 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a456:	b480      	push	{r7}
 800a458:	b085      	sub	sp, #20
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a464:	b29b      	uxth	r3, r3
 800a466:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a468:	68fb      	ldr	r3, [r7, #12]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3714      	adds	r7, #20
 800a46e:	46bd      	mov	sp, r7
 800a470:	bc80      	pop	{r7}
 800a472:	4770      	bx	lr

0800a474 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	bc80      	pop	{r7}
 800a488:	4770      	bx	lr

0800a48a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a48a:	b480      	push	{r7}
 800a48c:	b08d      	sub	sp, #52	; 0x34
 800a48e:	af00      	add	r7, sp, #0
 800a490:	60f8      	str	r0, [r7, #12]
 800a492:	60b9      	str	r1, [r7, #8]
 800a494:	4611      	mov	r1, r2
 800a496:	461a      	mov	r2, r3
 800a498:	460b      	mov	r3, r1
 800a49a:	80fb      	strh	r3, [r7, #6]
 800a49c:	4613      	mov	r3, r2
 800a49e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a4a0:	88bb      	ldrh	r3, [r7, #4]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	085b      	lsrs	r3, r3, #1
 800a4a6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a4b0:	88fb      	ldrh	r3, [r7, #6]
 800a4b2:	005a      	lsls	r2, r3, #1
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4bc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a4be:	6a3b      	ldr	r3, [r7, #32]
 800a4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4c2:	e01e      	b.n	800a502 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	021b      	lsls	r3, r3, #8
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	461a      	mov	r2, r3
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	b29a      	uxth	r2, r3
 800a4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ec:	3302      	adds	r3, #2
 800a4ee:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f2:	3302      	adds	r3, #2
 800a4f4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fe:	3b01      	subs	r3, #1
 800a500:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1dd      	bne.n	800a4c4 <USB_WritePMA+0x3a>
  }
}
 800a508:	bf00      	nop
 800a50a:	bf00      	nop
 800a50c:	3734      	adds	r7, #52	; 0x34
 800a50e:	46bd      	mov	sp, r7
 800a510:	bc80      	pop	{r7}
 800a512:	4770      	bx	lr

0800a514 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a514:	b480      	push	{r7}
 800a516:	b08b      	sub	sp, #44	; 0x2c
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	4611      	mov	r1, r2
 800a520:	461a      	mov	r2, r3
 800a522:	460b      	mov	r3, r1
 800a524:	80fb      	strh	r3, [r7, #6]
 800a526:	4613      	mov	r3, r2
 800a528:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a52a:	88bb      	ldrh	r3, [r7, #4]
 800a52c:	085b      	lsrs	r3, r3, #1
 800a52e:	b29b      	uxth	r3, r3
 800a530:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a53a:	88fb      	ldrh	r3, [r7, #6]
 800a53c:	005a      	lsls	r2, r3, #1
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	4413      	add	r3, r2
 800a542:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a546:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	627b      	str	r3, [r7, #36]	; 0x24
 800a54c:	e01b      	b.n	800a586 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a54e:	6a3b      	ldr	r3, [r7, #32]
 800a550:	881b      	ldrh	r3, [r3, #0]
 800a552:	b29b      	uxth	r3, r3
 800a554:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a556:	6a3b      	ldr	r3, [r7, #32]
 800a558:	3302      	adds	r3, #2
 800a55a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	b2da      	uxtb	r2, r3
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	3301      	adds	r3, #1
 800a568:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	0a1b      	lsrs	r3, r3, #8
 800a56e:	b2da      	uxtb	r2, r3
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	3301      	adds	r3, #1
 800a578:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a57a:	6a3b      	ldr	r3, [r7, #32]
 800a57c:	3302      	adds	r3, #2
 800a57e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a582:	3b01      	subs	r3, #1
 800a584:	627b      	str	r3, [r7, #36]	; 0x24
 800a586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1e0      	bne.n	800a54e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a58c:	88bb      	ldrh	r3, [r7, #4]
 800a58e:	f003 0301 	and.w	r3, r3, #1
 800a592:	b29b      	uxth	r3, r3
 800a594:	2b00      	cmp	r3, #0
 800a596:	d007      	beq.n	800a5a8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a598:	6a3b      	ldr	r3, [r7, #32]
 800a59a:	881b      	ldrh	r3, [r3, #0]
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	b2da      	uxtb	r2, r3
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	701a      	strb	r2, [r3, #0]
  }
}
 800a5a8:	bf00      	nop
 800a5aa:	372c      	adds	r7, #44	; 0x2c
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bc80      	pop	{r7}
 800a5b0:	4770      	bx	lr

0800a5b2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b084      	sub	sp, #16
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	7c1b      	ldrb	r3, [r3, #16]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d115      	bne.n	800a5f6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a5ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5ce:	2202      	movs	r2, #2
 800a5d0:	2181      	movs	r1, #129	; 0x81
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f001 fe99 	bl	800c30a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a5de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	2101      	movs	r1, #1
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f001 fe8f 	bl	800c30a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a5f4:	e012      	b.n	800a61c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a5f6:	2340      	movs	r3, #64	; 0x40
 800a5f8:	2202      	movs	r2, #2
 800a5fa:	2181      	movs	r1, #129	; 0x81
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f001 fe84 	bl	800c30a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a608:	2340      	movs	r3, #64	; 0x40
 800a60a:	2202      	movs	r2, #2
 800a60c:	2101      	movs	r1, #1
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f001 fe7b 	bl	800c30a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a61c:	2308      	movs	r3, #8
 800a61e:	2203      	movs	r2, #3
 800a620:	2182      	movs	r1, #130	; 0x82
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f001 fe71 	bl	800c30a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a62e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a632:	f001 ff91 	bl	800c558 <USBD_static_malloc>
 800a636:	4602      	mov	r2, r0
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a644:	2b00      	cmp	r3, #0
 800a646:	d102      	bne.n	800a64e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a648:	2301      	movs	r3, #1
 800a64a:	73fb      	strb	r3, [r7, #15]
 800a64c:	e026      	b.n	800a69c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a654:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	2200      	movs	r2, #0
 800a664:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	7c1b      	ldrb	r3, [r3, #16]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d109      	bne.n	800a68c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a67e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a682:	2101      	movs	r1, #1
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f001 ff31 	bl	800c4ec <USBD_LL_PrepareReceive>
 800a68a:	e007      	b.n	800a69c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a692:	2340      	movs	r3, #64	; 0x40
 800a694:	2101      	movs	r1, #1
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f001 ff28 	bl	800c4ec <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b084      	sub	sp, #16
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a6b6:	2181      	movs	r1, #129	; 0x81
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f001 fe4c 	bl	800c356 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a6c4:	2101      	movs	r1, #1
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f001 fe45 	bl	800c356 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a6d4:	2182      	movs	r1, #130	; 0x82
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f001 fe3d 	bl	800c356 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00e      	beq.n	800a70a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f001 ff37 	bl	800c570 <USBD_static_free>
    pdev->pClassData = NULL;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a724:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a726:	2300      	movs	r3, #0
 800a728:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a72a:	2300      	movs	r3, #0
 800a72c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d039      	beq.n	800a7b2 <USBD_CDC_Setup+0x9e>
 800a73e:	2b20      	cmp	r3, #32
 800a740:	d17f      	bne.n	800a842 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	88db      	ldrh	r3, [r3, #6]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d029      	beq.n	800a79e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	b25b      	sxtb	r3, r3
 800a750:	2b00      	cmp	r3, #0
 800a752:	da11      	bge.n	800a778 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a760:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a762:	683a      	ldr	r2, [r7, #0]
 800a764:	88d2      	ldrh	r2, [r2, #6]
 800a766:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a768:	6939      	ldr	r1, [r7, #16]
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	88db      	ldrh	r3, [r3, #6]
 800a76e:	461a      	mov	r2, r3
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f001 fa0a 	bl	800bb8a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a776:	e06b      	b.n	800a850 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	785a      	ldrb	r2, [r3, #1]
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	88db      	ldrh	r3, [r3, #6]
 800a786:	b2da      	uxtb	r2, r3
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a78e:	6939      	ldr	r1, [r7, #16]
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	88db      	ldrh	r3, [r3, #6]
 800a794:	461a      	mov	r2, r3
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f001 fa25 	bl	800bbe6 <USBD_CtlPrepareRx>
      break;
 800a79c:	e058      	b.n	800a850 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	7850      	ldrb	r0, [r2, #1]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	6839      	ldr	r1, [r7, #0]
 800a7ae:	4798      	blx	r3
      break;
 800a7b0:	e04e      	b.n	800a850 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	785b      	ldrb	r3, [r3, #1]
 800a7b6:	2b0b      	cmp	r3, #11
 800a7b8:	d02e      	beq.n	800a818 <USBD_CDC_Setup+0x104>
 800a7ba:	2b0b      	cmp	r3, #11
 800a7bc:	dc38      	bgt.n	800a830 <USBD_CDC_Setup+0x11c>
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d002      	beq.n	800a7c8 <USBD_CDC_Setup+0xb4>
 800a7c2:	2b0a      	cmp	r3, #10
 800a7c4:	d014      	beq.n	800a7f0 <USBD_CDC_Setup+0xdc>
 800a7c6:	e033      	b.n	800a830 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7ce:	2b03      	cmp	r3, #3
 800a7d0:	d107      	bne.n	800a7e2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a7d2:	f107 030c 	add.w	r3, r7, #12
 800a7d6:	2202      	movs	r2, #2
 800a7d8:	4619      	mov	r1, r3
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f001 f9d5 	bl	800bb8a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a7e0:	e02e      	b.n	800a840 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a7e2:	6839      	ldr	r1, [r7, #0]
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f001 f966 	bl	800bab6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a7ea:	2302      	movs	r3, #2
 800a7ec:	75fb      	strb	r3, [r7, #23]
          break;
 800a7ee:	e027      	b.n	800a840 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7f6:	2b03      	cmp	r3, #3
 800a7f8:	d107      	bne.n	800a80a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a7fa:	f107 030f 	add.w	r3, r7, #15
 800a7fe:	2201      	movs	r2, #1
 800a800:	4619      	mov	r1, r3
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f001 f9c1 	bl	800bb8a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a808:	e01a      	b.n	800a840 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a80a:	6839      	ldr	r1, [r7, #0]
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f001 f952 	bl	800bab6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a812:	2302      	movs	r3, #2
 800a814:	75fb      	strb	r3, [r7, #23]
          break;
 800a816:	e013      	b.n	800a840 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a81e:	2b03      	cmp	r3, #3
 800a820:	d00d      	beq.n	800a83e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f001 f946 	bl	800bab6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a82a:	2302      	movs	r3, #2
 800a82c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a82e:	e006      	b.n	800a83e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a830:	6839      	ldr	r1, [r7, #0]
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f001 f93f 	bl	800bab6 <USBD_CtlError>
          ret = USBD_FAIL;
 800a838:	2302      	movs	r3, #2
 800a83a:	75fb      	strb	r3, [r7, #23]
          break;
 800a83c:	e000      	b.n	800a840 <USBD_CDC_Setup+0x12c>
          break;
 800a83e:	bf00      	nop
      }
      break;
 800a840:	e006      	b.n	800a850 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a842:	6839      	ldr	r1, [r7, #0]
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f001 f936 	bl	800bab6 <USBD_CtlError>
      ret = USBD_FAIL;
 800a84a:	2302      	movs	r3, #2
 800a84c:	75fb      	strb	r3, [r7, #23]
      break;
 800a84e:	bf00      	nop
  }

  return ret;
 800a850:	7dfb      	ldrb	r3, [r7, #23]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3718      	adds	r7, #24
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b084      	sub	sp, #16
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	460b      	mov	r3, r1
 800a864:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a86c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a874:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d03a      	beq.n	800a8f6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a880:	78fa      	ldrb	r2, [r7, #3]
 800a882:	6879      	ldr	r1, [r7, #4]
 800a884:	4613      	mov	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	4413      	add	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	440b      	add	r3, r1
 800a88e:	331c      	adds	r3, #28
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d029      	beq.n	800a8ea <USBD_CDC_DataIn+0x90>
 800a896:	78fa      	ldrb	r2, [r7, #3]
 800a898:	6879      	ldr	r1, [r7, #4]
 800a89a:	4613      	mov	r3, r2
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	4413      	add	r3, r2
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	440b      	add	r3, r1
 800a8a4:	331c      	adds	r3, #28
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	78f9      	ldrb	r1, [r7, #3]
 800a8aa:	68b8      	ldr	r0, [r7, #8]
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	440b      	add	r3, r1
 800a8b2:	00db      	lsls	r3, r3, #3
 800a8b4:	4403      	add	r3, r0
 800a8b6:	3338      	adds	r3, #56	; 0x38
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	fbb2 f1f3 	udiv	r1, r2, r3
 800a8be:	fb03 f301 	mul.w	r3, r3, r1
 800a8c2:	1ad3      	subs	r3, r2, r3
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d110      	bne.n	800a8ea <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a8c8:	78fa      	ldrb	r2, [r7, #3]
 800a8ca:	6879      	ldr	r1, [r7, #4]
 800a8cc:	4613      	mov	r3, r2
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	4413      	add	r3, r2
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	440b      	add	r3, r1
 800a8d6:	331c      	adds	r3, #28
 800a8d8:	2200      	movs	r2, #0
 800a8da:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a8dc:	78f9      	ldrb	r1, [r7, #3]
 800a8de:	2300      	movs	r3, #0
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f001 fddf 	bl	800c4a6 <USBD_LL_Transmit>
 800a8e8:	e003      	b.n	800a8f2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	e000      	b.n	800a8f8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a8f6:	2302      	movs	r3, #2
  }
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3710      	adds	r7, #16
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	460b      	mov	r3, r1
 800a90a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a912:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a914:	78fb      	ldrb	r3, [r7, #3]
 800a916:	4619      	mov	r1, r3
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f001 fe0a 	bl	800c532 <USBD_LL_GetRxDataSize>
 800a91e:	4602      	mov	r2, r0
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d00d      	beq.n	800a94c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a944:	4611      	mov	r1, r2
 800a946:	4798      	blx	r3

    return USBD_OK;
 800a948:	2300      	movs	r3, #0
 800a94a:	e000      	b.n	800a94e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a94c:	2302      	movs	r3, #2
  }
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b084      	sub	sp, #16
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a964:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d015      	beq.n	800a99c <USBD_CDC_EP0_RxReady+0x46>
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a976:	2bff      	cmp	r3, #255	; 0xff
 800a978:	d010      	beq.n	800a99c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a988:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a990:	b292      	uxth	r2, r2
 800a992:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	22ff      	movs	r2, #255	; 0xff
 800a998:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
	...

0800a9a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2243      	movs	r2, #67	; 0x43
 800a9b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a9b6:	4b03      	ldr	r3, [pc, #12]	; (800a9c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	370c      	adds	r7, #12
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bc80      	pop	{r7}
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	200000a8 	.word	0x200000a8

0800a9c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2243      	movs	r2, #67	; 0x43
 800a9d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a9d6:	4b03      	ldr	r3, [pc, #12]	; (800a9e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bc80      	pop	{r7}
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	20000064 	.word	0x20000064

0800a9e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2243      	movs	r2, #67	; 0x43
 800a9f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a9f6:	4b03      	ldr	r3, [pc, #12]	; (800aa04 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bc80      	pop	{r7}
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	200000ec 	.word	0x200000ec

0800aa08 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	220a      	movs	r2, #10
 800aa14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800aa16:	4b03      	ldr	r3, [pc, #12]	; (800aa24 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bc80      	pop	{r7}
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	20000020 	.word	0x20000020

0800aa28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800aa32:	2302      	movs	r3, #2
 800aa34:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d005      	beq.n	800aa48 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	683a      	ldr	r2, [r7, #0]
 800aa40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800aa44:	2300      	movs	r3, #0
 800aa46:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800aa48:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3714      	adds	r7, #20
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bc80      	pop	{r7}
 800aa52:	4770      	bx	lr

0800aa54 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b087      	sub	sp, #28
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	4613      	mov	r3, r2
 800aa60:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa68:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	68ba      	ldr	r2, [r7, #8]
 800aa6e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800aa72:	88fa      	ldrh	r2, [r7, #6]
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	371c      	adds	r7, #28
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bc80      	pop	{r7}
 800aa84:	4770      	bx	lr

0800aa86 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800aa86:	b480      	push	{r7}
 800aa88:	b085      	sub	sp, #20
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa96:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	683a      	ldr	r2, [r7, #0]
 800aa9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bc80      	pop	{r7}
 800aaaa:	4770      	bx	lr

0800aaac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d01c      	beq.n	800ab00 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d115      	bne.n	800aafc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	2181      	movs	r1, #129	; 0x81
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f001 fcd7 	bl	800c4a6 <USBD_LL_Transmit>

      return USBD_OK;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	e002      	b.n	800ab02 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800aafc:	2301      	movs	r3, #1
 800aafe:	e000      	b.n	800ab02 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800ab00:	2302      	movs	r3, #2
  }
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b084      	sub	sp, #16
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab18:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d017      	beq.n	800ab54 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	7c1b      	ldrb	r3, [r3, #16]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d109      	bne.n	800ab40 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab32:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab36:	2101      	movs	r1, #1
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f001 fcd7 	bl	800c4ec <USBD_LL_PrepareReceive>
 800ab3e:	e007      	b.n	800ab50 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab46:	2340      	movs	r3, #64	; 0x40
 800ab48:	2101      	movs	r1, #1
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f001 fcce 	bl	800c4ec <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	e000      	b.n	800ab56 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ab54:	2302      	movs	r3, #2
  }
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	60f8      	str	r0, [r7, #12]
 800ab66:	60b9      	str	r1, [r7, #8]
 800ab68:	4613      	mov	r3, r2
 800ab6a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d101      	bne.n	800ab76 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ab72:	2302      	movs	r3, #2
 800ab74:	e01a      	b.n	800abac <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d003      	beq.n	800ab88 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d003      	beq.n	800ab96 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	68ba      	ldr	r2, [r7, #8]
 800ab92:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	79fa      	ldrb	r2, [r7, #7]
 800aba2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800aba4:	68f8      	ldr	r0, [r7, #12]
 800aba6:	f001 fb3b 	bl	800c220 <USBD_LL_Init>

  return USBD_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b085      	sub	sp, #20
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800abbe:	2300      	movs	r3, #0
 800abc0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d006      	beq.n	800abd6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	683a      	ldr	r2, [r7, #0]
 800abcc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800abd0:	2300      	movs	r3, #0
 800abd2:	73fb      	strb	r3, [r7, #15]
 800abd4:	e001      	b.n	800abda <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800abd6:	2302      	movs	r3, #2
 800abd8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800abda:	7bfb      	ldrb	r3, [r7, #15]
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3714      	adds	r7, #20
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bc80      	pop	{r7}
 800abe4:	4770      	bx	lr

0800abe6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b082      	sub	sp, #8
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f001 fb70 	bl	800c2d4 <USBD_LL_Start>

  return USBD_OK;
 800abf4:	2300      	movs	r3, #0
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}

0800abfe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800abfe:	b480      	push	{r7}
 800ac00:	b083      	sub	sp, #12
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bc80      	pop	{r7}
 800ac10:	4770      	bx	lr

0800ac12 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b084      	sub	sp, #16
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ac1e:	2302      	movs	r3, #2
 800ac20:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00c      	beq.n	800ac46 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	78fa      	ldrb	r2, [r7, #3]
 800ac36:	4611      	mov	r1, r2
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	4798      	blx	r3
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d101      	bne.n	800ac46 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ac42:	2300      	movs	r3, #0
 800ac44:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ac46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	460b      	mov	r3, r1
 800ac5a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	78fa      	ldrb	r2, [r7, #3]
 800ac66:	4611      	mov	r1, r2
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	4798      	blx	r3

  return USBD_OK;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b082      	sub	sp, #8
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
 800ac7e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ac86:	6839      	ldr	r1, [r7, #0]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f000 fed8 	bl	800ba3e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2201      	movs	r2, #1
 800ac92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800acaa:	f003 031f 	and.w	r3, r3, #31
 800acae:	2b02      	cmp	r3, #2
 800acb0:	d016      	beq.n	800ace0 <USBD_LL_SetupStage+0x6a>
 800acb2:	2b02      	cmp	r3, #2
 800acb4:	d81c      	bhi.n	800acf0 <USBD_LL_SetupStage+0x7a>
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d002      	beq.n	800acc0 <USBD_LL_SetupStage+0x4a>
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d008      	beq.n	800acd0 <USBD_LL_SetupStage+0x5a>
 800acbe:	e017      	b.n	800acf0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800acc6:	4619      	mov	r1, r3
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 f9cb 	bl	800b064 <USBD_StdDevReq>
      break;
 800acce:	e01a      	b.n	800ad06 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800acd6:	4619      	mov	r1, r3
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 fa2d 	bl	800b138 <USBD_StdItfReq>
      break;
 800acde:	e012      	b.n	800ad06 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ace6:	4619      	mov	r1, r3
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 fa6d 	bl	800b1c8 <USBD_StdEPReq>
      break;
 800acee:	e00a      	b.n	800ad06 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800acf6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	4619      	mov	r1, r3
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f001 fb48 	bl	800c394 <USBD_LL_StallEP>
      break;
 800ad04:	bf00      	nop
  }

  return USBD_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	460b      	mov	r3, r1
 800ad1a:	607a      	str	r2, [r7, #4]
 800ad1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ad1e:	7afb      	ldrb	r3, [r7, #11]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d14b      	bne.n	800adbc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ad2a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad32:	2b03      	cmp	r3, #3
 800ad34:	d134      	bne.n	800ada0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	68da      	ldr	r2, [r3, #12]
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	691b      	ldr	r3, [r3, #16]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d919      	bls.n	800ad76 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	68da      	ldr	r2, [r3, #12]
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	1ad2      	subs	r2, r2, r3
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	68da      	ldr	r2, [r3, #12]
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d203      	bcs.n	800ad64 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	e002      	b.n	800ad6a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	6879      	ldr	r1, [r7, #4]
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	f000 ff57 	bl	800bc22 <USBD_CtlContinueRx>
 800ad74:	e038      	b.n	800ade8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00a      	beq.n	800ad98 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ad88:	2b03      	cmp	r3, #3
 800ad8a:	d105      	bne.n	800ad98 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad92:	691b      	ldr	r3, [r3, #16]
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f000 ff54 	bl	800bc46 <USBD_CtlSendStatus>
 800ad9e:	e023      	b.n	800ade8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ada6:	2b05      	cmp	r3, #5
 800ada8:	d11e      	bne.n	800ade8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2200      	movs	r2, #0
 800adae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800adb2:	2100      	movs	r1, #0
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f001 faed 	bl	800c394 <USBD_LL_StallEP>
 800adba:	e015      	b.n	800ade8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adc2:	699b      	ldr	r3, [r3, #24]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00d      	beq.n	800ade4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800adce:	2b03      	cmp	r3, #3
 800add0:	d108      	bne.n	800ade4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800add8:	699b      	ldr	r3, [r3, #24]
 800adda:	7afa      	ldrb	r2, [r7, #11]
 800addc:	4611      	mov	r1, r2
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	4798      	blx	r3
 800ade2:	e001      	b.n	800ade8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ade4:	2302      	movs	r3, #2
 800ade6:	e000      	b.n	800adea <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	3718      	adds	r7, #24
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b086      	sub	sp, #24
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	60f8      	str	r0, [r7, #12]
 800adfa:	460b      	mov	r3, r1
 800adfc:	607a      	str	r2, [r7, #4]
 800adfe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ae00:	7afb      	ldrb	r3, [r7, #11]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d17f      	bne.n	800af06 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	3314      	adds	r3, #20
 800ae0a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d15c      	bne.n	800aed0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	68da      	ldr	r2, [r3, #12]
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	691b      	ldr	r3, [r3, #16]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d915      	bls.n	800ae4e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	68da      	ldr	r2, [r3, #12]
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	691b      	ldr	r3, [r3, #16]
 800ae2a:	1ad2      	subs	r2, r2, r3
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	461a      	mov	r2, r3
 800ae38:	6879      	ldr	r1, [r7, #4]
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	f000 fec1 	bl	800bbc2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae40:	2300      	movs	r3, #0
 800ae42:	2200      	movs	r2, #0
 800ae44:	2100      	movs	r1, #0
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f001 fb50 	bl	800c4ec <USBD_LL_PrepareReceive>
 800ae4c:	e04e      	b.n	800aeec <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	697a      	ldr	r2, [r7, #20]
 800ae54:	6912      	ldr	r2, [r2, #16]
 800ae56:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae5a:	fb02 f201 	mul.w	r2, r2, r1
 800ae5e:	1a9b      	subs	r3, r3, r2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d11c      	bne.n	800ae9e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	689a      	ldr	r2, [r3, #8]
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d316      	bcc.n	800ae9e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	689a      	ldr	r2, [r3, #8]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d20f      	bcs.n	800ae9e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ae7e:	2200      	movs	r2, #0
 800ae80:	2100      	movs	r1, #0
 800ae82:	68f8      	ldr	r0, [r7, #12]
 800ae84:	f000 fe9d 	bl	800bbc2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae90:	2300      	movs	r3, #0
 800ae92:	2200      	movs	r2, #0
 800ae94:	2100      	movs	r1, #0
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	f001 fb28 	bl	800c4ec <USBD_LL_PrepareReceive>
 800ae9c:	e026      	b.n	800aeec <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00a      	beq.n	800aec0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aeb0:	2b03      	cmp	r3, #3
 800aeb2:	d105      	bne.n	800aec0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	68f8      	ldr	r0, [r7, #12]
 800aebe:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800aec0:	2180      	movs	r1, #128	; 0x80
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f001 fa66 	bl	800c394 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f000 fecf 	bl	800bc6c <USBD_CtlReceiveStatus>
 800aece:	e00d      	b.n	800aeec <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aed6:	2b04      	cmp	r3, #4
 800aed8:	d004      	beq.n	800aee4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d103      	bne.n	800aeec <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800aee4:	2180      	movs	r1, #128	; 0x80
 800aee6:	68f8      	ldr	r0, [r7, #12]
 800aee8:	f001 fa54 	bl	800c394 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d11d      	bne.n	800af32 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f7ff fe81 	bl	800abfe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2200      	movs	r2, #0
 800af00:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800af04:	e015      	b.n	800af32 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af0c:	695b      	ldr	r3, [r3, #20]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00d      	beq.n	800af2e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800af18:	2b03      	cmp	r3, #3
 800af1a:	d108      	bne.n	800af2e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af22:	695b      	ldr	r3, [r3, #20]
 800af24:	7afa      	ldrb	r2, [r7, #11]
 800af26:	4611      	mov	r1, r2
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	4798      	blx	r3
 800af2c:	e001      	b.n	800af32 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800af2e:	2302      	movs	r3, #2
 800af30:	e000      	b.n	800af34 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	3718      	adds	r7, #24
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af44:	2340      	movs	r3, #64	; 0x40
 800af46:	2200      	movs	r2, #0
 800af48:	2100      	movs	r1, #0
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f001 f9dd 	bl	800c30a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2240      	movs	r2, #64	; 0x40
 800af5c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af60:	2340      	movs	r3, #64	; 0x40
 800af62:	2200      	movs	r2, #0
 800af64:	2180      	movs	r1, #128	; 0x80
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f001 f9cf 	bl	800c30a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2201      	movs	r2, #1
 800af70:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2240      	movs	r2, #64	; 0x40
 800af76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2201      	movs	r2, #1
 800af7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d009      	beq.n	800afb4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	6852      	ldr	r2, [r2, #4]
 800afac:	b2d2      	uxtb	r2, r2
 800afae:	4611      	mov	r1, r2
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	4798      	blx	r3
  }

  return USBD_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800afbe:	b480      	push	{r7}
 800afc0:	b083      	sub	sp, #12
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	460b      	mov	r3, r1
 800afc8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	78fa      	ldrb	r2, [r7, #3]
 800afce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	370c      	adds	r7, #12
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bc80      	pop	{r7}
 800afda:	4770      	bx	lr

0800afdc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2204      	movs	r2, #4
 800aff4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	370c      	adds	r7, #12
 800affe:	46bd      	mov	sp, r7
 800b000:	bc80      	pop	{r7}
 800b002:	4770      	bx	lr

0800b004 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b012:	2b04      	cmp	r3, #4
 800b014:	d105      	bne.n	800b022 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	370c      	adds	r7, #12
 800b028:	46bd      	mov	sp, r7
 800b02a:	bc80      	pop	{r7}
 800b02c:	4770      	bx	lr

0800b02e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b082      	sub	sp, #8
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b03c:	2b03      	cmp	r3, #3
 800b03e:	d10b      	bne.n	800b058 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b046:	69db      	ldr	r3, [r3, #28]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d005      	beq.n	800b058 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b052:	69db      	ldr	r3, [r3, #28]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3708      	adds	r7, #8
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
	...

0800b064 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b06e:	2300      	movs	r3, #0
 800b070:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b07a:	2b40      	cmp	r3, #64	; 0x40
 800b07c:	d005      	beq.n	800b08a <USBD_StdDevReq+0x26>
 800b07e:	2b40      	cmp	r3, #64	; 0x40
 800b080:	d84f      	bhi.n	800b122 <USBD_StdDevReq+0xbe>
 800b082:	2b00      	cmp	r3, #0
 800b084:	d009      	beq.n	800b09a <USBD_StdDevReq+0x36>
 800b086:	2b20      	cmp	r3, #32
 800b088:	d14b      	bne.n	800b122 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b090:	689b      	ldr	r3, [r3, #8]
 800b092:	6839      	ldr	r1, [r7, #0]
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	4798      	blx	r3
      break;
 800b098:	e048      	b.n	800b12c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	785b      	ldrb	r3, [r3, #1]
 800b09e:	2b09      	cmp	r3, #9
 800b0a0:	d839      	bhi.n	800b116 <USBD_StdDevReq+0xb2>
 800b0a2:	a201      	add	r2, pc, #4	; (adr r2, 800b0a8 <USBD_StdDevReq+0x44>)
 800b0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a8:	0800b0f9 	.word	0x0800b0f9
 800b0ac:	0800b10d 	.word	0x0800b10d
 800b0b0:	0800b117 	.word	0x0800b117
 800b0b4:	0800b103 	.word	0x0800b103
 800b0b8:	0800b117 	.word	0x0800b117
 800b0bc:	0800b0db 	.word	0x0800b0db
 800b0c0:	0800b0d1 	.word	0x0800b0d1
 800b0c4:	0800b117 	.word	0x0800b117
 800b0c8:	0800b0ef 	.word	0x0800b0ef
 800b0cc:	0800b0e5 	.word	0x0800b0e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b0d0:	6839      	ldr	r1, [r7, #0]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 f9dc 	bl	800b490 <USBD_GetDescriptor>
          break;
 800b0d8:	e022      	b.n	800b120 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b0da:	6839      	ldr	r1, [r7, #0]
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fb3f 	bl	800b760 <USBD_SetAddress>
          break;
 800b0e2:	e01d      	b.n	800b120 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b0e4:	6839      	ldr	r1, [r7, #0]
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fb7e 	bl	800b7e8 <USBD_SetConfig>
          break;
 800b0ec:	e018      	b.n	800b120 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b0ee:	6839      	ldr	r1, [r7, #0]
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 fc07 	bl	800b904 <USBD_GetConfig>
          break;
 800b0f6:	e013      	b.n	800b120 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b0f8:	6839      	ldr	r1, [r7, #0]
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 fc37 	bl	800b96e <USBD_GetStatus>
          break;
 800b100:	e00e      	b.n	800b120 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b102:	6839      	ldr	r1, [r7, #0]
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 fc65 	bl	800b9d4 <USBD_SetFeature>
          break;
 800b10a:	e009      	b.n	800b120 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b10c:	6839      	ldr	r1, [r7, #0]
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 fc74 	bl	800b9fc <USBD_ClrFeature>
          break;
 800b114:	e004      	b.n	800b120 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b116:	6839      	ldr	r1, [r7, #0]
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 fccc 	bl	800bab6 <USBD_CtlError>
          break;
 800b11e:	bf00      	nop
      }
      break;
 800b120:	e004      	b.n	800b12c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b122:	6839      	ldr	r1, [r7, #0]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fcc6 	bl	800bab6 <USBD_CtlError>
      break;
 800b12a:	bf00      	nop
  }

  return ret;
 800b12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop

0800b138 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b142:	2300      	movs	r3, #0
 800b144:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b14e:	2b40      	cmp	r3, #64	; 0x40
 800b150:	d005      	beq.n	800b15e <USBD_StdItfReq+0x26>
 800b152:	2b40      	cmp	r3, #64	; 0x40
 800b154:	d82e      	bhi.n	800b1b4 <USBD_StdItfReq+0x7c>
 800b156:	2b00      	cmp	r3, #0
 800b158:	d001      	beq.n	800b15e <USBD_StdItfReq+0x26>
 800b15a:	2b20      	cmp	r3, #32
 800b15c:	d12a      	bne.n	800b1b4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b164:	3b01      	subs	r3, #1
 800b166:	2b02      	cmp	r3, #2
 800b168:	d81d      	bhi.n	800b1a6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	889b      	ldrh	r3, [r3, #4]
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	2b01      	cmp	r3, #1
 800b172:	d813      	bhi.n	800b19c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	6839      	ldr	r1, [r7, #0]
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	4798      	blx	r3
 800b182:	4603      	mov	r3, r0
 800b184:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	88db      	ldrh	r3, [r3, #6]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d110      	bne.n	800b1b0 <USBD_StdItfReq+0x78>
 800b18e:	7bfb      	ldrb	r3, [r7, #15]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10d      	bne.n	800b1b0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 fd56 	bl	800bc46 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b19a:	e009      	b.n	800b1b0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b19c:	6839      	ldr	r1, [r7, #0]
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fc89 	bl	800bab6 <USBD_CtlError>
          break;
 800b1a4:	e004      	b.n	800b1b0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b1a6:	6839      	ldr	r1, [r7, #0]
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 fc84 	bl	800bab6 <USBD_CtlError>
          break;
 800b1ae:	e000      	b.n	800b1b2 <USBD_StdItfReq+0x7a>
          break;
 800b1b0:	bf00      	nop
      }
      break;
 800b1b2:	e004      	b.n	800b1be <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b1b4:	6839      	ldr	r1, [r7, #0]
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 fc7d 	bl	800bab6 <USBD_CtlError>
      break;
 800b1bc:	bf00      	nop
  }

  return USBD_OK;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3710      	adds	r7, #16
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	889b      	ldrh	r3, [r3, #4]
 800b1da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1e4:	2b40      	cmp	r3, #64	; 0x40
 800b1e6:	d007      	beq.n	800b1f8 <USBD_StdEPReq+0x30>
 800b1e8:	2b40      	cmp	r3, #64	; 0x40
 800b1ea:	f200 8146 	bhi.w	800b47a <USBD_StdEPReq+0x2b2>
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00a      	beq.n	800b208 <USBD_StdEPReq+0x40>
 800b1f2:	2b20      	cmp	r3, #32
 800b1f4:	f040 8141 	bne.w	800b47a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	6839      	ldr	r1, [r7, #0]
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	4798      	blx	r3
      break;
 800b206:	e13d      	b.n	800b484 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b210:	2b20      	cmp	r3, #32
 800b212:	d10a      	bne.n	800b22a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	6839      	ldr	r1, [r7, #0]
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	4798      	blx	r3
 800b222:	4603      	mov	r3, r0
 800b224:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b226:	7bfb      	ldrb	r3, [r7, #15]
 800b228:	e12d      	b.n	800b486 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	785b      	ldrb	r3, [r3, #1]
 800b22e:	2b03      	cmp	r3, #3
 800b230:	d007      	beq.n	800b242 <USBD_StdEPReq+0x7a>
 800b232:	2b03      	cmp	r3, #3
 800b234:	f300 811b 	bgt.w	800b46e <USBD_StdEPReq+0x2a6>
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d072      	beq.n	800b322 <USBD_StdEPReq+0x15a>
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d03a      	beq.n	800b2b6 <USBD_StdEPReq+0xee>
 800b240:	e115      	b.n	800b46e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b248:	2b02      	cmp	r3, #2
 800b24a:	d002      	beq.n	800b252 <USBD_StdEPReq+0x8a>
 800b24c:	2b03      	cmp	r3, #3
 800b24e:	d015      	beq.n	800b27c <USBD_StdEPReq+0xb4>
 800b250:	e02b      	b.n	800b2aa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b252:	7bbb      	ldrb	r3, [r7, #14]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00c      	beq.n	800b272 <USBD_StdEPReq+0xaa>
 800b258:	7bbb      	ldrb	r3, [r7, #14]
 800b25a:	2b80      	cmp	r3, #128	; 0x80
 800b25c:	d009      	beq.n	800b272 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b25e:	7bbb      	ldrb	r3, [r7, #14]
 800b260:	4619      	mov	r1, r3
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f001 f896 	bl	800c394 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b268:	2180      	movs	r1, #128	; 0x80
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f001 f892 	bl	800c394 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b270:	e020      	b.n	800b2b4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b272:	6839      	ldr	r1, [r7, #0]
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 fc1e 	bl	800bab6 <USBD_CtlError>
              break;
 800b27a:	e01b      	b.n	800b2b4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	885b      	ldrh	r3, [r3, #2]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d10e      	bne.n	800b2a2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b284:	7bbb      	ldrb	r3, [r7, #14]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00b      	beq.n	800b2a2 <USBD_StdEPReq+0xda>
 800b28a:	7bbb      	ldrb	r3, [r7, #14]
 800b28c:	2b80      	cmp	r3, #128	; 0x80
 800b28e:	d008      	beq.n	800b2a2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	88db      	ldrh	r3, [r3, #6]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d104      	bne.n	800b2a2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b298:	7bbb      	ldrb	r3, [r7, #14]
 800b29a:	4619      	mov	r1, r3
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f001 f879 	bl	800c394 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 fccf 	bl	800bc46 <USBD_CtlSendStatus>

              break;
 800b2a8:	e004      	b.n	800b2b4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b2aa:	6839      	ldr	r1, [r7, #0]
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 fc02 	bl	800bab6 <USBD_CtlError>
              break;
 800b2b2:	bf00      	nop
          }
          break;
 800b2b4:	e0e0      	b.n	800b478 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	d002      	beq.n	800b2c6 <USBD_StdEPReq+0xfe>
 800b2c0:	2b03      	cmp	r3, #3
 800b2c2:	d015      	beq.n	800b2f0 <USBD_StdEPReq+0x128>
 800b2c4:	e026      	b.n	800b314 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2c6:	7bbb      	ldrb	r3, [r7, #14]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d00c      	beq.n	800b2e6 <USBD_StdEPReq+0x11e>
 800b2cc:	7bbb      	ldrb	r3, [r7, #14]
 800b2ce:	2b80      	cmp	r3, #128	; 0x80
 800b2d0:	d009      	beq.n	800b2e6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b2d2:	7bbb      	ldrb	r3, [r7, #14]
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f001 f85c 	bl	800c394 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b2dc:	2180      	movs	r1, #128	; 0x80
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f001 f858 	bl	800c394 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b2e4:	e01c      	b.n	800b320 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b2e6:	6839      	ldr	r1, [r7, #0]
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 fbe4 	bl	800bab6 <USBD_CtlError>
              break;
 800b2ee:	e017      	b.n	800b320 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	885b      	ldrh	r3, [r3, #2]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d112      	bne.n	800b31e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b2f8:	7bbb      	ldrb	r3, [r7, #14]
 800b2fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d004      	beq.n	800b30c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b302:	7bbb      	ldrb	r3, [r7, #14]
 800b304:	4619      	mov	r1, r3
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f001 f863 	bl	800c3d2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 fc9a 	bl	800bc46 <USBD_CtlSendStatus>
              }
              break;
 800b312:	e004      	b.n	800b31e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b314:	6839      	ldr	r1, [r7, #0]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 fbcd 	bl	800bab6 <USBD_CtlError>
              break;
 800b31c:	e000      	b.n	800b320 <USBD_StdEPReq+0x158>
              break;
 800b31e:	bf00      	nop
          }
          break;
 800b320:	e0aa      	b.n	800b478 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b328:	2b02      	cmp	r3, #2
 800b32a:	d002      	beq.n	800b332 <USBD_StdEPReq+0x16a>
 800b32c:	2b03      	cmp	r3, #3
 800b32e:	d032      	beq.n	800b396 <USBD_StdEPReq+0x1ce>
 800b330:	e097      	b.n	800b462 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b332:	7bbb      	ldrb	r3, [r7, #14]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d007      	beq.n	800b348 <USBD_StdEPReq+0x180>
 800b338:	7bbb      	ldrb	r3, [r7, #14]
 800b33a:	2b80      	cmp	r3, #128	; 0x80
 800b33c:	d004      	beq.n	800b348 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b33e:	6839      	ldr	r1, [r7, #0]
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 fbb8 	bl	800bab6 <USBD_CtlError>
                break;
 800b346:	e091      	b.n	800b46c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b348:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	da0b      	bge.n	800b368 <USBD_StdEPReq+0x1a0>
 800b350:	7bbb      	ldrb	r3, [r7, #14]
 800b352:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b356:	4613      	mov	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	4413      	add	r3, r2
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	3310      	adds	r3, #16
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	4413      	add	r3, r2
 800b364:	3304      	adds	r3, #4
 800b366:	e00b      	b.n	800b380 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b368:	7bbb      	ldrb	r3, [r7, #14]
 800b36a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b36e:	4613      	mov	r3, r2
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	4413      	add	r3, r2
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	4413      	add	r3, r2
 800b37e:	3304      	adds	r3, #4
 800b380:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	2200      	movs	r2, #0
 800b386:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	2202      	movs	r2, #2
 800b38c:	4619      	mov	r1, r3
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 fbfb 	bl	800bb8a <USBD_CtlSendData>
              break;
 800b394:	e06a      	b.n	800b46c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b396:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	da11      	bge.n	800b3c2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b39e:	7bbb      	ldrb	r3, [r7, #14]
 800b3a0:	f003 020f 	and.w	r2, r3, #15
 800b3a4:	6879      	ldr	r1, [r7, #4]
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	4413      	add	r3, r2
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	440b      	add	r3, r1
 800b3b0:	3318      	adds	r3, #24
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d117      	bne.n	800b3e8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fb7b 	bl	800bab6 <USBD_CtlError>
                  break;
 800b3c0:	e054      	b.n	800b46c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b3c2:	7bbb      	ldrb	r3, [r7, #14]
 800b3c4:	f003 020f 	and.w	r2, r3, #15
 800b3c8:	6879      	ldr	r1, [r7, #4]
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	4413      	add	r3, r2
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	440b      	add	r3, r1
 800b3d4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d104      	bne.n	800b3e8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b3de:	6839      	ldr	r1, [r7, #0]
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 fb68 	bl	800bab6 <USBD_CtlError>
                  break;
 800b3e6:	e041      	b.n	800b46c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	da0b      	bge.n	800b408 <USBD_StdEPReq+0x240>
 800b3f0:	7bbb      	ldrb	r3, [r7, #14]
 800b3f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	4413      	add	r3, r2
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	3310      	adds	r3, #16
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	4413      	add	r3, r2
 800b404:	3304      	adds	r3, #4
 800b406:	e00b      	b.n	800b420 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b408:	7bbb      	ldrb	r3, [r7, #14]
 800b40a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b40e:	4613      	mov	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	4413      	add	r3, r2
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	4413      	add	r3, r2
 800b41e:	3304      	adds	r3, #4
 800b420:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b422:	7bbb      	ldrb	r3, [r7, #14]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <USBD_StdEPReq+0x266>
 800b428:	7bbb      	ldrb	r3, [r7, #14]
 800b42a:	2b80      	cmp	r3, #128	; 0x80
 800b42c:	d103      	bne.n	800b436 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	2200      	movs	r2, #0
 800b432:	601a      	str	r2, [r3, #0]
 800b434:	e00e      	b.n	800b454 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b436:	7bbb      	ldrb	r3, [r7, #14]
 800b438:	4619      	mov	r1, r3
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 ffe8 	bl	800c410 <USBD_LL_IsStallEP>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d003      	beq.n	800b44e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	2201      	movs	r2, #1
 800b44a:	601a      	str	r2, [r3, #0]
 800b44c:	e002      	b.n	800b454 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	2200      	movs	r2, #0
 800b452:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	2202      	movs	r2, #2
 800b458:	4619      	mov	r1, r3
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 fb95 	bl	800bb8a <USBD_CtlSendData>
              break;
 800b460:	e004      	b.n	800b46c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 fb26 	bl	800bab6 <USBD_CtlError>
              break;
 800b46a:	bf00      	nop
          }
          break;
 800b46c:	e004      	b.n	800b478 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b46e:	6839      	ldr	r1, [r7, #0]
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 fb20 	bl	800bab6 <USBD_CtlError>
          break;
 800b476:	bf00      	nop
      }
      break;
 800b478:	e004      	b.n	800b484 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b47a:	6839      	ldr	r1, [r7, #0]
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 fb1a 	bl	800bab6 <USBD_CtlError>
      break;
 800b482:	bf00      	nop
  }

  return ret;
 800b484:	7bfb      	ldrb	r3, [r7, #15]
}
 800b486:	4618      	mov	r0, r3
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
	...

0800b490 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b49a:	2300      	movs	r3, #0
 800b49c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	885b      	ldrh	r3, [r3, #2]
 800b4aa:	0a1b      	lsrs	r3, r3, #8
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	2b06      	cmp	r3, #6
 800b4b2:	f200 8128 	bhi.w	800b706 <USBD_GetDescriptor+0x276>
 800b4b6:	a201      	add	r2, pc, #4	; (adr r2, 800b4bc <USBD_GetDescriptor+0x2c>)
 800b4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4bc:	0800b4d9 	.word	0x0800b4d9
 800b4c0:	0800b4f1 	.word	0x0800b4f1
 800b4c4:	0800b531 	.word	0x0800b531
 800b4c8:	0800b707 	.word	0x0800b707
 800b4cc:	0800b707 	.word	0x0800b707
 800b4d0:	0800b6a7 	.word	0x0800b6a7
 800b4d4:	0800b6d3 	.word	0x0800b6d3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	7c12      	ldrb	r2, [r2, #16]
 800b4e4:	f107 0108 	add.w	r1, r7, #8
 800b4e8:	4610      	mov	r0, r2
 800b4ea:	4798      	blx	r3
 800b4ec:	60f8      	str	r0, [r7, #12]
      break;
 800b4ee:	e112      	b.n	800b716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	7c1b      	ldrb	r3, [r3, #16]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d10d      	bne.n	800b514 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b500:	f107 0208 	add.w	r2, r7, #8
 800b504:	4610      	mov	r0, r2
 800b506:	4798      	blx	r3
 800b508:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	3301      	adds	r3, #1
 800b50e:	2202      	movs	r2, #2
 800b510:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b512:	e100      	b.n	800b716 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b51c:	f107 0208 	add.w	r2, r7, #8
 800b520:	4610      	mov	r0, r2
 800b522:	4798      	blx	r3
 800b524:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	3301      	adds	r3, #1
 800b52a:	2202      	movs	r2, #2
 800b52c:	701a      	strb	r2, [r3, #0]
      break;
 800b52e:	e0f2      	b.n	800b716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	885b      	ldrh	r3, [r3, #2]
 800b534:	b2db      	uxtb	r3, r3
 800b536:	2b05      	cmp	r3, #5
 800b538:	f200 80ac 	bhi.w	800b694 <USBD_GetDescriptor+0x204>
 800b53c:	a201      	add	r2, pc, #4	; (adr r2, 800b544 <USBD_GetDescriptor+0xb4>)
 800b53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b542:	bf00      	nop
 800b544:	0800b55d 	.word	0x0800b55d
 800b548:	0800b591 	.word	0x0800b591
 800b54c:	0800b5c5 	.word	0x0800b5c5
 800b550:	0800b5f9 	.word	0x0800b5f9
 800b554:	0800b62d 	.word	0x0800b62d
 800b558:	0800b661 	.word	0x0800b661
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d00b      	beq.n	800b580 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	7c12      	ldrb	r2, [r2, #16]
 800b574:	f107 0108 	add.w	r1, r7, #8
 800b578:	4610      	mov	r0, r2
 800b57a:	4798      	blx	r3
 800b57c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b57e:	e091      	b.n	800b6a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b580:	6839      	ldr	r1, [r7, #0]
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 fa97 	bl	800bab6 <USBD_CtlError>
            err++;
 800b588:	7afb      	ldrb	r3, [r7, #11]
 800b58a:	3301      	adds	r3, #1
 800b58c:	72fb      	strb	r3, [r7, #11]
          break;
 800b58e:	e089      	b.n	800b6a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00b      	beq.n	800b5b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	7c12      	ldrb	r2, [r2, #16]
 800b5a8:	f107 0108 	add.w	r1, r7, #8
 800b5ac:	4610      	mov	r0, r2
 800b5ae:	4798      	blx	r3
 800b5b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5b2:	e077      	b.n	800b6a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5b4:	6839      	ldr	r1, [r7, #0]
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 fa7d 	bl	800bab6 <USBD_CtlError>
            err++;
 800b5bc:	7afb      	ldrb	r3, [r7, #11]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b5c2:	e06f      	b.n	800b6a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d00b      	beq.n	800b5e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	7c12      	ldrb	r2, [r2, #16]
 800b5dc:	f107 0108 	add.w	r1, r7, #8
 800b5e0:	4610      	mov	r0, r2
 800b5e2:	4798      	blx	r3
 800b5e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5e6:	e05d      	b.n	800b6a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5e8:	6839      	ldr	r1, [r7, #0]
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 fa63 	bl	800bab6 <USBD_CtlError>
            err++;
 800b5f0:	7afb      	ldrb	r3, [r7, #11]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b5f6:	e055      	b.n	800b6a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5fe:	691b      	ldr	r3, [r3, #16]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d00b      	beq.n	800b61c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	7c12      	ldrb	r2, [r2, #16]
 800b610:	f107 0108 	add.w	r1, r7, #8
 800b614:	4610      	mov	r0, r2
 800b616:	4798      	blx	r3
 800b618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b61a:	e043      	b.n	800b6a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b61c:	6839      	ldr	r1, [r7, #0]
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 fa49 	bl	800bab6 <USBD_CtlError>
            err++;
 800b624:	7afb      	ldrb	r3, [r7, #11]
 800b626:	3301      	adds	r3, #1
 800b628:	72fb      	strb	r3, [r7, #11]
          break;
 800b62a:	e03b      	b.n	800b6a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b632:	695b      	ldr	r3, [r3, #20]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00b      	beq.n	800b650 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b63e:	695b      	ldr	r3, [r3, #20]
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	7c12      	ldrb	r2, [r2, #16]
 800b644:	f107 0108 	add.w	r1, r7, #8
 800b648:	4610      	mov	r0, r2
 800b64a:	4798      	blx	r3
 800b64c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b64e:	e029      	b.n	800b6a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b650:	6839      	ldr	r1, [r7, #0]
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 fa2f 	bl	800bab6 <USBD_CtlError>
            err++;
 800b658:	7afb      	ldrb	r3, [r7, #11]
 800b65a:	3301      	adds	r3, #1
 800b65c:	72fb      	strb	r3, [r7, #11]
          break;
 800b65e:	e021      	b.n	800b6a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b666:	699b      	ldr	r3, [r3, #24]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00b      	beq.n	800b684 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b672:	699b      	ldr	r3, [r3, #24]
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	7c12      	ldrb	r2, [r2, #16]
 800b678:	f107 0108 	add.w	r1, r7, #8
 800b67c:	4610      	mov	r0, r2
 800b67e:	4798      	blx	r3
 800b680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b682:	e00f      	b.n	800b6a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b684:	6839      	ldr	r1, [r7, #0]
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 fa15 	bl	800bab6 <USBD_CtlError>
            err++;
 800b68c:	7afb      	ldrb	r3, [r7, #11]
 800b68e:	3301      	adds	r3, #1
 800b690:	72fb      	strb	r3, [r7, #11]
          break;
 800b692:	e007      	b.n	800b6a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b694:	6839      	ldr	r1, [r7, #0]
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 fa0d 	bl	800bab6 <USBD_CtlError>
          err++;
 800b69c:	7afb      	ldrb	r3, [r7, #11]
 800b69e:	3301      	adds	r3, #1
 800b6a0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b6a2:	e038      	b.n	800b716 <USBD_GetDescriptor+0x286>
 800b6a4:	e037      	b.n	800b716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	7c1b      	ldrb	r3, [r3, #16]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d109      	bne.n	800b6c2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6b6:	f107 0208 	add.w	r2, r7, #8
 800b6ba:	4610      	mov	r0, r2
 800b6bc:	4798      	blx	r3
 800b6be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6c0:	e029      	b.n	800b716 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b6c2:	6839      	ldr	r1, [r7, #0]
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 f9f6 	bl	800bab6 <USBD_CtlError>
        err++;
 800b6ca:	7afb      	ldrb	r3, [r7, #11]
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	72fb      	strb	r3, [r7, #11]
      break;
 800b6d0:	e021      	b.n	800b716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	7c1b      	ldrb	r3, [r3, #16]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d10d      	bne.n	800b6f6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e2:	f107 0208 	add.w	r2, r7, #8
 800b6e6:	4610      	mov	r0, r2
 800b6e8:	4798      	blx	r3
 800b6ea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	2207      	movs	r2, #7
 800b6f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6f4:	e00f      	b.n	800b716 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b6f6:	6839      	ldr	r1, [r7, #0]
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 f9dc 	bl	800bab6 <USBD_CtlError>
        err++;
 800b6fe:	7afb      	ldrb	r3, [r7, #11]
 800b700:	3301      	adds	r3, #1
 800b702:	72fb      	strb	r3, [r7, #11]
      break;
 800b704:	e007      	b.n	800b716 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 f9d4 	bl	800bab6 <USBD_CtlError>
      err++;
 800b70e:	7afb      	ldrb	r3, [r7, #11]
 800b710:	3301      	adds	r3, #1
 800b712:	72fb      	strb	r3, [r7, #11]
      break;
 800b714:	bf00      	nop
  }

  if (err != 0U)
 800b716:	7afb      	ldrb	r3, [r7, #11]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d11c      	bne.n	800b756 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b71c:	893b      	ldrh	r3, [r7, #8]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d011      	beq.n	800b746 <USBD_GetDescriptor+0x2b6>
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	88db      	ldrh	r3, [r3, #6]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00d      	beq.n	800b746 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	88da      	ldrh	r2, [r3, #6]
 800b72e:	893b      	ldrh	r3, [r7, #8]
 800b730:	4293      	cmp	r3, r2
 800b732:	bf28      	it	cs
 800b734:	4613      	movcs	r3, r2
 800b736:	b29b      	uxth	r3, r3
 800b738:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b73a:	893b      	ldrh	r3, [r7, #8]
 800b73c:	461a      	mov	r2, r3
 800b73e:	68f9      	ldr	r1, [r7, #12]
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 fa22 	bl	800bb8a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	88db      	ldrh	r3, [r3, #6]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d104      	bne.n	800b758 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 fa79 	bl	800bc46 <USBD_CtlSendStatus>
 800b754:	e000      	b.n	800b758 <USBD_GetDescriptor+0x2c8>
    return;
 800b756:	bf00      	nop
    }
  }
}
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop

0800b760 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	889b      	ldrh	r3, [r3, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d130      	bne.n	800b7d4 <USBD_SetAddress+0x74>
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	88db      	ldrh	r3, [r3, #6]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d12c      	bne.n	800b7d4 <USBD_SetAddress+0x74>
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	885b      	ldrh	r3, [r3, #2]
 800b77e:	2b7f      	cmp	r3, #127	; 0x7f
 800b780:	d828      	bhi.n	800b7d4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	885b      	ldrh	r3, [r3, #2]
 800b786:	b2db      	uxtb	r3, r3
 800b788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b78c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b794:	2b03      	cmp	r3, #3
 800b796:	d104      	bne.n	800b7a2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b798:	6839      	ldr	r1, [r7, #0]
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 f98b 	bl	800bab6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7a0:	e01d      	b.n	800b7de <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	7bfa      	ldrb	r2, [r7, #15]
 800b7a6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b7aa:	7bfb      	ldrb	r3, [r7, #15]
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fe5a 	bl	800c468 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 fa46 	bl	800bc46 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b7ba:	7bfb      	ldrb	r3, [r7, #15]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d004      	beq.n	800b7ca <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2202      	movs	r2, #2
 800b7c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7c8:	e009      	b.n	800b7de <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7d2:	e004      	b.n	800b7de <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b7d4:	6839      	ldr	r1, [r7, #0]
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 f96d 	bl	800bab6 <USBD_CtlError>
  }
}
 800b7dc:	bf00      	nop
 800b7de:	bf00      	nop
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
	...

0800b7e8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	885b      	ldrh	r3, [r3, #2]
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	4b41      	ldr	r3, [pc, #260]	; (800b900 <USBD_SetConfig+0x118>)
 800b7fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b7fc:	4b40      	ldr	r3, [pc, #256]	; (800b900 <USBD_SetConfig+0x118>)
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	2b01      	cmp	r3, #1
 800b802:	d904      	bls.n	800b80e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b804:	6839      	ldr	r1, [r7, #0]
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 f955 	bl	800bab6 <USBD_CtlError>
 800b80c:	e075      	b.n	800b8fa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b814:	2b02      	cmp	r3, #2
 800b816:	d002      	beq.n	800b81e <USBD_SetConfig+0x36>
 800b818:	2b03      	cmp	r3, #3
 800b81a:	d023      	beq.n	800b864 <USBD_SetConfig+0x7c>
 800b81c:	e062      	b.n	800b8e4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b81e:	4b38      	ldr	r3, [pc, #224]	; (800b900 <USBD_SetConfig+0x118>)
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d01a      	beq.n	800b85c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b826:	4b36      	ldr	r3, [pc, #216]	; (800b900 <USBD_SetConfig+0x118>)
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	461a      	mov	r2, r3
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2203      	movs	r2, #3
 800b834:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b838:	4b31      	ldr	r3, [pc, #196]	; (800b900 <USBD_SetConfig+0x118>)
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	4619      	mov	r1, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f7ff f9e7 	bl	800ac12 <USBD_SetClassConfig>
 800b844:	4603      	mov	r3, r0
 800b846:	2b02      	cmp	r3, #2
 800b848:	d104      	bne.n	800b854 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 f932 	bl	800bab6 <USBD_CtlError>
            return;
 800b852:	e052      	b.n	800b8fa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 f9f6 	bl	800bc46 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b85a:	e04e      	b.n	800b8fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f9f2 	bl	800bc46 <USBD_CtlSendStatus>
        break;
 800b862:	e04a      	b.n	800b8fa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b864:	4b26      	ldr	r3, [pc, #152]	; (800b900 <USBD_SetConfig+0x118>)
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d112      	bne.n	800b892 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2202      	movs	r2, #2
 800b870:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b874:	4b22      	ldr	r3, [pc, #136]	; (800b900 <USBD_SetConfig+0x118>)
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	461a      	mov	r2, r3
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b87e:	4b20      	ldr	r3, [pc, #128]	; (800b900 <USBD_SetConfig+0x118>)
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	4619      	mov	r1, r3
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f7ff f9e3 	bl	800ac50 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 f9db 	bl	800bc46 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b890:	e033      	b.n	800b8fa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b892:	4b1b      	ldr	r3, [pc, #108]	; (800b900 <USBD_SetConfig+0x118>)
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	461a      	mov	r2, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d01d      	beq.n	800b8dc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f7ff f9d1 	bl	800ac50 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b8ae:	4b14      	ldr	r3, [pc, #80]	; (800b900 <USBD_SetConfig+0x118>)
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b8b8:	4b11      	ldr	r3, [pc, #68]	; (800b900 <USBD_SetConfig+0x118>)
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	4619      	mov	r1, r3
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f7ff f9a7 	bl	800ac12 <USBD_SetClassConfig>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	2b02      	cmp	r3, #2
 800b8c8:	d104      	bne.n	800b8d4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b8ca:	6839      	ldr	r1, [r7, #0]
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 f8f2 	bl	800bab6 <USBD_CtlError>
            return;
 800b8d2:	e012      	b.n	800b8fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 f9b6 	bl	800bc46 <USBD_CtlSendStatus>
        break;
 800b8da:	e00e      	b.n	800b8fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 f9b2 	bl	800bc46 <USBD_CtlSendStatus>
        break;
 800b8e2:	e00a      	b.n	800b8fa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b8e4:	6839      	ldr	r1, [r7, #0]
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 f8e5 	bl	800bab6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b8ec:	4b04      	ldr	r3, [pc, #16]	; (800b900 <USBD_SetConfig+0x118>)
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f7ff f9ac 	bl	800ac50 <USBD_ClrClassConfig>
        break;
 800b8f8:	bf00      	nop
    }
  }
}
 800b8fa:	3708      	adds	r7, #8
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	2000024a 	.word	0x2000024a

0800b904 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	88db      	ldrh	r3, [r3, #6]
 800b912:	2b01      	cmp	r3, #1
 800b914:	d004      	beq.n	800b920 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b916:	6839      	ldr	r1, [r7, #0]
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 f8cc 	bl	800bab6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b91e:	e022      	b.n	800b966 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b926:	2b02      	cmp	r3, #2
 800b928:	dc02      	bgt.n	800b930 <USBD_GetConfig+0x2c>
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	dc03      	bgt.n	800b936 <USBD_GetConfig+0x32>
 800b92e:	e015      	b.n	800b95c <USBD_GetConfig+0x58>
 800b930:	2b03      	cmp	r3, #3
 800b932:	d00b      	beq.n	800b94c <USBD_GetConfig+0x48>
 800b934:	e012      	b.n	800b95c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	3308      	adds	r3, #8
 800b940:	2201      	movs	r2, #1
 800b942:	4619      	mov	r1, r3
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 f920 	bl	800bb8a <USBD_CtlSendData>
        break;
 800b94a:	e00c      	b.n	800b966 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	3304      	adds	r3, #4
 800b950:	2201      	movs	r2, #1
 800b952:	4619      	mov	r1, r3
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 f918 	bl	800bb8a <USBD_CtlSendData>
        break;
 800b95a:	e004      	b.n	800b966 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b95c:	6839      	ldr	r1, [r7, #0]
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 f8a9 	bl	800bab6 <USBD_CtlError>
        break;
 800b964:	bf00      	nop
}
 800b966:	bf00      	nop
 800b968:	3708      	adds	r7, #8
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b082      	sub	sp, #8
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
 800b976:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b97e:	3b01      	subs	r3, #1
 800b980:	2b02      	cmp	r3, #2
 800b982:	d81e      	bhi.n	800b9c2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	88db      	ldrh	r3, [r3, #6]
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d004      	beq.n	800b996 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b98c:	6839      	ldr	r1, [r7, #0]
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 f891 	bl	800bab6 <USBD_CtlError>
        break;
 800b994:	e01a      	b.n	800b9cc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2201      	movs	r2, #1
 800b99a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d005      	beq.n	800b9b2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	f043 0202 	orr.w	r2, r3, #2
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	330c      	adds	r3, #12
 800b9b6:	2202      	movs	r2, #2
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 f8e5 	bl	800bb8a <USBD_CtlSendData>
      break;
 800b9c0:	e004      	b.n	800b9cc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b9c2:	6839      	ldr	r1, [r7, #0]
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 f876 	bl	800bab6 <USBD_CtlError>
      break;
 800b9ca:	bf00      	nop
  }
}
 800b9cc:	bf00      	nop
 800b9ce:	3708      	adds	r7, #8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	885b      	ldrh	r3, [r3, #2]
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d106      	bne.n	800b9f4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 f929 	bl	800bc46 <USBD_CtlSendStatus>
  }
}
 800b9f4:	bf00      	nop
 800b9f6:	3708      	adds	r7, #8
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba0c:	3b01      	subs	r3, #1
 800ba0e:	2b02      	cmp	r3, #2
 800ba10:	d80b      	bhi.n	800ba2a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	885b      	ldrh	r3, [r3, #2]
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d10c      	bne.n	800ba34 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f90f 	bl	800bc46 <USBD_CtlSendStatus>
      }
      break;
 800ba28:	e004      	b.n	800ba34 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ba2a:	6839      	ldr	r1, [r7, #0]
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 f842 	bl	800bab6 <USBD_CtlError>
      break;
 800ba32:	e000      	b.n	800ba36 <USBD_ClrFeature+0x3a>
      break;
 800ba34:	bf00      	nop
  }
}
 800ba36:	bf00      	nop
 800ba38:	3708      	adds	r7, #8
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ba3e:	b480      	push	{r7}
 800ba40:	b083      	sub	sp, #12
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
 800ba46:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	781a      	ldrb	r2, [r3, #0]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	785a      	ldrb	r2, [r3, #1]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	3302      	adds	r3, #2
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	b29a      	uxth	r2, r3
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	3303      	adds	r3, #3
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	021b      	lsls	r3, r3, #8
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	4413      	add	r3, r2
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	3304      	adds	r3, #4
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	b29a      	uxth	r2, r3
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	3305      	adds	r3, #5
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	021b      	lsls	r3, r3, #8
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	4413      	add	r3, r2
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	3306      	adds	r3, #6
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	b29a      	uxth	r2, r3
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	3307      	adds	r3, #7
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	021b      	lsls	r3, r3, #8
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	4413      	add	r3, r2
 800baa6:	b29a      	uxth	r2, r3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	80da      	strh	r2, [r3, #6]

}
 800baac:	bf00      	nop
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bc80      	pop	{r7}
 800bab4:	4770      	bx	lr

0800bab6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b082      	sub	sp, #8
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
 800babe:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bac0:	2180      	movs	r1, #128	; 0x80
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 fc66 	bl	800c394 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bac8:	2100      	movs	r1, #0
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 fc62 	bl	800c394 <USBD_LL_StallEP>
}
 800bad0:	bf00      	nop
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b086      	sub	sp, #24
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bae4:	2300      	movs	r3, #0
 800bae6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d032      	beq.n	800bb54 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f000 f834 	bl	800bb5c <USBD_GetLen>
 800baf4:	4603      	mov	r3, r0
 800baf6:	3301      	adds	r3, #1
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	005b      	lsls	r3, r3, #1
 800bafc:	b29a      	uxth	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bb02:	7dfb      	ldrb	r3, [r7, #23]
 800bb04:	1c5a      	adds	r2, r3, #1
 800bb06:	75fa      	strb	r2, [r7, #23]
 800bb08:	461a      	mov	r2, r3
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	7812      	ldrb	r2, [r2, #0]
 800bb12:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bb14:	7dfb      	ldrb	r3, [r7, #23]
 800bb16:	1c5a      	adds	r2, r3, #1
 800bb18:	75fa      	strb	r2, [r7, #23]
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	4413      	add	r3, r2
 800bb20:	2203      	movs	r2, #3
 800bb22:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bb24:	e012      	b.n	800bb4c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	1c5a      	adds	r2, r3, #1
 800bb2a:	60fa      	str	r2, [r7, #12]
 800bb2c:	7dfa      	ldrb	r2, [r7, #23]
 800bb2e:	1c51      	adds	r1, r2, #1
 800bb30:	75f9      	strb	r1, [r7, #23]
 800bb32:	4611      	mov	r1, r2
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	440a      	add	r2, r1
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bb3c:	7dfb      	ldrb	r3, [r7, #23]
 800bb3e:	1c5a      	adds	r2, r3, #1
 800bb40:	75fa      	strb	r2, [r7, #23]
 800bb42:	461a      	mov	r2, r3
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	4413      	add	r3, r2
 800bb48:	2200      	movs	r2, #0
 800bb4a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d1e8      	bne.n	800bb26 <USBD_GetString+0x4e>
    }
  }
}
 800bb54:	bf00      	nop
 800bb56:	3718      	adds	r7, #24
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b085      	sub	sp, #20
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bb64:	2300      	movs	r3, #0
 800bb66:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800bb68:	e005      	b.n	800bb76 <USBD_GetLen+0x1a>
  {
    len++;
 800bb6a:	7bfb      	ldrb	r3, [r7, #15]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	3301      	adds	r3, #1
 800bb74:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d1f5      	bne.n	800bb6a <USBD_GetLen+0xe>
  }

  return len;
 800bb7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3714      	adds	r7, #20
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bc80      	pop	{r7}
 800bb88:	4770      	bx	lr

0800bb8a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b084      	sub	sp, #16
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	60f8      	str	r0, [r7, #12]
 800bb92:	60b9      	str	r1, [r7, #8]
 800bb94:	4613      	mov	r3, r2
 800bb96:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2202      	movs	r2, #2
 800bb9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bba0:	88fa      	ldrh	r2, [r7, #6]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bba6:	88fa      	ldrh	r2, [r7, #6]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbac:	88fb      	ldrh	r3, [r7, #6]
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	2100      	movs	r1, #0
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f000 fc77 	bl	800c4a6 <USBD_LL_Transmit>

  return USBD_OK;
 800bbb8:	2300      	movs	r3, #0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bbc2:	b580      	push	{r7, lr}
 800bbc4:	b084      	sub	sp, #16
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	60f8      	str	r0, [r7, #12]
 800bbca:	60b9      	str	r1, [r7, #8]
 800bbcc:	4613      	mov	r3, r2
 800bbce:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbd0:	88fb      	ldrh	r3, [r7, #6]
 800bbd2:	68ba      	ldr	r2, [r7, #8]
 800bbd4:	2100      	movs	r1, #0
 800bbd6:	68f8      	ldr	r0, [r7, #12]
 800bbd8:	f000 fc65 	bl	800c4a6 <USBD_LL_Transmit>

  return USBD_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3710      	adds	r7, #16
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}

0800bbe6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b084      	sub	sp, #16
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	60f8      	str	r0, [r7, #12]
 800bbee:	60b9      	str	r1, [r7, #8]
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2203      	movs	r2, #3
 800bbf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bbfc:	88fa      	ldrh	r2, [r7, #6]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800bc04:	88fa      	ldrh	r2, [r7, #6]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc0c:	88fb      	ldrh	r3, [r7, #6]
 800bc0e:	68ba      	ldr	r2, [r7, #8]
 800bc10:	2100      	movs	r1, #0
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	f000 fc6a 	bl	800c4ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3710      	adds	r7, #16
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b084      	sub	sp, #16
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	60f8      	str	r0, [r7, #12]
 800bc2a:	60b9      	str	r1, [r7, #8]
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc30:	88fb      	ldrh	r3, [r7, #6]
 800bc32:	68ba      	ldr	r2, [r7, #8]
 800bc34:	2100      	movs	r1, #0
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f000 fc58 	bl	800c4ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc3c:	2300      	movs	r3, #0
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b082      	sub	sp, #8
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2204      	movs	r2, #4
 800bc52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bc56:	2300      	movs	r3, #0
 800bc58:	2200      	movs	r2, #0
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f000 fc22 	bl	800c4a6 <USBD_LL_Transmit>

  return USBD_OK;
 800bc62:	2300      	movs	r3, #0
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3708      	adds	r7, #8
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2205      	movs	r2, #5
 800bc78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	2200      	movs	r2, #0
 800bc80:	2100      	movs	r1, #0
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 fc32 	bl	800c4ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
	...

0800bc94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bc98:	2200      	movs	r2, #0
 800bc9a:	4912      	ldr	r1, [pc, #72]	; (800bce4 <MX_USB_DEVICE_Init+0x50>)
 800bc9c:	4812      	ldr	r0, [pc, #72]	; (800bce8 <MX_USB_DEVICE_Init+0x54>)
 800bc9e:	f7fe ff5e 	bl	800ab5e <USBD_Init>
 800bca2:	4603      	mov	r3, r0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d001      	beq.n	800bcac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bca8:	f7f5 fb50 	bl	800134c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bcac:	490f      	ldr	r1, [pc, #60]	; (800bcec <MX_USB_DEVICE_Init+0x58>)
 800bcae:	480e      	ldr	r0, [pc, #56]	; (800bce8 <MX_USB_DEVICE_Init+0x54>)
 800bcb0:	f7fe ff80 	bl	800abb4 <USBD_RegisterClass>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d001      	beq.n	800bcbe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bcba:	f7f5 fb47 	bl	800134c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bcbe:	490c      	ldr	r1, [pc, #48]	; (800bcf0 <MX_USB_DEVICE_Init+0x5c>)
 800bcc0:	4809      	ldr	r0, [pc, #36]	; (800bce8 <MX_USB_DEVICE_Init+0x54>)
 800bcc2:	f7fe feb1 	bl	800aa28 <USBD_CDC_RegisterInterface>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d001      	beq.n	800bcd0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bccc:	f7f5 fb3e 	bl	800134c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bcd0:	4805      	ldr	r0, [pc, #20]	; (800bce8 <MX_USB_DEVICE_Init+0x54>)
 800bcd2:	f7fe ff88 	bl	800abe6 <USBD_Start>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d001      	beq.n	800bce0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bcdc:	f7f5 fb36 	bl	800134c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bce0:	bf00      	nop
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	20000140 	.word	0x20000140
 800bce8:	20000790 	.word	0x20000790
 800bcec:	2000002c 	.word	0x2000002c
 800bcf0:	20000130 	.word	0x20000130

0800bcf4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	4905      	ldr	r1, [pc, #20]	; (800bd10 <CDC_Init_FS+0x1c>)
 800bcfc:	4805      	ldr	r0, [pc, #20]	; (800bd14 <CDC_Init_FS+0x20>)
 800bcfe:	f7fe fea9 	bl	800aa54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bd02:	4905      	ldr	r1, [pc, #20]	; (800bd18 <CDC_Init_FS+0x24>)
 800bd04:	4803      	ldr	r0, [pc, #12]	; (800bd14 <CDC_Init_FS+0x20>)
 800bd06:	f7fe febe 	bl	800aa86 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bd0a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	20000e3c 	.word	0x20000e3c
 800bd14:	20000790 	.word	0x20000790
 800bd18:	20000a54 	.word	0x20000a54

0800bd1c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bd20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bc80      	pop	{r7}
 800bd28:	4770      	bx	lr
	...

0800bd2c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	4603      	mov	r3, r0
 800bd34:	6039      	str	r1, [r7, #0]
 800bd36:	71fb      	strb	r3, [r7, #7]
 800bd38:	4613      	mov	r3, r2
 800bd3a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bd3c:	79fb      	ldrb	r3, [r7, #7]
 800bd3e:	2b23      	cmp	r3, #35	; 0x23
 800bd40:	d84a      	bhi.n	800bdd8 <CDC_Control_FS+0xac>
 800bd42:	a201      	add	r2, pc, #4	; (adr r2, 800bd48 <CDC_Control_FS+0x1c>)
 800bd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd48:	0800bdd9 	.word	0x0800bdd9
 800bd4c:	0800bdd9 	.word	0x0800bdd9
 800bd50:	0800bdd9 	.word	0x0800bdd9
 800bd54:	0800bdd9 	.word	0x0800bdd9
 800bd58:	0800bdd9 	.word	0x0800bdd9
 800bd5c:	0800bdd9 	.word	0x0800bdd9
 800bd60:	0800bdd9 	.word	0x0800bdd9
 800bd64:	0800bdd9 	.word	0x0800bdd9
 800bd68:	0800bdd9 	.word	0x0800bdd9
 800bd6c:	0800bdd9 	.word	0x0800bdd9
 800bd70:	0800bdd9 	.word	0x0800bdd9
 800bd74:	0800bdd9 	.word	0x0800bdd9
 800bd78:	0800bdd9 	.word	0x0800bdd9
 800bd7c:	0800bdd9 	.word	0x0800bdd9
 800bd80:	0800bdd9 	.word	0x0800bdd9
 800bd84:	0800bdd9 	.word	0x0800bdd9
 800bd88:	0800bdd9 	.word	0x0800bdd9
 800bd8c:	0800bdd9 	.word	0x0800bdd9
 800bd90:	0800bdd9 	.word	0x0800bdd9
 800bd94:	0800bdd9 	.word	0x0800bdd9
 800bd98:	0800bdd9 	.word	0x0800bdd9
 800bd9c:	0800bdd9 	.word	0x0800bdd9
 800bda0:	0800bdd9 	.word	0x0800bdd9
 800bda4:	0800bdd9 	.word	0x0800bdd9
 800bda8:	0800bdd9 	.word	0x0800bdd9
 800bdac:	0800bdd9 	.word	0x0800bdd9
 800bdb0:	0800bdd9 	.word	0x0800bdd9
 800bdb4:	0800bdd9 	.word	0x0800bdd9
 800bdb8:	0800bdd9 	.word	0x0800bdd9
 800bdbc:	0800bdd9 	.word	0x0800bdd9
 800bdc0:	0800bdd9 	.word	0x0800bdd9
 800bdc4:	0800bdd9 	.word	0x0800bdd9
 800bdc8:	0800bdd9 	.word	0x0800bdd9
 800bdcc:	0800bdd9 	.word	0x0800bdd9
 800bdd0:	0800bdd9 	.word	0x0800bdd9
 800bdd4:	0800bdd9 	.word	0x0800bdd9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bdd8:	bf00      	nop
  }

  return (USBD_OK);
 800bdda:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	370c      	adds	r7, #12
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bc80      	pop	{r7}
 800bde4:	4770      	bx	lr
 800bde6:	bf00      	nop

0800bde8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	for (int i = 0; i < (*Len); i++)
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	60fb      	str	r3, [r7, #12]
 800bdf6:	e009      	b.n	800be0c <CDC_Receive_FS+0x24>
		fifo_push(Buf[i]);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	687a      	ldr	r2, [r7, #4]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	4618      	mov	r0, r3
 800be02:	f7f4 f9b5 	bl	8000170 <fifo_push>
	for (int i = 0; i < (*Len); i++)
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	3301      	adds	r3, #1
 800be0a:	60fb      	str	r3, [r7, #12]
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	681a      	ldr	r2, [r3, #0]
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	429a      	cmp	r2, r3
 800be14:	d8f0      	bhi.n	800bdf8 <CDC_Receive_FS+0x10>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800be16:	6879      	ldr	r1, [r7, #4]
 800be18:	4805      	ldr	r0, [pc, #20]	; (800be30 <CDC_Receive_FS+0x48>)
 800be1a:	f7fe fe34 	bl	800aa86 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800be1e:	4804      	ldr	r0, [pc, #16]	; (800be30 <CDC_Receive_FS+0x48>)
 800be20:	f7fe fe73 	bl	800ab0a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800be24:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800be26:	4618      	mov	r0, r3
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	20000790 	.word	0x20000790

0800be34 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	460b      	mov	r3, r1
 800be3e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800be40:	2300      	movs	r3, #0
 800be42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800be44:	4b0d      	ldr	r3, [pc, #52]	; (800be7c <CDC_Transmit_FS+0x48>)
 800be46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be4a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800be52:	2b00      	cmp	r3, #0
 800be54:	d001      	beq.n	800be5a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800be56:	2301      	movs	r3, #1
 800be58:	e00b      	b.n	800be72 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800be5a:	887b      	ldrh	r3, [r7, #2]
 800be5c:	461a      	mov	r2, r3
 800be5e:	6879      	ldr	r1, [r7, #4]
 800be60:	4806      	ldr	r0, [pc, #24]	; (800be7c <CDC_Transmit_FS+0x48>)
 800be62:	f7fe fdf7 	bl	800aa54 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800be66:	4805      	ldr	r0, [pc, #20]	; (800be7c <CDC_Transmit_FS+0x48>)
 800be68:	f7fe fe20 	bl	800aaac <USBD_CDC_TransmitPacket>
 800be6c:	4603      	mov	r3, r0
 800be6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800be70:	7bfb      	ldrb	r3, [r7, #15]
}
 800be72:	4618      	mov	r0, r3
 800be74:	3710      	adds	r7, #16
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	20000790 	.word	0x20000790

0800be80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be80:	b480      	push	{r7}
 800be82:	b083      	sub	sp, #12
 800be84:	af00      	add	r7, sp, #0
 800be86:	4603      	mov	r3, r0
 800be88:	6039      	str	r1, [r7, #0]
 800be8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	2212      	movs	r2, #18
 800be90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800be92:	4b03      	ldr	r3, [pc, #12]	; (800bea0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800be94:	4618      	mov	r0, r3
 800be96:	370c      	adds	r7, #12
 800be98:	46bd      	mov	sp, r7
 800be9a:	bc80      	pop	{r7}
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	2000015c 	.word	0x2000015c

0800bea4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	4603      	mov	r3, r0
 800beac:	6039      	str	r1, [r7, #0]
 800beae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	2204      	movs	r2, #4
 800beb4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800beb6:	4b03      	ldr	r3, [pc, #12]	; (800bec4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800beb8:	4618      	mov	r0, r3
 800beba:	370c      	adds	r7, #12
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bc80      	pop	{r7}
 800bec0:	4770      	bx	lr
 800bec2:	bf00      	nop
 800bec4:	20000170 	.word	0x20000170

0800bec8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	4603      	mov	r3, r0
 800bed0:	6039      	str	r1, [r7, #0]
 800bed2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bed4:	79fb      	ldrb	r3, [r7, #7]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d105      	bne.n	800bee6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800beda:	683a      	ldr	r2, [r7, #0]
 800bedc:	4907      	ldr	r1, [pc, #28]	; (800befc <USBD_FS_ProductStrDescriptor+0x34>)
 800bede:	4808      	ldr	r0, [pc, #32]	; (800bf00 <USBD_FS_ProductStrDescriptor+0x38>)
 800bee0:	f7ff fdfa 	bl	800bad8 <USBD_GetString>
 800bee4:	e004      	b.n	800bef0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bee6:	683a      	ldr	r2, [r7, #0]
 800bee8:	4904      	ldr	r1, [pc, #16]	; (800befc <USBD_FS_ProductStrDescriptor+0x34>)
 800beea:	4805      	ldr	r0, [pc, #20]	; (800bf00 <USBD_FS_ProductStrDescriptor+0x38>)
 800beec:	f7ff fdf4 	bl	800bad8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bef0:	4b02      	ldr	r3, [pc, #8]	; (800befc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	20001224 	.word	0x20001224
 800bf00:	0800ca40 	.word	0x0800ca40

0800bf04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	6039      	str	r1, [r7, #0]
 800bf0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bf10:	683a      	ldr	r2, [r7, #0]
 800bf12:	4904      	ldr	r1, [pc, #16]	; (800bf24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bf14:	4804      	ldr	r0, [pc, #16]	; (800bf28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bf16:	f7ff fddf 	bl	800bad8 <USBD_GetString>
  return USBD_StrDesc;
 800bf1a:	4b02      	ldr	r3, [pc, #8]	; (800bf24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3708      	adds	r7, #8
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	20001224 	.word	0x20001224
 800bf28:	0800ca58 	.word	0x0800ca58

0800bf2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	4603      	mov	r3, r0
 800bf34:	6039      	str	r1, [r7, #0]
 800bf36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	221a      	movs	r2, #26
 800bf3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bf3e:	f000 f843 	bl	800bfc8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bf42:	4b02      	ldr	r3, [pc, #8]	; (800bf4c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	20000174 	.word	0x20000174

0800bf50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	4603      	mov	r3, r0
 800bf58:	6039      	str	r1, [r7, #0]
 800bf5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bf5c:	79fb      	ldrb	r3, [r7, #7]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d105      	bne.n	800bf6e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf62:	683a      	ldr	r2, [r7, #0]
 800bf64:	4907      	ldr	r1, [pc, #28]	; (800bf84 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf66:	4808      	ldr	r0, [pc, #32]	; (800bf88 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf68:	f7ff fdb6 	bl	800bad8 <USBD_GetString>
 800bf6c:	e004      	b.n	800bf78 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf6e:	683a      	ldr	r2, [r7, #0]
 800bf70:	4904      	ldr	r1, [pc, #16]	; (800bf84 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf72:	4805      	ldr	r0, [pc, #20]	; (800bf88 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf74:	f7ff fdb0 	bl	800bad8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf78:	4b02      	ldr	r3, [pc, #8]	; (800bf84 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3708      	adds	r7, #8
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	20001224 	.word	0x20001224
 800bf88:	0800ca6c 	.word	0x0800ca6c

0800bf8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	4603      	mov	r3, r0
 800bf94:	6039      	str	r1, [r7, #0]
 800bf96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf98:	79fb      	ldrb	r3, [r7, #7]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d105      	bne.n	800bfaa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf9e:	683a      	ldr	r2, [r7, #0]
 800bfa0:	4907      	ldr	r1, [pc, #28]	; (800bfc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bfa2:	4808      	ldr	r0, [pc, #32]	; (800bfc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bfa4:	f7ff fd98 	bl	800bad8 <USBD_GetString>
 800bfa8:	e004      	b.n	800bfb4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bfaa:	683a      	ldr	r2, [r7, #0]
 800bfac:	4904      	ldr	r1, [pc, #16]	; (800bfc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bfae:	4805      	ldr	r0, [pc, #20]	; (800bfc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bfb0:	f7ff fd92 	bl	800bad8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bfb4:	4b02      	ldr	r3, [pc, #8]	; (800bfc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3708      	adds	r7, #8
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	20001224 	.word	0x20001224
 800bfc4:	0800ca78 	.word	0x0800ca78

0800bfc8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bfce:	4b0f      	ldr	r3, [pc, #60]	; (800c00c <Get_SerialNum+0x44>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bfd4:	4b0e      	ldr	r3, [pc, #56]	; (800c010 <Get_SerialNum+0x48>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bfda:	4b0e      	ldr	r3, [pc, #56]	; (800c014 <Get_SerialNum+0x4c>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d009      	beq.n	800c002 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bfee:	2208      	movs	r2, #8
 800bff0:	4909      	ldr	r1, [pc, #36]	; (800c018 <Get_SerialNum+0x50>)
 800bff2:	68f8      	ldr	r0, [r7, #12]
 800bff4:	f000 f814 	bl	800c020 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bff8:	2204      	movs	r2, #4
 800bffa:	4908      	ldr	r1, [pc, #32]	; (800c01c <Get_SerialNum+0x54>)
 800bffc:	68b8      	ldr	r0, [r7, #8]
 800bffe:	f000 f80f 	bl	800c020 <IntToUnicode>
  }
}
 800c002:	bf00      	nop
 800c004:	3710      	adds	r7, #16
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	1ffff7e8 	.word	0x1ffff7e8
 800c010:	1ffff7ec 	.word	0x1ffff7ec
 800c014:	1ffff7f0 	.word	0x1ffff7f0
 800c018:	20000176 	.word	0x20000176
 800c01c:	20000186 	.word	0x20000186

0800c020 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c020:	b480      	push	{r7}
 800c022:	b087      	sub	sp, #28
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	4613      	mov	r3, r2
 800c02c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c02e:	2300      	movs	r3, #0
 800c030:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c032:	2300      	movs	r3, #0
 800c034:	75fb      	strb	r3, [r7, #23]
 800c036:	e027      	b.n	800c088 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	0f1b      	lsrs	r3, r3, #28
 800c03c:	2b09      	cmp	r3, #9
 800c03e:	d80b      	bhi.n	800c058 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	0f1b      	lsrs	r3, r3, #28
 800c044:	b2da      	uxtb	r2, r3
 800c046:	7dfb      	ldrb	r3, [r7, #23]
 800c048:	005b      	lsls	r3, r3, #1
 800c04a:	4619      	mov	r1, r3
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	440b      	add	r3, r1
 800c050:	3230      	adds	r2, #48	; 0x30
 800c052:	b2d2      	uxtb	r2, r2
 800c054:	701a      	strb	r2, [r3, #0]
 800c056:	e00a      	b.n	800c06e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	0f1b      	lsrs	r3, r3, #28
 800c05c:	b2da      	uxtb	r2, r3
 800c05e:	7dfb      	ldrb	r3, [r7, #23]
 800c060:	005b      	lsls	r3, r3, #1
 800c062:	4619      	mov	r1, r3
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	440b      	add	r3, r1
 800c068:	3237      	adds	r2, #55	; 0x37
 800c06a:	b2d2      	uxtb	r2, r2
 800c06c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	011b      	lsls	r3, r3, #4
 800c072:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c074:	7dfb      	ldrb	r3, [r7, #23]
 800c076:	005b      	lsls	r3, r3, #1
 800c078:	3301      	adds	r3, #1
 800c07a:	68ba      	ldr	r2, [r7, #8]
 800c07c:	4413      	add	r3, r2
 800c07e:	2200      	movs	r2, #0
 800c080:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c082:	7dfb      	ldrb	r3, [r7, #23]
 800c084:	3301      	adds	r3, #1
 800c086:	75fb      	strb	r3, [r7, #23]
 800c088:	7dfa      	ldrb	r2, [r7, #23]
 800c08a:	79fb      	ldrb	r3, [r7, #7]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d3d3      	bcc.n	800c038 <IntToUnicode+0x18>
  }
}
 800c090:	bf00      	nop
 800c092:	bf00      	nop
 800c094:	371c      	adds	r7, #28
 800c096:	46bd      	mov	sp, r7
 800c098:	bc80      	pop	{r7}
 800c09a:	4770      	bx	lr

0800c09c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4a0d      	ldr	r2, [pc, #52]	; (800c0e0 <HAL_PCD_MspInit+0x44>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d113      	bne.n	800c0d6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c0ae:	4b0d      	ldr	r3, [pc, #52]	; (800c0e4 <HAL_PCD_MspInit+0x48>)
 800c0b0:	69db      	ldr	r3, [r3, #28]
 800c0b2:	4a0c      	ldr	r2, [pc, #48]	; (800c0e4 <HAL_PCD_MspInit+0x48>)
 800c0b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c0b8:	61d3      	str	r3, [r2, #28]
 800c0ba:	4b0a      	ldr	r3, [pc, #40]	; (800c0e4 <HAL_PCD_MspInit+0x48>)
 800c0bc:	69db      	ldr	r3, [r3, #28]
 800c0be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0c2:	60fb      	str	r3, [r7, #12]
 800c0c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	2100      	movs	r1, #0
 800c0ca:	2014      	movs	r0, #20
 800c0cc:	f7f7 fda3 	bl	8003c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c0d0:	2014      	movs	r0, #20
 800c0d2:	f7f7 fdbc 	bl	8003c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c0d6:	bf00      	nop
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	40005c00 	.word	0x40005c00
 800c0e4:	40021000 	.word	0x40021000

0800c0e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	4610      	mov	r0, r2
 800c100:	f7fe fdb9 	bl	800ac76 <USBD_LL_SetupStage>
}
 800c104:	bf00      	nop
 800c106:	3708      	adds	r7, #8
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	460b      	mov	r3, r1
 800c116:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c11e:	78fa      	ldrb	r2, [r7, #3]
 800c120:	6879      	ldr	r1, [r7, #4]
 800c122:	4613      	mov	r3, r2
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	4413      	add	r3, r2
 800c128:	00db      	lsls	r3, r3, #3
 800c12a:	440b      	add	r3, r1
 800c12c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	78fb      	ldrb	r3, [r7, #3]
 800c134:	4619      	mov	r1, r3
 800c136:	f7fe fdeb 	bl	800ad10 <USBD_LL_DataOutStage>
}
 800c13a:	bf00      	nop
 800c13c:	3708      	adds	r7, #8
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}

0800c142 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c142:	b580      	push	{r7, lr}
 800c144:	b082      	sub	sp, #8
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
 800c14a:	460b      	mov	r3, r1
 800c14c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c154:	78fa      	ldrb	r2, [r7, #3]
 800c156:	6879      	ldr	r1, [r7, #4]
 800c158:	4613      	mov	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	00db      	lsls	r3, r3, #3
 800c160:	440b      	add	r3, r1
 800c162:	333c      	adds	r3, #60	; 0x3c
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	78fb      	ldrb	r3, [r7, #3]
 800c168:	4619      	mov	r1, r3
 800c16a:	f7fe fe42 	bl	800adf2 <USBD_LL_DataInStage>
}
 800c16e:	bf00      	nop
 800c170:	3708      	adds	r7, #8
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b082      	sub	sp, #8
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c184:	4618      	mov	r0, r3
 800c186:	f7fe ff52 	bl	800b02e <USBD_LL_SOF>
}
 800c18a:	bf00      	nop
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}

0800c192 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c192:	b580      	push	{r7, lr}
 800c194:	b084      	sub	sp, #16
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c19a:	2301      	movs	r3, #1
 800c19c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	2b02      	cmp	r3, #2
 800c1a4:	d001      	beq.n	800c1aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c1a6:	f7f5 f8d1 	bl	800134c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c1b0:	7bfa      	ldrb	r2, [r7, #15]
 800c1b2:	4611      	mov	r1, r2
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7fe ff02 	bl	800afbe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7fe febb 	bl	800af3c <USBD_LL_Reset>
}
 800c1c6:	bf00      	nop
 800c1c8:	3710      	adds	r7, #16
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
	...

0800c1d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7fe fefc 	bl	800afdc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	699b      	ldr	r3, [r3, #24]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d005      	beq.n	800c1f8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1ec:	4b04      	ldr	r3, [pc, #16]	; (800c200 <HAL_PCD_SuspendCallback+0x30>)
 800c1ee:	691b      	ldr	r3, [r3, #16]
 800c1f0:	4a03      	ldr	r2, [pc, #12]	; (800c200 <HAL_PCD_SuspendCallback+0x30>)
 800c1f2:	f043 0306 	orr.w	r3, r3, #6
 800c1f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c1f8:	bf00      	nop
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	e000ed00 	.word	0xe000ed00

0800c204 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b082      	sub	sp, #8
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c212:	4618      	mov	r0, r3
 800c214:	f7fe fef6 	bl	800b004 <USBD_LL_Resume>
}
 800c218:	bf00      	nop
 800c21a:	3708      	adds	r7, #8
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b082      	sub	sp, #8
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c228:	4a28      	ldr	r2, [pc, #160]	; (800c2cc <USBD_LL_Init+0xac>)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4a26      	ldr	r2, [pc, #152]	; (800c2cc <USBD_LL_Init+0xac>)
 800c234:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c238:	4b24      	ldr	r3, [pc, #144]	; (800c2cc <USBD_LL_Init+0xac>)
 800c23a:	4a25      	ldr	r2, [pc, #148]	; (800c2d0 <USBD_LL_Init+0xb0>)
 800c23c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c23e:	4b23      	ldr	r3, [pc, #140]	; (800c2cc <USBD_LL_Init+0xac>)
 800c240:	2208      	movs	r2, #8
 800c242:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c244:	4b21      	ldr	r3, [pc, #132]	; (800c2cc <USBD_LL_Init+0xac>)
 800c246:	2202      	movs	r2, #2
 800c248:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c24a:	4b20      	ldr	r3, [pc, #128]	; (800c2cc <USBD_LL_Init+0xac>)
 800c24c:	2200      	movs	r2, #0
 800c24e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c250:	4b1e      	ldr	r3, [pc, #120]	; (800c2cc <USBD_LL_Init+0xac>)
 800c252:	2200      	movs	r2, #0
 800c254:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c256:	4b1d      	ldr	r3, [pc, #116]	; (800c2cc <USBD_LL_Init+0xac>)
 800c258:	2200      	movs	r2, #0
 800c25a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c25c:	481b      	ldr	r0, [pc, #108]	; (800c2cc <USBD_LL_Init+0xac>)
 800c25e:	f7f8 fedd 	bl	800501c <HAL_PCD_Init>
 800c262:	4603      	mov	r3, r0
 800c264:	2b00      	cmp	r3, #0
 800c266:	d001      	beq.n	800c26c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c268:	f7f5 f870 	bl	800134c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c272:	2318      	movs	r3, #24
 800c274:	2200      	movs	r2, #0
 800c276:	2100      	movs	r1, #0
 800c278:	f7fa fb53 	bl	8006922 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c282:	2358      	movs	r3, #88	; 0x58
 800c284:	2200      	movs	r2, #0
 800c286:	2180      	movs	r1, #128	; 0x80
 800c288:	f7fa fb4b 	bl	8006922 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c292:	23c0      	movs	r3, #192	; 0xc0
 800c294:	2200      	movs	r2, #0
 800c296:	2181      	movs	r1, #129	; 0x81
 800c298:	f7fa fb43 	bl	8006922 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c2a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	2101      	movs	r1, #1
 800c2aa:	f7fa fb3a 	bl	8006922 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c2b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	2182      	movs	r1, #130	; 0x82
 800c2bc:	f7fa fb31 	bl	8006922 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c2c0:	2300      	movs	r3, #0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	20001424 	.word	0x20001424
 800c2d0:	40005c00 	.word	0x40005c00

0800c2d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7f8 ffa1 	bl	8005232 <HAL_PCD_Start>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2f4:	7bfb      	ldrb	r3, [r7, #15]
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f000 f94e 	bl	800c598 <USBD_Get_USB_Status>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c300:	7bbb      	ldrb	r3, [r7, #14]
}
 800c302:	4618      	mov	r0, r3
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}

0800c30a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b084      	sub	sp, #16
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
 800c312:	4608      	mov	r0, r1
 800c314:	4611      	mov	r1, r2
 800c316:	461a      	mov	r2, r3
 800c318:	4603      	mov	r3, r0
 800c31a:	70fb      	strb	r3, [r7, #3]
 800c31c:	460b      	mov	r3, r1
 800c31e:	70bb      	strb	r3, [r7, #2]
 800c320:	4613      	mov	r3, r2
 800c322:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c324:	2300      	movs	r3, #0
 800c326:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c328:	2300      	movs	r3, #0
 800c32a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c332:	78bb      	ldrb	r3, [r7, #2]
 800c334:	883a      	ldrh	r2, [r7, #0]
 800c336:	78f9      	ldrb	r1, [r7, #3]
 800c338:	f7f9 f91b 	bl	8005572 <HAL_PCD_EP_Open>
 800c33c:	4603      	mov	r3, r0
 800c33e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c340:	7bfb      	ldrb	r3, [r7, #15]
 800c342:	4618      	mov	r0, r3
 800c344:	f000 f928 	bl	800c598 <USBD_Get_USB_Status>
 800c348:	4603      	mov	r3, r0
 800c34a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c34c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b084      	sub	sp, #16
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	460b      	mov	r3, r1
 800c360:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c362:	2300      	movs	r3, #0
 800c364:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c366:	2300      	movs	r3, #0
 800c368:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c370:	78fa      	ldrb	r2, [r7, #3]
 800c372:	4611      	mov	r1, r2
 800c374:	4618      	mov	r0, r3
 800c376:	f7f9 f962 	bl	800563e <HAL_PCD_EP_Close>
 800c37a:	4603      	mov	r3, r0
 800c37c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c37e:	7bfb      	ldrb	r3, [r7, #15]
 800c380:	4618      	mov	r0, r3
 800c382:	f000 f909 	bl	800c598 <USBD_Get_USB_Status>
 800c386:	4603      	mov	r3, r0
 800c388:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c38a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3710      	adds	r7, #16
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	460b      	mov	r3, r1
 800c39e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3ae:	78fa      	ldrb	r2, [r7, #3]
 800c3b0:	4611      	mov	r1, r2
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7f9 fa22 	bl	80057fc <HAL_PCD_EP_SetStall>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3bc:	7bfb      	ldrb	r3, [r7, #15]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f000 f8ea 	bl	800c598 <USBD_Get_USB_Status>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b084      	sub	sp, #16
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
 800c3da:	460b      	mov	r3, r1
 800c3dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3ec:	78fa      	ldrb	r2, [r7, #3]
 800c3ee:	4611      	mov	r1, r2
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7f9 fa63 	bl	80058bc <HAL_PCD_EP_ClrStall>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3fa:	7bfb      	ldrb	r3, [r7, #15]
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f000 f8cb 	bl	800c598 <USBD_Get_USB_Status>
 800c402:	4603      	mov	r3, r0
 800c404:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c406:	7bbb      	ldrb	r3, [r7, #14]
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3710      	adds	r7, #16
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c410:	b480      	push	{r7}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	460b      	mov	r3, r1
 800c41a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c422:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c424:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	da0c      	bge.n	800c446 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c42c:	78fb      	ldrb	r3, [r7, #3]
 800c42e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c432:	68f9      	ldr	r1, [r7, #12]
 800c434:	1c5a      	adds	r2, r3, #1
 800c436:	4613      	mov	r3, r2
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	4413      	add	r3, r2
 800c43c:	00db      	lsls	r3, r3, #3
 800c43e:	440b      	add	r3, r1
 800c440:	3302      	adds	r3, #2
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	e00b      	b.n	800c45e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c446:	78fb      	ldrb	r3, [r7, #3]
 800c448:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c44c:	68f9      	ldr	r1, [r7, #12]
 800c44e:	4613      	mov	r3, r2
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	4413      	add	r3, r2
 800c454:	00db      	lsls	r3, r3, #3
 800c456:	440b      	add	r3, r1
 800c458:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c45c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3714      	adds	r7, #20
 800c462:	46bd      	mov	sp, r7
 800c464:	bc80      	pop	{r7}
 800c466:	4770      	bx	lr

0800c468 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	460b      	mov	r3, r1
 800c472:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c474:	2300      	movs	r3, #0
 800c476:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c478:	2300      	movs	r3, #0
 800c47a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c482:	78fa      	ldrb	r2, [r7, #3]
 800c484:	4611      	mov	r1, r2
 800c486:	4618      	mov	r0, r3
 800c488:	f7f9 f84e 	bl	8005528 <HAL_PCD_SetAddress>
 800c48c:	4603      	mov	r3, r0
 800c48e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c490:	7bfb      	ldrb	r3, [r7, #15]
 800c492:	4618      	mov	r0, r3
 800c494:	f000 f880 	bl	800c598 <USBD_Get_USB_Status>
 800c498:	4603      	mov	r3, r0
 800c49a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c49c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b086      	sub	sp, #24
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	60f8      	str	r0, [r7, #12]
 800c4ae:	607a      	str	r2, [r7, #4]
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	72fb      	strb	r3, [r7, #11]
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c4c8:	893b      	ldrh	r3, [r7, #8]
 800c4ca:	7af9      	ldrb	r1, [r7, #11]
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	f7f9 f952 	bl	8005776 <HAL_PCD_EP_Transmit>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4d6:	7dfb      	ldrb	r3, [r7, #23]
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f000 f85d 	bl	800c598 <USBD_Get_USB_Status>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4e2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3718      	adds	r7, #24
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b086      	sub	sp, #24
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	607a      	str	r2, [r7, #4]
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	72fb      	strb	r3, [r7, #11]
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c500:	2300      	movs	r3, #0
 800c502:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c504:	2300      	movs	r3, #0
 800c506:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c50e:	893b      	ldrh	r3, [r7, #8]
 800c510:	7af9      	ldrb	r1, [r7, #11]
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	f7f9 f8db 	bl	80056ce <HAL_PCD_EP_Receive>
 800c518:	4603      	mov	r3, r0
 800c51a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c51c:	7dfb      	ldrb	r3, [r7, #23]
 800c51e:	4618      	mov	r0, r3
 800c520:	f000 f83a 	bl	800c598 <USBD_Get_USB_Status>
 800c524:	4603      	mov	r3, r0
 800c526:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c528:	7dbb      	ldrb	r3, [r7, #22]
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3718      	adds	r7, #24
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}

0800c532 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c532:	b580      	push	{r7, lr}
 800c534:	b082      	sub	sp, #8
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
 800c53a:	460b      	mov	r3, r1
 800c53c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c544:	78fa      	ldrb	r2, [r7, #3]
 800c546:	4611      	mov	r1, r2
 800c548:	4618      	mov	r0, r3
 800c54a:	f7f9 f8fd 	bl	8005748 <HAL_PCD_EP_GetRxCount>
 800c54e:	4603      	mov	r3, r0
}
 800c550:	4618      	mov	r0, r3
 800c552:	3708      	adds	r7, #8
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c560:	4b02      	ldr	r3, [pc, #8]	; (800c56c <USBD_static_malloc+0x14>)
}
 800c562:	4618      	mov	r0, r3
 800c564:	370c      	adds	r7, #12
 800c566:	46bd      	mov	sp, r7
 800c568:	bc80      	pop	{r7}
 800c56a:	4770      	bx	lr
 800c56c:	2000024c 	.word	0x2000024c

0800c570 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]

}
 800c578:	bf00      	nop
 800c57a:	370c      	adds	r7, #12
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bc80      	pop	{r7}
 800c580:	4770      	bx	lr

0800c582 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c582:	b480      	push	{r7}
 800c584:	b083      	sub	sp, #12
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
 800c58a:	460b      	mov	r3, r1
 800c58c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c58e:	bf00      	nop
 800c590:	370c      	adds	r7, #12
 800c592:	46bd      	mov	sp, r7
 800c594:	bc80      	pop	{r7}
 800c596:	4770      	bx	lr

0800c598 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	4603      	mov	r3, r0
 800c5a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c5a6:	79fb      	ldrb	r3, [r7, #7]
 800c5a8:	2b03      	cmp	r3, #3
 800c5aa:	d817      	bhi.n	800c5dc <USBD_Get_USB_Status+0x44>
 800c5ac:	a201      	add	r2, pc, #4	; (adr r2, 800c5b4 <USBD_Get_USB_Status+0x1c>)
 800c5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b2:	bf00      	nop
 800c5b4:	0800c5c5 	.word	0x0800c5c5
 800c5b8:	0800c5cb 	.word	0x0800c5cb
 800c5bc:	0800c5d1 	.word	0x0800c5d1
 800c5c0:	0800c5d7 	.word	0x0800c5d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	73fb      	strb	r3, [r7, #15]
    break;
 800c5c8:	e00b      	b.n	800c5e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5ca:	2302      	movs	r3, #2
 800c5cc:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ce:	e008      	b.n	800c5e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c5d4:	e005      	b.n	800c5e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5d6:	2302      	movs	r3, #2
 800c5d8:	73fb      	strb	r3, [r7, #15]
    break;
 800c5da:	e002      	b.n	800c5e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c5dc:	2302      	movs	r3, #2
 800c5de:	73fb      	strb	r3, [r7, #15]
    break;
 800c5e0:	bf00      	nop
  }
  return usb_status;
 800c5e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3714      	adds	r7, #20
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bc80      	pop	{r7}
 800c5ec:	4770      	bx	lr
 800c5ee:	bf00      	nop

0800c5f0 <__libc_init_array>:
 800c5f0:	b570      	push	{r4, r5, r6, lr}
 800c5f2:	2600      	movs	r6, #0
 800c5f4:	4d0c      	ldr	r5, [pc, #48]	; (800c628 <__libc_init_array+0x38>)
 800c5f6:	4c0d      	ldr	r4, [pc, #52]	; (800c62c <__libc_init_array+0x3c>)
 800c5f8:	1b64      	subs	r4, r4, r5
 800c5fa:	10a4      	asrs	r4, r4, #2
 800c5fc:	42a6      	cmp	r6, r4
 800c5fe:	d109      	bne.n	800c614 <__libc_init_array+0x24>
 800c600:	f000 f862 	bl	800c6c8 <_init>
 800c604:	2600      	movs	r6, #0
 800c606:	4d0a      	ldr	r5, [pc, #40]	; (800c630 <__libc_init_array+0x40>)
 800c608:	4c0a      	ldr	r4, [pc, #40]	; (800c634 <__libc_init_array+0x44>)
 800c60a:	1b64      	subs	r4, r4, r5
 800c60c:	10a4      	asrs	r4, r4, #2
 800c60e:	42a6      	cmp	r6, r4
 800c610:	d105      	bne.n	800c61e <__libc_init_array+0x2e>
 800c612:	bd70      	pop	{r4, r5, r6, pc}
 800c614:	f855 3b04 	ldr.w	r3, [r5], #4
 800c618:	4798      	blx	r3
 800c61a:	3601      	adds	r6, #1
 800c61c:	e7ee      	b.n	800c5fc <__libc_init_array+0xc>
 800c61e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c622:	4798      	blx	r3
 800c624:	3601      	adds	r6, #1
 800c626:	e7f2      	b.n	800c60e <__libc_init_array+0x1e>
 800c628:	0800ce50 	.word	0x0800ce50
 800c62c:	0800ce50 	.word	0x0800ce50
 800c630:	0800ce50 	.word	0x0800ce50
 800c634:	0800ce54 	.word	0x0800ce54

0800c638 <memcpy>:
 800c638:	440a      	add	r2, r1
 800c63a:	4291      	cmp	r1, r2
 800c63c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c640:	d100      	bne.n	800c644 <memcpy+0xc>
 800c642:	4770      	bx	lr
 800c644:	b510      	push	{r4, lr}
 800c646:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c64a:	4291      	cmp	r1, r2
 800c64c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c650:	d1f9      	bne.n	800c646 <memcpy+0xe>
 800c652:	bd10      	pop	{r4, pc}

0800c654 <memmove>:
 800c654:	4288      	cmp	r0, r1
 800c656:	b510      	push	{r4, lr}
 800c658:	eb01 0402 	add.w	r4, r1, r2
 800c65c:	d902      	bls.n	800c664 <memmove+0x10>
 800c65e:	4284      	cmp	r4, r0
 800c660:	4623      	mov	r3, r4
 800c662:	d807      	bhi.n	800c674 <memmove+0x20>
 800c664:	1e43      	subs	r3, r0, #1
 800c666:	42a1      	cmp	r1, r4
 800c668:	d008      	beq.n	800c67c <memmove+0x28>
 800c66a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c66e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c672:	e7f8      	b.n	800c666 <memmove+0x12>
 800c674:	4601      	mov	r1, r0
 800c676:	4402      	add	r2, r0
 800c678:	428a      	cmp	r2, r1
 800c67a:	d100      	bne.n	800c67e <memmove+0x2a>
 800c67c:	bd10      	pop	{r4, pc}
 800c67e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c682:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c686:	e7f7      	b.n	800c678 <memmove+0x24>

0800c688 <memset>:
 800c688:	4603      	mov	r3, r0
 800c68a:	4402      	add	r2, r0
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d100      	bne.n	800c692 <memset+0xa>
 800c690:	4770      	bx	lr
 800c692:	f803 1b01 	strb.w	r1, [r3], #1
 800c696:	e7f9      	b.n	800c68c <memset+0x4>

0800c698 <strstr>:
 800c698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c69a:	780c      	ldrb	r4, [r1, #0]
 800c69c:	b164      	cbz	r4, 800c6b8 <strstr+0x20>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	781a      	ldrb	r2, [r3, #0]
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	1c5e      	adds	r6, r3, #1
 800c6a6:	b90a      	cbnz	r2, 800c6ac <strstr+0x14>
 800c6a8:	4610      	mov	r0, r2
 800c6aa:	e005      	b.n	800c6b8 <strstr+0x20>
 800c6ac:	4294      	cmp	r4, r2
 800c6ae:	d108      	bne.n	800c6c2 <strstr+0x2a>
 800c6b0:	460d      	mov	r5, r1
 800c6b2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800c6b6:	b902      	cbnz	r2, 800c6ba <strstr+0x22>
 800c6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6ba:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800c6be:	4297      	cmp	r7, r2
 800c6c0:	d0f7      	beq.n	800c6b2 <strstr+0x1a>
 800c6c2:	4633      	mov	r3, r6
 800c6c4:	e7ec      	b.n	800c6a0 <strstr+0x8>
	...

0800c6c8 <_init>:
 800c6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ca:	bf00      	nop
 800c6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ce:	bc08      	pop	{r3}
 800c6d0:	469e      	mov	lr, r3
 800c6d2:	4770      	bx	lr

0800c6d4 <_fini>:
 800c6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6d6:	bf00      	nop
 800c6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6da:	bc08      	pop	{r3}
 800c6dc:	469e      	mov	lr, r3
 800c6de:	4770      	bx	lr
