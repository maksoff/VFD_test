
VFD_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  0800c6f0  0800c6f0  0001c6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce60  0800ce60  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce60  0800ce60  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce60  0800ce60  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce60  0800ce60  0001ce60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce64  0800ce64  0001ce64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800ce68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001580  20000190  0800cff8  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001710  0800cff8  00021710  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fd00  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043f6  00000000  00000000  0003feb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  000442b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001790  00000000  00000000  00045bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c24c  00000000  00000000  00047350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cdb6  00000000  00000000  0006359c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093e6e  00000000  00000000  00080352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001141c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068b0  00000000  00000000  00114214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000190 	.word	0x20000190
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c6d8 	.word	0x0800c6d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000194 	.word	0x20000194
 8000148:	0800c6d8 	.word	0x0800c6d8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <fifo_push>:
buff_t fifo_buffer[BUFF_SIZE];
uint32_t head_index = 0;
uint32_t tail_index = 0;

bool fifo_push(buff_t data)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	if (fifo_length() >= BUFF_SIZE - 1)
 800017a:	f000 f859 	bl	8000230 <fifo_length>
 800017e:	4603      	mov	r3, r0
 8000180:	2bfe      	cmp	r3, #254	; 0xfe
 8000182:	d901      	bls.n	8000188 <fifo_push+0x18>
		return 1; // too much data!
 8000184:	2301      	movs	r3, #1
 8000186:	e012      	b.n	80001ae <fifo_push+0x3e>
	if (++tail_index == BUFF_SIZE)
 8000188:	4b0b      	ldr	r3, [pc, #44]	; (80001b8 <fifo_push+0x48>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	3301      	adds	r3, #1
 800018e:	4a0a      	ldr	r2, [pc, #40]	; (80001b8 <fifo_push+0x48>)
 8000190:	6013      	str	r3, [r2, #0]
 8000192:	4b09      	ldr	r3, [pc, #36]	; (80001b8 <fifo_push+0x48>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800019a:	d102      	bne.n	80001a2 <fifo_push+0x32>
		tail_index = 0;
 800019c:	4b06      	ldr	r3, [pc, #24]	; (80001b8 <fifo_push+0x48>)
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
	fifo_buffer[tail_index] = data;
 80001a2:	4b05      	ldr	r3, [pc, #20]	; (80001b8 <fifo_push+0x48>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	4905      	ldr	r1, [pc, #20]	; (80001bc <fifo_push+0x4c>)
 80001a8:	79fa      	ldrb	r2, [r7, #7]
 80001aa:	54ca      	strb	r2, [r1, r3]
	return 0;
 80001ac:	2300      	movs	r3, #0
}
 80001ae:	4618      	mov	r0, r3
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	200001b0 	.word	0x200001b0
 80001bc:	2000046c 	.word	0x2000046c

080001c0 <fifo_pop>:

buff_t fifo_pop(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
	if (fifo_is_empty())
 80001c4:	f000 f820 	bl	8000208 <fifo_is_empty>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d004      	beq.n	80001d8 <fifo_pop+0x18>
		return fifo_buffer[head_index]; // buffer is empty, return the last value
 80001ce:	4b0c      	ldr	r3, [pc, #48]	; (8000200 <fifo_pop+0x40>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a0c      	ldr	r2, [pc, #48]	; (8000204 <fifo_pop+0x44>)
 80001d4:	5cd3      	ldrb	r3, [r2, r3]
 80001d6:	e010      	b.n	80001fa <fifo_pop+0x3a>
	if (++head_index == BUFF_SIZE)
 80001d8:	4b09      	ldr	r3, [pc, #36]	; (8000200 <fifo_pop+0x40>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	3301      	adds	r3, #1
 80001de:	4a08      	ldr	r2, [pc, #32]	; (8000200 <fifo_pop+0x40>)
 80001e0:	6013      	str	r3, [r2, #0]
 80001e2:	4b07      	ldr	r3, [pc, #28]	; (8000200 <fifo_pop+0x40>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001ea:	d102      	bne.n	80001f2 <fifo_pop+0x32>
		head_index = 0;
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <fifo_pop+0x40>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
	return fifo_buffer[head_index];
 80001f2:	4b03      	ldr	r3, [pc, #12]	; (8000200 <fifo_pop+0x40>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a03      	ldr	r2, [pc, #12]	; (8000204 <fifo_pop+0x44>)
 80001f8:	5cd3      	ldrb	r3, [r2, r3]
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	200001ac 	.word	0x200001ac
 8000204:	2000046c 	.word	0x2000046c

08000208 <fifo_is_empty>:

bool fifo_is_empty(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	return head_index == tail_index;
 800020c:	4b06      	ldr	r3, [pc, #24]	; (8000228 <fifo_is_empty+0x20>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <fifo_is_empty+0x24>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	429a      	cmp	r2, r3
 8000216:	bf0c      	ite	eq
 8000218:	2301      	moveq	r3, #1
 800021a:	2300      	movne	r3, #0
 800021c:	b2db      	uxtb	r3, r3
}
 800021e:	4618      	mov	r0, r3
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	200001ac 	.word	0x200001ac
 800022c:	200001b0 	.word	0x200001b0

08000230 <fifo_length>:

uint32_t fifo_length(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	if (tail_index >= head_index)
 8000234:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <fifo_length+0x34>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <fifo_length+0x38>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	429a      	cmp	r2, r3
 800023e:	d305      	bcc.n	800024c <fifo_length+0x1c>
		return tail_index - head_index;
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <fifo_length+0x34>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b08      	ldr	r3, [pc, #32]	; (8000268 <fifo_length+0x38>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	1ad3      	subs	r3, r2, r3
 800024a:	e006      	b.n	800025a <fifo_length+0x2a>
	else
		return tail_index + BUFF_SIZE - head_index;
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <fifo_length+0x34>)
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	4b05      	ldr	r3, [pc, #20]	; (8000268 <fifo_length+0x38>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	1ad3      	subs	r3, r2, r3
 8000256:	f503 7380 	add.w	r3, r3, #256	; 0x100
}
 800025a:	4618      	mov	r0, r3
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	200001b0 	.word	0x200001b0
 8000268:	200001ac 	.word	0x200001ac

0800026c <active>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t last_active_time;

void active(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	last_active_time = HAL_GetTick();
 8000270:	f003 fbd4 	bl	8003a1c <HAL_GetTick>
 8000274:	4603      	mov	r3, r0
 8000276:	4a02      	ldr	r2, [pc, #8]	; (8000280 <active+0x14>)
 8000278:	6013      	str	r3, [r2, #0]
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	20000618 	.word	0x20000618

08000284 <delay_us>:
#define PB1 (HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin))
#define PB2 (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin))

// delays for us count
void delay_us(uint16_t us)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 800028e:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <delay_us+0x30>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2200      	movs	r2, #0
 8000294:	625a      	str	r2, [r3, #36]	; 0x24
	while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000296:	bf00      	nop
 8000298:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <delay_us+0x30>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800029e:	b29b      	uxth	r3, r3
 80002a0:	88fa      	ldrh	r2, [r7, #6]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d8f8      	bhi.n	8000298 <delay_us+0x14>
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	20000640 	.word	0x20000640

080002b8 <delay>:

void delay(uint32_t delay)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 80002c0:	6878      	ldr	r0, [r7, #4]
 80002c2:	f003 fbb5 	bl	8003a30 <HAL_Delay>
}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}

080002ce <nrf_init_tx>:

void nrf_init_tx(uint8_t *address)
{
 80002ce:	b580      	push	{r7, lr}
 80002d0:	b082      	sub	sp, #8
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
    nrf24l01p_get_clear_irq_flags();
 80002d6:	f002 fcab 	bl	8002c30 <nrf24l01p_get_clear_irq_flags>
    nrf24l01p_close_pipe(NRF24L01P_ALL);
 80002da:	20ff      	movs	r0, #255	; 0xff
 80002dc:	f002 fd42 	bl	8002d64 <nrf24l01p_close_pipe>
    nrf24l01p_open_pipe(NRF24L01P_TX, true);
 80002e0:	2101      	movs	r1, #1
 80002e2:	2006      	movs	r0, #6
 80002e4:	f002 fce7 	bl	8002cb6 <nrf24l01p_open_pipe>

    nrf24l01p_set_auto_retr(NRF_RETRANSMITS, NRF_RETRANSMIT_DELAY);
 80002e8:	21fa      	movs	r1, #250	; 0xfa
 80002ea:	2005      	movs	r0, #5
 80002ec:	f002 fda6 	bl	8002e3c <nrf24l01p_set_auto_retr>
    nrf24l01p_open_pipe(NRF24L01P_PIPE0, true);
 80002f0:	2101      	movs	r1, #1
 80002f2:	2000      	movs	r0, #0
 80002f4:	f002 fcdf 	bl	8002cb6 <nrf24l01p_open_pipe>
    nrf24l01p_set_address(NRF24L01P_PIPE0, address);
 80002f8:	6879      	ldr	r1, [r7, #4]
 80002fa:	2000      	movs	r0, #0
 80002fc:	f002 fd74 	bl	8002de8 <nrf24l01p_set_address>

    nrf24l01p_set_crc_mode(NRF24L01P_CRC_16BIT);
 8000300:	2003      	movs	r0, #3
 8000302:	f002 fcbd 	bl	8002c80 <nrf24l01p_set_crc_mode>
    nrf24l01p_set_address_width(NRF24L01P_AW_5BYTES);
 8000306:	2005      	movs	r0, #5
 8000308:	f002 fdb8 	bl	8002e7c <nrf24l01p_set_address_width>
    nrf24l01p_set_address(NRF24L01P_TX, address);
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	2006      	movs	r0, #6
 8000310:	f002 fd6a 	bl	8002de8 <nrf24l01p_set_address>
    nrf24l01p_set_operation_mode(NRF24L01P_PTX);
 8000314:	2000      	movs	r0, #0
 8000316:	f002 fddf 	bl	8002ed8 <nrf24l01p_set_operation_mode>
    nrf24l01p_set_rf_channel(NRF_CHANNEL);
 800031a:	2044      	movs	r0, #68	; 0x44
 800031c:	f002 fe19 	bl	8002f52 <nrf24l01p_set_rf_channel>

    nrf24l01p_set_power_mode(NRF24L01P_PWR_UP);
 8000320:	2001      	movs	r0, #1
 8000322:	f002 fdf8 	bl	8002f16 <nrf24l01p_set_power_mode>
    delay(NRF_POWER_UP_DELAY);
 8000326:	2002      	movs	r0, #2
 8000328:	f7ff ffc6 	bl	80002b8 <delay>
}
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}

08000334 <nrf_init_rx>:

void nrf_init_rx(uint8_t *address)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
    nrf24l01p_get_clear_irq_flags();
 800033c:	f002 fc78 	bl	8002c30 <nrf24l01p_get_clear_irq_flags>
    nrf24l01p_close_pipe(NRF24L01P_ALL);
 8000340:	20ff      	movs	r0, #255	; 0xff
 8000342:	f002 fd0f 	bl	8002d64 <nrf24l01p_close_pipe>
    nrf24l01p_open_pipe(NRF24L01P_PIPE0, true);
 8000346:	2101      	movs	r1, #1
 8000348:	2000      	movs	r0, #0
 800034a:	f002 fcb4 	bl	8002cb6 <nrf24l01p_open_pipe>
    nrf24l01p_set_crc_mode(NRF24L01P_CRC_16BIT);
 800034e:	2003      	movs	r0, #3
 8000350:	f002 fc96 	bl	8002c80 <nrf24l01p_set_crc_mode>
    nrf24l01p_set_address_width(NRF24L01P_AW_5BYTES);
 8000354:	2005      	movs	r0, #5
 8000356:	f002 fd91 	bl	8002e7c <nrf24l01p_set_address_width>
    nrf24l01p_set_address(NRF24L01P_PIPE0, address);
 800035a:	6879      	ldr	r1, [r7, #4]
 800035c:	2000      	movs	r0, #0
 800035e:	f002 fd43 	bl	8002de8 <nrf24l01p_set_address>
    nrf24l01p_set_operation_mode(NRF24L01P_PRX);
 8000362:	2001      	movs	r0, #1
 8000364:	f002 fdb8 	bl	8002ed8 <nrf24l01p_set_operation_mode>
    nrf24l01p_set_rx_payload_width(NRF24L01P_PIPE0, NRF_PAYLOAD_LENGTH);
 8000368:	210a      	movs	r1, #10
 800036a:	2000      	movs	r0, #0
 800036c:	f002 fd96 	bl	8002e9c <nrf24l01p_set_rx_payload_width>
    nrf24l01p_set_rf_channel(NRF_CHANNEL);
 8000370:	2044      	movs	r0, #68	; 0x44
 8000372:	f002 fdee 	bl	8002f52 <nrf24l01p_set_rf_channel>

    nrf24l01p_set_power_mode(NRF24L01P_PWR_UP);
 8000376:	2001      	movs	r0, #1
 8000378:	f002 fdcd 	bl	8002f16 <nrf24l01p_set_power_mode>
    delay(NRF_POWER_UP_DELAY);
 800037c:	2002      	movs	r0, #2
 800037e:	f7ff ff9b 	bl	80002b8 <delay>
}
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
	...

0800038c <nrf24l01p_spi_ss>:

void nrf24l01p_spi_ss(nrf24l01p_spi_ss_level_t level)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
	// we will transmit data to nRF, MSB FIRST
	if (!level)
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d107      	bne.n	80003ac <nrf24l01p_spi_ss+0x20>
		hspi2.Instance->CR1 &= ~(SPI_CR1_LSBFIRST);
 800039c:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <nrf24l01p_spi_ss+0x4c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <nrf24l01p_spi_ss+0x4c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80003aa:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(SPI2_nRF_CSn_GPIO_Port, SPI2_nRF_CSn_Pin, level);
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	461a      	mov	r2, r3
 80003b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003b4:	4809      	ldr	r0, [pc, #36]	; (80003dc <nrf24l01p_spi_ss+0x50>)
 80003b6:	f003 fe08 	bl	8003fca <HAL_GPIO_WritePin>
	// we will transmit data to VFD, LSB FIRST
	if (level)
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d007      	beq.n	80003d0 <nrf24l01p_spi_ss+0x44>
		hspi2.Instance->CR1 |= SPI_CR1_LSBFIRST;
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <nrf24l01p_spi_ss+0x4c>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <nrf24l01p_spi_ss+0x4c>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80003ce:	601a      	str	r2, [r3, #0]
}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	2000056c 	.word	0x2000056c
 80003dc:	40010c00 	.word	0x40010c00

080003e0 <nrf24l01p_spi_rw>:

uint8_t nrf24l01p_spi_rw(uint8_t value)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af02      	add	r7, sp, #8
 80003e6:	4603      	mov	r3, r0
 80003e8:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	HAL_SPI_TransmitReceive(&hspi2, &value, &data, 1, 100);
 80003ea:	f107 020f 	add.w	r2, r7, #15
 80003ee:	1df9      	adds	r1, r7, #7
 80003f0:	2364      	movs	r3, #100	; 0x64
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	2301      	movs	r3, #1
 80003f6:	4804      	ldr	r0, [pc, #16]	; (8000408 <nrf24l01p_spi_rw+0x28>)
 80003f8:	f007 f95c 	bl	80076b4 <HAL_SPI_TransmitReceive>
	return data;
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3710      	adds	r7, #16
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	2000056c 	.word	0x2000056c

0800040c <vfd_spi_cs>:


void vfd_spi_cs(vfd_cs_t cs)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, cs);
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	461a      	mov	r2, r3
 800041a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800041e:	4803      	ldr	r0, [pc, #12]	; (800042c <vfd_spi_cs+0x20>)
 8000420:	f003 fdd3 	bl	8003fca <HAL_GPIO_WritePin>
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	40010c00 	.word	0x40010c00

08000430 <vfd_spi_tx>:

void vfd_spi_tx(uint8_t *pData, uint16_t Size)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	460b      	mov	r3, r1
 800043a:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi2, pData, Size, 100);
 800043c:	887a      	ldrh	r2, [r7, #2]
 800043e:	2364      	movs	r3, #100	; 0x64
 8000440:	6879      	ldr	r1, [r7, #4]
 8000442:	4803      	ldr	r0, [pc, #12]	; (8000450 <vfd_spi_tx+0x20>)
 8000444:	f006 fffa 	bl	800743c <HAL_SPI_Transmit>
}
 8000448:	bf00      	nop
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	2000056c 	.word	0x2000056c

08000454 <do_vfd_init>:

void do_vfd_init(void)
{
 8000454:	b5b0      	push	{r4, r5, r7, lr}
 8000456:	b090      	sub	sp, #64	; 0x40
 8000458:	af00      	add	r7, sp, #0
#define FULL_DEMO (0)
	vfd_spi_cs(VFD_CS_HIGH);
 800045a:	2001      	movs	r0, #1
 800045c:	f7ff ffd6 	bl	800040c <vfd_spi_cs>
	HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 8000460:	2201      	movs	r2, #1
 8000462:	2120      	movs	r1, #32
 8000464:	4853      	ldr	r0, [pc, #332]	; (80005b4 <do_vfd_init+0x160>)
 8000466:	f003 fdb0 	bl	8003fca <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800046a:	200a      	movs	r0, #10
 800046c:	f003 fae0 	bl	8003a30 <HAL_Delay>

	vfd_init(); // init display, 11 digits 17 segments
 8000470:	f003 fa18 	bl	80038a4 <vfd_init>
	vfd_leds(0); // disable leds
 8000474:	2000      	movs	r0, #0
 8000476:	f003 f9f1 	bl	800385c <vfd_leds>

	for (int i = 0; i < sizeof(vfd.arr1); i++) {
 800047a:	2300      	movs	r3, #0
 800047c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800047e:	e007      	b.n	8000490 <do_vfd_init+0x3c>
		vfd.arr1[i] = 0xFF;
 8000480:	4a4d      	ldr	r2, [pc, #308]	; (80005b8 <do_vfd_init+0x164>)
 8000482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000484:	4413      	add	r3, r2
 8000486:	22ff      	movs	r2, #255	; 0xff
 8000488:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(vfd.arr1); i++) {
 800048a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800048c:	3301      	adds	r3, #1
 800048e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000492:	2b20      	cmp	r3, #32
 8000494:	d9f4      	bls.n	8000480 <do_vfd_init+0x2c>
	}

	vfd_update();
 8000496:	f003 f9b9 	bl	800380c <vfd_update>
	vfd_control(true, 0b111);
 800049a:	2107      	movs	r1, #7
 800049c:	2001      	movs	r0, #1
 800049e:	f003 fa15 	bl	80038cc <vfd_control>
		HAL_Delay(500);
		do_microrl();
	}

	//erase everything... just in case
	vfd_clear_buf();
 80004a2:	f003 f999 	bl	80037d8 <vfd_clear_buf>

	// fill everything
	for (int j = 1; j < 15; j++) {
 80004a6:	2301      	movs	r3, #1
 80004a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80004aa:	e03b      	b.n	8000524 <do_vfd_init+0xd0>
		uint32_t temp = 1 << j;
 80004ac:	2201      	movs	r2, #1
 80004ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80004b0:	fa02 f303 	lsl.w	r3, r2, r3
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i = 1; i < 11; i++) {
 80004b6:	2301      	movs	r3, #1
 80004b8:	637b      	str	r3, [r7, #52]	; 0x34
 80004ba:	e026      	b.n	800050a <do_vfd_init+0xb6>
			for (int b = 0; b < 3; b++) {
 80004bc:	2300      	movs	r3, #0
 80004be:	633b      	str	r3, [r7, #48]	; 0x30
 80004c0:	e01d      	b.n	80004fe <do_vfd_init+0xaa>
				vfd.arr2[i][b] |= (temp >> (b << 3)) & 0xFF;
 80004c2:	493d      	ldr	r1, [pc, #244]	; (80005b8 <do_vfd_init+0x164>)
 80004c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80004c6:	4613      	mov	r3, r2
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	4413      	add	r3, r2
 80004cc:	18ca      	adds	r2, r1, r3
 80004ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004d0:	4413      	add	r3, r2
 80004d2:	781a      	ldrb	r2, [r3, #0]
 80004d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004d6:	00db      	lsls	r3, r3, #3
 80004d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80004da:	fa21 f303 	lsr.w	r3, r1, r3
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	4313      	orrs	r3, r2
 80004e2:	b2d8      	uxtb	r0, r3
 80004e4:	4934      	ldr	r1, [pc, #208]	; (80005b8 <do_vfd_init+0x164>)
 80004e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80004e8:	4613      	mov	r3, r2
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	4413      	add	r3, r2
 80004ee:	18ca      	adds	r2, r1, r3
 80004f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004f2:	4413      	add	r3, r2
 80004f4:	4602      	mov	r2, r0
 80004f6:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++) {
 80004f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004fa:	3301      	adds	r3, #1
 80004fc:	633b      	str	r3, [r7, #48]	; 0x30
 80004fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000500:	2b02      	cmp	r3, #2
 8000502:	ddde      	ble.n	80004c2 <do_vfd_init+0x6e>
		for (int i = 1; i < 11; i++) {
 8000504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000506:	3301      	adds	r3, #1
 8000508:	637b      	str	r3, [r7, #52]	; 0x34
 800050a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800050c:	2b0a      	cmp	r3, #10
 800050e:	ddd5      	ble.n	80004bc <do_vfd_init+0x68>
			}
		}
		vfd_update();
 8000510:	f003 f97c 	bl	800380c <vfd_update>
		HAL_Delay(100);
 8000514:	2064      	movs	r0, #100	; 0x64
 8000516:	f003 fa8b 	bl	8003a30 <HAL_Delay>
		do_microrl();
 800051a:	f000 fb4f 	bl	8000bbc <do_microrl>
	for (int j = 1; j < 15; j++) {
 800051e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000520:	3301      	adds	r3, #1
 8000522:	63bb      	str	r3, [r7, #56]	; 0x38
 8000524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000526:	2b0e      	cmp	r3, #14
 8000528:	ddc0      	ble.n	80004ac <do_vfd_init+0x58>
	}

	const uint32_t arr[] = {
 800052a:	4b24      	ldr	r3, [pc, #144]	; (80005bc <do_vfd_init+0x168>)
 800052c:	1d3c      	adds	r4, r7, #4
 800052e:	461d      	mov	r5, r3
 8000530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000534:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			VFD_SYM_BRACKET_LEFT,
			VFD_SYM_SMALL_ARROW_RIGHT,
			VFD_SYM_DCC,
	};

	for (int j = 0; j < sizeof(arr)/sizeof(arr[0]); j++) {
 800053c:	2300      	movs	r3, #0
 800053e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000540:	e013      	b.n	800056a <do_vfd_init+0x116>
		vfd_set_symbols(arr[j]);
 8000542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800054a:	4413      	add	r3, r2
 800054c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000550:	4618      	mov	r0, r3
 8000552:	f003 f88f 	bl	8003674 <vfd_set_symbols>
		vfd_update();
 8000556:	f003 f959 	bl	800380c <vfd_update>
		HAL_Delay(50);
 800055a:	2032      	movs	r0, #50	; 0x32
 800055c:	f003 fa68 	bl	8003a30 <HAL_Delay>
		do_microrl();
 8000560:	f000 fb2c 	bl	8000bbc <do_microrl>
	for (int j = 0; j < sizeof(arr)/sizeof(arr[0]); j++) {
 8000564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000566:	3301      	adds	r3, #1
 8000568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800056a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800056c:	2b07      	cmp	r3, #7
 800056e:	d9e8      	bls.n	8000542 <do_vfd_init+0xee>
	}

	for (int j = 0; j < 17; j++) {
 8000570:	2300      	movs	r3, #0
 8000572:	62bb      	str	r3, [r7, #40]	; 0x28
 8000574:	e010      	b.n	8000598 <do_vfd_init+0x144>
		vfd_set_symbols(1<<j);
 8000576:	2201      	movs	r2, #1
 8000578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800057a:	fa02 f303 	lsl.w	r3, r2, r3
 800057e:	4618      	mov	r0, r3
 8000580:	f003 f878 	bl	8003674 <vfd_set_symbols>
		vfd_update();
 8000584:	f003 f942 	bl	800380c <vfd_update>
		HAL_Delay(50);
 8000588:	2032      	movs	r0, #50	; 0x32
 800058a:	f003 fa51 	bl	8003a30 <HAL_Delay>
		do_microrl();
 800058e:	f000 fb15 	bl	8000bbc <do_microrl>
	for (int j = 0; j < 17; j++) {
 8000592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000594:	3301      	adds	r3, #1
 8000596:	62bb      	str	r3, [r7, #40]	; 0x28
 8000598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800059a:	2b10      	cmp	r3, #16
 800059c:	ddeb      	ble.n	8000576 <do_vfd_init+0x122>
	}

	vfd_clear_buf();
 800059e:	f003 f91b 	bl	80037d8 <vfd_clear_buf>
	HAL_Delay(500);
 80005a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005a6:	f003 fa43 	bl	8003a30 <HAL_Delay>
}
 80005aa:	bf00      	nop
 80005ac:	3740      	adds	r7, #64	; 0x40
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bdb0      	pop	{r4, r5, r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40010c00 	.word	0x40010c00
 80005b8:	2000061c 	.word	0x2000061c
 80005bc:	0800c6f0 	.word	0x0800c6f0

080005c0 <do_led>:

void do_led(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 500)
 80005c4:	f003 fa2a 	bl	8003a1c <HAL_GetTick>
 80005c8:	4602      	mov	r2, r0
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <do_led+0x30>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	1ad3      	subs	r3, r2, r3
 80005d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005d4:	d30a      	bcc.n	80005ec <do_led+0x2c>
		return;
	last_time = HAL_GetTick();
 80005d6:	f003 fa21 	bl	8003a1c <HAL_GetTick>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <do_led+0x30>)
 80005de:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e4:	4803      	ldr	r0, [pc, #12]	; (80005f4 <do_led+0x34>)
 80005e6:	f003 fd08 	bl	8003ffa <HAL_GPIO_TogglePin>
 80005ea:	e000      	b.n	80005ee <do_led+0x2e>
		return;
 80005ec:	bf00      	nop
}
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200001b4 	.word	0x200001b4
 80005f4:	40011000 	.word	0x40011000

080005f8 <read.9147>:

void do_fram_test(void)
{
	bool read(void)
	{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af04      	add	r7, sp, #16
 80005fe:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t temp;
		HAL_I2C_Mem_Read(&hi2c1, 0b10100000, 0x42, 1, &temp, 1, 10);
 8000602:	230a      	movs	r3, #10
 8000604:	9302      	str	r3, [sp, #8]
 8000606:	2301      	movs	r3, #1
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	f107 030f 	add.w	r3, r7, #15
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	2242      	movs	r2, #66	; 0x42
 8000614:	21a0      	movs	r1, #160	; 0xa0
 8000616:	480f      	ldr	r0, [pc, #60]	; (8000654 <read.9147+0x5c>)
 8000618:	f003 ff46 	bl	80044a8 <HAL_I2C_Mem_Read>
		if (temp != 0x42)
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	2b42      	cmp	r3, #66	; 0x42
 8000620:	d001      	beq.n	8000626 <read.9147+0x2e>
			return false;
 8000622:	2300      	movs	r3, #0
 8000624:	e012      	b.n	800064c <read.9147+0x54>
		HAL_I2C_Mem_Read(&hi2c1, 0b10100010, 0x5A, 1, &temp, 1, 10);
 8000626:	230a      	movs	r3, #10
 8000628:	9302      	str	r3, [sp, #8]
 800062a:	2301      	movs	r3, #1
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	f107 030f 	add.w	r3, r7, #15
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2301      	movs	r3, #1
 8000636:	225a      	movs	r2, #90	; 0x5a
 8000638:	21a2      	movs	r1, #162	; 0xa2
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <read.9147+0x5c>)
 800063c:	f003 ff34 	bl	80044a8 <HAL_I2C_Mem_Read>
		if (temp != 0xA5)
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2ba5      	cmp	r3, #165	; 0xa5
 8000644:	d001      	beq.n	800064a <read.9147+0x52>
			return false;
 8000646:	2300      	movs	r3, #0
 8000648:	e000      	b.n	800064c <read.9147+0x54>
		return true;
 800064a:	2301      	movs	r3, #1
	}
 800064c:	4618      	mov	r0, r3
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200005c4 	.word	0x200005c4

08000658 <do_fram_test>:
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b0c6      	sub	sp, #280	; 0x118
 800065c:	af04      	add	r7, sp, #16
void do_fram_test(void)
 800065e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000662:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		HAL_I2C_Mem_Write(&hi2c1, 0b10100000, 0x42, 1, &temp, 1, 10);
		temp = 0xA5;
		HAL_I2C_Mem_Write(&hi2c1, 0b10100010, 0x5A, 1, &temp, 1, 10);
	}
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 200)
 8000666:	f003 f9d9 	bl	8003a1c <HAL_GetTick>
 800066a:	4602      	mov	r2, r0
 800066c:	4b63      	ldr	r3, [pc, #396]	; (80007fc <do_fram_test+0x1a4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	2bc7      	cmp	r3, #199	; 0xc7
 8000674:	f240 80bd 	bls.w	80007f2 <do_fram_test+0x19a>
		return;
	if (PB1 && PB2)
 8000678:	2102      	movs	r1, #2
 800067a:	4861      	ldr	r0, [pc, #388]	; (8000800 <do_fram_test+0x1a8>)
 800067c:	f003 fc8e 	bl	8003f9c <HAL_GPIO_ReadPin>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	f000 80af 	beq.w	80007e6 <do_fram_test+0x18e>
 8000688:	2104      	movs	r1, #4
 800068a:	485d      	ldr	r0, [pc, #372]	; (8000800 <do_fram_test+0x1a8>)
 800068c:	f003 fc86 	bl	8003f9c <HAL_GPIO_ReadPin>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	f000 80a7 	beq.w	80007e6 <do_fram_test+0x18e>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0); // turn led on
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069e:	4859      	ldr	r0, [pc, #356]	; (8000804 <do_fram_test+0x1ac>)
 80006a0:	f003 fc93 	bl	8003fca <HAL_GPIO_WritePin>
		vfd_put_string("FRAM TEST");
 80006a4:	4858      	ldr	r0, [pc, #352]	; (8000808 <do_fram_test+0x1b0>)
 80006a6:	f002 ff5f 	bl	8003568 <vfd_put_string>
		vfd_update();
 80006aa:	f003 f8af 	bl	800380c <vfd_update>
		for (int i = 0; i < 3; i++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80006b4:	e012      	b.n	80006dc <do_fram_test+0x84>
		{
			vfd_leds(~(1<<i));
 80006b6:	2201      	movs	r2, #1
 80006b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	43db      	mvns	r3, r3
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 f8c8 	bl	800385c <vfd_leds>
			HAL_Delay(250);
 80006cc:	20fa      	movs	r0, #250	; 0xfa
 80006ce:	f003 f9af 	bl	8003a30 <HAL_Delay>
		for (int i = 0; i < 3; i++)
 80006d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80006d6:	3301      	adds	r3, #1
 80006d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80006dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	dde8      	ble.n	80006b6 <do_fram_test+0x5e>
		}
		vfd_leds(0b1111);
 80006e4:	200f      	movs	r0, #15
 80006e6:	f003 f8b9 	bl	800385c <vfd_leds>
		HAL_Delay(500);
 80006ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ee:	f003 f99f 	bl	8003a30 <HAL_Delay>
		if (read())
 80006f2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80006f6:	469c      	mov	ip, r3
 80006f8:	f7ff ff7e 	bl	80005f8 <read.9147>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d008      	beq.n	8000714 <do_fram_test+0xbc>
		{
			vfd_leds(0b0100);
 8000702:	2004      	movs	r0, #4
 8000704:	f003 f8aa 	bl	800385c <vfd_leds>
			vfd_put_string("FRAM FOUND");
 8000708:	4840      	ldr	r0, [pc, #256]	; (800080c <do_fram_test+0x1b4>)
 800070a:	f002 ff2d 	bl	8003568 <vfd_put_string>
			vfd_update();
 800070e:	f003 f87d 	bl	800380c <vfd_update>
 8000712:	e024      	b.n	800075e <do_fram_test+0x106>
		}
		else
		{
			vfd_leds(0b0001);
 8000714:	2001      	movs	r0, #1
 8000716:	f003 f8a1 	bl	800385c <vfd_leds>
			write();
 800071a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800071e:	469c      	mov	ip, r3
 8000720:	f000 f87c 	bl	800081c <write.9151>
			HAL_Delay(500);
 8000724:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000728:	f003 f982 	bl	8003a30 <HAL_Delay>
			if (read())
 800072c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000730:	469c      	mov	ip, r3
 8000732:	f7ff ff61 	bl	80005f8 <read.9147>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d008      	beq.n	800074e <do_fram_test+0xf6>
			{
				vfd_leds(0b0011);
 800073c:	2003      	movs	r0, #3
 800073e:	f003 f88d 	bl	800385c <vfd_leds>
				vfd_put_string("FRAM OKAY");
 8000742:	4833      	ldr	r0, [pc, #204]	; (8000810 <do_fram_test+0x1b8>)
 8000744:	f002 ff10 	bl	8003568 <vfd_put_string>
				vfd_update();
 8000748:	f003 f860 	bl	800380c <vfd_update>
 800074c:	e007      	b.n	800075e <do_fram_test+0x106>
			}
			else
			{
				vfd_leds(0b1000);
 800074e:	2008      	movs	r0, #8
 8000750:	f003 f884 	bl	800385c <vfd_leds>
				vfd_put_string("NO FRAM!");
 8000754:	482f      	ldr	r0, [pc, #188]	; (8000814 <do_fram_test+0x1bc>)
 8000756:	f002 ff07 	bl	8003568 <vfd_put_string>
				vfd_update();
 800075a:	f003 f857 	bl	800380c <vfd_update>
			}
		}

		while(PB1);
 800075e:	bf00      	nop
 8000760:	2102      	movs	r1, #2
 8000762:	4827      	ldr	r0, [pc, #156]	; (8000800 <do_fram_test+0x1a8>)
 8000764:	f003 fc1a 	bl	8003f9c <HAL_GPIO_ReadPin>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1f8      	bne.n	8000760 <do_fram_test+0x108>
		if (PB2)
 800076e:	2104      	movs	r1, #4
 8000770:	4823      	ldr	r0, [pc, #140]	; (8000800 <do_fram_test+0x1a8>)
 8000772:	f003 fc13 	bl	8003f9c <HAL_GPIO_ReadPin>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d034      	beq.n	80007e6 <do_fram_test+0x18e>
		{
			// PB2 still pressed, erase RAM
			vfd_leds(0b1001);
 800077c:	2009      	movs	r0, #9
 800077e:	f003 f86d 	bl	800385c <vfd_leds>
			uint8_t zero[256] = {0};
 8000782:	463b      	mov	r3, r7
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	3304      	adds	r3, #4
 800078a:	22fc      	movs	r2, #252	; 0xfc
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f00b ff82 	bl	800c698 <memset>
			//first half
			HAL_I2C_Mem_Write(&hi2c1, 0b10100000, 0, 1, zero, sizeof(zero), 200);
 8000794:	23c8      	movs	r3, #200	; 0xc8
 8000796:	9302      	str	r3, [sp, #8]
 8000798:	f44f 7380 	mov.w	r3, #256	; 0x100
 800079c:	9301      	str	r3, [sp, #4]
 800079e:	463b      	mov	r3, r7
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	2301      	movs	r3, #1
 80007a4:	2200      	movs	r2, #0
 80007a6:	21a0      	movs	r1, #160	; 0xa0
 80007a8:	481b      	ldr	r0, [pc, #108]	; (8000818 <do_fram_test+0x1c0>)
 80007aa:	f003 fd83 	bl	80042b4 <HAL_I2C_Mem_Write>
			//second half
			HAL_I2C_Mem_Write(&hi2c1, 0b10100010, 0, 1, zero, sizeof(zero), 200);
 80007ae:	23c8      	movs	r3, #200	; 0xc8
 80007b0:	9302      	str	r3, [sp, #8]
 80007b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b6:	9301      	str	r3, [sp, #4]
 80007b8:	463b      	mov	r3, r7
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2301      	movs	r3, #1
 80007be:	2200      	movs	r2, #0
 80007c0:	21a2      	movs	r1, #162	; 0xa2
 80007c2:	4815      	ldr	r0, [pc, #84]	; (8000818 <do_fram_test+0x1c0>)
 80007c4:	f003 fd76 	bl	80042b4 <HAL_I2C_Mem_Write>
			HAL_Delay(500);
 80007c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007cc:	f003 f930 	bl	8003a30 <HAL_Delay>
			vfd_leds(0b1010);
 80007d0:	200a      	movs	r0, #10
 80007d2:	f003 f843 	bl	800385c <vfd_leds>
			while (PB2);
 80007d6:	bf00      	nop
 80007d8:	2104      	movs	r1, #4
 80007da:	4809      	ldr	r0, [pc, #36]	; (8000800 <do_fram_test+0x1a8>)
 80007dc:	f003 fbde 	bl	8003f9c <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1f8      	bne.n	80007d8 <do_fram_test+0x180>
		}
	}
	last_time = HAL_GetTick();
 80007e6:	f003 f919 	bl	8003a1c <HAL_GetTick>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4a03      	ldr	r2, [pc, #12]	; (80007fc <do_fram_test+0x1a4>)
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	e000      	b.n	80007f4 <do_fram_test+0x19c>
		return;
 80007f2:	bf00      	nop
}
 80007f4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200001b8 	.word	0x200001b8
 8000800:	40010c00 	.word	0x40010c00
 8000804:	40011000 	.word	0x40011000
 8000808:	0800c710 	.word	0x0800c710
 800080c:	0800c71c 	.word	0x0800c71c
 8000810:	0800c728 	.word	0x0800c728
 8000814:	0800c734 	.word	0x0800c734
 8000818:	200005c4 	.word	0x200005c4

0800081c <write.9151>:
	{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af04      	add	r7, sp, #16
 8000822:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t temp = 0x42;
 8000826:	2342      	movs	r3, #66	; 0x42
 8000828:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, 0b10100000, 0x42, 1, &temp, 1, 10);
 800082a:	230a      	movs	r3, #10
 800082c:	9302      	str	r3, [sp, #8]
 800082e:	2301      	movs	r3, #1
 8000830:	9301      	str	r3, [sp, #4]
 8000832:	f107 030f 	add.w	r3, r7, #15
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2301      	movs	r3, #1
 800083a:	2242      	movs	r2, #66	; 0x42
 800083c:	21a0      	movs	r1, #160	; 0xa0
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <write.9151+0x50>)
 8000840:	f003 fd38 	bl	80042b4 <HAL_I2C_Mem_Write>
		temp = 0xA5;
 8000844:	23a5      	movs	r3, #165	; 0xa5
 8000846:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, 0b10100010, 0x5A, 1, &temp, 1, 10);
 8000848:	230a      	movs	r3, #10
 800084a:	9302      	str	r3, [sp, #8]
 800084c:	2301      	movs	r3, #1
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	f107 030f 	add.w	r3, r7, #15
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2301      	movs	r3, #1
 8000858:	225a      	movs	r2, #90	; 0x5a
 800085a:	21a2      	movs	r1, #162	; 0xa2
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <write.9151+0x50>)
 800085e:	f003 fd29 	bl	80042b4 <HAL_I2C_Mem_Write>
	}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200005c4 	.word	0x200005c4

08000870 <do_buttons_and_nrf>:

#define BIT(index) ((uint8_t)1 << (uint8_t)(index))
#define BIT_COND(data,index,condition) (((uint8_t)(data) & ~BIT(index)) | ((condition) ? BIT(index) : (uint8_t)0))
bool do_buttons_and_nrf(void)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b087      	sub	sp, #28
 8000874:	af00      	add	r7, sp, #0
	static bool set_rx = true;
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < (set_rx?90:70))
 8000876:	f003 f8d1 	bl	8003a1c <HAL_GetTick>
 800087a:	4602      	mov	r2, r0
 800087c:	4bbf      	ldr	r3, [pc, #764]	; (8000b7c <do_buttons_and_nrf+0x30c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	4abf      	ldr	r2, [pc, #764]	; (8000b80 <do_buttons_and_nrf+0x310>)
 8000884:	7812      	ldrb	r2, [r2, #0]
 8000886:	2a00      	cmp	r2, #0
 8000888:	d001      	beq.n	800088e <do_buttons_and_nrf+0x1e>
 800088a:	225a      	movs	r2, #90	; 0x5a
 800088c:	e000      	b.n	8000890 <do_buttons_and_nrf+0x20>
 800088e:	2246      	movs	r2, #70	; 0x46
 8000890:	429a      	cmp	r2, r3
 8000892:	d901      	bls.n	8000898 <do_buttons_and_nrf+0x28>
		return false;
 8000894:	2300      	movs	r3, #0
 8000896:	e16c      	b.n	8000b72 <do_buttons_and_nrf+0x302>
	last_time = HAL_GetTick();
 8000898:	f003 f8c0 	bl	8003a1c <HAL_GetTick>
 800089c:	4603      	mov	r3, r0
 800089e:	4ab7      	ldr	r2, [pc, #732]	; (8000b7c <do_buttons_and_nrf+0x30c>)
 80008a0:	6013      	str	r3, [r2, #0]

	if (PB1 ^ PB2)
 80008a2:	2102      	movs	r1, #2
 80008a4:	48b7      	ldr	r0, [pc, #732]	; (8000b84 <do_buttons_and_nrf+0x314>)
 80008a6:	f003 fb79 	bl	8003f9c <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461c      	mov	r4, r3
 80008ae:	2104      	movs	r1, #4
 80008b0:	48b4      	ldr	r0, [pc, #720]	; (8000b84 <do_buttons_and_nrf+0x314>)
 80008b2:	f003 fb73 	bl	8003f9c <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	429c      	cmp	r4, r3
 80008ba:	f000 8112 	beq.w	8000ae2 <do_buttons_and_nrf+0x272>
	{
		// we need to transmit
		set_rx = true;
 80008be:	4bb0      	ldr	r3, [pc, #704]	; (8000b80 <do_buttons_and_nrf+0x310>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2101      	movs	r1, #1
 80008c8:	48ae      	ldr	r0, [pc, #696]	; (8000b84 <do_buttons_and_nrf+0x314>)
 80008ca:	f003 fb7e 	bl	8003fca <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80008ce:	200a      	movs	r0, #10
 80008d0:	f003 f8ae 	bl	8003a30 <HAL_Delay>
		nrf_init_tx(address);
 80008d4:	48ac      	ldr	r0, [pc, #688]	; (8000b88 <do_buttons_and_nrf+0x318>)
 80008d6:	f7ff fcfa 	bl	80002ce <nrf_init_tx>

		static uint8_t payload[NRF_PAYLOAD_LENGTH];
		memset(payload, 0x44, sizeof(payload));
 80008da:	220a      	movs	r2, #10
 80008dc:	2144      	movs	r1, #68	; 0x44
 80008de:	48ab      	ldr	r0, [pc, #684]	; (8000b8c <do_buttons_and_nrf+0x31c>)
 80008e0:	f00b feda 	bl	800c698 <memset>
		if (PB1)
 80008e4:	2102      	movs	r1, #2
 80008e6:	48a7      	ldr	r0, [pc, #668]	; (8000b84 <do_buttons_and_nrf+0x314>)
 80008e8:	f003 fb58 	bl	8003f9c <HAL_GPIO_ReadPin>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d003      	beq.n	80008fa <do_buttons_and_nrf+0x8a>
			payload[0] = 1;
 80008f2:	4ba6      	ldr	r3, [pc, #664]	; (8000b8c <do_buttons_and_nrf+0x31c>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
 80008f8:	e00c      	b.n	8000914 <do_buttons_and_nrf+0xa4>
		else if (PB2)
 80008fa:	2104      	movs	r1, #4
 80008fc:	48a1      	ldr	r0, [pc, #644]	; (8000b84 <do_buttons_and_nrf+0x314>)
 80008fe:	f003 fb4d 	bl	8003f9c <HAL_GPIO_ReadPin>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d003      	beq.n	8000910 <do_buttons_and_nrf+0xa0>
			payload[0] = 2;
 8000908:	4ba0      	ldr	r3, [pc, #640]	; (8000b8c <do_buttons_and_nrf+0x31c>)
 800090a:	2202      	movs	r2, #2
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	e001      	b.n	8000914 <do_buttons_and_nrf+0xa4>
		else
			return false;
 8000910:	2300      	movs	r3, #0
 8000912:	e12e      	b.n	8000b72 <do_buttons_and_nrf+0x302>
		nrf24l01p_write_tx_payload(payload, sizeof(payload));
 8000914:	210a      	movs	r1, #10
 8000916:	489d      	ldr	r0, [pc, #628]	; (8000b8c <do_buttons_and_nrf+0x31c>)
 8000918:	f002 fb44 	bl	8002fa4 <nrf24l01p_write_tx_payload>

		HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 1);
 800091c:	2201      	movs	r2, #1
 800091e:	2101      	movs	r1, #1
 8000920:	4898      	ldr	r0, [pc, #608]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000922:	f003 fb52 	bl	8003fca <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000926:	2001      	movs	r0, #1
 8000928:	f003 f882 	bl	8003a30 <HAL_Delay>
		HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2101      	movs	r1, #1
 8000930:	4894      	ldr	r0, [pc, #592]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000932:	f003 fb4a 	bl	8003fca <HAL_GPIO_WritePin>

		if (payload[0] == 1)
 8000936:	4b95      	ldr	r3, [pc, #596]	; (8000b8c <do_buttons_and_nrf+0x31c>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d106      	bne.n	800094c <do_buttons_and_nrf+0xdc>
		{
			vfd_leds(0b0001);
 800093e:	2001      	movs	r0, #1
 8000940:	f002 ff8c 	bl	800385c <vfd_leds>
			vfd_put_string("PB1");
 8000944:	4892      	ldr	r0, [pc, #584]	; (8000b90 <do_buttons_and_nrf+0x320>)
 8000946:	f002 fe0f 	bl	8003568 <vfd_put_string>
 800094a:	e005      	b.n	8000958 <do_buttons_and_nrf+0xe8>
		}
		else
		{
			vfd_leds(0b0010);
 800094c:	2002      	movs	r0, #2
 800094e:	f002 ff85 	bl	800385c <vfd_leds>
			vfd_put_string("PB2");
 8000952:	4890      	ldr	r0, [pc, #576]	; (8000b94 <do_buttons_and_nrf+0x324>)
 8000954:	f002 fe08 	bl	8003568 <vfd_put_string>
		}
		vfd_update();
 8000958:	f002 ff58 	bl	800380c <vfd_update>

		uint32_t timeout_cnt = HAL_GetTick();
 800095c:	f003 f85e 	bl	8003a1c <HAL_GetTick>
 8000960:	6178      	str	r0, [r7, #20]

		do {
			if (nrf24l01p_get_irq_flags() & (1 << NRF24L01P_IRQ_TX_DS))
 8000962:	f002 f983 	bl	8002c6c <nrf24l01p_get_irq_flags>
 8000966:	4603      	mov	r3, r0
 8000968:	f003 0320 	and.w	r3, r3, #32
 800096c:	2b00      	cmp	r3, #0
 800096e:	d010      	beq.n	8000992 <do_buttons_and_nrf+0x122>
			{
				//successfully transmitted
				if (payload[0] == 1)
 8000970:	4b86      	ldr	r3, [pc, #536]	; (8000b8c <do_buttons_and_nrf+0x31c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d103      	bne.n	8000980 <do_buttons_and_nrf+0x110>
					vfd_put_string("PB1 TX");
 8000978:	4887      	ldr	r0, [pc, #540]	; (8000b98 <do_buttons_and_nrf+0x328>)
 800097a:	f002 fdf5 	bl	8003568 <vfd_put_string>
 800097e:	e002      	b.n	8000986 <do_buttons_and_nrf+0x116>
				else
					vfd_put_string("PB2 TX");
 8000980:	4886      	ldr	r0, [pc, #536]	; (8000b9c <do_buttons_and_nrf+0x32c>)
 8000982:	f002 fdf1 	bl	8003568 <vfd_put_string>
				vfd_update();
 8000986:	f002 ff41 	bl	800380c <vfd_update>
				nrf24l01p_clear_irq_flag(NRF24L01P_IRQ_TX_DS);
 800098a:	2005      	movs	r0, #5
 800098c:	f002 f95c 	bl	8002c48 <nrf24l01p_clear_irq_flag>
				break;
 8000990:	e0a5      	b.n	8000ade <do_buttons_and_nrf+0x26e>
			}
			if (nrf24l01p_get_irq_flags() & (1 << NRF24L01P_IRQ_MAX_RT))
 8000992:	f002 f96b 	bl	8002c6c <nrf24l01p_get_irq_flags>
 8000996:	4603      	mov	r3, r0
 8000998:	f003 0310 	and.w	r3, r3, #16
 800099c:	2b00      	cmp	r3, #0
 800099e:	d075      	beq.n	8000a8c <do_buttons_and_nrf+0x21c>
			{
				// not send
				vfd_leds(0b1000);
 80009a0:	2008      	movs	r0, #8
 80009a2:	f002 ff5b 	bl	800385c <vfd_leds>
				if (payload[0] == 1)
 80009a6:	4b79      	ldr	r3, [pc, #484]	; (8000b8c <do_buttons_and_nrf+0x31c>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d103      	bne.n	80009b6 <do_buttons_and_nrf+0x146>
					vfd_put_string("PB1 MAX RT");
 80009ae:	487c      	ldr	r0, [pc, #496]	; (8000ba0 <do_buttons_and_nrf+0x330>)
 80009b0:	f002 fdda 	bl	8003568 <vfd_put_string>
 80009b4:	e002      	b.n	80009bc <do_buttons_and_nrf+0x14c>
				else
					vfd_put_string("PB2 MAX RT");
 80009b6:	487b      	ldr	r0, [pc, #492]	; (8000ba4 <do_buttons_and_nrf+0x334>)
 80009b8:	f002 fdd6 	bl	8003568 <vfd_put_string>
				vfd_update();
 80009bc:	f002 ff26 	bl	800380c <vfd_update>
				nrf24l01p_clear_irq_flag(NRF24L01P_IRQ_MAX_RT);
 80009c0:	2004      	movs	r0, #4
 80009c2:	f002 f941 	bl	8002c48 <nrf24l01p_clear_irq_flag>
				nrf24l01p_flush_tx();
 80009c6:	f002 fb2c 	bl	8003022 <nrf24l01p_flush_tx>
				uint32_t but_hold = HAL_GetTick();
 80009ca:	f003 f827 	bl	8003a1c <HAL_GetTick>
 80009ce:	6138      	str	r0, [r7, #16]
				while(PB1||PB2)
 80009d0:	e04d      	b.n	8000a6e <do_buttons_and_nrf+0x1fe>
				{
					if (HAL_GetTick() - but_hold > 2000)
 80009d2:	f003 f823 	bl	8003a1c <HAL_GetTick>
 80009d6:	4602      	mov	r2, r0
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80009e0:	d945      	bls.n	8000a6e <do_buttons_and_nrf+0x1fe>
					{
						vfd_put_string("BERSERK");
 80009e2:	4871      	ldr	r0, [pc, #452]	; (8000ba8 <do_buttons_and_nrf+0x338>)
 80009e4:	f002 fdc0 	bl	8003568 <vfd_put_string>
						vfd_update();
 80009e8:	f002 ff10 	bl	800380c <vfd_update>
						nrf24l01p_set_operation_mode(NRF24L01P_PTX);
 80009ec:	2000      	movs	r0, #0
 80009ee:	f002 fa73 	bl	8002ed8 <nrf24l01p_set_operation_mode>

						nrf24l01p_set_rf_channel(NRF_CHANNEL);
 80009f2:	2044      	movs	r0, #68	; 0x44
 80009f4:	f002 faad 	bl	8002f52 <nrf24l01p_set_rf_channel>
						nrf24l01p_set_power_mode(NRF24L01P_PWR_UP);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f002 fa8c 	bl	8002f16 <nrf24l01p_set_power_mode>
						nrf24l01p_set_pll_mode(NRF24L01P_PLL_LOCK);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f002 fb20 	bl	8003044 <nrf24l01p_set_pll_mode>
						nrf24l01p_write_reg(NRF24L01P_RF_SETUP,
								BIT_COND(nrf24l01p_read_reg(NRF24L01P_RF_SETUP),
 8000a04:	2006      	movs	r0, #6
 8000a06:	f002 fb3b 	bl	8003080 <nrf24l01p_read_reg>
 8000a0a:	4603      	mov	r3, r0
						nrf24l01p_write_reg(NRF24L01P_RF_SETUP,
 8000a0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	4619      	mov	r1, r3
 8000a14:	2006      	movs	r0, #6
 8000a16:	f002 fb4c 	bl	80030b2 <nrf24l01p_write_reg>
										NRF24L01P_RF_SETUP_CONT_WAVE, 1));
						delay(NRF_POWER_UP_DELAY);
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	f7ff fc4c 	bl	80002b8 <delay>
						HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 1);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2101      	movs	r1, #1
 8000a24:	4857      	ldr	r0, [pc, #348]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000a26:	f003 fad0 	bl	8003fca <HAL_GPIO_WritePin>
						while(PB1||PB2);
 8000a2a:	bf00      	nop
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4855      	ldr	r0, [pc, #340]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000a30:	f003 fab4 	bl	8003f9c <HAL_GPIO_ReadPin>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d1f8      	bne.n	8000a2c <do_buttons_and_nrf+0x1bc>
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	4851      	ldr	r0, [pc, #324]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000a3e:	f003 faad 	bl	8003f9c <HAL_GPIO_ReadPin>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1f1      	bne.n	8000a2c <do_buttons_and_nrf+0x1bc>
						nrf24l01p_write_reg(NRF24L01P_RF_SETUP,
								BIT_COND(nrf24l01p_read_reg(NRF24L01P_RF_SETUP),
 8000a48:	2006      	movs	r0, #6
 8000a4a:	f002 fb19 	bl	8003080 <nrf24l01p_read_reg>
 8000a4e:	4603      	mov	r3, r0
						nrf24l01p_write_reg(NRF24L01P_RF_SETUP,
 8000a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	4619      	mov	r1, r3
 8000a58:	2006      	movs	r0, #6
 8000a5a:	f002 fb2a 	bl	80030b2 <nrf24l01p_write_reg>
										NRF24L01P_RF_SETUP_CONT_WAVE, 0));
						nrf24l01p_set_pll_mode(NRF24L01P_PLL_UNLOCK);
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f002 faf0 	bl	8003044 <nrf24l01p_set_pll_mode>
						HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2101      	movs	r1, #1
 8000a68:	4846      	ldr	r0, [pc, #280]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000a6a:	f003 faae 	bl	8003fca <HAL_GPIO_WritePin>
				while(PB1||PB2)
 8000a6e:	2102      	movs	r1, #2
 8000a70:	4844      	ldr	r0, [pc, #272]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000a72:	f003 fa93 	bl	8003f9c <HAL_GPIO_ReadPin>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d1aa      	bne.n	80009d2 <do_buttons_and_nrf+0x162>
 8000a7c:	2104      	movs	r1, #4
 8000a7e:	4841      	ldr	r0, [pc, #260]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000a80:	f003 fa8c 	bl	8003f9c <HAL_GPIO_ReadPin>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1a3      	bne.n	80009d2 <do_buttons_and_nrf+0x162>
					}
				}
				break;
 8000a8a:	e028      	b.n	8000ade <do_buttons_and_nrf+0x26e>
			}
			if (HAL_GetTick() - timeout_cnt > 200)
 8000a8c:	f002 ffc6 	bl	8003a1c <HAL_GetTick>
 8000a90:	4602      	mov	r2, r0
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	2bc8      	cmp	r3, #200	; 0xc8
 8000a98:	f67f af63 	bls.w	8000962 <do_buttons_and_nrf+0xf2>
			{
				// timeout error
				vfd_leds(0b1011);
 8000a9c:	200b      	movs	r0, #11
 8000a9e:	f002 fedd 	bl	800385c <vfd_leds>
				if (payload[0] == 1)
 8000aa2:	4b3a      	ldr	r3, [pc, #232]	; (8000b8c <do_buttons_and_nrf+0x31c>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d103      	bne.n	8000ab2 <do_buttons_and_nrf+0x242>
					vfd_put_string("PB1 T/OUT");
 8000aaa:	4840      	ldr	r0, [pc, #256]	; (8000bac <do_buttons_and_nrf+0x33c>)
 8000aac:	f002 fd5c 	bl	8003568 <vfd_put_string>
 8000ab0:	e002      	b.n	8000ab8 <do_buttons_and_nrf+0x248>
				else
					vfd_put_string("PB2 T/OUT");
 8000ab2:	483f      	ldr	r0, [pc, #252]	; (8000bb0 <do_buttons_and_nrf+0x340>)
 8000ab4:	f002 fd58 	bl	8003568 <vfd_put_string>
				vfd_update();
 8000ab8:	f002 fea8 	bl	800380c <vfd_update>
				nrf24l01p_flush_tx();
 8000abc:	f002 fab1 	bl	8003022 <nrf24l01p_flush_tx>
				while(PB1||PB2);
 8000ac0:	bf00      	nop
 8000ac2:	2102      	movs	r1, #2
 8000ac4:	482f      	ldr	r0, [pc, #188]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000ac6:	f003 fa69 	bl	8003f9c <HAL_GPIO_ReadPin>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1f8      	bne.n	8000ac2 <do_buttons_and_nrf+0x252>
 8000ad0:	2104      	movs	r1, #4
 8000ad2:	482c      	ldr	r0, [pc, #176]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000ad4:	f003 fa62 	bl	8003f9c <HAL_GPIO_ReadPin>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1f1      	bne.n	8000ac2 <do_buttons_and_nrf+0x252>
				break;
			}

		} while (1);
		return true; // we where active
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e047      	b.n	8000b72 <do_buttons_and_nrf+0x302>
	}
	else
	{
		// we need to receive
		if (set_rx)
 8000ae2:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <do_buttons_and_nrf+0x310>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d00a      	beq.n	8000b00 <do_buttons_and_nrf+0x290>
		{
			set_rx = false;
 8000aea:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <do_buttons_and_nrf+0x310>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]
			nrf_init_rx(address);
 8000af0:	4825      	ldr	r0, [pc, #148]	; (8000b88 <do_buttons_and_nrf+0x318>)
 8000af2:	f7ff fc1f 	bl	8000334 <nrf_init_rx>
			HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 1);
 8000af6:	2201      	movs	r2, #1
 8000af8:	2101      	movs	r1, #1
 8000afa:	4822      	ldr	r0, [pc, #136]	; (8000b84 <do_buttons_and_nrf+0x314>)
 8000afc:	f003 fa65 	bl	8003fca <HAL_GPIO_WritePin>
		}

		if (nrf24l01p_get_irq_flags() & (1 << NRF24L01P_IRQ_RX_DR))
 8000b00:	f002 f8b4 	bl	8002c6c <nrf24l01p_get_irq_flags>
 8000b04:	4603      	mov	r3, r0
 8000b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d030      	beq.n	8000b70 <do_buttons_and_nrf+0x300>
		{
			nrf24l01p_clear_irq_flag(NRF24L01P_IRQ_RX_DR);
 8000b0e:	2006      	movs	r0, #6
 8000b10:	f002 f89a 	bl	8002c48 <nrf24l01p_clear_irq_flag>

			uint8_t payload[NRF_PAYLOAD_LENGTH];

			while (!nrf24l01p_rx_fifo_empty())
 8000b14:	e003      	b.n	8000b1e <do_buttons_and_nrf+0x2ae>
				nrf24l01p_read_rx_payload(payload);
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f002 fa75 	bl	8003008 <nrf24l01p_read_rx_payload>
			while (!nrf24l01p_rx_fifo_empty())
 8000b1e:	f002 fa26 	bl	8002f6e <nrf24l01p_rx_fifo_empty>
 8000b22:	4603      	mov	r3, r0
 8000b24:	f083 0301 	eor.w	r3, r3, #1
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1f3      	bne.n	8000b16 <do_buttons_and_nrf+0x2a6>

			if (payload[0] == 1)
 8000b2e:	793b      	ldrb	r3, [r7, #4]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d10c      	bne.n	8000b4e <do_buttons_and_nrf+0x2de>
			{
				vfd_leds(0b0101);
 8000b34:	2005      	movs	r0, #5
 8000b36:	f002 fe91 	bl	800385c <vfd_leds>
				vfd_put_string("* RX PB1 *");
 8000b3a:	481e      	ldr	r0, [pc, #120]	; (8000bb4 <do_buttons_and_nrf+0x344>)
 8000b3c:	f002 fd14 	bl	8003568 <vfd_put_string>
				vfd_set_symbols(VFD_SYM_ARROW_LEFT);
 8000b40:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000b44:	f002 fd96 	bl	8003674 <vfd_set_symbols>
				vfd_update();
 8000b48:	f002 fe60 	bl	800380c <vfd_update>
 8000b4c:	e00e      	b.n	8000b6c <do_buttons_and_nrf+0x2fc>
			}
			else if (payload[0] == 2)
 8000b4e:	793b      	ldrb	r3, [r7, #4]
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d10b      	bne.n	8000b6c <do_buttons_and_nrf+0x2fc>
			{
				vfd_leds(0b0110);
 8000b54:	2006      	movs	r0, #6
 8000b56:	f002 fe81 	bl	800385c <vfd_leds>
				vfd_put_string("* RX PB2 *");
 8000b5a:	4817      	ldr	r0, [pc, #92]	; (8000bb8 <do_buttons_and_nrf+0x348>)
 8000b5c:	f002 fd04 	bl	8003568 <vfd_put_string>
				vfd_set_symbols(VFD_SYM_ARROW_RIGHT);
 8000b60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b64:	f002 fd86 	bl	8003674 <vfd_set_symbols>
				vfd_update();
 8000b68:	f002 fe50 	bl	800380c <vfd_update>
			}
			return true; // we have something received
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e000      	b.n	8000b72 <do_buttons_and_nrf+0x302>
		}
		else
		{
			// no buttons pressed and nothing received
			return false;
 8000b70:	2300      	movs	r3, #0
		}
	}
	return false;
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	371c      	adds	r7, #28
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd90      	pop	{r4, r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200001bc 	.word	0x200001bc
 8000b80:	20000005 	.word	0x20000005
 8000b84:	40010c00 	.word	0x40010c00
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	200001c0 	.word	0x200001c0
 8000b90:	0800c740 	.word	0x0800c740
 8000b94:	0800c744 	.word	0x0800c744
 8000b98:	0800c748 	.word	0x0800c748
 8000b9c:	0800c750 	.word	0x0800c750
 8000ba0:	0800c758 	.word	0x0800c758
 8000ba4:	0800c764 	.word	0x0800c764
 8000ba8:	0800c770 	.word	0x0800c770
 8000bac:	0800c778 	.word	0x0800c778
 8000bb0:	0800c784 	.word	0x0800c784
 8000bb4:	0800c790 	.word	0x0800c790
 8000bb8:	0800c79c 	.word	0x0800c79c

08000bbc <do_microrl>:

void do_microrl(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
	while (!fifo_is_empty())
 8000bc2:	e007      	b.n	8000bd4 <do_microrl+0x18>
	{
		uint8_t buf = fifo_pop();
 8000bc4:	f7ff fafc 	bl	80001c0 <fifo_pop>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	71fb      	strb	r3, [r7, #7]
		microrl_print_char(buf);
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fc4e 	bl	8002470 <microrl_print_char>
	while (!fifo_is_empty())
 8000bd4:	f7ff fb18 	bl	8000208 <fifo_is_empty>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	f083 0301 	eor.w	r3, r3, #1
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1ef      	bne.n	8000bc4 <do_microrl+0x8>
	}
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <sigint>:

void sigint(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
	print (ENDL);
 8000bf6:	4819      	ldr	r0, [pc, #100]	; (8000c5c <sigint+0x6c>)
 8000bf8:	f001 fc4c 	bl	8002494 <print>
	print ("^C catched!");
 8000bfc:	4818      	ldr	r0, [pc, #96]	; (8000c60 <sigint+0x70>)
 8000bfe:	f001 fc49 	bl	8002494 <print>
	do_nrf_scan(-1);
 8000c02:	f04f 30ff 	mov.w	r0, #4294967295
 8000c06:	f000 f82f 	bl	8000c68 <do_nrf_scan>
	active();
 8000c0a:	f7ff fb2f 	bl	800026c <active>
	vfd_put_string("CTRL + C");
 8000c0e:	4815      	ldr	r0, [pc, #84]	; (8000c64 <sigint+0x74>)
 8000c10:	f002 fcaa 	bl	8003568 <vfd_put_string>
	vfd_set_symbols(VFD_SYM_DCC);
 8000c14:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000c18:	f002 fd2c 	bl	8003674 <vfd_set_symbols>
	vfd_update();
 8000c1c:	f002 fdf6 	bl	800380c <vfd_update>
	HAL_Delay(1000);
 8000c20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c24:	f002 ff04 	bl	8003a30 <HAL_Delay>
	vfd_clr_symbols(VFD_SYM_DCC);
 8000c28:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000c2c:	f002 fd7a 	bl	8003724 <vfd_clr_symbols>
	vfd_update();
 8000c30:	f002 fdec 	bl	800380c <vfd_update>

	// emulate ENTER input to print the promptexecute
	char * p = ENDL;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <sigint+0x6c>)
 8000c36:	607b      	str	r3, [r7, #4]
	while(*p) fifo_push(*(p++));
 8000c38:	e006      	b.n	8000c48 <sigint+0x58>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	1c5a      	adds	r2, r3, #1
 8000c3e:	607a      	str	r2, [r7, #4]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fa94 	bl	8000170 <fifo_push>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d1f4      	bne.n	8000c3a <sigint+0x4a>
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	0800c7a8 	.word	0x0800c7a8
 8000c60:	0800c7ac 	.word	0x0800c7ac
 8000c64:	0800c7b8 	.word	0x0800c7b8

08000c68 <do_nrf_scan>:


bool do_nrf_scan(int8_t command)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0a6      	sub	sp, #152	; 0x98
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
	static bool active = false;
	static uint8_t arr[NRF24L01P_CHANNELS_COUNT] = {0};

	if (command == -1)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c7a:	d102      	bne.n	8000c82 <do_nrf_scan+0x1a>
	{
		active = false;
 8000c7c:	4b68      	ldr	r3, [pc, #416]	; (8000e20 <do_nrf_scan+0x1b8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
	}
	if (command == 1)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d11b      	bne.n	8000cc2 <do_nrf_scan+0x5a>
	{
		memset(arr, 0, NRF24L01P_CHANNELS_COUNT);
 8000c8a:	227e      	movs	r2, #126	; 0x7e
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4865      	ldr	r0, [pc, #404]	; (8000e24 <do_nrf_scan+0x1bc>)
 8000c90:	f00b fd02 	bl	800c698 <memset>
		print("0000000000000000111111111111111122222222222222223333333333333333");
 8000c94:	4864      	ldr	r0, [pc, #400]	; (8000e28 <do_nrf_scan+0x1c0>)
 8000c96:	f001 fbfd 	bl	8002494 <print>
		print("44444444444444445555555555555555666666666666666677777777777777");
 8000c9a:	4864      	ldr	r0, [pc, #400]	; (8000e2c <do_nrf_scan+0x1c4>)
 8000c9c:	f001 fbfa 	bl	8002494 <print>
		print(ENDL);
 8000ca0:	4863      	ldr	r0, [pc, #396]	; (8000e30 <do_nrf_scan+0x1c8>)
 8000ca2:	f001 fbf7 	bl	8002494 <print>
		print("0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef");
 8000ca6:	4863      	ldr	r0, [pc, #396]	; (8000e34 <do_nrf_scan+0x1cc>)
 8000ca8:	f001 fbf4 	bl	8002494 <print>
		print("0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcd");
 8000cac:	4862      	ldr	r0, [pc, #392]	; (8000e38 <do_nrf_scan+0x1d0>)
 8000cae:	f001 fbf1 	bl	8002494 <print>
		print(ENDL);
 8000cb2:	485f      	ldr	r0, [pc, #380]	; (8000e30 <do_nrf_scan+0x1c8>)
 8000cb4:	f001 fbee 	bl	8002494 <print>
		active = true;
 8000cb8:	4b59      	ldr	r3, [pc, #356]	; (8000e20 <do_nrf_scan+0x1b8>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
		return false;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e0a9      	b.n	8000e16 <do_nrf_scan+0x1ae>
	}
	if (!active)
 8000cc2:	4b57      	ldr	r3, [pc, #348]	; (8000e20 <do_nrf_scan+0x1b8>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	f083 0301 	eor.w	r3, r3, #1
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <do_nrf_scan+0x6c>
		return false;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	e0a0      	b.n	8000e16 <do_nrf_scan+0x1ae>

	HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin,0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4858      	ldr	r0, [pc, #352]	; (8000e3c <do_nrf_scan+0x1d4>)
 8000cda:	f003 f976 	bl	8003fca <HAL_GPIO_WritePin>
	nrf24l01p_get_clear_irq_flags();
 8000cde:	f001 ffa7 	bl	8002c30 <nrf24l01p_get_clear_irq_flags>
    nrf24l01p_close_pipe(NRF24L01P_ALL);
 8000ce2:	20ff      	movs	r0, #255	; 0xff
 8000ce4:	f002 f83e 	bl	8002d64 <nrf24l01p_close_pipe>
    nrf24l01p_open_pipe(NRF24L01P_PIPE0, false);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2000      	movs	r0, #0
 8000cec:	f001 ffe3 	bl	8002cb6 <nrf24l01p_open_pipe>
    uint8_t add[] = {0x05, 0xA5, 0x55, 0xA5, 0x50};
 8000cf0:	4a53      	ldr	r2, [pc, #332]	; (8000e40 <do_nrf_scan+0x1d8>)
 8000cf2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000cf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cfa:	6018      	str	r0, [r3, #0]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	7019      	strb	r1, [r3, #0]
    nrf24l01p_set_address(NRF24L01P_PIPE0, add);
 8000d00:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d04:	4619      	mov	r1, r3
 8000d06:	2000      	movs	r0, #0
 8000d08:	f002 f86e 	bl	8002de8 <nrf24l01p_set_address>
    nrf24l01p_set_operation_mode(NRF24L01P_PRX);
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f002 f8e3 	bl	8002ed8 <nrf24l01p_set_operation_mode>
    nrf24l01p_set_rx_payload_width(NRF24L01P_PIPE0, NRF_PAYLOAD_LENGTH);
 8000d12:	210a      	movs	r1, #10
 8000d14:	2000      	movs	r0, #0
 8000d16:	f002 f8c1 	bl	8002e9c <nrf24l01p_set_rx_payload_width>
    nrf24l01p_set_power_mode(NRF24L01P_PWR_UP);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f002 f8fb 	bl	8002f16 <nrf24l01p_set_power_mode>
    delay(NRF_POWER_UP_DELAY);
 8000d20:	2002      	movs	r0, #2
 8000d22:	f7ff fac9 	bl	80002b8 <delay>

	for (int i = 0; i < NRF24L01P_CHANNELS_COUNT; i++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000d2c:	e031      	b.n	8000d92 <do_nrf_scan+0x12a>
	{
	    nrf24l01p_set_rf_channel(i);
 8000d2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	4618      	mov	r0, r3
 8000d36:	f002 f90c 	bl	8002f52 <nrf24l01p_set_rf_channel>
		HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin,1);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	483f      	ldr	r0, [pc, #252]	; (8000e3c <do_nrf_scan+0x1d4>)
 8000d40:	f003 f943 	bl	8003fca <HAL_GPIO_WritePin>
		delay_us(5000);
 8000d44:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d48:	f7ff fa9c 	bl	8000284 <delay_us>
		HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin,0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2101      	movs	r1, #1
 8000d50:	483a      	ldr	r0, [pc, #232]	; (8000e3c <do_nrf_scan+0x1d4>)
 8000d52:	f003 f93a 	bl	8003fca <HAL_GPIO_WritePin>
		if (nrf24l01p_get_carrier_detect())
 8000d56:	f002 f916 	bl	8002f86 <nrf24l01p_get_carrier_detect>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d013      	beq.n	8000d88 <do_nrf_scan+0x120>
			if (arr[i] < 250)
 8000d60:	4a30      	ldr	r2, [pc, #192]	; (8000e24 <do_nrf_scan+0x1bc>)
 8000d62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000d66:	4413      	add	r3, r2
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2bf9      	cmp	r3, #249	; 0xf9
 8000d6c:	d80c      	bhi.n	8000d88 <do_nrf_scan+0x120>
				arr[i]++;
 8000d6e:	4a2d      	ldr	r2, [pc, #180]	; (8000e24 <do_nrf_scan+0x1bc>)
 8000d70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000d74:	4413      	add	r3, r2
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	b2d9      	uxtb	r1, r3
 8000d7c:	4a29      	ldr	r2, [pc, #164]	; (8000e24 <do_nrf_scan+0x1bc>)
 8000d7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000d82:	4413      	add	r3, r2
 8000d84:	460a      	mov	r2, r1
 8000d86:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NRF24L01P_CHANNELS_COUNT; i++)
 8000d88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000d92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000d96:	2b7d      	cmp	r3, #125	; 0x7d
 8000d98:	ddc9      	ble.n	8000d2e <do_nrf_scan+0xc6>
	}
	uint8_t packet[NRF24L01P_CHANNELS_COUNT + 1] = {0};
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	227b      	movs	r2, #123	; 0x7b
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f00b fc76 	bl	800c698 <memset>
	for (int i = 0; i < NRF24L01P_CHANNELS_COUNT; i++)
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000db2:	e020      	b.n	8000df6 <do_nrf_scan+0x18e>
	{
		packet[i] = (arr[i] < 0xf?arr[i]:0xf) + ((arr[i] < 10)?'0':('a' - 0xa));
 8000db4:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <do_nrf_scan+0x1bc>)
 8000db6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000dba:	4413      	add	r3, r2
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b0f      	cmp	r3, #15
 8000dc0:	bf28      	it	cs
 8000dc2:	230f      	movcs	r3, #15
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	4917      	ldr	r1, [pc, #92]	; (8000e24 <do_nrf_scan+0x1bc>)
 8000dc8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000dcc:	440a      	add	r2, r1
 8000dce:	7812      	ldrb	r2, [r2, #0]
 8000dd0:	2a09      	cmp	r2, #9
 8000dd2:	d801      	bhi.n	8000dd8 <do_nrf_scan+0x170>
 8000dd4:	2230      	movs	r2, #48	; 0x30
 8000dd6:	e000      	b.n	8000dda <do_nrf_scan+0x172>
 8000dd8:	2257      	movs	r2, #87	; 0x57
 8000dda:	4413      	add	r3, r2
 8000ddc:	b2d9      	uxtb	r1, r3
 8000dde:	f107 0208 	add.w	r2, r7, #8
 8000de2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000de6:	4413      	add	r3, r2
 8000de8:	460a      	mov	r2, r1
 8000dea:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NRF24L01P_CHANNELS_COUNT; i++)
 8000dec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000df0:	3301      	adds	r3, #1
 8000df2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000df6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000dfa:	2b7d      	cmp	r3, #125	; 0x7d
 8000dfc:	ddda      	ble.n	8000db4 <do_nrf_scan+0x14c>
	}
	print((char *)packet);
 8000dfe:	f107 0308 	add.w	r3, r7, #8
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 fb46 	bl	8002494 <print>
	print(ENDL);
 8000e08:	4809      	ldr	r0, [pc, #36]	; (8000e30 <do_nrf_scan+0x1c8>)
 8000e0a:	f001 fb43 	bl	8002494 <print>
	HAL_Delay(100);
 8000e0e:	2064      	movs	r0, #100	; 0x64
 8000e10:	f002 fe0e 	bl	8003a30 <HAL_Delay>
	return true;
 8000e14:	2301      	movs	r3, #1
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3798      	adds	r7, #152	; 0x98
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200001ca 	.word	0x200001ca
 8000e24:	200001cc 	.word	0x200001cc
 8000e28:	0800c7c4 	.word	0x0800c7c4
 8000e2c:	0800c808 	.word	0x0800c808
 8000e30:	0800c7a8 	.word	0x0800c7a8
 8000e34:	0800c848 	.word	0x0800c848
 8000e38:	0800c88c 	.word	0x0800c88c
 8000e3c:	40010c00 	.word	0x40010c00
 8000e40:	0800c8cc 	.word	0x0800c8cc

08000e44 <nrf_scan>:

int nrf_scan (int argc, const char * const * argv)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
	vfd_put_string("NRF SCAN");
 8000e4e:	4807      	ldr	r0, [pc, #28]	; (8000e6c <nrf_scan+0x28>)
 8000e50:	f002 fb8a 	bl	8003568 <vfd_put_string>
	do_nrf_scan(1);
 8000e54:	2001      	movs	r0, #1
 8000e56:	f7ff ff07 	bl	8000c68 <do_nrf_scan>
	vfd_update();
 8000e5a:	f002 fcd7 	bl	800380c <vfd_update>
	active();
 8000e5e:	f7ff fa05 	bl	800026c <active>
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	0800c8d4 	.word	0x0800c8d4

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e76:	f002 fd79 	bl	800396c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7a:	f000 f8bd 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7e:	f000 f9d5 	bl	800122c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000e82:	f000 f943 	bl	800110c <MX_SPI2_Init>
  MX_I2C1_Init();
 8000e86:	f000 f913 	bl	80010b0 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000e8a:	f00a ff0b 	bl	800bca4 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000e8e:	f000 f973 	bl	8001178 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_SPI_ENABLE(&hspi2);
 8000e92:	4b50      	ldr	r3, [pc, #320]	; (8000fd4 <main+0x164>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b4e      	ldr	r3, [pc, #312]	; (8000fd4 <main+0x164>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ea0:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim1);
 8000ea2:	484d      	ldr	r0, [pc, #308]	; (8000fd8 <main+0x168>)
 8000ea4:	f006 fe9e 	bl	8007be4 <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, 1);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eae:	484b      	ldr	r0, [pc, #300]	; (8000fdc <main+0x16c>)
 8000eb0:	f003 f88b 	bl	8003fca <HAL_GPIO_WritePin>
  init_microrl(); // we are ready for microrl!
 8000eb4:	f001 fe12 	bl	8002adc <init_microrl>

  uint8_t test;
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f7ff fa67 	bl	800038c <nrf24l01p_spi_ss>

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec4:	4846      	ldr	r0, [pc, #280]	; (8000fe0 <main+0x170>)
 8000ec6:	f003 f880 	bl	8003fca <HAL_GPIO_WritePin>

  do_vfd_init();
 8000eca:	f7ff fac3 	bl	8000454 <do_vfd_init>

  test = nrf24l01p_nop();
 8000ece:	f002 f8b0 	bl	8003032 <nrf24l01p_nop>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]
  if ((test&0b1110) == 0b1110)
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	f003 030e 	and.w	r3, r3, #14
 8000edc:	2b0e      	cmp	r3, #14
 8000ede:	d107      	bne.n	8000ef0 <main+0x80>
  {
	  vfd_put_string("NRF24L01+");
 8000ee0:	4840      	ldr	r0, [pc, #256]	; (8000fe4 <main+0x174>)
 8000ee2:	f002 fb41 	bl	8003568 <vfd_put_string>
	  vfd_set_symbols(VFD_SYM_DOLBY);
 8000ee6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000eea:	f002 fbc3 	bl	8003674 <vfd_set_symbols>
 8000eee:	e002      	b.n	8000ef6 <main+0x86>
  }
  else
  {
	  vfd_put_string("VFD FV651G");
 8000ef0:	483d      	ldr	r0, [pc, #244]	; (8000fe8 <main+0x178>)
 8000ef2:	f002 fb39 	bl	8003568 <vfd_put_string>
  }
  vfd_update();
 8000ef6:	f002 fc89 	bl	800380c <vfd_update>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  last_active_time = HAL_GetTick();
 8000efa:	f002 fd8f 	bl	8003a1c <HAL_GetTick>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4a3a      	ldr	r2, [pc, #232]	; (8000fec <main+0x17c>)
 8000f02:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  do_led();
 8000f04:	f7ff fb5c 	bl	80005c0 <do_led>
	  do_fram_test();
 8000f08:	f7ff fba6 	bl	8000658 <do_fram_test>
	  do_microrl();
 8000f0c:	f7ff fe56 	bl	8000bbc <do_microrl>
	  if (do_nrf_scan(0) || do_buttons_and_nrf())
 8000f10:	2000      	movs	r0, #0
 8000f12:	f7ff fea9 	bl	8000c68 <do_nrf_scan>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d104      	bne.n	8000f26 <main+0xb6>
 8000f1c:	f7ff fca8 	bl	8000870 <do_buttons_and_nrf>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d004      	beq.n	8000f30 <main+0xc0>
		  last_active_time = HAL_GetTick();
 8000f26:	f002 fd79 	bl	8003a1c <HAL_GetTick>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	4a2f      	ldr	r2, [pc, #188]	; (8000fec <main+0x17c>)
 8000f2e:	6013      	str	r3, [r2, #0]

	  // disable if inactive

	  if (HAL_GetTick() - last_active_time > 200)
 8000f30:	f002 fd74 	bl	8003a1c <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <main+0x17c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2bc8      	cmp	r3, #200	; 0xc8
 8000f3e:	d90c      	bls.n	8000f5a <main+0xea>
	  {
		  vfd_leds(0);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f002 fc8b 	bl	800385c <vfd_leds>
		  vfd_clr_symbols(VFD_SYM_ARROW_LEFT);
 8000f46:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000f4a:	f002 fbeb 	bl	8003724 <vfd_clr_symbols>
		  vfd_clr_symbols(VFD_SYM_ARROW_RIGHT);
 8000f4e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f52:	f002 fbe7 	bl	8003724 <vfd_clr_symbols>
		  vfd_update();
 8000f56:	f002 fc59 	bl	800380c <vfd_update>
	  }

	  if (HAL_GetTick() - last_active_time > 10000)
 8000f5a:	f002 fd5f 	bl	8003a1c <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	4b22      	ldr	r3, [pc, #136]	; (8000fec <main+0x17c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d905      	bls.n	8000f7a <main+0x10a>
		  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2120      	movs	r1, #32
 8000f72:	481f      	ldr	r0, [pc, #124]	; (8000ff0 <main+0x180>)
 8000f74:	f003 f829 	bl	8003fca <HAL_GPIO_WritePin>
 8000f78:	e7c4      	b.n	8000f04 <main+0x94>
	  else
	  {
		  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2120      	movs	r1, #32
 8000f7e:	481c      	ldr	r0, [pc, #112]	; (8000ff0 <main+0x180>)
 8000f80:	f003 f823 	bl	8003fca <HAL_GPIO_WritePin>
		  if (HAL_GetTick() - last_active_time > 3000)
 8000f84:	f002 fd4a 	bl	8003a1c <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <main+0x17c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d9b5      	bls.n	8000f04 <main+0x94>
		  {
			  char buf [11];
			  memset(buf, '\0', sizeof(buf));
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	220b      	movs	r2, #11
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f00b fb7a 	bl	800c698 <memset>
			  memset(buf, '_', 10-((HAL_GetTick() - last_active_time)/1000));
 8000fa4:	f002 fd3a 	bl	8003a1c <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <main+0x17c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <main+0x184>)
 8000fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb6:	099b      	lsrs	r3, r3, #6
 8000fb8:	f1c3 020a 	rsb	r2, r3, #10
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	215f      	movs	r1, #95	; 0x5f
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f00b fb69 	bl	800c698 <memset>
			  vfd_put_string(buf);
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f002 facd 	bl	8003568 <vfd_put_string>
			  vfd_update();
 8000fce:	f002 fc1d 	bl	800380c <vfd_update>
	  do_led();
 8000fd2:	e797      	b.n	8000f04 <main+0x94>
 8000fd4:	2000056c 	.word	0x2000056c
 8000fd8:	20000640 	.word	0x20000640
 8000fdc:	40010800 	.word	0x40010800
 8000fe0:	40011000 	.word	0x40011000
 8000fe4:	0800c8e0 	.word	0x0800c8e0
 8000fe8:	0800c8ec 	.word	0x0800c8ec
 8000fec:	20000618 	.word	0x20000618
 8000ff0:	40010c00 	.word	0x40010c00
 8000ff4:	10624dd3 	.word	0x10624dd3

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b094      	sub	sp, #80	; 0x50
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001002:	2228      	movs	r2, #40	; 0x28
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f00b fb46 	bl	800c698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001028:	2301      	movs	r3, #1
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800102c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001032:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001038:	2301      	movs	r3, #1
 800103a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103c:	2302      	movs	r3, #2
 800103e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001040:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001044:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001046:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800104a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001050:	4618      	mov	r0, r3
 8001052:	f005 fcb1 	bl	80069b8 <HAL_RCC_OscConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800105c:	f000 f97e 	bl	800135c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001060:	230f      	movs	r3, #15
 8001062:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001064:	2302      	movs	r3, #2
 8001066:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800106c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001070:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	2102      	movs	r1, #2
 800107c:	4618      	mov	r0, r3
 800107e:	f005 ff1b 	bl	8006eb8 <HAL_RCC_ClockConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001088:	f000 f968 	bl	800135c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800108c:	2310      	movs	r3, #16
 800108e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	4618      	mov	r0, r3
 8001098:	f006 f896 	bl	80071c8 <HAL_RCCEx_PeriphCLKConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010a2:	f000 f95b 	bl	800135c <Error_Handler>
  }
}
 80010a6:	bf00      	nop
 80010a8:	3750      	adds	r7, #80	; 0x50
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <MX_I2C1_Init+0x50>)
 80010b6:	4a13      	ldr	r2, [pc, #76]	; (8001104 <MX_I2C1_Init+0x54>)
 80010b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_I2C1_Init+0x50>)
 80010bc:	4a12      	ldr	r2, [pc, #72]	; (8001108 <MX_I2C1_Init+0x58>)
 80010be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_I2C1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_I2C1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_I2C1_Init+0x50>)
 80010ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <MX_I2C1_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_I2C1_Init+0x50>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <MX_I2C1_Init+0x50>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_I2C1_Init+0x50>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <MX_I2C1_Init+0x50>)
 80010ee:	f002 ff9d 	bl	800402c <HAL_I2C_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010f8:	f000 f930 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200005c4 	.word	0x200005c4
 8001104:	40005400 	.word	0x40005400
 8001108:	000186a0 	.word	0x000186a0

0800110c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_SPI2_Init+0x64>)
 8001112:	4a18      	ldr	r2, [pc, #96]	; (8001174 <MX_SPI2_Init+0x68>)
 8001114:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <MX_SPI2_Init+0x64>)
 8001118:	f44f 7282 	mov.w	r2, #260	; 0x104
 800111c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_SPI2_Init+0x64>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <MX_SPI2_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_SPI2_Init+0x64>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_SPI2_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_SPI2_Init+0x64>)
 8001138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800113c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_SPI2_Init+0x64>)
 8001140:	2218      	movs	r2, #24
 8001142:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <MX_SPI2_Init+0x64>)
 8001146:	2280      	movs	r2, #128	; 0x80
 8001148:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_SPI2_Init+0x64>)
 800114c:	2200      	movs	r2, #0
 800114e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <MX_SPI2_Init+0x64>)
 8001152:	2200      	movs	r2, #0
 8001154:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_SPI2_Init+0x64>)
 8001158:	220a      	movs	r2, #10
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <MX_SPI2_Init+0x64>)
 800115e:	f006 f8e9 	bl	8007334 <HAL_SPI_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001168:	f000 f8f8 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2000056c 	.word	0x2000056c
 8001174:	40003800 	.word	0x40003800

08001178 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118c:	463b      	mov	r3, r7
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001194:	4b22      	ldr	r3, [pc, #136]	; (8001220 <MX_TIM1_Init+0xa8>)
 8001196:	4a23      	ldr	r2, [pc, #140]	; (8001224 <MX_TIM1_Init+0xac>)
 8001198:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = HAL_RCC_GetSysClockFreq()/1000000-1;
 800119a:	f005 ff77 	bl	800708c <HAL_RCC_GetSysClockFreq>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a21      	ldr	r2, [pc, #132]	; (8001228 <MX_TIM1_Init+0xb0>)
 80011a2:	fba2 2303 	umull	r2, r3, r2, r3
 80011a6:	0c9b      	lsrs	r3, r3, #18
 80011a8:	3b01      	subs	r3, #1
 80011aa:	4a1d      	ldr	r2, [pc, #116]	; (8001220 <MX_TIM1_Init+0xa8>)
 80011ac:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ae:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <MX_TIM1_Init+0xa8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_TIM1_Init+0xa8>)
 80011b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_TIM1_Init+0xa8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_TIM1_Init+0xa8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <MX_TIM1_Init+0xa8>)
 80011ca:	2280      	movs	r2, #128	; 0x80
 80011cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ce:	4814      	ldr	r0, [pc, #80]	; (8001220 <MX_TIM1_Init+0xa8>)
 80011d0:	f006 fcb8 	bl	8007b44 <HAL_TIM_Base_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80011da:	f000 f8bf 	bl	800135c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	4619      	mov	r1, r3
 80011ea:	480d      	ldr	r0, [pc, #52]	; (8001220 <MX_TIM1_Init+0xa8>)
 80011ec:	f006 fd44 	bl	8007c78 <HAL_TIM_ConfigClockSource>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80011f6:	f000 f8b1 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001202:	463b      	mov	r3, r7
 8001204:	4619      	mov	r1, r3
 8001206:	4806      	ldr	r0, [pc, #24]	; (8001220 <MX_TIM1_Init+0xa8>)
 8001208:	f006 fef2 	bl	8007ff0 <HAL_TIMEx_MasterConfigSynchronization>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001212:	f000 f8a3 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000640 	.word	0x20000640
 8001224:	40012c00 	.word	0x40012c00
 8001228:	431bde83 	.word	0x431bde83

0800122c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001240:	4b42      	ldr	r3, [pc, #264]	; (800134c <MX_GPIO_Init+0x120>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a41      	ldr	r2, [pc, #260]	; (800134c <MX_GPIO_Init+0x120>)
 8001246:	f043 0310 	orr.w	r3, r3, #16
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b3f      	ldr	r3, [pc, #252]	; (800134c <MX_GPIO_Init+0x120>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 0310 	and.w	r3, r3, #16
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001258:	4b3c      	ldr	r3, [pc, #240]	; (800134c <MX_GPIO_Init+0x120>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a3b      	ldr	r2, [pc, #236]	; (800134c <MX_GPIO_Init+0x120>)
 800125e:	f043 0320 	orr.w	r3, r3, #32
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b39      	ldr	r3, [pc, #228]	; (800134c <MX_GPIO_Init+0x120>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0320 	and.w	r3, r3, #32
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	4b36      	ldr	r3, [pc, #216]	; (800134c <MX_GPIO_Init+0x120>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a35      	ldr	r2, [pc, #212]	; (800134c <MX_GPIO_Init+0x120>)
 8001276:	f043 0308 	orr.w	r3, r3, #8
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b33      	ldr	r3, [pc, #204]	; (800134c <MX_GPIO_Init+0x120>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b30      	ldr	r3, [pc, #192]	; (800134c <MX_GPIO_Init+0x120>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a2f      	ldr	r2, [pc, #188]	; (800134c <MX_GPIO_Init+0x120>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b2d      	ldr	r3, [pc, #180]	; (800134c <MX_GPIO_Init+0x120>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a6:	482a      	ldr	r0, [pc, #168]	; (8001350 <MX_GPIO_Init+0x124>)
 80012a8:	f002 fe8f 	bl	8003fca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|SPI2_nRF_CSn_Pin|HV_EN_Pin, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	f241 0121 	movw	r1, #4129	; 0x1021
 80012b2:	4828      	ldr	r0, [pc, #160]	; (8001354 <MX_GPIO_Init+0x128>)
 80012b4:	f002 fe89 	bl	8003fca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012be:	4826      	ldr	r0, [pc, #152]	; (8001358 <MX_GPIO_Init+0x12c>)
 80012c0:	f002 fe83 	bl	8003fca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ca:	4822      	ldr	r0, [pc, #136]	; (8001354 <MX_GPIO_Init+0x128>)
 80012cc:	f002 fe7d 	bl	8003fca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2302      	movs	r3, #2
 80012e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	4619      	mov	r1, r3
 80012e8:	4819      	ldr	r0, [pc, #100]	; (8001350 <MX_GPIO_Init+0x124>)
 80012ea:	f002 fcd3 	bl	8003c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : nRF_CE_Pin SPI2_nRF_CSn_Pin HV_EN_Pin PT6315_STB_Pin */
  GPIO_InitStruct.Pin = nRF_CE_Pin|SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 80012ee:	f241 1321 	movw	r3, #4385	; 0x1121
 80012f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	4619      	mov	r1, r3
 8001306:	4813      	ldr	r0, [pc, #76]	; (8001354 <MX_GPIO_Init+0x128>)
 8001308:	f002 fcc4 	bl	8003c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1_Pin PB2_Pin */
  GPIO_InitStruct.Pin = PB1_Pin|PB2_Pin;
 800130c:	2306      	movs	r3, #6
 800130e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	4619      	mov	r1, r3
 800131e:	480d      	ldr	r0, [pc, #52]	; (8001354 <MX_GPIO_Init+0x128>)
 8001320:	f002 fcb8 	bl	8003c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PU_Pin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8001324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2302      	movs	r3, #2
 8001334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	4619      	mov	r1, r3
 800133c:	4806      	ldr	r0, [pc, #24]	; (8001358 <MX_GPIO_Init+0x12c>)
 800133e:	f002 fca9 	bl	8003c94 <HAL_GPIO_Init>

}
 8001342:	bf00      	nop
 8001344:	3720      	adds	r7, #32
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000
 8001350:	40011000 	.word	0x40011000
 8001354:	40010c00 	.word	0x40010c00
 8001358:	40010800 	.word	0x40010800

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001364:	e7fe      	b.n	8001364 <Error_Handler+0x8>

08001366 <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 8001366:	b480      	push	{r7}
 8001368:	b085      	sub	sp, #20
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	5c8a      	ldrb	r2, [r1, r2]
 800137a:	4413      	add	r3, r2
 800137c:	3301      	adds	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b3f      	cmp	r3, #63	; 0x3f
 8001384:	dd02      	ble.n	800138c <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3b40      	subs	r3, #64	; 0x40
 800138a:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	5cd3      	ldrb	r3, [r2, r3]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <hist_is_space_for_new+0x1a>
		return true;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e01e      	b.n	80013f4 <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	429a      	cmp	r2, r3
 80013c0:	db0c      	blt.n	80013dc <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4413      	add	r3, r2
 80013d0:	3b01      	subs	r3, #1
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	da0c      	bge.n	80013f2 <hist_is_space_for_new+0x56>
			return true;
 80013d8:	2301      	movs	r3, #1
 80013da:	e00b      	b.n	80013f4 <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	3b01      	subs	r3, #1
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	da01      	bge.n	80013f2 <hist_is_space_for_new+0x56>
			return true;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <hist_is_space_for_new+0x58>
	}
	return false;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b086      	sub	sp, #24
 8001402:	af00      	add	r7, sp, #0
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b3e      	cmp	r3, #62	; 0x3e
 800140e:	dc61      	bgt.n	80014d4 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8001410:	e002      	b.n	8001418 <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f7ff ffa7 	bl	8001366 <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f7ff ffbe 	bl	800139c <hist_is_space_for_new>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f5      	beq.n	8001412 <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	5cd3      	ldrb	r3, [r2, r3]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d105      	bne.n	800143e <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	b2d1      	uxtb	r1, r2
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	429a      	cmp	r2, r3
 800144a:	da0a      	bge.n	8001462 <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	3301      	adds	r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	4618      	mov	r0, r3
 800145c:	f00b f8f4 	bl	800c648 <memcpy>
 8001460:	e018      	b.n	8001494 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800146a:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	3301      	adds	r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	4618      	mov	r0, r3
 800147c:	f00b f8e4 	bl	800c648 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	18d1      	adds	r1, r2, r3
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	461a      	mov	r2, r3
 8001490:	f00b f8da 	bl	800c648 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	b2d1      	uxtb	r1, r2
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4413      	add	r3, r2
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	2b3f      	cmp	r3, #63	; 0x3f
 80014b4:	dd05      	ble.n	80014c2 <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	2100      	movs	r1, #0
 80014ca:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	649a      	str	r2, [r3, #72]	; 0x48
 80014d2:	e000      	b.n	80014d6 <hist_save_line+0xd8>
		return;
 80014d4:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	; 0x30
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 80014f2:	e010      	b.n	8001516 <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f8:	4413      	add	r3, r2
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	3301      	adds	r3, #1
 80014fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001500:	4413      	add	r3, r2
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001506:	2b3f      	cmp	r3, #63	; 0x3f
 8001508:	dd02      	ble.n	8001510 <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 800150a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150c:	3b40      	subs	r3, #64	; 0x40
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8001510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001512:	3301      	adds	r3, #1
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151a:	4413      	add	r3, r2
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1e8      	bne.n	80014f4 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d176      	bne.n	8001616 <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800152e:	429a      	cmp	r2, r3
 8001530:	f2c0 80d6 	blt.w	80016e0 <hist_restore_line+0x204>
			int header = pThis->begin;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 800153e:	e010      	b.n	8001562 <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	4413      	add	r3, r2
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154c:	4413      	add	r3, r2
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	2b3f      	cmp	r3, #63	; 0x3f
 8001554:	dd02      	ble.n	800155c <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	3b40      	subs	r3, #64	; 0x40
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	3301      	adds	r3, #1
 8001560:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	4413      	add	r3, r2
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <hist_restore_line+0xa2>
 800156e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	1e5a      	subs	r2, r3, #1
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157a:	429a      	cmp	r2, r3
 800157c:	d1e0      	bne.n	8001540 <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	4413      	add	r3, r2
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 80aa 	beq.w	80016e0 <hist_restore_line+0x204>
					pThis->cur++;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	4413      	add	r3, r2
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	4413      	add	r3, r2
 80015a4:	2b3f      	cmp	r3, #63	; 0x3f
 80015a6:	dc11      	bgt.n	80015cc <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 80015a8:	2265      	movs	r2, #101	; 0x65
 80015aa:	2100      	movs	r1, #0
 80015ac:	68b8      	ldr	r0, [r7, #8]
 80015ae:	f00b f873 	bl	800c698 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	3301      	adds	r3, #1
 80015b8:	18d1      	adds	r1, r2, r3
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	4413      	add	r3, r2
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	68b8      	ldr	r0, [r7, #8]
 80015c6:	f00b f83f 	bl	800c648 <memcpy>
 80015ca:	e01f      	b.n	800160c <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80015d2:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 80015d4:	2265      	movs	r2, #101	; 0x65
 80015d6:	2100      	movs	r1, #0
 80015d8:	68b8      	ldr	r0, [r7, #8]
 80015da:	f00b f85d 	bl	800c698 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	3301      	adds	r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4619      	mov	r1, r3
 80015ea:	68b8      	ldr	r0, [r7, #8]
 80015ec:	f00b f82c 	bl	800c648 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	18d0      	adds	r0, r2, r3
 80015f6:	68f9      	ldr	r1, [r7, #12]
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	4413      	add	r3, r2
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	461a      	mov	r2, r3
 8001608:	f00b f81e 	bl	800c648 <memcpy>
				}
				return pThis->ring_buf[header];
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	4413      	add	r3, r2
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	e066      	b.n	80016e4 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161a:	2b00      	cmp	r3, #0
 800161c:	dd5e      	ble.n	80016dc <hist_restore_line+0x200>
				pThis->cur--;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001622:	1e5a      	subs	r2, r3, #1
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	61fb      	str	r3, [r7, #28]
			int j = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8001632:	e010      	b.n	8001656 <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	4413      	add	r3, r2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	3301      	adds	r3, #1
 800163e:	69fa      	ldr	r2, [r7, #28]
 8001640:	4413      	add	r3, r2
 8001642:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	2b3f      	cmp	r3, #63	; 0x3f
 8001648:	dd02      	ble.n	8001650 <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3b40      	subs	r3, #64	; 0x40
 800164e:	61fb      	str	r3, [r7, #28]
				j++;
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	3301      	adds	r3, #1
 8001654:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	4413      	add	r3, r2
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d006      	beq.n	8001670 <hist_restore_line+0x194>
 8001662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	1ad2      	subs	r2, r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166c:	429a      	cmp	r2, r3
 800166e:	d1e1      	bne.n	8001634 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	4413      	add	r3, r2
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	4413      	add	r3, r2
 800167e:	2b3f      	cmp	r3, #63	; 0x3f
 8001680:	dc0c      	bgt.n	800169c <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	3301      	adds	r3, #1
 8001688:	18d1      	adds	r1, r2, r3
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	4413      	add	r3, r2
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	68b8      	ldr	r0, [r7, #8]
 8001696:	f00a ffd7 	bl	800c648 <memcpy>
 800169a:	e01a      	b.n	80016d2 <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80016a2:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3301      	adds	r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	4619      	mov	r1, r3
 80016b0:	68b8      	ldr	r0, [r7, #8]
 80016b2:	f00a ffc9 	bl	800c648 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	18d0      	adds	r0, r2, r3
 80016bc:	68f9      	ldr	r1, [r7, #12]
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	4413      	add	r3, r2
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	461a      	mov	r2, r3
 80016ce:	f00a ffbb 	bl	800c648 <memcpy>
			}
			return pThis->ring_buf[header];
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	4413      	add	r3, r2
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	e003      	b.n	80016e4 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	e001      	b.n	80016e4 <hist_restore_line+0x208>
		}
	}
	return -1;
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3730      	adds	r7, #48	; 0x30
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
	int i = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
	int ind = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8001700:	e002      	b.n	8001708 <split+0x1c>
			ind++;
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	3301      	adds	r3, #1
 8001706:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4413      	add	r3, r2
 800170e:	3354      	adds	r3, #84	; 0x54
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d103      	bne.n	800171e <split+0x32>
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	429a      	cmp	r2, r3
 800171c:	dbf1      	blt.n	8001702 <split+0x16>
		}
		if (!(ind < limit)) return i;
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	429a      	cmp	r2, r3
 8001724:	db01      	blt.n	800172a <split+0x3e>
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	e024      	b.n	8001774 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	1c58      	adds	r0, r3, #1
 8001736:	6178      	str	r0, [r7, #20]
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	4403      	add	r3, r0
 800173e:	440a      	add	r2, r1
 8001740:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	2b09      	cmp	r3, #9
 8001746:	dd05      	ble.n	8001754 <split+0x68>
			return -1;
 8001748:	f04f 33ff 	mov.w	r3, #4294967295
 800174c:	e012      	b.n	8001774 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	3301      	adds	r3, #1
 8001752:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4413      	add	r3, r2
 800175a:	3354      	adds	r3, #84	; 0x54
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <split+0x7e>
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	429a      	cmp	r2, r3
 8001768:	dbf1      	blt.n	800174e <split+0x62>
		}
		if (!(ind < limit)) return i;
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	429a      	cmp	r2, r3
 8001770:	dbca      	blt.n	8001708 <split+0x1c>
 8001772:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 8001774:	4618      	mov	r0, r3
 8001776:	371c      	adds	r7, #28
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr

0800177e <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001790:	4610      	mov	r0, r2
 8001792:	4798      	blx	r3
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80017aa:	4803      	ldr	r0, [pc, #12]	; (80017b8 <terminal_backspace+0x1c>)
 80017ac:	4798      	blx	r3
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	0800c908 	.word	0x0800c908

080017bc <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80017ca:	4803      	ldr	r0, [pc, #12]	; (80017d8 <terminal_newline+0x1c>)
 80017cc:	4798      	blx	r3
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	0800c910 	.word	0x0800c910

080017dc <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 80017dc:	b480      	push	{r7}
 80017de:	b087      	sub	sp, #28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	2300      	movs	r3, #0
 80017ec:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f8:	d235      	bcs.n	8001866 <u16bit_to_str+0x8a>
		while (nmb > 0) {
 80017fa:	e01a      	b.n	8001832 <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <u16bit_to_str+0x9c>)
 8001800:	fba3 2301 	umull	r2, r3, r3, r1
 8001804:	08da      	lsrs	r2, r3, #3
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	1aca      	subs	r2, r1, r3
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	1c59      	adds	r1, r3, #1
 8001816:	6179      	str	r1, [r7, #20]
 8001818:	3230      	adds	r2, #48	; 0x30
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	f107 0118 	add.w	r1, r7, #24
 8001820:	440b      	add	r3, r1
 8001822:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a13      	ldr	r2, [pc, #76]	; (8001878 <u16bit_to_str+0x9c>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	08db      	lsrs	r3, r3, #3
 8001830:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1e1      	bne.n	80017fc <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	e00f      	b.n	800185e <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	1e5a      	subs	r2, r3, #1
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	1c59      	adds	r1, r3, #1
 800184a:	6039      	str	r1, [r7, #0]
 800184c:	f107 0118 	add.w	r1, r7, #24
 8001850:	440a      	add	r2, r1
 8001852:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001856:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	3301      	adds	r3, #1
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	429a      	cmp	r2, r3
 8001864:	dbeb      	blt.n	800183e <u16bit_to_str+0x62>
	}
	*buf = '\0';
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
	return buf;
 800186c:	683b      	ldr	r3, [r7, #0]
}
 800186e:	4618      	mov	r0, r3
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	cccccccd 	.word	0xcccccccd

0800187c <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	f107 0310 	add.w	r3, r7, #16
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 8001896:	f107 030c 	add.w	r3, r7, #12
 800189a:	4a1d      	ldr	r2, [pc, #116]	; (8001910 <terminal_move_cursor+0x94>)
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	4611      	mov	r1, r2
 80018a0:	8019      	strh	r1, [r3, #0]
 80018a2:	3302      	adds	r3, #2
 80018a4:	0c12      	lsrs	r2, r2, #16
 80018a6:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	dd0f      	ble.n	80018ce <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	3302      	adds	r3, #2
 80018b6:	4619      	mov	r1, r3
 80018b8:	4610      	mov	r0, r2
 80018ba:	f7ff ff8f 	bl	80017dc <u16bit_to_str>
 80018be:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	4914      	ldr	r1, [pc, #80]	; (8001914 <terminal_move_cursor+0x98>)
 80018c4:	461a      	mov	r2, r3
 80018c6:	460b      	mov	r3, r1
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	8013      	strh	r3, [r2, #0]
 80018cc:	e013      	b.n	80018f6 <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	da18      	bge.n	8001906 <terminal_move_cursor+0x8a>
		endstr = u16bit_to_str (-(offset), str+2);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	425b      	negs	r3, r3
 80018d8:	461a      	mov	r2, r3
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	3302      	adds	r3, #2
 80018e0:	4619      	mov	r1, r3
 80018e2:	4610      	mov	r0, r2
 80018e4:	f7ff ff7a 	bl	80017dc <u16bit_to_str>
 80018e8:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	490a      	ldr	r1, [pc, #40]	; (8001918 <terminal_move_cursor+0x9c>)
 80018ee:	461a      	mov	r2, r3
 80018f0:	460b      	mov	r3, r1
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80018fc:	f107 020c 	add.w	r2, r7, #12
 8001900:	4610      	mov	r0, r2
 8001902:	4798      	blx	r3
 8001904:	e000      	b.n	8001908 <terminal_move_cursor+0x8c>
		return;
 8001906:	bf00      	nop
}
 8001908:	3720      	adds	r7, #32
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	0800c914 	.word	0x0800c914
 8001914:	0800c918 	.word	0x0800c918
 8001918:	0800c91c 	.word	0x0800c91c

0800191c <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	4a15      	ldr	r2, [pc, #84]	; (8001980 <terminal_reset_cursor+0x64>)
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	4611      	mov	r1, r2
 800192e:	8019      	strh	r1, [r3, #0]
 8001930:	3302      	adds	r3, #2
 8001932:	0c12      	lsrs	r2, r2, #16
 8001934:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 8001936:	f107 030c 	add.w	r3, r7, #12
 800193a:	3302      	adds	r3, #2
 800193c:	4619      	mov	r1, r3
 800193e:	206d      	movs	r0, #109	; 0x6d
 8001940:	f7ff ff4c 	bl	80017dc <u16bit_to_str>
 8001944:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <terminal_reset_cursor+0x68>)
 800194a:	6810      	ldr	r0, [r2, #0]
 800194c:	6018      	str	r0, [r3, #0]
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3303      	adds	r3, #3
 8001952:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 8001954:	69f9      	ldr	r1, [r7, #28]
 8001956:	2006      	movs	r0, #6
 8001958:	f7ff ff40 	bl	80017dc <u16bit_to_str>
 800195c:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	4909      	ldr	r1, [pc, #36]	; (8001988 <terminal_reset_cursor+0x6c>)
 8001962:	461a      	mov	r2, r3
 8001964:	460b      	mov	r3, r1
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001970:	f107 020c 	add.w	r2, r7, #12
 8001974:	4610      	mov	r0, r2
 8001976:	4798      	blx	r3
}
 8001978:	bf00      	nop
 800197a:	3720      	adds	r7, #32
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	0800c914 	.word	0x0800c914
 8001984:	0800c920 	.word	0x0800c920
 8001988:	0800c918 	.word	0x0800c918

0800198c <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800199e:	4816      	ldr	r0, [pc, #88]	; (80019f8 <terminal_print_line+0x6c>)
 80019a0:	4798      	blx	r3

	char nch [] = {0,0};
 80019a2:	2300      	movs	r3, #0
 80019a4:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	e014      	b.n	80019d6 <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	4413      	add	r3, r2
 80019b2:	3354      	adds	r3, #84	; 0x54
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 80019b8:	7c3b      	ldrb	r3, [r7, #16]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <terminal_print_line+0x36>
			nch[0] = ' ';
 80019be:	2320      	movs	r3, #32
 80019c0:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80019c8:	f107 0210 	add.w	r2, r7, #16
 80019cc:	4610      	mov	r0, r2
 80019ce:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	3301      	adds	r3, #1
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	429a      	cmp	r2, r3
 80019e0:	dbe4      	blt.n	80019ac <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f7ff ff9a 	bl	800191c <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f7ff ff46 	bl	800187c <terminal_move_cursor>
}
 80019f0:	bf00      	nop
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	0800c924 	.word	0x0800c924

080019fc <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3354      	adds	r3, #84	; 0x54
 8001a0a:	2265      	movs	r2, #101	; 0x65
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f00a fe42 	bl	800c698 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3304      	adds	r3, #4
 8001a18:	2240      	movs	r2, #64	; 0x40
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f00a fe3b 	bl	800c698 <memset>
	pThis->ring_hist.begin = 0;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	pThis->execute = NULL;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pThis->get_completion = NULL;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
	pThis->prompt_str = prompt_default;
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <microrl_init+0x78>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000008 	.word	0x20000008

08001a78 <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	1d18      	adds	r0, r3, #4
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3354      	adds	r3, #84	; 0x54
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f7ff fcfb 	bl	80014dc <hist_restore_line>
 8001ae6:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	db1a      	blt.n	8001b24 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	3354      	adds	r3, #84	; 0x54
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		terminal_reset_cursor (pThis);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ff04 	bl	800191c <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ff34 	bl	800198c <terminal_print_line>
	}
}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	2b5b      	cmp	r3, #91	; 0x5b
 8001b3c:	d104      	bne.n	8001b48 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	701a      	strb	r2, [r3, #0]
		return 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e07b      	b.n	8001c40 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d14f      	bne.n	8001bf0 <escape_process+0xc4>
		if (ch == 'A') {
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	2b41      	cmp	r3, #65	; 0x41
 8001b54:	d105      	bne.n	8001b62 <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 8001b56:	2100      	movs	r1, #0
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ffb7 	bl	8001acc <hist_search>
#endif
			return 1;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e06e      	b.n	8001c40 <escape_process+0x114>
		} else if (ch == 'B') {
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	2b42      	cmp	r3, #66	; 0x42
 8001b66:	d105      	bne.n	8001b74 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 8001b68:	2101      	movs	r1, #1
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ffae 	bl	8001acc <hist_search>
#endif
			return 1;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e065      	b.n	8001c40 <escape_process+0x114>
		} else if (ch == 'C') {
 8001b74:	78fb      	ldrb	r3, [r7, #3]
 8001b76:	2b43      	cmp	r3, #67	; 0x43
 8001b78:	d114      	bne.n	8001ba4 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001b86:	429a      	cmp	r2, r3
 8001b88:	da0a      	bge.n	8001ba0 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff fe75 	bl	800187c <terminal_move_cursor>
				pThis->cursor++;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b98:	1c5a      	adds	r2, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e04d      	b.n	8001c40 <escape_process+0x114>
		} else if (ch == 'D') {
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	2b44      	cmp	r3, #68	; 0x44
 8001ba8:	d112      	bne.n	8001bd0 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	dd0b      	ble.n	8001bcc <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 8001bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff fe5f 	bl	800187c <terminal_move_cursor>
				pThis->cursor--;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001bc4:	1e5a      	subs	r2, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e037      	b.n	8001c40 <escape_process+0x114>
		} else if (ch == '7') {
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	2b37      	cmp	r3, #55	; 0x37
 8001bd4:	d104      	bne.n	8001be0 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2202      	movs	r2, #2
 8001bda:	701a      	strb	r2, [r3, #0]
			return 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	e02f      	b.n	8001c40 <escape_process+0x114>
		} else if (ch == '8') {
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	2b38      	cmp	r3, #56	; 0x38
 8001be4:	d12b      	bne.n	8001c3e <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2203      	movs	r2, #3
 8001bea:	701a      	strb	r2, [r3, #0]
			return 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e027      	b.n	8001c40 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	2b7e      	cmp	r3, #126	; 0x7e
 8001bf4:	d123      	bne.n	8001c3e <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d108      	bne.n	8001c10 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff fe8c 	bl	800191c <terminal_reset_cursor>
			pThis->cursor = 0;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e017      	b.n	8001c40 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d112      	bne.n	8001c3e <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	4619      	mov	r1, r3
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff fe27 	bl	800187c <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	2b64      	cmp	r3, #100	; 0x64
 8001c60:	dc60      	bgt.n	8001d24 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c6e:	4619      	mov	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	440b      	add	r3, r1
 8001c74:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3354      	adds	r3, #84	; 0x54
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor + len,
 8001c80:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c8e:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 8001c90:	461a      	mov	r2, r3
 8001c92:	f00a fce7 	bl	800c664 <memmove>
		for (i = 0; i < len; i++) {
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	e025      	b.n	8001ce8 <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	441a      	add	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	440b      	add	r3, r1
 8001cac:	7811      	ldrb	r1, [r2, #0]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	460a      	mov	r2, r1
 8001cb4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cca:	2b20      	cmp	r3, #32
 8001ccc:	d109      	bne.n	8001ce2 <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	4413      	add	r3, r2
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	dbd5      	blt.n	8001c9c <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	441a      	add	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdlen += len;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	441a      	add	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4413      	add	r3, r2
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <microrl_insert_text+0xde>
	}
	return false;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	dd31      	ble.n	8001da4 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff fd2b 	bl	800179c <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d52:	3b01      	subs	r3, #1
 8001d54:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3354      	adds	r3, #84	; 0x54
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor-1,
 8001d60:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 8001d72:	461a      	mov	r2, r3
 8001d74:	f00a fc76 	bl	800c664 <memmove>
		pThis->cursor--;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d7e:	1e5a      	subs	r2, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	4413      	add	r3, r2
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001d9c:	1e5a      	subs	r2, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	}
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f7fe f9d0 	bl	8000160 <strlen>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	e019      	b.n	8001dfe <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe f9c3 	bl	8000160 <strlen>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d20a      	bcs.n	8001df8 <common_len+0x4c>
			shortest = arr[i];
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f7fe f9b6 	bl	8000160 <strlen>
 8001df4:	4603      	mov	r3, r0
 8001df6:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1de      	bne.n	8001dca <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	e01f      	b.n	8001e52 <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	e012      	b.n	8001e3e <common_len+0x92>
			if (shortest[i] != arr[j][i])
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	440b      	add	r3, r1
 8001e28:	6819      	ldr	r1, [r3, #0]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	440b      	add	r3, r1
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d001      	beq.n	8001e38 <common_len+0x8c>
				return i;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	e011      	b.n	8001e5c <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e5      	bne.n	8001e18 <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	dbdb      	blt.n	8001e12 <common_len+0x66>

	return i;
 8001e5a:	697b      	ldr	r3, [r7, #20]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 8001e64:	b5b0      	push	{r4, r5, r7, lr}
 8001e66:	b090      	sub	sp, #64	; 0x40
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 809c 	beq.w	8001fb0 <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e7e:	f107 0208 	add.w	r2, r7, #8
 8001e82:	4619      	mov	r1, r3
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff fc31 	bl	80016ec <split>
 8001e8a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e92:	3b01      	subs	r3, #1
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	4413      	add	r3, r2
 8001e98:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d109      	bne.n	8001eb4 <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 8001ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001eac:	4413      	add	r3, r2
 8001eae:	4a42      	ldr	r2, [pc, #264]	; (8001fb8 <microrl_get_complite+0x154>)
 8001eb0:	f843 2c38 	str.w	r2, [r3, #-56]
	compl_token = pThis->get_completion (status, tkn_arr);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001eba:	f107 0208 	add.w	r2, r7, #8
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001ec2:	4798      	blx	r3
 8001ec4:	6338      	str	r0, [r7, #48]	; 0x30
	if (compl_token[0] != NULL) {
 8001ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d071      	beq.n	8001fb2 <microrl_get_complite+0x14e>
		int i = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	63bb      	str	r3, [r7, #56]	; 0x38
		int len;

		if (compl_token[1] == NULL) {
 8001ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d107      	bne.n	8001eec <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 8001edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe f93d 	bl	8000160 <strlen>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8001eea:	e026      	b.n	8001f3a <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 8001eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001eee:	f7ff ff5d 	bl	8001dac <common_len>
 8001ef2:	6378      	str	r0, [r7, #52]	; 0x34
			terminal_newline (pThis);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff fc61 	bl	80017bc <terminal_newline>
			while (compl_token [i] != NULL) {
 8001efa:	e011      	b.n	8001f20 <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001f02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f04:	0092      	lsls	r2, r2, #2
 8001f06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f08:	440a      	add	r2, r1
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	4798      	blx	r3
				pThis->print (" ");
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001f16:	4829      	ldr	r0, [pc, #164]	; (8001fbc <microrl_get_complite+0x158>)
 8001f18:	4798      	blx	r3
				i++;
 8001f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	63bb      	str	r3, [r7, #56]	; 0x38
			while (compl_token [i] != NULL) {
 8001f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f26:	4413      	add	r3, r2
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1e6      	bne.n	8001efc <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff fc44 	bl	80017bc <terminal_newline>
			print_prompt (pThis);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff fc22 	bl	800177e <print_prompt>
		}
		
		if (len) {
 8001f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d02b      	beq.n	8001f98 <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f42:	681c      	ldr	r4, [r3, #0]
 8001f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f46:	3b01      	subs	r3, #1
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001f4e:	4413      	add	r3, r2
 8001f50:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe f903 	bl	8000160 <strlen>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 8001f5e:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8001f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f62:	3b01      	subs	r3, #1
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe f8f5 	bl	8000160 <strlen>
 8001f76:	4603      	mov	r3, r0
 8001f78:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff fe62 	bl	8001c48 <microrl_insert_text>
			if (compl_token[1] == NULL) 
 8001f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f86:	3304      	adds	r3, #4
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d104      	bne.n	8001f98 <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 8001f8e:	2201      	movs	r2, #1
 8001f90:	490a      	ldr	r1, [pc, #40]	; (8001fbc <microrl_get_complite+0x158>)
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff fe58 	bl	8001c48 <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff fcbf 	bl	800191c <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff fcef 	bl	800198c <terminal_print_line>
 8001fae:	e000      	b.n	8001fb2 <microrl_get_complite+0x14e>
		return;
 8001fb0:	bf00      	nop
	} 
}
 8001fb2:	3740      	adds	r7, #64	; 0x40
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb8:	0800c928 	.word	0x0800c928
 8001fbc:	0800c92c 	.word	0x0800c92c

08001fc0 <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08e      	sub	sp, #56	; 0x38
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff fbf7 	bl	80017bc <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	dd0a      	ble.n	8001fee <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	1d18      	adds	r0, r3, #4
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001fe8:	461a      	mov	r2, r3
 8001fea:	f7ff fa08 	bl	80013fe <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001ff4:	f107 020c 	add.w	r2, r7, #12
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff fb76 	bl	80016ec <split>
 8002000:	6378      	str	r0, [r7, #52]	; 0x34
	if (status == -1){
 8002002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d109      	bne.n	800201e <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002010:	4817      	ldr	r0, [pc, #92]	; (8002070 <new_line_handler+0xb0>)
 8002012:	4798      	blx	r3
		pThis->print (ENDL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800201a:	4816      	ldr	r0, [pc, #88]	; (8002074 <new_line_handler+0xb4>)
 800201c:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 800201e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002020:	2b00      	cmp	r3, #0
 8002022:	dd0c      	ble.n	800203e <new_line_handler+0x7e>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800202a:	2b00      	cmp	r3, #0
 800202c:	d007      	beq.n	800203e <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002034:	f107 020c 	add.w	r2, r7, #12
 8002038:	4611      	mov	r1, r2
 800203a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800203c:	4798      	blx	r3
	print_prompt (pThis);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff fb9d 	bl	800177e <print_prompt>
	pThis->cmdlen = 0;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3354      	adds	r3, #84	; 0x54
 8002058:	2265      	movs	r2, #101	; 0x65
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f00a fb1b 	bl	800c698 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8002068:	bf00      	nop
 800206a:	3738      	adds	r7, #56	; 0x38
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	0800c930 	.word	0x0800c930
 8002074:	0800c910 	.word	0x0800c910

08002078 <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	785b      	ldrb	r3, [r3, #1]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00d      	beq.n	80020a6 <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	4619      	mov	r1, r3
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff fd4b 	bl	8001b2c <escape_process>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 81e3 	beq.w	8002464 <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 80020a4:	e1de      	b.n	8002464 <microrl_insert_char+0x3ec>
		switch (ch) {
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	2b7e      	cmp	r3, #126	; 0x7e
 80020ac:	f200 81af 	bhi.w	800240e <microrl_insert_char+0x396>
 80020b0:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <microrl_insert_char+0x40>)
 80020b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b6:	bf00      	nop
 80020b8:	0800234b 	.word	0x0800234b
 80020bc:	08002383 	.word	0x08002383
 80020c0:	080023fb 	.word	0x080023fb
 80020c4:	0800240f 	.word	0x0800240f
 80020c8:	08002327 	.word	0x08002327
 80020cc:	0800235b 	.word	0x0800235b
 80020d0:	0800240f 	.word	0x0800240f
 80020d4:	080023bb 	.word	0x080023bb
 80020d8:	080022dd 	.word	0x080022dd
 80020dc:	080022b5 	.word	0x080022b5
 80020e0:	0800230f 	.word	0x0800230f
 80020e4:	0800240f 	.word	0x0800240f
 80020e8:	080022b5 	.word	0x080022b5
 80020ec:	080023b1 	.word	0x080023b1
 80020f0:	0800240f 	.word	0x0800240f
 80020f4:	080023a7 	.word	0x080023a7
 80020f8:	0800240f 	.word	0x0800240f
 80020fc:	080023d7 	.word	0x080023d7
 8002100:	0800240f 	.word	0x0800240f
 8002104:	0800240f 	.word	0x0800240f
 8002108:	080022f3 	.word	0x080022f3
 800210c:	0800240f 	.word	0x0800240f
 8002110:	0800240f 	.word	0x0800240f
 8002114:	0800240f 	.word	0x0800240f
 8002118:	0800240f 	.word	0x0800240f
 800211c:	0800240f 	.word	0x0800240f
 8002120:	080022e5 	.word	0x080022e5
 8002124:	0800240f 	.word	0x0800240f
 8002128:	0800240f 	.word	0x0800240f
 800212c:	0800240f 	.word	0x0800240f
 8002130:	0800240f 	.word	0x0800240f
 8002134:	0800240f 	.word	0x0800240f
 8002138:	0800240f 	.word	0x0800240f
 800213c:	0800240f 	.word	0x0800240f
 8002140:	0800240f 	.word	0x0800240f
 8002144:	0800240f 	.word	0x0800240f
 8002148:	0800240f 	.word	0x0800240f
 800214c:	0800240f 	.word	0x0800240f
 8002150:	0800240f 	.word	0x0800240f
 8002154:	0800240f 	.word	0x0800240f
 8002158:	0800240f 	.word	0x0800240f
 800215c:	0800240f 	.word	0x0800240f
 8002160:	0800240f 	.word	0x0800240f
 8002164:	0800240f 	.word	0x0800240f
 8002168:	0800240f 	.word	0x0800240f
 800216c:	0800240f 	.word	0x0800240f
 8002170:	0800240f 	.word	0x0800240f
 8002174:	0800240f 	.word	0x0800240f
 8002178:	0800240f 	.word	0x0800240f
 800217c:	0800240f 	.word	0x0800240f
 8002180:	0800240f 	.word	0x0800240f
 8002184:	0800240f 	.word	0x0800240f
 8002188:	0800240f 	.word	0x0800240f
 800218c:	0800240f 	.word	0x0800240f
 8002190:	0800240f 	.word	0x0800240f
 8002194:	0800240f 	.word	0x0800240f
 8002198:	0800240f 	.word	0x0800240f
 800219c:	0800240f 	.word	0x0800240f
 80021a0:	0800240f 	.word	0x0800240f
 80021a4:	0800240f 	.word	0x0800240f
 80021a8:	0800240f 	.word	0x0800240f
 80021ac:	0800240f 	.word	0x0800240f
 80021b0:	0800240f 	.word	0x0800240f
 80021b4:	0800240f 	.word	0x0800240f
 80021b8:	0800240f 	.word	0x0800240f
 80021bc:	0800240f 	.word	0x0800240f
 80021c0:	0800240f 	.word	0x0800240f
 80021c4:	0800240f 	.word	0x0800240f
 80021c8:	0800240f 	.word	0x0800240f
 80021cc:	0800240f 	.word	0x0800240f
 80021d0:	0800240f 	.word	0x0800240f
 80021d4:	0800240f 	.word	0x0800240f
 80021d8:	0800240f 	.word	0x0800240f
 80021dc:	0800240f 	.word	0x0800240f
 80021e0:	0800240f 	.word	0x0800240f
 80021e4:	0800240f 	.word	0x0800240f
 80021e8:	0800240f 	.word	0x0800240f
 80021ec:	0800240f 	.word	0x0800240f
 80021f0:	0800240f 	.word	0x0800240f
 80021f4:	0800240f 	.word	0x0800240f
 80021f8:	0800240f 	.word	0x0800240f
 80021fc:	0800240f 	.word	0x0800240f
 8002200:	0800240f 	.word	0x0800240f
 8002204:	0800240f 	.word	0x0800240f
 8002208:	0800240f 	.word	0x0800240f
 800220c:	0800240f 	.word	0x0800240f
 8002210:	0800240f 	.word	0x0800240f
 8002214:	0800240f 	.word	0x0800240f
 8002218:	0800240f 	.word	0x0800240f
 800221c:	0800240f 	.word	0x0800240f
 8002220:	0800240f 	.word	0x0800240f
 8002224:	0800240f 	.word	0x0800240f
 8002228:	0800240f 	.word	0x0800240f
 800222c:	0800240f 	.word	0x0800240f
 8002230:	0800240f 	.word	0x0800240f
 8002234:	0800240f 	.word	0x0800240f
 8002238:	0800240f 	.word	0x0800240f
 800223c:	0800240f 	.word	0x0800240f
 8002240:	0800240f 	.word	0x0800240f
 8002244:	0800240f 	.word	0x0800240f
 8002248:	0800240f 	.word	0x0800240f
 800224c:	0800240f 	.word	0x0800240f
 8002250:	0800240f 	.word	0x0800240f
 8002254:	0800240f 	.word	0x0800240f
 8002258:	0800240f 	.word	0x0800240f
 800225c:	0800240f 	.word	0x0800240f
 8002260:	0800240f 	.word	0x0800240f
 8002264:	0800240f 	.word	0x0800240f
 8002268:	0800240f 	.word	0x0800240f
 800226c:	0800240f 	.word	0x0800240f
 8002270:	0800240f 	.word	0x0800240f
 8002274:	0800240f 	.word	0x0800240f
 8002278:	0800240f 	.word	0x0800240f
 800227c:	0800240f 	.word	0x0800240f
 8002280:	0800240f 	.word	0x0800240f
 8002284:	0800240f 	.word	0x0800240f
 8002288:	0800240f 	.word	0x0800240f
 800228c:	0800240f 	.word	0x0800240f
 8002290:	0800240f 	.word	0x0800240f
 8002294:	0800240f 	.word	0x0800240f
 8002298:	0800240f 	.word	0x0800240f
 800229c:	0800240f 	.word	0x0800240f
 80022a0:	0800240f 	.word	0x0800240f
 80022a4:	0800240f 	.word	0x0800240f
 80022a8:	0800240f 	.word	0x0800240f
 80022ac:	0800240f 	.word	0x0800240f
 80022b0:	080023bb 	.word	0x080023bb
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	789b      	ldrb	r3, [r3, #2]
 80022b8:	461a      	mov	r2, r3
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b0d      	cmp	r3, #13
 80022be:	d101      	bne.n	80022c4 <microrl_insert_char+0x24c>
 80022c0:	230a      	movs	r3, #10
 80022c2:	e000      	b.n	80022c6 <microrl_insert_char+0x24e>
 80022c4:	230d      	movs	r3, #13
 80022c6:	4293      	cmp	r3, r2
 80022c8:	f000 80c1 	beq.w	800244e <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff fe73 	bl	8001fc0 <new_line_handler>
				break;
 80022da:	e0c3      	b.n	8002464 <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff fdc1 	bl	8001e64 <microrl_get_complite>
			break;
 80022e2:	e0bf      	b.n	8002464 <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	705a      	strb	r2, [r3, #1]
			break;
 80022ea:	e0bb      	b.n	8002464 <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff fd1e 	bl	8001d2e <microrl_backspace>
					while (pThis->cursor > 0) {
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	dcf7      	bgt.n	80022ec <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002302:	461a      	mov	r2, r3
 8002304:	2100      	movs	r1, #0
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff fb40 	bl	800198c <terminal_print_line>
			break;
 800230c:	e0aa      	b.n	8002464 <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002314:	4855      	ldr	r0, [pc, #340]	; (800246c <microrl_insert_char+0x3f4>)
 8002316:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			break;
 8002324:	e09e      	b.n	8002464 <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	4619      	mov	r1, r3
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff faa0 	bl	800187c <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8002348:	e08c      	b.n	8002464 <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff fae6 	bl	800191c <terminal_reset_cursor>
				pThis->cursor = 0;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8002358:	e084      	b.n	8002464 <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002366:	429a      	cmp	r2, r3
 8002368:	da73      	bge.n	8002452 <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 800236a:	2101      	movs	r1, #1
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff fa85 	bl	800187c <terminal_move_cursor>
				pThis->cursor++;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8002380:	e067      	b.n	8002452 <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d064      	beq.n	8002456 <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 800238c:	f04f 31ff 	mov.w	r1, #4294967295
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff fa73 	bl	800187c <terminal_move_cursor>
				pThis->cursor--;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800239c:	1e5a      	subs	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 80023a4:	e057      	b.n	8002456 <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 80023a6:	2100      	movs	r1, #0
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff fb8f 	bl	8001acc <hist_search>
			break;
 80023ae:	e059      	b.n	8002464 <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 80023b0:	2101      	movs	r1, #1
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff fb8a 	bl	8001acc <hist_search>
			break;
 80023b8:	e054      	b.n	8002464 <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff fcb7 	bl	8001d2e <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023cc:	461a      	mov	r2, r3
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff fadc 	bl	800198c <terminal_print_line>
			break;
 80023d4:	e046      	b.n	8002464 <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff f9f0 	bl	80017bc <terminal_newline>
				print_prompt (pThis);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff f9ce 	bl	800177e <print_prompt>
				terminal_reset_cursor (pThis);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff fa9a 	bl	800191c <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023ee:	461a      	mov	r2, r3
 80023f0:	2100      	movs	r1, #0
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff faca 	bl	800198c <terminal_print_line>
			break;
 80023f8:	e034      	b.n	8002464 <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d02a      	beq.n	800245a <microrl_insert_char+0x3e2>
				pThis->sigint();
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800240a:	4798      	blx	r3
			break;
 800240c:	e025      	b.n	800245a <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b20      	cmp	r3, #32
 8002412:	d104      	bne.n	800241e <microrl_insert_char+0x3a6>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800241a:	2b00      	cmp	r3, #0
 800241c:	d01f      	beq.n	800245e <microrl_insert_char+0x3e6>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b1f      	cmp	r3, #31
 8002422:	dd1c      	ble.n	800245e <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8002424:	463b      	mov	r3, r7
 8002426:	2201      	movs	r2, #1
 8002428:	4619      	mov	r1, r3
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff fc0c 	bl	8001c48 <microrl_insert_text>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d015      	beq.n	8002462 <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800243c:	1e59      	subs	r1, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002444:	461a      	mov	r2, r3
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff faa0 	bl	800198c <terminal_print_line>
			break;
 800244c:	e009      	b.n	8002462 <microrl_insert_char+0x3ea>
					break;
 800244e:	bf00      	nop
 8002450:	e008      	b.n	8002464 <microrl_insert_char+0x3ec>
			break;
 8002452:	bf00      	nop
 8002454:	e006      	b.n	8002464 <microrl_insert_char+0x3ec>
			break;
 8002456:	bf00      	nop
 8002458:	e004      	b.n	8002464 <microrl_insert_char+0x3ec>
			break;
 800245a:	bf00      	nop
 800245c:	e002      	b.n	8002464 <microrl_insert_char+0x3ec>
	}
 800245e:	bf00      	nop
 8002460:	e000      	b.n	8002464 <microrl_insert_char+0x3ec>
			break;
 8002462:	bf00      	nop
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	0800c924 	.word	0x0800c924

08002470 <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <microrl_print_char+0x20>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	79fa      	ldrb	r2, [r7, #7]
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fdf8 	bl	8002078 <microrl_insert_char>
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	2000000c 	.word	0x2000000c

08002494 <print>:

void print (const char * str)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 800249c:	4b19      	ldr	r3, [pc, #100]	; (8002504 <print+0x70>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	f083 0301 	eor.w	r3, r3, #1
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <print+0x1e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b1b      	cmp	r3, #27
 80024b0:	d024      	beq.n	80024fc <print+0x68>
		return;
	uint16_t len = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 80024b6:	89fb      	ldrh	r3, [r7, #14]
 80024b8:	3301      	adds	r3, #1
 80024ba:	81fb      	strh	r3, [r7, #14]
 80024bc:	89fb      	ldrh	r3, [r7, #14]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f6      	bne.n	80024b6 <print+0x22>
	uint32_t timeout = HAL_GetTick();
 80024c8:	f001 faa8 	bl	8003a1c <HAL_GetTick>
 80024cc:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 80024ce:	e006      	b.n	80024de <print+0x4a>
		if (HAL_GetTick() - timeout >= 5)
 80024d0:	f001 faa4 	bl	8003a1c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d807      	bhi.n	80024ee <print+0x5a>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <print+0x74>)
 80024e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80024e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f1      	bne.n	80024d0 <print+0x3c>
 80024ec:	e000      	b.n	80024f0 <print+0x5c>
			break;
 80024ee:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 80024f0:	89fb      	ldrh	r3, [r7, #14]
 80024f2:	4619      	mov	r1, r3
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f009 fca5 	bl	800be44 <CDC_Transmit_FS>
 80024fa:	e000      	b.n	80024fe <print+0x6a>
		return;
 80024fc:	bf00      	nop
}
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000010 	.word	0x20000010
 8002508:	20000790 	.word	0x20000790

0800250c <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	e010      	b.n	800253e <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 800251c:	490c      	ldr	r1, [pc, #48]	; (8002550 <find_color_by_name+0x44>)
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	440b      	add	r3, r1
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	79fa      	ldrb	r2, [r7, #7]
 8002530:	429a      	cmp	r2, r3
 8002532:	d101      	bne.n	8002538 <find_color_by_name+0x2c>
		{
			return i;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	e006      	b.n	8002546 <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	3301      	adds	r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b10      	cmp	r3, #16
 8002542:	d9eb      	bls.n	800251c <find_color_by_name+0x10>
		}
	}
	return 0;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	0800cc7c 	.word	0x0800cc7c

08002554 <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ffd2 	bl	800250c <find_color_by_name>
 8002568:	4602      	mov	r2, r0
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4413      	add	r3, r2
 8002574:	4a08      	ldr	r2, [pc, #32]	; (8002598 <print_color+0x44>)
 8002576:	4413      	add	r3, r2
 8002578:	3301      	adds	r3, #1
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff ff8a 	bl	8002494 <print>
	print(str);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ff87 	bl	8002494 <print>
	print(COLOR_NC);
 8002586:	4805      	ldr	r0, [pc, #20]	; (800259c <print_color+0x48>)
 8002588:	f7ff ff84 	bl	8002494 <print>
	return 0;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	0800cc7c 	.word	0x0800cc7c
 800259c:	0800c948 	.word	0x0800c948

080025a0 <str_length>:

int str_length(const char * str)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	int i = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
	while (str[i])
 80025ac:	e002      	b.n	80025b4 <str_length+0x14>
		i++;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	3301      	adds	r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
	while (str[i])
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f6      	bne.n	80025ae <str_length+0xe>
	return i;
 80025c0:	68fb      	ldr	r3, [r7, #12]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <print_help>:


int print_help(int argc, const char * const * argv)
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
	print(_VER);
 80025d6:	4862      	ldr	r0, [pc, #392]	; (8002760 <print_help+0x194>)
 80025d8:	f7ff ff5c 	bl	8002494 <print>
	print(ENDL);
 80025dc:	4861      	ldr	r0, [pc, #388]	; (8002764 <print_help+0x198>)
 80025de:	f7ff ff59 	bl	8002494 <print>
	print ("Use ");
 80025e2:	4861      	ldr	r0, [pc, #388]	; (8002768 <print_help+0x19c>)
 80025e4:	f7ff ff56 	bl	8002494 <print>
	print_color("TAB", C_GREEN);
 80025e8:	2105      	movs	r1, #5
 80025ea:	4860      	ldr	r0, [pc, #384]	; (800276c <print_help+0x1a0>)
 80025ec:	f7ff ffb2 	bl	8002554 <print_color>
	print(" key for completion");
 80025f0:	485f      	ldr	r0, [pc, #380]	; (8002770 <print_help+0x1a4>)
 80025f2:	f7ff ff4f 	bl	8002494 <print>
	print (ENDL);
 80025f6:	485b      	ldr	r0, [pc, #364]	; (8002764 <print_help+0x198>)
 80025f8:	f7ff ff4c 	bl	8002494 <print>
	print ("Available commands:");
 80025fc:	485d      	ldr	r0, [pc, #372]	; (8002774 <print_help+0x1a8>)
 80025fe:	f7ff ff49 	bl	8002494 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	e09e      	b.n	8002746 <print_help+0x17a>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 8002608:	4a5b      	ldr	r2, [pc, #364]	; (8002778 <print_help+0x1ac>)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	212c      	movs	r1, #44	; 0x2c
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	4413      	add	r3, r2
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261a:	d11f      	bne.n	800265c <print_help+0x90>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	3b01      	subs	r3, #1
 8002620:	4a55      	ldr	r2, [pc, #340]	; (8002778 <print_help+0x1ac>)
 8002622:	212c      	movs	r1, #44	; 0x2c
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	4413      	add	r3, r2
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002630:	d004      	beq.n	800263c <print_help+0x70>
				print_color(" aka ", C_L_PURPLE);
 8002632:	210c      	movs	r1, #12
 8002634:	4851      	ldr	r0, [pc, #324]	; (800277c <print_help+0x1b0>)
 8002636:	f7ff ff8d 	bl	8002554 <print_color>
 800263a:	e003      	b.n	8002644 <print_help+0x78>
			else
				print_color("/", C_L_PURPLE);
 800263c:	210c      	movs	r1, #12
 800263e:	4850      	ldr	r0, [pc, #320]	; (8002780 <print_help+0x1b4>)
 8002640:	f7ff ff88 	bl	8002554 <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	222c      	movs	r2, #44	; 0x2c
 8002648:	fb02 f303 	mul.w	r3, r2, r3
 800264c:	4a4a      	ldr	r2, [pc, #296]	; (8002778 <print_help+0x1ac>)
 800264e:	4413      	add	r3, r2
 8002650:	3304      	adds	r3, #4
 8002652:	210b      	movs	r1, #11
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff7d 	bl	8002554 <print_color>
 800265a:	e071      	b.n	8002740 <print_help+0x174>
		}
		else
		{
			print(ENDL);
 800265c:	4841      	ldr	r0, [pc, #260]	; (8002764 <print_help+0x198>)
 800265e:	f7ff ff19 	bl	8002494 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8002662:	f06f 0303 	mvn.w	r3, #3
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	e005      	b.n	8002676 <print_help+0xaa>
				print(" ");
 800266a:	4846      	ldr	r0, [pc, #280]	; (8002784 <print_help+0x1b8>)
 800266c:	f7ff ff12 	bl	8002494 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	3301      	adds	r3, #1
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	4a40      	ldr	r2, [pc, #256]	; (8002778 <print_help+0x1ac>)
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	429a      	cmp	r2, r3
 8002688:	dbef      	blt.n	800266a <print_help+0x9e>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	222c      	movs	r2, #44	; 0x2c
 800268e:	fb02 f303 	mul.w	r3, r2, r3
 8002692:	4a39      	ldr	r2, [pc, #228]	; (8002778 <print_help+0x1ac>)
 8002694:	4413      	add	r3, r2
 8002696:	1d1a      	adds	r2, r3, #4
 8002698:	4937      	ldr	r1, [pc, #220]	; (8002778 <print_help+0x1ac>)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	202c      	movs	r0, #44	; 0x2c
 800269e:	fb00 f303 	mul.w	r3, r0, r3
 80026a2:	440b      	add	r3, r1
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4938      	ldr	r1, [pc, #224]	; (8002788 <print_help+0x1bc>)
 80026a8:	5ccb      	ldrb	r3, [r1, r3]
 80026aa:	4619      	mov	r1, r3
 80026ac:	4610      	mov	r0, r2
 80026ae:	f7ff ff51 	bl	8002554 <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	e005      	b.n	80026c4 <print_help+0xf8>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 80026b8:	4832      	ldr	r0, [pc, #200]	; (8002784 <print_help+0x1b8>)
 80026ba:	f7ff feeb 	bl	8002494 <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3301      	adds	r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	4a2c      	ldr	r2, [pc, #176]	; (8002778 <print_help+0x1ac>)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80026d2:	f1c3 040b 	rsb	r4, r3, #11
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	222c      	movs	r2, #44	; 0x2c
 80026da:	fb02 f303 	mul.w	r3, r2, r3
 80026de:	4a26      	ldr	r2, [pc, #152]	; (8002778 <print_help+0x1ac>)
 80026e0:	4413      	add	r3, r2
 80026e2:	3304      	adds	r3, #4
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff5b 	bl	80025a0 <str_length>
 80026ea:	4603      	mov	r3, r0
 80026ec:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	dbe1      	blt.n	80026b8 <print_help+0xec>
			switch (microrl_actions[i].level){
 80026f4:	4a20      	ldr	r2, [pc, #128]	; (8002778 <print_help+0x1ac>)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	212c      	movs	r1, #44	; 0x2c
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	4413      	add	r3, r2
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <print_help+0x140>
 8002706:	2b01      	cmp	r3, #1
 8002708:	d004      	beq.n	8002714 <print_help+0x148>
 800270a:	e007      	b.n	800271c <print_help+0x150>
			case 0:
				print ("-");
 800270c:	481f      	ldr	r0, [pc, #124]	; (800278c <print_help+0x1c0>)
 800270e:	f7ff fec1 	bl	8002494 <print>
				break;
 8002712:	e007      	b.n	8002724 <print_help+0x158>
			case 1:
				print ("^");
 8002714:	481e      	ldr	r0, [pc, #120]	; (8002790 <print_help+0x1c4>)
 8002716:	f7ff febd 	bl	8002494 <print>
				break;
 800271a:	e003      	b.n	8002724 <print_help+0x158>
			default:
				print ("#");
 800271c:	481d      	ldr	r0, [pc, #116]	; (8002794 <print_help+0x1c8>)
 800271e:	f7ff feb9 	bl	8002494 <print>
				break;
 8002722:	bf00      	nop
			}
			print (" ");
 8002724:	4817      	ldr	r0, [pc, #92]	; (8002784 <print_help+0x1b8>)
 8002726:	f7ff feb5 	bl	8002494 <print>
			print (microrl_actions[i].help_msg);
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	222c      	movs	r2, #44	; 0x2c
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	3308      	adds	r3, #8
 8002734:	4a10      	ldr	r2, [pc, #64]	; (8002778 <print_help+0x1ac>)
 8002736:	4413      	add	r3, r2
 8002738:	3305      	adds	r3, #5
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff feaa 	bl	8002494 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3301      	adds	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b0a      	cmp	r3, #10
 800274a:	f67f af5d 	bls.w	8002608 <print_help+0x3c>
		}
	}
	print(ENDL);
 800274e:	4805      	ldr	r0, [pc, #20]	; (8002764 <print_help+0x198>)
 8002750:	f7ff fea0 	bl	8002494 <print>
	return 0;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	371c      	adds	r7, #28
 800275a:	46bd      	mov	sp, r7
 800275c:	bd90      	pop	{r4, r7, pc}
 800275e:	bf00      	nop
 8002760:	0800c950 	.word	0x0800c950
 8002764:	0800c968 	.word	0x0800c968
 8002768:	0800c96c 	.word	0x0800c96c
 800276c:	0800c974 	.word	0x0800c974
 8002770:	0800c978 	.word	0x0800c978
 8002774:	0800c98c 	.word	0x0800c98c
 8002778:	0800ca98 	.word	0x0800ca98
 800277c:	0800c9a0 	.word	0x0800c9a0
 8002780:	0800c9a8 	.word	0x0800c9a8
 8002784:	0800c9ac 	.word	0x0800c9ac
 8002788:	0800cd38 	.word	0x0800cd38
 800278c:	0800c9b0 	.word	0x0800c9b0
 8002790:	0800c9b4 	.word	0x0800c9b4
 8002794:	0800c9b8 	.word	0x0800c9b8

08002798 <execute>:



int execute (int argc, const char * const * argv)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
	int (*func)   (int argc, const char * const * argv ) = NULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 80027ae:	2300      	movs	r3, #0
 80027b0:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	e056      	b.n	8002866 <execute+0xce>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	e045      	b.n	800284a <execute+0xb2>
		{
			tokens_found = false;
 80027be:	2300      	movs	r3, #0
 80027c0:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 80027c2:	4a55      	ldr	r2, [pc, #340]	; (8002918 <execute+0x180>)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	212c      	movs	r1, #44	; 0x2c
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d8:	d001      	beq.n	80027de <execute+0x46>
				synonym_level = current_level; // save the synonym level
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d003      	beq.n	80027ee <execute+0x56>
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	db31      	blt.n	8002852 <execute+0xba>
				break;
			if (current_level == i)
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d101      	bne.n	80027fa <execute+0x62>
				last_main_synonym = n;
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	4413      	add	r3, r2
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	212c      	movs	r1, #44	; 0x2c
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4942      	ldr	r1, [pc, #264]	; (8002918 <execute+0x180>)
 800280e:	440b      	add	r3, r1
 8002810:	3304      	adds	r3, #4
 8002812:	4619      	mov	r1, r3
 8002814:	4610      	mov	r0, r2
 8002816:	f7fd fc99 	bl	800014c <strcmp>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d111      	bne.n	8002844 <execute+0xac>
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	429a      	cmp	r2, r3
 8002826:	d10d      	bne.n	8002844 <execute+0xac>
					(i == synonym_level))
			{
				tokens_found = true;
 8002828:	2301      	movs	r3, #1
 800282a:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	623a      	str	r2, [r7, #32]
 8002832:	4a39      	ldr	r2, [pc, #228]	; (8002918 <execute+0x180>)
 8002834:	212c      	movs	r1, #44	; 0x2c
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	3328      	adds	r3, #40	; 0x28
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8002842:	e007      	b.n	8002854 <execute+0xbc>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	3301      	adds	r3, #1
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	2b0a      	cmp	r3, #10
 800284e:	d9b6      	bls.n	80027be <execute+0x26>
 8002850:	e000      	b.n	8002854 <execute+0xbc>
				break;
 8002852:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 8002854:	7efb      	ldrb	r3, [r7, #27]
 8002856:	f083 0301 	eor.w	r3, r3, #1
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d107      	bne.n	8002870 <execute+0xd8>
	for (int i = 0; i < argc; i++)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	3301      	adds	r3, #1
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	429a      	cmp	r2, r3
 800286c:	dba4      	blt.n	80027b8 <execute+0x20>
 800286e:	e000      	b.n	8002872 <execute+0xda>
			break;
 8002870:	bf00      	nop
	}

	if (func != NULL)
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <execute+0xec>
	{
		return func(argc, argv); // function found
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	6839      	ldr	r1, [r7, #0]
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	4798      	blx	r3
 8002880:	4603      	mov	r3, r0
 8002882:	e045      	b.n	8002910 <execute+0x178>
	} else if (tokens_found)
 8002884:	7efb      	ldrb	r3, [r7, #27]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d021      	beq.n	80028ce <execute+0x136>
	{
		print_color ("command: '", C_L_RED);
 800288a:	210a      	movs	r1, #10
 800288c:	4823      	ldr	r0, [pc, #140]	; (800291c <execute+0x184>)
 800288e:	f7ff fe61 	bl	8002554 <print_color>
		print_color ((char*)argv[0], C_L_RED);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	210a      	movs	r1, #10
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fe5b 	bl	8002554 <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 800289e:	210a      	movs	r1, #10
 80028a0:	481f      	ldr	r0, [pc, #124]	; (8002920 <execute+0x188>)
 80028a2:	f7ff fe57 	bl	8002554 <print_color>
		print(ENDL);
 80028a6:	481f      	ldr	r0, [pc, #124]	; (8002924 <execute+0x18c>)
 80028a8:	f7ff fdf4 	bl	8002494 <print>
		print_color ("use '", C_NC);
 80028ac:	2100      	movs	r1, #0
 80028ae:	481e      	ldr	r0, [pc, #120]	; (8002928 <execute+0x190>)
 80028b0:	f7ff fe50 	bl	8002554 <print_color>
		print_color ("?", C_GREEN);
 80028b4:	2105      	movs	r1, #5
 80028b6:	481d      	ldr	r0, [pc, #116]	; (800292c <execute+0x194>)
 80028b8:	f7ff fe4c 	bl	8002554 <print_color>
		print_color ("' for help", C_NC);
 80028bc:	2100      	movs	r1, #0
 80028be:	481c      	ldr	r0, [pc, #112]	; (8002930 <execute+0x198>)
 80028c0:	f7ff fe48 	bl	8002554 <print_color>
		print (ENDL);
 80028c4:	4817      	ldr	r0, [pc, #92]	; (8002924 <execute+0x18c>)
 80028c6:	f7ff fde5 	bl	8002494 <print>
		return 1;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e020      	b.n	8002910 <execute+0x178>
	}
	else
	{
		print_color ("command: '", C_RED);
 80028ce:	2109      	movs	r1, #9
 80028d0:	4812      	ldr	r0, [pc, #72]	; (800291c <execute+0x184>)
 80028d2:	f7ff fe3f 	bl	8002554 <print_color>
		print_color ((char*)argv[0], C_RED);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2109      	movs	r1, #9
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fe39 	bl	8002554 <print_color>
		print_color ("' not found", C_RED);
 80028e2:	2109      	movs	r1, #9
 80028e4:	4813      	ldr	r0, [pc, #76]	; (8002934 <execute+0x19c>)
 80028e6:	f7ff fe35 	bl	8002554 <print_color>
		print(ENDL);
 80028ea:	480e      	ldr	r0, [pc, #56]	; (8002924 <execute+0x18c>)
 80028ec:	f7ff fdd2 	bl	8002494 <print>
		print_color ("use '", C_NC);
 80028f0:	2100      	movs	r1, #0
 80028f2:	480d      	ldr	r0, [pc, #52]	; (8002928 <execute+0x190>)
 80028f4:	f7ff fe2e 	bl	8002554 <print_color>
		print_color ("?", C_GREEN);
 80028f8:	2105      	movs	r1, #5
 80028fa:	480c      	ldr	r0, [pc, #48]	; (800292c <execute+0x194>)
 80028fc:	f7ff fe2a 	bl	8002554 <print_color>
		print_color ("' for help", C_NC);
 8002900:	2100      	movs	r1, #0
 8002902:	480b      	ldr	r0, [pc, #44]	; (8002930 <execute+0x198>)
 8002904:	f7ff fe26 	bl	8002554 <print_color>
		print (ENDL);
 8002908:	4806      	ldr	r0, [pc, #24]	; (8002924 <execute+0x18c>)
 800290a:	f7ff fdc3 	bl	8002494 <print>
		return 1;
 800290e:	2301      	movs	r3, #1

	}
}
 8002910:	4618      	mov	r0, r3
 8002912:	3728      	adds	r7, #40	; 0x28
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	0800ca98 	.word	0x0800ca98
 800291c:	0800c9bc 	.word	0x0800c9bc
 8002920:	0800c9c8 	.word	0x0800c9c8
 8002924:	0800c968 	.word	0x0800c968
 8002928:	0800c9e8 	.word	0x0800c9e8
 800292c:	0800c9f0 	.word	0x0800c9f0
 8002930:	0800c9f4 	.word	0x0800c9f4
 8002934:	0800ca00 	.word	0x0800ca00

08002938 <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08c      	sub	sp, #48	; 0x30
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
	int j = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 8002946:	4b63      	ldr	r3, [pc, #396]	; (8002ad4 <complet+0x19c>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d11f      	bne.n	8002992 <complet+0x5a>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 8002952:	2300      	movs	r3, #0
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
 8002956:	e018      	b.n	800298a <complet+0x52>
			if (microrl_actions[i].level == 0)
 8002958:	4a5f      	ldr	r2, [pc, #380]	; (8002ad8 <complet+0x1a0>)
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	212c      	movs	r1, #44	; 0x2c
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	4413      	add	r3, r2
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10c      	bne.n	8002984 <complet+0x4c>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 800296a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002972:	212c      	movs	r1, #44	; 0x2c
 8002974:	fb01 f202 	mul.w	r2, r1, r2
 8002978:	4957      	ldr	r1, [pc, #348]	; (8002ad8 <complet+0x1a0>)
 800297a:	440a      	add	r2, r1
 800297c:	3204      	adds	r2, #4
 800297e:	4955      	ldr	r1, [pc, #340]	; (8002ad4 <complet+0x19c>)
 8002980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 8002984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002986:	3301      	adds	r3, #1
 8002988:	62bb      	str	r3, [r7, #40]	; 0x28
 800298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298c:	2b0a      	cmp	r3, #10
 800298e:	d9e3      	bls.n	8002958 <complet+0x20>
 8002990:	e095      	b.n	8002abe <complet+0x186>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002998:	3b01      	subs	r3, #1
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	4413      	add	r3, r2
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 80029ac:	2300      	movs	r3, #0
 80029ae:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 80029b0:	2300      	movs	r3, #0
 80029b2:	61bb      	str	r3, [r7, #24]
 80029b4:	e07c      	b.n	8002ab0 <complet+0x178>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	e06b      	b.n	8002a94 <complet+0x15c>
			{
				tokens_found = false;
 80029bc:	2300      	movs	r3, #0
 80029be:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 80029c0:	4a45      	ldr	r2, [pc, #276]	; (8002ad8 <complet+0x1a0>)
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d6:	d001      	beq.n	80029dc <complet+0xa4>
					synonym_level = current_level; // save the synonym level
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e2:	d003      	beq.n	80029ec <complet+0xb4>
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	db57      	blt.n	8002a9c <complet+0x164>
					break;
				if (current_level == i)
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d101      	bne.n	80029f8 <complet+0xc0>
					last_main_synonym = n;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d128      	bne.n	8002a54 <complet+0x11c>
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	222c      	movs	r2, #44	; 0x2c
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	4a33      	ldr	r2, [pc, #204]	; (8002ad8 <complet+0x1a0>)
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3304      	adds	r3, #4
 8002a10:	6939      	ldr	r1, [r7, #16]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f009 fe48 	bl	800c6a8 <strstr>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	492d      	ldr	r1, [pc, #180]	; (8002ad8 <complet+0x1a0>)
 8002a24:	440b      	add	r3, r1
 8002a26:	3304      	adds	r3, #4
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d113      	bne.n	8002a54 <complet+0x11c>
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d10f      	bne.n	8002a54 <complet+0x11c>
										(i == synonym_level))
				{
					tokens_found = true;
 8002a34:	2301      	movs	r3, #1
 8002a36:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 8002a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	212c      	movs	r1, #44	; 0x2c
 8002a42:	fb01 f202 	mul.w	r2, r1, r2
 8002a46:	4924      	ldr	r1, [pc, #144]	; (8002ad8 <complet+0x1a0>)
 8002a48:	440a      	add	r2, r1
 8002a4a:	3204      	adds	r2, #4
 8002a4c:	4921      	ldr	r1, [pc, #132]	; (8002ad4 <complet+0x19c>)
 8002a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002a52:	e01c      	b.n	8002a8e <complet+0x156>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	212c      	movs	r1, #44	; 0x2c
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	491c      	ldr	r1, [pc, #112]	; (8002ad8 <complet+0x1a0>)
 8002a68:	440b      	add	r3, r1
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4610      	mov	r0, r2
 8002a70:	f7fd fb6c 	bl	800014c <strcmp>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <complet+0x156>
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d105      	bne.n	8002a8e <complet+0x156>
				{
					last_main_synonym++;
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	3301      	adds	r3, #1
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	77fb      	strb	r3, [r7, #31]
					break;
 8002a8c:	e007      	b.n	8002a9e <complet+0x166>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	3301      	adds	r3, #1
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	2b0a      	cmp	r3, #10
 8002a98:	d990      	bls.n	80029bc <complet+0x84>
 8002a9a:	e000      	b.n	8002a9e <complet+0x166>
					break;
 8002a9c:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 8002a9e:	7ffb      	ldrb	r3, [r7, #31]
 8002aa0:	f083 0301 	eor.w	r3, r3, #1
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d108      	bne.n	8002abc <complet+0x184>
		for (int i = 0; i < argc; i++)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	3301      	adds	r3, #1
 8002aae:	61bb      	str	r3, [r7, #24]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	f6ff af7e 	blt.w	80029b6 <complet+0x7e>
 8002aba:	e000      	b.n	8002abe <complet+0x186>
				break;
 8002abc:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 8002abe:	4a05      	ldr	r2, [pc, #20]	; (8002ad4 <complet+0x19c>)
 8002ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 8002ac8:	4b02      	ldr	r3, [pc, #8]	; (8002ad4 <complet+0x19c>)
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3730      	adds	r7, #48	; 0x30
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000688 	.word	0x20000688
 8002ad8:	0800ca98 	.word	0x0800ca98

08002adc <init_microrl>:
#endif

void init_microrl(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <init_microrl+0x38>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	490c      	ldr	r1, [pc, #48]	; (8002b18 <init_microrl+0x3c>)
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe ff88 	bl	80019fc <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <init_microrl+0x38>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	490a      	ldr	r1, [pc, #40]	; (8002b1c <init_microrl+0x40>)
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe ffce 	bl	8001a94 <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <init_microrl+0x38>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4908      	ldr	r1, [pc, #32]	; (8002b20 <init_microrl+0x44>)
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe ffba 	bl	8001a78 <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 8002b04:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <init_microrl+0x38>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4906      	ldr	r1, [pc, #24]	; (8002b24 <init_microrl+0x48>)
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe ffd0 	bl	8001ab0 <microrl_set_sigint_callback>
}
 8002b10:	bf00      	nop
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	2000000c 	.word	0x2000000c
 8002b18:	08002495 	.word	0x08002495
 8002b1c:	08002799 	.word	0x08002799
 8002b20:	08002939 	.word	0x08002939
 8002b24:	08000bf1 	.word	0x08000bf1

08002b28 <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 8002b32:	4805      	ldr	r0, [pc, #20]	; (8002b48 <clear_screen+0x20>)
 8002b34:	f7ff fcae 	bl	8002494 <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 8002b38:	4804      	ldr	r0, [pc, #16]	; (8002b4c <clear_screen+0x24>)
 8002b3a:	f7ff fcab 	bl	8002494 <print>
	return 0;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	0800ca0c 	.word	0x0800ca0c
 8002b4c:	0800ca14 	.word	0x0800ca14

08002b50 <color_toggle>:

int color_toggle 	(int argc, const char * const * argv)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <color_toggle+0x30>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	f083 0301 	eor.w	r3, r3, #1
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf14      	ite	ne
 8002b68:	2301      	movne	r3, #1
 8002b6a:	2300      	moveq	r3, #0
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <color_toggle+0x30>)
 8002b70:	701a      	strb	r2, [r3, #0]
	return 0;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20000010 	.word	0x20000010

08002b84 <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
	color_out = 1;
 8002b8e:	4b07      	ldr	r3, [pc, #28]	; (8002bac <color_on+0x28>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 8002b94:	2105      	movs	r1, #5
 8002b96:	4806      	ldr	r0, [pc, #24]	; (8002bb0 <color_on+0x2c>)
 8002b98:	f7ff fcdc 	bl	8002554 <print_color>
	print(ENDL);
 8002b9c:	4805      	ldr	r0, [pc, #20]	; (8002bb4 <color_on+0x30>)
 8002b9e:	f7ff fc79 	bl	8002494 <print>
	return 0;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20000010 	.word	0x20000010
 8002bb0:	0800ca18 	.word	0x0800ca18
 8002bb4:	0800c968 	.word	0x0800c968

08002bb8 <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
	color_out = 0;
 8002bc2:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <color_off+0x28>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 8002bc8:	4806      	ldr	r0, [pc, #24]	; (8002be4 <color_off+0x2c>)
 8002bca:	f7ff fc63 	bl	8002494 <print>
	print(ENDL);
 8002bce:	4806      	ldr	r0, [pc, #24]	; (8002be8 <color_off+0x30>)
 8002bd0:	f7ff fc60 	bl	8002494 <print>
	return 0;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000010 	.word	0x20000010
 8002be4:	0800ca2c 	.word	0x0800ca2c
 8002be8:	0800c968 	.word	0x0800c968

08002bec <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
	if (color_out)
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <color_show+0x34>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d004      	beq.n	8002c08 <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 8002bfe:	2105      	movs	r1, #5
 8002c00:	4808      	ldr	r0, [pc, #32]	; (8002c24 <color_show+0x38>)
 8002c02:	f7ff fca7 	bl	8002554 <print_color>
 8002c06:	e002      	b.n	8002c0e <color_show+0x22>
	else
		print ("Color output is OFF");
 8002c08:	4807      	ldr	r0, [pc, #28]	; (8002c28 <color_show+0x3c>)
 8002c0a:	f7ff fc43 	bl	8002494 <print>
	print(ENDL);
 8002c0e:	4807      	ldr	r0, [pc, #28]	; (8002c2c <color_show+0x40>)
 8002c10:	f7ff fc40 	bl	8002494 <print>
	return 0;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000010 	.word	0x20000010
 8002c24:	0800ca18 	.word	0x0800ca18
 8002c28:	0800ca2c 	.word	0x0800ca2c
 8002c2c:	0800c968 	.word	0x0800c968

08002c30 <nrf24l01p_get_clear_irq_flags>:
{
  nrf24l01p_write_reg(NRF24L01P_CONFIG, BIT_COND(nrf24l01p_read_reg(NRF24L01P_CONFIG), int_source, !irq_state));
}

uint8_t nrf24l01p_get_clear_irq_flags(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  enum { IRQ_FLAGS = BIT(NRF24L01P_IRQ_MAX_RT) | BIT(NRF24L01P_IRQ_TX_DS) | BIT(NRF24L01P_IRQ_RX_DR) };
  return nrf24l01p_write_reg(NRF24L01P_STATUS, IRQ_FLAGS) & IRQ_FLAGS;
 8002c34:	2170      	movs	r1, #112	; 0x70
 8002c36:	2007      	movs	r0, #7
 8002c38:	f000 fa3b 	bl	80030b2 <nrf24l01p_write_reg>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c42:	b2db      	uxtb	r3, r3
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <nrf24l01p_clear_irq_flag>:

void nrf24l01p_clear_irq_flag(nrf24l01p_irq_source_t int_source)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_STATUS, BIT(int_source));
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	2201      	movs	r2, #1
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	2007      	movs	r0, #7
 8002c60:	f000 fa27 	bl	80030b2 <nrf24l01p_write_reg>
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <nrf24l01p_get_irq_flags>:
{
  return !(nrf24l01p_read_reg(NRF24L01P_CONFIG) & BIT(int_type));
}

uint8_t nrf24l01p_get_irq_flags(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  return nrf24l01p_nop() & (BIT(6)|BIT(5)|BIT(4));
 8002c70:	f000 f9df 	bl	8003032 <nrf24l01p_nop>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c7a:	b2db      	uxtb	r3, r3
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <nrf24l01p_set_crc_mode>:

void nrf24l01p_set_crc_mode(nrf24l01p_crc_mode_t crc_mode)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_CONFIG, (nrf24l01p_read_reg(NRF24L01P_CONFIG) & ~(BIT(3)|BIT(2))) | ((uint8_t)crc_mode<<2u));
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f000 f9f8 	bl	8003080 <nrf24l01p_read_reg>
 8002c90:	4603      	mov	r3, r0
 8002c92:	b25b      	sxtb	r3, r3
 8002c94:	f023 030c 	bic.w	r3, r3, #12
 8002c98:	b25a      	sxtb	r2, r3
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	b25b      	sxtb	r3, r3
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	b25b      	sxtb	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f000 fa02 	bl	80030b2 <nrf24l01p_write_reg>
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <nrf24l01p_open_pipe>:

void nrf24l01p_open_pipe(nrf24l01p_address_t pipe_num, bool auto_ack)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	460a      	mov	r2, r1
 8002cc0:	71fb      	strb	r3, [r7, #7]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	71bb      	strb	r3, [r7, #6]
  switch(pipe_num)
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	2b05      	cmp	r3, #5
 8002cca:	dc02      	bgt.n	8002cd2 <nrf24l01p_open_pipe+0x1c>
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	da03      	bge.n	8002cd8 <nrf24l01p_open_pipe+0x22>
      else
        nrf24l01p_write_reg(NRF24L01P_EN_AA, 0);
      break;
      
    default:
      break;
 8002cd0:	e044      	b.n	8002d5c <nrf24l01p_open_pipe+0xa6>
  switch(pipe_num)
 8002cd2:	2bff      	cmp	r3, #255	; 0xff
 8002cd4:	d031      	beq.n	8002d3a <nrf24l01p_open_pipe+0x84>
      break;
 8002cd6:	e041      	b.n	8002d5c <nrf24l01p_open_pipe+0xa6>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, nrf24l01p_read_reg(NRF24L01P_EN_RXADDR) | BIT(pipe_num));
 8002cd8:	2002      	movs	r0, #2
 8002cda:	f000 f9d1 	bl	8003080 <nrf24l01p_read_reg>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	b25a      	sxtb	r2, r3
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cea:	b25b      	sxtb	r3, r3
 8002cec:	4313      	orrs	r3, r2
 8002cee:	b25b      	sxtb	r3, r3
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	2002      	movs	r0, #2
 8002cf6:	f000 f9dc 	bl	80030b2 <nrf24l01p_write_reg>
      nrf24l01p_write_reg(NRF24L01P_EN_AA, BIT_COND(nrf24l01p_read_reg(NRF24L01P_EN_AA), pipe_num, auto_ack));
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	f000 f9c0 	bl	8003080 <nrf24l01p_read_reg>
 8002d00:	4603      	mov	r3, r0
 8002d02:	b25a      	sxtb	r2, r3
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	2101      	movs	r1, #1
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	b25b      	sxtb	r3, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	b25b      	sxtb	r3, r3
 8002d12:	4013      	ands	r3, r2
 8002d14:	b25a      	sxtb	r2, r3
 8002d16:	79bb      	ldrb	r3, [r7, #6]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <nrf24l01p_open_pipe+0x72>
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	2101      	movs	r1, #1
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	b25b      	sxtb	r3, r3
 8002d26:	e000      	b.n	8002d2a <nrf24l01p_open_pipe+0x74>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	b25b      	sxtb	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	4619      	mov	r1, r3
 8002d32:	2001      	movs	r0, #1
 8002d34:	f000 f9bd 	bl	80030b2 <nrf24l01p_write_reg>
      break;
 8002d38:	e010      	b.n	8002d5c <nrf24l01p_open_pipe+0xa6>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, (uint8_t)~(BIT(7)|BIT(6)));
 8002d3a:	213f      	movs	r1, #63	; 0x3f
 8002d3c:	2002      	movs	r0, #2
 8002d3e:	f000 f9b8 	bl	80030b2 <nrf24l01p_write_reg>
      if(auto_ack)
 8002d42:	79bb      	ldrb	r3, [r7, #6]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d004      	beq.n	8002d52 <nrf24l01p_open_pipe+0x9c>
        nrf24l01p_write_reg(NRF24L01P_EN_AA, (uint8_t)~(BIT(7)|BIT(6)));
 8002d48:	213f      	movs	r1, #63	; 0x3f
 8002d4a:	2001      	movs	r0, #1
 8002d4c:	f000 f9b1 	bl	80030b2 <nrf24l01p_write_reg>
      break;
 8002d50:	e003      	b.n	8002d5a <nrf24l01p_open_pipe+0xa4>
        nrf24l01p_write_reg(NRF24L01P_EN_AA, 0);
 8002d52:	2100      	movs	r1, #0
 8002d54:	2001      	movs	r0, #1
 8002d56:	f000 f9ac 	bl	80030b2 <nrf24l01p_write_reg>
      break;
 8002d5a:	bf00      	nop
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <nrf24l01p_close_pipe>:

void nrf24l01p_close_pipe(nrf24l01p_address_t pipe_num)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
  switch(pipe_num)
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	dc02      	bgt.n	8002d7a <nrf24l01p_close_pipe+0x16>
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	da03      	bge.n	8002d80 <nrf24l01p_close_pipe+0x1c>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, 0);
      nrf24l01p_write_reg(NRF24L01P_EN_AA, 0);
      break;
      
    default:
      break;
 8002d78:	e032      	b.n	8002de0 <nrf24l01p_close_pipe+0x7c>
  switch(pipe_num)
 8002d7a:	2bff      	cmp	r3, #255	; 0xff
 8002d7c:	d027      	beq.n	8002dce <nrf24l01p_close_pipe+0x6a>
      break;
 8002d7e:	e02f      	b.n	8002de0 <nrf24l01p_close_pipe+0x7c>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, nrf24l01p_read_reg(NRF24L01P_EN_RXADDR) & ~BIT(pipe_num));
 8002d80:	2002      	movs	r0, #2
 8002d82:	f000 f97d 	bl	8003080 <nrf24l01p_read_reg>
 8002d86:	4603      	mov	r3, r0
 8002d88:	b25a      	sxtb	r2, r3
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d92:	b25b      	sxtb	r3, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	b25b      	sxtb	r3, r3
 8002d98:	4013      	ands	r3, r2
 8002d9a:	b25b      	sxtb	r3, r3
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	4619      	mov	r1, r3
 8002da0:	2002      	movs	r0, #2
 8002da2:	f000 f986 	bl	80030b2 <nrf24l01p_write_reg>
      nrf24l01p_write_reg(NRF24L01P_EN_AA, nrf24l01p_read_reg(NRF24L01P_EN_AA) & ~BIT(pipe_num));
 8002da6:	2001      	movs	r0, #1
 8002da8:	f000 f96a 	bl	8003080 <nrf24l01p_read_reg>
 8002dac:	4603      	mov	r3, r0
 8002dae:	b25a      	sxtb	r2, r3
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	2101      	movs	r1, #1
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	b25b      	sxtb	r3, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	b25b      	sxtb	r3, r3
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	b25b      	sxtb	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	f000 f973 	bl	80030b2 <nrf24l01p_write_reg>
      break;
 8002dcc:	e008      	b.n	8002de0 <nrf24l01p_close_pipe+0x7c>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, 0);
 8002dce:	2100      	movs	r1, #0
 8002dd0:	2002      	movs	r0, #2
 8002dd2:	f000 f96e 	bl	80030b2 <nrf24l01p_write_reg>
      nrf24l01p_write_reg(NRF24L01P_EN_AA, 0);
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	2001      	movs	r0, #1
 8002dda:	f000 f96a 	bl	80030b2 <nrf24l01p_write_reg>
      break;
 8002dde:	bf00      	nop
  }
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <nrf24l01p_set_address>:

void nrf24l01p_set_address(nrf24l01p_address_t address, const uint8_t *addr)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	6039      	str	r1, [r7, #0]
 8002df2:	71fb      	strb	r3, [r7, #7]
  switch(address)
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	2b06      	cmp	r3, #6
 8002df8:	d00a      	beq.n	8002e10 <nrf24l01p_set_address+0x28>
 8002dfa:	2b06      	cmp	r3, #6
 8002dfc:	dc19      	bgt.n	8002e32 <nrf24l01p_set_address+0x4a>
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	dc02      	bgt.n	8002e08 <nrf24l01p_set_address+0x20>
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	da04      	bge.n	8002e10 <nrf24l01p_set_address+0x28>
    case NRF24L01P_PIPE5:
      nrf24l01p_write_reg(NRF24L01P_RX_ADDR_P0 + (uint8_t)address, *addr);
      break;

    default:
      break;
 8002e06:	e014      	b.n	8002e32 <nrf24l01p_set_address+0x4a>
 8002e08:	3b02      	subs	r3, #2
  switch(address)
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d811      	bhi.n	8002e32 <nrf24l01p_set_address+0x4a>
 8002e0e:	e006      	b.n	8002e1e <nrf24l01p_set_address+0x36>
      nrf24l01p_write_multibyte_reg((uint8_t) address, addr, 0);
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	2200      	movs	r2, #0
 8002e14:	6839      	ldr	r1, [r7, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 f9e8 	bl	80031ec <nrf24l01p_write_multibyte_reg>
      break;
 8002e1c:	e00a      	b.n	8002e34 <nrf24l01p_set_address+0x4c>
      nrf24l01p_write_reg(NRF24L01P_RX_ADDR_P0 + (uint8_t)address, *addr);
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	330a      	adds	r3, #10
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	f000 f941 	bl	80030b2 <nrf24l01p_write_reg>
      break;
 8002e30:	e000      	b.n	8002e34 <nrf24l01p_set_address+0x4c>
      break;
 8002e32:	bf00      	nop
  }
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <nrf24l01p_set_auto_retr>:

void nrf24l01p_set_auto_retr(uint8_t retr, uint16_t delay)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	460a      	mov	r2, r1
 8002e46:	71fb      	strb	r3, [r7, #7]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	80bb      	strh	r3, [r7, #4]
  nrf24l01p_write_reg(NRF24L01P_SETUP_RETR, (((delay/250)-1)<<4) | retr);
 8002e4c:	88bb      	ldrh	r3, [r7, #4]
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <nrf24l01p_set_auto_retr+0x3c>)
 8002e50:	fba2 2303 	umull	r2, r3, r2, r3
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	b25a      	sxtb	r2, r3
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	b25b      	sxtb	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	4619      	mov	r1, r3
 8002e6a:	2004      	movs	r0, #4
 8002e6c:	f000 f921 	bl	80030b2 <nrf24l01p_write_reg>
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	10624dd3 	.word	0x10624dd3

08002e7c <nrf24l01p_set_address_width>:

void nrf24l01p_set_address_width(nrf24l01p_address_width_t address_width)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_SETUP_AW, (uint8_t)address_width - 2);
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	3b02      	subs	r3, #2
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	2003      	movs	r0, #3
 8002e90:	f000 f90f 	bl	80030b2 <nrf24l01p_write_reg>
}
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <nrf24l01p_set_rx_payload_width>:

void nrf24l01p_set_rx_payload_width(uint8_t pipe_num, uint8_t payload_width)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	460a      	mov	r2, r1
 8002ea6:	71fb      	strb	r3, [r7, #7]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	71bb      	strb	r3, [r7, #6]
  nrf24l01p_write_reg(NRF24L01P_RX_PW_P0 + pipe_num, payload_width);
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	3311      	adds	r3, #17
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	79ba      	ldrb	r2, [r7, #6]
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f8fb 	bl	80030b2 <nrf24l01p_write_reg>
}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <nrf24l01p_get_address_width>:
{
  return (nrf24l01p_read_reg(NRF24L01P_OBSERVE_TX) & (BIT(7)|BIT(6)|BIT(5)|BIT(4))) >> 4;
}

uint8_t nrf24l01p_get_address_width(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  return (nrf24l01p_read_reg(NRF24L01P_SETUP_AW) + 2);
 8002ec8:	2003      	movs	r0, #3
 8002eca:	f000 f8d9 	bl	8003080 <nrf24l01p_read_reg>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	b2db      	uxtb	r3, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <nrf24l01p_set_operation_mode>:
{
  return nrf24l01p_read_reg(NRF24L01P_RX_PW_P0 + pipe_num);
}

void nrf24l01p_set_operation_mode(nrf24l01p_operation_mode_t op_mode)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_CONFIG, BIT_COND(nrf24l01p_read_reg(NRF24L01P_CONFIG), NRF24L01P_CONFIG_PRIM_RX, op_mode == NRF24L01P_PRX));
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f000 f8cc 	bl	8003080 <nrf24l01p_read_reg>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	b25b      	sxtb	r3, r3
 8002eec:	f023 0301 	bic.w	r3, r3, #1
 8002ef0:	b25a      	sxtb	r2, r3
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2301      	moveq	r3, #1
 8002efa:	2300      	movne	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	b25b      	sxtb	r3, r3
 8002f00:	4313      	orrs	r3, r2
 8002f02:	b25b      	sxtb	r3, r3
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	4619      	mov	r1, r3
 8002f08:	2000      	movs	r0, #0
 8002f0a:	f000 f8d2 	bl	80030b2 <nrf24l01p_write_reg>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <nrf24l01p_set_power_mode>:

void nrf24l01p_set_power_mode(nrf24l01p_pwr_mode_t pwr_mode)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_CONFIG, BIT_COND(nrf24l01p_read_reg(NRF24L01P_CONFIG), NRF24L01P_CONFIG_PWR_UP, pwr_mode == NRF24L01P_PWR_UP));
 8002f20:	2000      	movs	r0, #0
 8002f22:	f000 f8ad 	bl	8003080 <nrf24l01p_read_reg>
 8002f26:	4603      	mov	r3, r0
 8002f28:	b25b      	sxtb	r3, r3
 8002f2a:	f023 0302 	bic.w	r3, r3, #2
 8002f2e:	b25b      	sxtb	r3, r3
 8002f30:	79fa      	ldrb	r2, [r7, #7]
 8002f32:	2a01      	cmp	r2, #1
 8002f34:	d101      	bne.n	8002f3a <nrf24l01p_set_power_mode+0x24>
 8002f36:	2202      	movs	r2, #2
 8002f38:	e000      	b.n	8002f3c <nrf24l01p_set_power_mode+0x26>
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	b25b      	sxtb	r3, r3
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	4619      	mov	r1, r3
 8002f44:	2000      	movs	r0, #0
 8002f46:	f000 f8b4 	bl	80030b2 <nrf24l01p_write_reg>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(uint8_t channel)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_RF_CH, channel);
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	4619      	mov	r1, r3
 8002f60:	2005      	movs	r0, #5
 8002f62:	f000 f8a6 	bl	80030b2 <nrf24l01p_write_reg>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <nrf24l01p_rx_fifo_empty>:
{
  return (nrf24l01p_read_reg(NRF24L01P_RF_SETUP) & (1<<NRF24L01P_RF_SETUP_RF_DR)) >> NRF24L01P_RF_SETUP_RF_DR;
}

bool nrf24l01p_rx_fifo_empty(void)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	af00      	add	r7, sp, #0
  return nrf24l01p_get_rx_data_source() == 7;
 8002f72:	f000 f83d 	bl	8002ff0 <nrf24l01p_get_rx_data_source>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b07      	cmp	r3, #7
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <nrf24l01p_get_carrier_detect>:
{
  return nrf24l01p_read_reg(NRF24L01P_OBSERVE_TX) & (BIT(3)|BIT(2)|BIT(1)|BIT(0));
}

bool nrf24l01p_get_carrier_detect(void)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	af00      	add	r7, sp, #0
  return nrf24l01p_read_reg(NRF24L01P_CD) & 1;
 8002f8a:	2009      	movs	r0, #9
 8002f8c:	f000 f878 	bl	8003080 <nrf24l01p_read_reg>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	bf14      	ite	ne
 8002f9a:	2301      	movne	r3, #1
 8002f9c:	2300      	moveq	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <nrf24l01p_write_tx_payload>:

void nrf24l01p_write_tx_payload(const uint8_t *tx_payload, uint8_t length)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	70fb      	strb	r3, [r7, #3]
  nrf24l01p_write_multibyte_reg(NRF24L01P_TX_PAYLOAD, tx_payload, length);
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	2007      	movs	r0, #7
 8002fb8:	f000 f918 	bl	80031ec <nrf24l01p_write_multibyte_reg>
}
 8002fbc:	bf00      	nop
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <nrf24l01p_read_rx_fifo_payload_width>:

  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
}

uint8_t nrf24l01p_read_rx_fifo_payload_width()
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
  uint8_t temp;
  
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 8002fca:	2000      	movs	r0, #0
 8002fcc:	f7fd f9de 	bl	800038c <nrf24l01p_spi_ss>

  nrf24l01p_spi_rw(NRF24L01P_RD_RX_PAYLOAD_WIDTH);
 8002fd0:	2060      	movs	r0, #96	; 0x60
 8002fd2:	f7fd fa05 	bl	80003e0 <nrf24l01p_spi_rw>
  temp = nrf24l01p_spi_rw(0);
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	f7fd fa02 	bl	80003e0 <nrf24l01p_spi_rw>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 8002fe0:	2001      	movs	r0, #1
 8002fe2:	f7fd f9d3 	bl	800038c <nrf24l01p_spi_ss>

  return temp;
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <nrf24l01p_get_rx_data_source>:

  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
}

uint8_t nrf24l01p_get_rx_data_source(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  return ((nrf24l01p_nop() & (BIT(3)|BIT(2)|BIT(1))) >> 1);
 8002ff4:	f000 f81d 	bl	8003032 <nrf24l01p_nop>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	105b      	asrs	r3, r3, #1
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	b2db      	uxtb	r3, r3
}
 8003004:	4618      	mov	r0, r3
 8003006:	bd80      	pop	{r7, pc}

08003008 <nrf24l01p_read_rx_payload>:

// Fixed: returns length==0 and pipe==7 means FIFO empty

uint16_t nrf24l01p_read_rx_payload(uint8_t *rx_payload)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  return nrf24l01p_read_multibyte_reg(NRF24L01P_RX_PAYLOAD, rx_payload);
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	2008      	movs	r0, #8
 8003014:	f000 f88d 	bl	8003132 <nrf24l01p_read_multibyte_reg>
 8003018:	4603      	mov	r3, r0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <nrf24l01p_flush_tx>:
{
  nrf24l01p_write_reg(NRF24L01P_FLUSH_RX, 0);
}

void nrf24l01p_flush_tx(void)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	af00      	add	r7, sp, #0
  nrf24l01p_write_reg(NRF24L01P_FLUSH_TX, 0);
 8003026:	2100      	movs	r1, #0
 8003028:	20e1      	movs	r0, #225	; 0xe1
 800302a:	f000 f842 	bl	80030b2 <nrf24l01p_write_reg>
}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}

08003032 <nrf24l01p_nop>:

uint8_t nrf24l01p_nop(void)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	af00      	add	r7, sp, #0
  return nrf24l01p_write_reg(NRF24L01P_NOP,0);
 8003036:	2100      	movs	r1, #0
 8003038:	20ff      	movs	r0, #255	; 0xff
 800303a:	f000 f83a 	bl	80030b2 <nrf24l01p_write_reg>
 800303e:	4603      	mov	r3, r0
}
 8003040:	4618      	mov	r0, r3
 8003042:	bd80      	pop	{r7, pc}

08003044 <nrf24l01p_set_pll_mode>:

void nrf24l01p_set_pll_mode(nrf24l01p_pll_mode_t pll_mode)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_RF_SETUP, BIT_COND(nrf24l01p_read_reg(NRF24L01P_RF_SETUP), NRF24L01P_RF_SETUP_PLL_LOCK, pll_mode == NRF24L01P_PLL_LOCK));
 800304e:	2006      	movs	r0, #6
 8003050:	f000 f816 	bl	8003080 <nrf24l01p_read_reg>
 8003054:	4603      	mov	r3, r0
 8003056:	b25b      	sxtb	r3, r3
 8003058:	f023 0310 	bic.w	r3, r3, #16
 800305c:	b25b      	sxtb	r3, r3
 800305e:	79fa      	ldrb	r2, [r7, #7]
 8003060:	2a01      	cmp	r2, #1
 8003062:	d101      	bne.n	8003068 <nrf24l01p_set_pll_mode+0x24>
 8003064:	2210      	movs	r2, #16
 8003066:	e000      	b.n	800306a <nrf24l01p_set_pll_mode+0x26>
 8003068:	2200      	movs	r2, #0
 800306a:	4313      	orrs	r3, r2
 800306c:	b25b      	sxtb	r3, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	4619      	mov	r1, r3
 8003072:	2006      	movs	r0, #6
 8003074:	f000 f81d 	bl	80030b2 <nrf24l01p_write_reg>
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <nrf24l01p_read_reg>:
{
  return (nrf24l01p_lna_mode_t) ( (nrf24l01p_read_reg(NRF24L01P_RF_SETUP) & (1<<NRF24L01P_LNA_HCURR)) >> NRF24L01P_LNA_HCURR );
}

uint8_t nrf24l01p_read_reg(uint8_t reg)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	71fb      	strb	r3, [r7, #7]
uint8_t temp;
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 800308a:	2000      	movs	r0, #0
 800308c:	f7fd f97e 	bl	800038c <nrf24l01p_spi_ss>
  nrf24l01p_spi_rw(reg);
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd f9a4 	bl	80003e0 <nrf24l01p_spi_rw>
  temp = nrf24l01p_spi_rw(0);
 8003098:	2000      	movs	r0, #0
 800309a:	f7fd f9a1 	bl	80003e0 <nrf24l01p_spi_rw>
 800309e:	4603      	mov	r3, r0
 80030a0:	73fb      	strb	r3, [r7, #15]
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 80030a2:	2001      	movs	r0, #1
 80030a4:	f7fd f972 	bl	800038c <nrf24l01p_spi_ss>

  return temp;
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <nrf24l01p_write_reg>:

uint8_t nrf24l01p_write_reg(uint8_t reg, uint8_t value)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b084      	sub	sp, #16
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	4603      	mov	r3, r0
 80030ba:	460a      	mov	r2, r1
 80030bc:	71fb      	strb	r3, [r7, #7]
 80030be:	4613      	mov	r3, r2
 80030c0:	71bb      	strb	r3, [r7, #6]
  uint8_t retval;
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 80030c2:	2000      	movs	r0, #0
 80030c4:	f7fd f962 	bl	800038c <nrf24l01p_spi_ss>
  if(reg < NRF24L01P_NRF_WRITE_REG)   // i.e. this is a register access
 80030c8:	79fb      	ldrb	r3, [r7, #7]
 80030ca:	2b1f      	cmp	r3, #31
 80030cc:	d80c      	bhi.n	80030e8 <nrf24l01p_write_reg+0x36>
  {
    retval = nrf24l01p_spi_rw(NRF24L01P_NRF_WRITE_REG + reg);
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	3320      	adds	r3, #32
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fd f983 	bl	80003e0 <nrf24l01p_spi_rw>
 80030da:	4603      	mov	r3, r0
 80030dc:	73fb      	strb	r3, [r7, #15]
    nrf24l01p_spi_rw(value);
 80030de:	79bb      	ldrb	r3, [r7, #6]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fd f97d 	bl	80003e0 <nrf24l01p_spi_rw>
 80030e6:	e01c      	b.n	8003122 <nrf24l01p_write_reg+0x70>
  }
  else            // single byte cmd OR future command/register access
  {
    if(!(reg == NRF24L01P_FLUSH_TX) && !(reg == NRF24L01P_FLUSH_RX) && !(reg == NRF24L01P_REUSE_TX_PL) && !(reg == NRF24L01P_NOP))
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	2be1      	cmp	r3, #225	; 0xe1
 80030ec:	d013      	beq.n	8003116 <nrf24l01p_write_reg+0x64>
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	2be2      	cmp	r3, #226	; 0xe2
 80030f2:	d010      	beq.n	8003116 <nrf24l01p_write_reg+0x64>
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	2be3      	cmp	r3, #227	; 0xe3
 80030f8:	d00d      	beq.n	8003116 <nrf24l01p_write_reg+0x64>
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	2bff      	cmp	r3, #255	; 0xff
 80030fe:	d00a      	beq.n	8003116 <nrf24l01p_write_reg+0x64>
    {
      retval = nrf24l01p_spi_rw(reg);
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd f96c 	bl	80003e0 <nrf24l01p_spi_rw>
 8003108:	4603      	mov	r3, r0
 800310a:	73fb      	strb	r3, [r7, #15]
      nrf24l01p_spi_rw(value);
 800310c:	79bb      	ldrb	r3, [r7, #6]
 800310e:	4618      	mov	r0, r3
 8003110:	f7fd f966 	bl	80003e0 <nrf24l01p_spi_rw>
 8003114:	e005      	b.n	8003122 <nrf24l01p_write_reg+0x70>
    }
    else          // single byte L01 command
    {
      retval = nrf24l01p_spi_rw(reg);
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	4618      	mov	r0, r3
 800311a:	f7fd f961 	bl	80003e0 <nrf24l01p_spi_rw>
 800311e:	4603      	mov	r3, r0
 8003120:	73fb      	strb	r3, [r7, #15]
    }
  }
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 8003122:	2001      	movs	r0, #1
 8003124:	f7fd f932 	bl	800038c <nrf24l01p_spi_ss>

  return retval;
 8003128:	7bfb      	ldrb	r3, [r7, #15]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <nrf24l01p_read_multibyte_reg>:

uint16_t nrf24l01p_read_multibyte_reg(uint8_t reg, uint8_t *pbuf)
{
 8003132:	b590      	push	{r4, r7, lr}
 8003134:	b085      	sub	sp, #20
 8003136:	af00      	add	r7, sp, #0
 8003138:	4603      	mov	r3, r0
 800313a:	6039      	str	r1, [r7, #0]
 800313c:	71fb      	strb	r3, [r7, #7]
uint8_t ctr, length;
  switch(reg)
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	2b08      	cmp	r3, #8
 8003142:	d018      	beq.n	8003176 <nrf24l01p_read_multibyte_reg+0x44>
 8003144:	2b08      	cmp	r3, #8
 8003146:	dc2f      	bgt.n	80031a8 <nrf24l01p_read_multibyte_reg+0x76>
 8003148:	2b01      	cmp	r3, #1
 800314a:	dc02      	bgt.n	8003152 <nrf24l01p_read_multibyte_reg+0x20>
 800314c:	2b00      	cmp	r3, #0
 800314e:	da02      	bge.n	8003156 <nrf24l01p_read_multibyte_reg+0x24>
 8003150:	e02a      	b.n	80031a8 <nrf24l01p_read_multibyte_reg+0x76>
 8003152:	2b06      	cmp	r3, #6
 8003154:	d128      	bne.n	80031a8 <nrf24l01p_read_multibyte_reg+0x76>
  {
    case NRF24L01P_PIPE0:
    case NRF24L01P_PIPE1:
    case NRF24L01P_TX:
      length = ctr = nrf24l01p_get_address_width();
 8003156:	f7ff feb5 	bl	8002ec4 <nrf24l01p_get_address_width>
 800315a:	4603      	mov	r3, r0
 800315c:	73fb      	strb	r3, [r7, #15]
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	73bb      	strb	r3, [r7, #14]
      nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 8003162:	2000      	movs	r0, #0
 8003164:	f7fd f912 	bl	800038c <nrf24l01p_spi_ss>
      nrf24l01p_spi_rw(NRF24L01P_RX_ADDR_P0 + reg);
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	330a      	adds	r3, #10
 800316c:	b2db      	uxtb	r3, r3
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd f936 	bl	80003e0 <nrf24l01p_spi_rw>
      break;
 8003174:	e01d      	b.n	80031b2 <nrf24l01p_read_multibyte_reg+0x80>
      
    case NRF24L01P_RX_PAYLOAD:
      if( (reg = nrf24l01p_get_rx_data_source()) < 7)
 8003176:	f7ff ff3b 	bl	8002ff0 <nrf24l01p_get_rx_data_source>
 800317a:	4603      	mov	r3, r0
 800317c:	71fb      	strb	r3, [r7, #7]
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	2b06      	cmp	r3, #6
 8003182:	d80c      	bhi.n	800319e <nrf24l01p_read_multibyte_reg+0x6c>
      {
        length = ctr = nrf24l01p_read_rx_fifo_payload_width();
 8003184:	f7ff ff1e 	bl	8002fc4 <nrf24l01p_read_rx_fifo_payload_width>
 8003188:	4603      	mov	r3, r0
 800318a:	73fb      	strb	r3, [r7, #15]
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	73bb      	strb	r3, [r7, #14]

        nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 8003190:	2000      	movs	r0, #0
 8003192:	f7fd f8fb 	bl	800038c <nrf24l01p_spi_ss>
        nrf24l01p_spi_rw(NRF24L01P_RD_RX_PAYLOAD);
 8003196:	2061      	movs	r0, #97	; 0x61
 8003198:	f7fd f922 	bl	80003e0 <nrf24l01p_spi_rw>
      }
      else
      {
       ctr = length = 0;
      }
      break;
 800319c:	e009      	b.n	80031b2 <nrf24l01p_read_multibyte_reg+0x80>
       ctr = length = 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	73bb      	strb	r3, [r7, #14]
 80031a2:	7bbb      	ldrb	r3, [r7, #14]
 80031a4:	73fb      	strb	r3, [r7, #15]
      break;
 80031a6:	e004      	b.n	80031b2 <nrf24l01p_read_multibyte_reg+0x80>

    default:
      ctr = length = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	73bb      	strb	r3, [r7, #14]
 80031ac:	7bbb      	ldrb	r3, [r7, #14]
 80031ae:	73fb      	strb	r3, [r7, #15]
      break;
 80031b0:	bf00      	nop
  }

  while(ctr--)
 80031b2:	e007      	b.n	80031c4 <nrf24l01p_read_multibyte_reg+0x92>
  {
    *pbuf++ = nrf24l01p_spi_rw(0);
 80031b4:	683c      	ldr	r4, [r7, #0]
 80031b6:	1c63      	adds	r3, r4, #1
 80031b8:	603b      	str	r3, [r7, #0]
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7fd f910 	bl	80003e0 <nrf24l01p_spi_rw>
 80031c0:	4603      	mov	r3, r0
 80031c2:	7023      	strb	r3, [r4, #0]
  while(ctr--)
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	1e5a      	subs	r2, r3, #1
 80031c8:	73fa      	strb	r2, [r7, #15]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f2      	bne.n	80031b4 <nrf24l01p_read_multibyte_reg+0x82>
  }

  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 80031ce:	2001      	movs	r0, #1
 80031d0:	f7fd f8dc 	bl	800038c <nrf24l01p_spi_ss>

  return (((uint16_t) reg << 8) | length);
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	b21a      	sxth	r2, r3
 80031da:	7bbb      	ldrb	r3, [r7, #14]
 80031dc:	b21b      	sxth	r3, r3
 80031de:	4313      	orrs	r3, r2
 80031e0:	b21b      	sxth	r3, r3
 80031e2:	b29b      	uxth	r3, r3
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd90      	pop	{r4, r7, pc}

080031ec <nrf24l01p_write_multibyte_reg>:

void nrf24l01p_write_multibyte_reg(uint8_t reg, const uint8_t *pbuf, uint8_t length)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	6039      	str	r1, [r7, #0]
 80031f6:	71fb      	strb	r3, [r7, #7]
 80031f8:	4613      	mov	r3, r2
 80031fa:	71bb      	strb	r3, [r7, #6]
  switch(reg)
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	2b07      	cmp	r3, #7
 8003200:	d016      	beq.n	8003230 <nrf24l01p_write_multibyte_reg+0x44>
 8003202:	2b07      	cmp	r3, #7
 8003204:	dc1b      	bgt.n	800323e <nrf24l01p_write_multibyte_reg+0x52>
 8003206:	2b01      	cmp	r3, #1
 8003208:	dc02      	bgt.n	8003210 <nrf24l01p_write_multibyte_reg+0x24>
 800320a:	2b00      	cmp	r3, #0
 800320c:	da02      	bge.n	8003214 <nrf24l01p_write_multibyte_reg+0x28>
    case NRF24L01P_TX_PAYLOAD:
      nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
      nrf24l01p_spi_rw(NRF24L01P_WR_TX_PAYLOAD);
      break;      
    default:
      break;
 800320e:	e016      	b.n	800323e <nrf24l01p_write_multibyte_reg+0x52>
  switch(reg)
 8003210:	2b06      	cmp	r3, #6
 8003212:	d114      	bne.n	800323e <nrf24l01p_write_multibyte_reg+0x52>
      length = nrf24l01p_get_address_width();
 8003214:	f7ff fe56 	bl	8002ec4 <nrf24l01p_get_address_width>
 8003218:	4603      	mov	r3, r0
 800321a:	71bb      	strb	r3, [r7, #6]
      nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 800321c:	2000      	movs	r0, #0
 800321e:	f7fd f8b5 	bl	800038c <nrf24l01p_spi_ss>
      nrf24l01p_spi_rw(NRF24L01P_NRF_WRITE_REG + NRF24L01P_RX_ADDR_P0 + reg);
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	332a      	adds	r3, #42	; 0x2a
 8003226:	b2db      	uxtb	r3, r3
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd f8d9 	bl	80003e0 <nrf24l01p_spi_rw>
      break;
 800322e:	e007      	b.n	8003240 <nrf24l01p_write_multibyte_reg+0x54>
      nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 8003230:	2000      	movs	r0, #0
 8003232:	f7fd f8ab 	bl	800038c <nrf24l01p_spi_ss>
      nrf24l01p_spi_rw(NRF24L01P_WR_TX_PAYLOAD);
 8003236:	20a0      	movs	r0, #160	; 0xa0
 8003238:	f7fd f8d2 	bl	80003e0 <nrf24l01p_spi_rw>
      break;      
 800323c:	e000      	b.n	8003240 <nrf24l01p_write_multibyte_reg+0x54>
      break;
 800323e:	bf00      	nop
  }

  while(length--)
 8003240:	e006      	b.n	8003250 <nrf24l01p_write_multibyte_reg+0x64>
    nrf24l01p_spi_rw(*pbuf++);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	603a      	str	r2, [r7, #0]
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd f8c8 	bl	80003e0 <nrf24l01p_spi_rw>
  while(length--)
 8003250:	79bb      	ldrb	r3, [r7, #6]
 8003252:	1e5a      	subs	r2, r3, #1
 8003254:	71ba      	strb	r2, [r7, #6]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f3      	bne.n	8003242 <nrf24l01p_write_multibyte_reg+0x56>

  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 800325a:	2001      	movs	r0, #1
 800325c:	f7fd f896 	bl	800038c <nrf24l01p_spi_ss>
}
 8003260:	bf00      	nop
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800326e:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <HAL_MspInit+0x5c>)
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	4a14      	ldr	r2, [pc, #80]	; (80032c4 <HAL_MspInit+0x5c>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6193      	str	r3, [r2, #24]
 800327a:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <HAL_MspInit+0x5c>)
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003286:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <HAL_MspInit+0x5c>)
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	4a0e      	ldr	r2, [pc, #56]	; (80032c4 <HAL_MspInit+0x5c>)
 800328c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003290:	61d3      	str	r3, [r2, #28]
 8003292:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <HAL_MspInit+0x5c>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	607b      	str	r3, [r7, #4]
 800329c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800329e:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <HAL_MspInit+0x60>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	4a04      	ldr	r2, [pc, #16]	; (80032c8 <HAL_MspInit+0x60>)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ba:	bf00      	nop
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40010000 	.word	0x40010000

080032cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	f107 0310 	add.w	r3, r7, #16
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a15      	ldr	r2, [pc, #84]	; (800333c <HAL_I2C_MspInit+0x70>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d123      	bne.n	8003334 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ec:	4b14      	ldr	r3, [pc, #80]	; (8003340 <HAL_I2C_MspInit+0x74>)
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	4a13      	ldr	r2, [pc, #76]	; (8003340 <HAL_I2C_MspInit+0x74>)
 80032f2:	f043 0308 	orr.w	r3, r3, #8
 80032f6:	6193      	str	r3, [r2, #24]
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_I2C_MspInit+0x74>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003304:	23c0      	movs	r3, #192	; 0xc0
 8003306:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003308:	2312      	movs	r3, #18
 800330a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800330c:	2303      	movs	r3, #3
 800330e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003310:	f107 0310 	add.w	r3, r7, #16
 8003314:	4619      	mov	r1, r3
 8003316:	480b      	ldr	r0, [pc, #44]	; (8003344 <HAL_I2C_MspInit+0x78>)
 8003318:	f000 fcbc 	bl	8003c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800331c:	4b08      	ldr	r3, [pc, #32]	; (8003340 <HAL_I2C_MspInit+0x74>)
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	4a07      	ldr	r2, [pc, #28]	; (8003340 <HAL_I2C_MspInit+0x74>)
 8003322:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003326:	61d3      	str	r3, [r2, #28]
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_I2C_MspInit+0x74>)
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003334:	bf00      	nop
 8003336:	3720      	adds	r7, #32
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40005400 	.word	0x40005400
 8003340:	40021000 	.word	0x40021000
 8003344:	40010c00 	.word	0x40010c00

08003348 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003350:	f107 0310 	add.w	r3, r7, #16
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1c      	ldr	r2, [pc, #112]	; (80033d4 <HAL_SPI_MspInit+0x8c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d131      	bne.n	80033cc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003368:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <HAL_SPI_MspInit+0x90>)
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	4a1a      	ldr	r2, [pc, #104]	; (80033d8 <HAL_SPI_MspInit+0x90>)
 800336e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003372:	61d3      	str	r3, [r2, #28]
 8003374:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <HAL_SPI_MspInit+0x90>)
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003380:	4b15      	ldr	r3, [pc, #84]	; (80033d8 <HAL_SPI_MspInit+0x90>)
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	4a14      	ldr	r2, [pc, #80]	; (80033d8 <HAL_SPI_MspInit+0x90>)
 8003386:	f043 0308 	orr.w	r3, r3, #8
 800338a:	6193      	str	r3, [r2, #24]
 800338c:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <HAL_SPI_MspInit+0x90>)
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003398:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800339c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339e:	2302      	movs	r3, #2
 80033a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033a2:	2303      	movs	r3, #3
 80033a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a6:	f107 0310 	add.w	r3, r7, #16
 80033aa:	4619      	mov	r1, r3
 80033ac:	480b      	ldr	r0, [pc, #44]	; (80033dc <HAL_SPI_MspInit+0x94>)
 80033ae:	f000 fc71 	bl	8003c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80033b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033c0:	f107 0310 	add.w	r3, r7, #16
 80033c4:	4619      	mov	r1, r3
 80033c6:	4805      	ldr	r0, [pc, #20]	; (80033dc <HAL_SPI_MspInit+0x94>)
 80033c8:	f000 fc64 	bl	8003c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80033cc:	bf00      	nop
 80033ce:	3720      	adds	r7, #32
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40003800 	.word	0x40003800
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40010c00 	.word	0x40010c00

080033e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a09      	ldr	r2, [pc, #36]	; (8003414 <HAL_TIM_Base_MspInit+0x34>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d10b      	bne.n	800340a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <HAL_TIM_Base_MspInit+0x38>)
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	4a08      	ldr	r2, [pc, #32]	; (8003418 <HAL_TIM_Base_MspInit+0x38>)
 80033f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033fc:	6193      	str	r3, [r2, #24]
 80033fe:	4b06      	ldr	r3, [pc, #24]	; (8003418 <HAL_TIM_Base_MspInit+0x38>)
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800340a:	bf00      	nop
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr
 8003414:	40012c00 	.word	0x40012c00
 8003418:	40021000 	.word	0x40021000

0800341c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003420:	e7fe      	b.n	8003420 <NMI_Handler+0x4>

08003422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003422:	b480      	push	{r7}
 8003424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003426:	e7fe      	b.n	8003426 <HardFault_Handler+0x4>

08003428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800342c:	e7fe      	b.n	800342c <MemManage_Handler+0x4>

0800342e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800342e:	b480      	push	{r7}
 8003430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003432:	e7fe      	b.n	8003432 <BusFault_Handler+0x4>

08003434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003438:	e7fe      	b.n	8003438 <UsageFault_Handler+0x4>

0800343a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800343a:	b480      	push	{r7}
 800343c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr

08003446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003446:	b480      	push	{r7}
 8003448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr

08003452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003452:	b480      	push	{r7}
 8003454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr

0800345e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003462:	f000 fac9 	bl	80039f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003470:	4802      	ldr	r0, [pc, #8]	; (800347c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003472:	f001 ff0c 	bl	800528e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20001424 	.word	0x20001424

08003480 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003484:	bf00      	nop
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <_vfd_get_char_code>:

/**
 * Returns code for display from character code
 */
uint16_t _vfd_get_char_code(char code)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	71fb      	strb	r3, [r7, #7]
	if ('0' <= code && code <= '9')
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	2b2f      	cmp	r3, #47	; 0x2f
 800349a:	d908      	bls.n	80034ae <_vfd_get_char_code+0x22>
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	2b39      	cmp	r3, #57	; 0x39
 80034a0:	d805      	bhi.n	80034ae <_vfd_get_char_code+0x22>
		return _VFD_MAP_DIGITS[code - '0'];
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	3b30      	subs	r3, #48	; 0x30
 80034a6:	4a2b      	ldr	r2, [pc, #172]	; (8003554 <_vfd_get_char_code+0xc8>)
 80034a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034ac:	e04c      	b.n	8003548 <_vfd_get_char_code+0xbc>
	if (0 <= code && code <= 9)
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	2b09      	cmp	r3, #9
 80034b2:	d804      	bhi.n	80034be <_vfd_get_char_code+0x32>
		return _VFD_MAP_DIGITS[(uint8_t)code];
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	4a27      	ldr	r2, [pc, #156]	; (8003554 <_vfd_get_char_code+0xc8>)
 80034b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034bc:	e044      	b.n	8003548 <_vfd_get_char_code+0xbc>
	for (int i = 0; i < _VFD_SIZE_SPECIAL; i++)
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	e00e      	b.n	80034e2 <_vfd_get_char_code+0x56>
		if (_VFD_MAP_SPECIAL_CHAR[i] == code)
 80034c4:	4a24      	ldr	r2, [pc, #144]	; (8003558 <_vfd_get_char_code+0xcc>)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4413      	add	r3, r2
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	79fa      	ldrb	r2, [r7, #7]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d104      	bne.n	80034dc <_vfd_get_char_code+0x50>
			return _VFD_MAP_SPECIAL[i];
 80034d2:	4a22      	ldr	r2, [pc, #136]	; (800355c <_vfd_get_char_code+0xd0>)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034da:	e035      	b.n	8003548 <_vfd_get_char_code+0xbc>
	for (int i = 0; i < _VFD_SIZE_SPECIAL; i++)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	3301      	adds	r3, #1
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	231a      	movs	r3, #26
 80034e4:	461a      	mov	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4293      	cmp	r3, r2
 80034ea:	dbeb      	blt.n	80034c4 <_vfd_get_char_code+0x38>
	if ('a' <= code && code <= 'z')
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	2b60      	cmp	r3, #96	; 0x60
 80034f0:	d908      	bls.n	8003504 <_vfd_get_char_code+0x78>
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	2b7a      	cmp	r3, #122	; 0x7a
 80034f6:	d805      	bhi.n	8003504 <_vfd_get_char_code+0x78>
		return _VFD_MAP_ALPHA[code - 'a'];
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	3b61      	subs	r3, #97	; 0x61
 80034fc:	4a18      	ldr	r2, [pc, #96]	; (8003560 <_vfd_get_char_code+0xd4>)
 80034fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003502:	e021      	b.n	8003548 <_vfd_get_char_code+0xbc>
	if ('A' <= code && code <= 'Z')
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	2b40      	cmp	r3, #64	; 0x40
 8003508:	d908      	bls.n	800351c <_vfd_get_char_code+0x90>
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	2b5a      	cmp	r3, #90	; 0x5a
 800350e:	d805      	bhi.n	800351c <_vfd_get_char_code+0x90>
		return _VFD_MAP_ALPHA[code - 'A'];
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	3b41      	subs	r3, #65	; 0x41
 8003514:	4a12      	ldr	r2, [pc, #72]	; (8003560 <_vfd_get_char_code+0xd4>)
 8003516:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800351a:	e015      	b.n	8003548 <_vfd_get_char_code+0xbc>
	if (192 <= code && code <= 223) // russian upper letters
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	2bbf      	cmp	r3, #191	; 0xbf
 8003520:	d908      	bls.n	8003534 <_vfd_get_char_code+0xa8>
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	2bdf      	cmp	r3, #223	; 0xdf
 8003526:	d805      	bhi.n	8003534 <_vfd_get_char_code+0xa8>
		return _VFD_MAP_ALPHA_RU[code - 192];
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	3bc0      	subs	r3, #192	; 0xc0
 800352c:	4a0d      	ldr	r2, [pc, #52]	; (8003564 <_vfd_get_char_code+0xd8>)
 800352e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003532:	e009      	b.n	8003548 <_vfd_get_char_code+0xbc>
	if (224 <= code && code <= 255) // russian lower letters
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	2bdf      	cmp	r3, #223	; 0xdf
 8003538:	d905      	bls.n	8003546 <_vfd_get_char_code+0xba>
		return _VFD_MAP_ALPHA_RU[code - 224];
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	3be0      	subs	r3, #224	; 0xe0
 800353e:	4a09      	ldr	r2, [pc, #36]	; (8003564 <_vfd_get_char_code+0xd8>)
 8003540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003544:	e000      	b.n	8003548 <_vfd_get_char_code+0xbc>
	return 0;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	0800cd54 	.word	0x0800cd54
 8003558:	0800ce10 	.word	0x0800ce10
 800355c:	0800cddc 	.word	0x0800cddc
 8003560:	0800cd68 	.word	0x0800cd68
 8003564:	0800cd9c 	.word	0x0800cd9c

08003568 <vfd_put_string>:

/**
 * put string in buffer
 */
void vfd_put_string(char * str)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	uint16_t buf;
	// erase letters only
	for (int i = 10; i > 0; i --)
 8003570:	230a      	movs	r3, #10
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	e028      	b.n	80035c8 <vfd_put_string+0x60>
	{
		 vfd.arr2[i][0] &= 1<<0;
 8003576:	493e      	ldr	r1, [pc, #248]	; (8003670 <vfd_put_string+0x108>)
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4613      	mov	r3, r2
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4413      	add	r3, r2
 8003580:	440b      	add	r3, r1
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	b2d8      	uxtb	r0, r3
 800358a:	4939      	ldr	r1, [pc, #228]	; (8003670 <vfd_put_string+0x108>)
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4613      	mov	r3, r2
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	4413      	add	r3, r2
 8003594:	440b      	add	r3, r1
 8003596:	4602      	mov	r2, r0
 8003598:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] &= 1<<7;
 800359a:	4935      	ldr	r1, [pc, #212]	; (8003670 <vfd_put_string+0x108>)
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4613      	mov	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4413      	add	r3, r2
 80035a4:	440b      	add	r3, r1
 80035a6:	3301      	adds	r3, #1
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80035ae:	b2d8      	uxtb	r0, r3
 80035b0:	492f      	ldr	r1, [pc, #188]	; (8003670 <vfd_put_string+0x108>)
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4613      	mov	r3, r2
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	4413      	add	r3, r2
 80035ba:	440b      	add	r3, r1
 80035bc:	3301      	adds	r3, #1
 80035be:	4602      	mov	r2, r0
 80035c0:	701a      	strb	r2, [r3, #0]
	for (int i = 10; i > 0; i --)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	dcd3      	bgt.n	8003576 <vfd_put_string+0xe>
	}
	uint8_t i = 10;
 80035ce:	230a      	movs	r3, #10
 80035d0:	72fb      	strb	r3, [r7, #11]
	while (*str)
 80035d2:	e042      	b.n	800365a <vfd_put_string+0xf2>
	{
		 buf = _vfd_get_char_code(*(str++));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff ff55 	bl	800348c <_vfd_get_char_code>
 80035e2:	4603      	mov	r3, r0
 80035e4:	813b      	strh	r3, [r7, #8]
		 vfd.arr2[i][0] |= buf & (~(1<<0));
 80035e6:	7afa      	ldrb	r2, [r7, #11]
 80035e8:	4921      	ldr	r1, [pc, #132]	; (8003670 <vfd_put_string+0x108>)
 80035ea:	4613      	mov	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4413      	add	r3, r2
 80035f0:	440b      	add	r3, r1
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	b25a      	sxtb	r2, r3
 80035f6:	893b      	ldrh	r3, [r7, #8]
 80035f8:	b25b      	sxtb	r3, r3
 80035fa:	f023 0301 	bic.w	r3, r3, #1
 80035fe:	b25b      	sxtb	r3, r3
 8003600:	4313      	orrs	r3, r2
 8003602:	b25b      	sxtb	r3, r3
 8003604:	7afa      	ldrb	r2, [r7, #11]
 8003606:	b2d8      	uxtb	r0, r3
 8003608:	4919      	ldr	r1, [pc, #100]	; (8003670 <vfd_put_string+0x108>)
 800360a:	4613      	mov	r3, r2
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	4413      	add	r3, r2
 8003610:	440b      	add	r3, r1
 8003612:	4602      	mov	r2, r0
 8003614:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] |= (buf>>8)&(~(1<<7));
 8003616:	7afa      	ldrb	r2, [r7, #11]
 8003618:	4915      	ldr	r1, [pc, #84]	; (8003670 <vfd_put_string+0x108>)
 800361a:	4613      	mov	r3, r2
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	4413      	add	r3, r2
 8003620:	440b      	add	r3, r1
 8003622:	3301      	adds	r3, #1
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	b25a      	sxtb	r2, r3
 8003628:	893b      	ldrh	r3, [r7, #8]
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	b29b      	uxth	r3, r3
 800362e:	b25b      	sxtb	r3, r3
 8003630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003634:	b25b      	sxtb	r3, r3
 8003636:	4313      	orrs	r3, r2
 8003638:	b25b      	sxtb	r3, r3
 800363a:	7afa      	ldrb	r2, [r7, #11]
 800363c:	b2d8      	uxtb	r0, r3
 800363e:	490c      	ldr	r1, [pc, #48]	; (8003670 <vfd_put_string+0x108>)
 8003640:	4613      	mov	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	440b      	add	r3, r1
 8003648:	3301      	adds	r3, #1
 800364a:	4602      	mov	r2, r0
 800364c:	701a      	strb	r2, [r3, #0]
		 if (!--i)
 800364e:	7afb      	ldrb	r3, [r7, #11]
 8003650:	3b01      	subs	r3, #1
 8003652:	72fb      	strb	r3, [r7, #11]
 8003654:	7afb      	ldrb	r3, [r7, #11]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d004      	beq.n	8003664 <vfd_put_string+0xfc>
	while (*str)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1b8      	bne.n	80035d4 <vfd_put_string+0x6c>
			 break;
	}
}
 8003662:	e000      	b.n	8003666 <vfd_put_string+0xfe>
			 break;
 8003664:	bf00      	nop
}
 8003666:	bf00      	nop
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	2000061c 	.word	0x2000061c

08003674 <vfd_set_symbols>:

/**
 * set symbols mask in buffer
 */
void vfd_set_symbols(uint32_t symbols)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < _VFD_SIZE_SYMBOLS; i++)
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	e041      	b.n	8003706 <vfd_set_symbols+0x92>
	{
		if (symbols & (1<<i))
 8003682:	2201      	movs	r2, #1
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	461a      	mov	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4013      	ands	r3, r2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d035      	beq.n	8003700 <vfd_set_symbols+0x8c>
		{
			// set symbol
			for (int b = 0; b < 3; b++)
 8003694:	2300      	movs	r3, #0
 8003696:	60bb      	str	r3, [r7, #8]
 8003698:	e02f      	b.n	80036fa <vfd_set_symbols+0x86>
			  vfd.arr2[_VFD_MAP_SYMBOLS[i][0]][b] |= ((1<<_VFD_MAP_SYMBOLS[i][1])>>(b<<3))&0xFF;
 800369a:	4a20      	ldr	r2, [pc, #128]	; (800371c <vfd_set_symbols+0xa8>)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80036a2:	4619      	mov	r1, r3
 80036a4:	4a1e      	ldr	r2, [pc, #120]	; (8003720 <vfd_set_symbols+0xac>)
 80036a6:	460b      	mov	r3, r1
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	440b      	add	r3, r1
 80036ac:	441a      	add	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4413      	add	r3, r2
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	b25a      	sxtb	r2, r3
 80036b6:	4919      	ldr	r1, [pc, #100]	; (800371c <vfd_set_symbols+0xa8>)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	440b      	add	r3, r1
 80036be:	785b      	ldrb	r3, [r3, #1]
 80036c0:	4619      	mov	r1, r3
 80036c2:	2301      	movs	r3, #1
 80036c4:	fa03 f101 	lsl.w	r1, r3, r1
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	fa41 f303 	asr.w	r3, r1, r3
 80036d0:	b25b      	sxtb	r3, r3
 80036d2:	4313      	orrs	r3, r2
 80036d4:	b258      	sxtb	r0, r3
 80036d6:	4a11      	ldr	r2, [pc, #68]	; (800371c <vfd_set_symbols+0xa8>)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80036de:	4619      	mov	r1, r3
 80036e0:	b2c0      	uxtb	r0, r0
 80036e2:	4a0f      	ldr	r2, [pc, #60]	; (8003720 <vfd_set_symbols+0xac>)
 80036e4:	460b      	mov	r3, r1
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	440b      	add	r3, r1
 80036ea:	441a      	add	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4413      	add	r3, r2
 80036f0:	4602      	mov	r2, r0
 80036f2:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	3301      	adds	r3, #1
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	ddcc      	ble.n	800369a <vfd_set_symbols+0x26>
	for (int i = 0; i < _VFD_SIZE_SYMBOLS; i++)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3301      	adds	r3, #1
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	2319      	movs	r3, #25
 8003708:	461a      	mov	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4293      	cmp	r3, r2
 800370e:	dbb8      	blt.n	8003682 <vfd_set_symbols+0xe>
		}
	}
}
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr
 800371c:	0800ce2c 	.word	0x0800ce2c
 8003720:	2000061c 	.word	0x2000061c

08003724 <vfd_clr_symbols>:

/**
 * put symbols mask in buffer
 */
void vfd_clr_symbols(uint32_t symbols)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < _VFD_SIZE_SYMBOLS; i++)
 800372c:	2300      	movs	r3, #0
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	e043      	b.n	80037ba <vfd_clr_symbols+0x96>
	{
		if (symbols & (1<<i))
 8003732:	2201      	movs	r2, #1
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	461a      	mov	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d037      	beq.n	80037b4 <vfd_clr_symbols+0x90>
		{
			// reset symbol
			for (int b = 0; b < 3; b++)
 8003744:	2300      	movs	r3, #0
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	e031      	b.n	80037ae <vfd_clr_symbols+0x8a>
			  vfd.arr2[_VFD_MAP_SYMBOLS[i][0]][b] &= ~(((1<<_VFD_MAP_SYMBOLS[i][1])>>(b<<3))&0xFF);
 800374a:	4a21      	ldr	r2, [pc, #132]	; (80037d0 <vfd_clr_symbols+0xac>)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003752:	4619      	mov	r1, r3
 8003754:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <vfd_clr_symbols+0xb0>)
 8003756:	460b      	mov	r3, r1
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	440b      	add	r3, r1
 800375c:	441a      	add	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	4413      	add	r3, r2
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	b25a      	sxtb	r2, r3
 8003766:	491a      	ldr	r1, [pc, #104]	; (80037d0 <vfd_clr_symbols+0xac>)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	440b      	add	r3, r1
 800376e:	785b      	ldrb	r3, [r3, #1]
 8003770:	4619      	mov	r1, r3
 8003772:	2301      	movs	r3, #1
 8003774:	fa03 f101 	lsl.w	r1, r3, r1
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	fa41 f303 	asr.w	r3, r1, r3
 8003780:	b25b      	sxtb	r3, r3
 8003782:	43db      	mvns	r3, r3
 8003784:	b25b      	sxtb	r3, r3
 8003786:	4013      	ands	r3, r2
 8003788:	b258      	sxtb	r0, r3
 800378a:	4a11      	ldr	r2, [pc, #68]	; (80037d0 <vfd_clr_symbols+0xac>)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003792:	4619      	mov	r1, r3
 8003794:	b2c0      	uxtb	r0, r0
 8003796:	4a0f      	ldr	r2, [pc, #60]	; (80037d4 <vfd_clr_symbols+0xb0>)
 8003798:	460b      	mov	r3, r1
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	440b      	add	r3, r1
 800379e:	441a      	add	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4413      	add	r3, r2
 80037a4:	4602      	mov	r2, r0
 80037a6:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	3301      	adds	r3, #1
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	ddca      	ble.n	800374a <vfd_clr_symbols+0x26>
	for (int i = 0; i < _VFD_SIZE_SYMBOLS; i++)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	3301      	adds	r3, #1
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	2319      	movs	r3, #25
 80037bc:	461a      	mov	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4293      	cmp	r3, r2
 80037c2:	dbb6      	blt.n	8003732 <vfd_clr_symbols+0xe>
		}
	}
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	0800ce2c 	.word	0x0800ce2c
 80037d4:	2000061c 	.word	0x2000061c

080037d8 <vfd_clear_buf>:

/**
 * clear buffer
 */
void vfd_clear_buf(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 80037de:	2300      	movs	r3, #0
 80037e0:	607b      	str	r3, [r7, #4]
 80037e2:	e007      	b.n	80037f4 <vfd_clear_buf+0x1c>
		  vfd.arr1[a] = 0;
 80037e4:	4a08      	ldr	r2, [pc, #32]	; (8003808 <vfd_clear_buf+0x30>)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4413      	add	r3, r2
 80037ea:	2200      	movs	r2, #0
 80037ec:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3301      	adds	r3, #1
 80037f2:	607b      	str	r3, [r7, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d9f4      	bls.n	80037e4 <vfd_clear_buf+0xc>
}
 80037fa:	bf00      	nop
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	2000061c 	.word	0x2000061c

0800380c <vfd_update>:
}

/**
 * update data on VFD display
 */
void vfd_update(void) {
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
	uint8_t data;

	vfd_spi_cs(VFD_CS_LOW);
 8003812:	2000      	movs	r0, #0
 8003814:	f7fc fdfa 	bl	800040c <vfd_spi_cs>
	data = VFD_COM_DATA_SETTING|VFD_DS_WRITE_DISP; // command 2, write display
 8003818:	2340      	movs	r3, #64	; 0x40
 800381a:	71fb      	strb	r3, [r7, #7]
	vfd_spi_tx(&data, 1);
 800381c:	1dfb      	adds	r3, r7, #7
 800381e:	2101      	movs	r1, #1
 8003820:	4618      	mov	r0, r3
 8003822:	f7fc fe05 	bl	8000430 <vfd_spi_tx>
	vfd_spi_cs(VFD_CS_HIGH);
 8003826:	2001      	movs	r0, #1
 8003828:	f7fc fdf0 	bl	800040c <vfd_spi_cs>

	vfd_spi_cs(VFD_CS_LOW);
 800382c:	2000      	movs	r0, #0
 800382e:	f7fc fded 	bl	800040c <vfd_spi_cs>
	data = VFD_COM_ADDRESS_SETTING; // command 3, set address to 0
 8003832:	23c0      	movs	r3, #192	; 0xc0
 8003834:	71fb      	strb	r3, [r7, #7]
	vfd_spi_tx(&data, 1);
 8003836:	1dfb      	adds	r3, r7, #7
 8003838:	2101      	movs	r1, #1
 800383a:	4618      	mov	r0, r3
 800383c:	f7fc fdf8 	bl	8000430 <vfd_spi_tx>
	vfd_spi_tx(vfd.arr1, sizeof(vfd.arr1)); // transmit data
 8003840:	2121      	movs	r1, #33	; 0x21
 8003842:	4805      	ldr	r0, [pc, #20]	; (8003858 <vfd_update+0x4c>)
 8003844:	f7fc fdf4 	bl	8000430 <vfd_spi_tx>
	vfd_spi_cs(VFD_CS_HIGH);
 8003848:	2001      	movs	r0, #1
 800384a:	f7fc fddf 	bl	800040c <vfd_spi_cs>
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	2000061c 	.word	0x2000061c

0800385c <vfd_leds>:

/**
 * enable disable leds mask (4 leds available)
 */
void vfd_leds(uint8_t leds)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	71fb      	strb	r3, [r7, #7]
	uint8_t data = VFD_COM_DATA_SETTING|VFD_DS_WRITE_LED; // command 2, write to LED port
 8003866:	2341      	movs	r3, #65	; 0x41
 8003868:	73fb      	strb	r3, [r7, #15]
	vfd_spi_cs(VFD_CS_LOW);
 800386a:	2000      	movs	r0, #0
 800386c:	f7fc fdce 	bl	800040c <vfd_spi_cs>
	vfd_spi_tx(&data, 1);
 8003870:	f107 030f 	add.w	r3, r7, #15
 8003874:	2101      	movs	r1, #1
 8003876:	4618      	mov	r0, r3
 8003878:	f7fc fdda 	bl	8000430 <vfd_spi_tx>
	data = (~leds)&0b1111;
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	43db      	mvns	r3, r3
 8003880:	b2db      	uxtb	r3, r3
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	b2db      	uxtb	r3, r3
 8003888:	73fb      	strb	r3, [r7, #15]
	vfd_spi_tx(&data, 1);
 800388a:	f107 030f 	add.w	r3, r7, #15
 800388e:	2101      	movs	r1, #1
 8003890:	4618      	mov	r0, r3
 8003892:	f7fc fdcd 	bl	8000430 <vfd_spi_tx>
	vfd_spi_cs(VFD_CS_HIGH);
 8003896:	2001      	movs	r0, #1
 8003898:	f7fc fdb8 	bl	800040c <vfd_spi_cs>
}
 800389c:	bf00      	nop
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <vfd_init>:

/**
 * sets correct grid & segments count
 */
void vfd_init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
	uint8_t data;

	vfd_spi_cs(VFD_CS_LOW);
 80038aa:	2000      	movs	r0, #0
 80038ac:	f7fc fdae 	bl	800040c <vfd_spi_cs>
	data = VFD_COM_DISPLAY_MODE_SETTING|VFD_DMS_11dig_17seg; // command 2, write display
 80038b0:	2307      	movs	r3, #7
 80038b2:	71fb      	strb	r3, [r7, #7]
	vfd_spi_tx(&data, 1);
 80038b4:	1dfb      	adds	r3, r7, #7
 80038b6:	2101      	movs	r1, #1
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fc fdb9 	bl	8000430 <vfd_spi_tx>
	vfd_spi_cs(VFD_CS_HIGH);
 80038be:	2001      	movs	r0, #1
 80038c0:	f7fc fda4 	bl	800040c <vfd_spi_cs>

}
 80038c4:	bf00      	nop
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <vfd_control>:

/**
 * enable/disable display and set dimming (0..7)
 */
void vfd_control(bool enable, uint8_t dimm)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	460a      	mov	r2, r1
 80038d6:	71fb      	strb	r3, [r7, #7]
 80038d8:	4613      	mov	r3, r2
 80038da:	71bb      	strb	r3, [r7, #6]
	uint8_t data;

	vfd_spi_cs(VFD_CS_LOW);
 80038dc:	2000      	movs	r0, #0
 80038de:	f7fc fd95 	bl	800040c <vfd_spi_cs>
	data = VFD_COM_DISPLAY_CONTROL|(enable?VFD_DC_DISP_ON:0)|(dimm&0b111); // command 4
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <vfd_control+0x22>
 80038e8:	f06f 0277 	mvn.w	r2, #119	; 0x77
 80038ec:	e001      	b.n	80038f2 <vfd_control+0x26>
 80038ee:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80038f2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	b25b      	sxtb	r3, r3
 80038fc:	4313      	orrs	r3, r2
 80038fe:	b25b      	sxtb	r3, r3
 8003900:	b2db      	uxtb	r3, r3
 8003902:	73fb      	strb	r3, [r7, #15]
	vfd_spi_tx(&data, 1);
 8003904:	f107 030f 	add.w	r3, r7, #15
 8003908:	2101      	movs	r1, #1
 800390a:	4618      	mov	r0, r3
 800390c:	f7fc fd90 	bl	8000430 <vfd_spi_tx>
	vfd_spi_cs(VFD_CS_HIGH);
 8003910:	2001      	movs	r0, #1
 8003912:	f7fc fd7b 	bl	800040c <vfd_spi_cs>
}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003920:	480c      	ldr	r0, [pc, #48]	; (8003954 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003922:	490d      	ldr	r1, [pc, #52]	; (8003958 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003924:	4a0d      	ldr	r2, [pc, #52]	; (800395c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003928:	e002      	b.n	8003930 <LoopCopyDataInit>

0800392a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800392a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800392c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800392e:	3304      	adds	r3, #4

08003930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003934:	d3f9      	bcc.n	800392a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003936:	4a0a      	ldr	r2, [pc, #40]	; (8003960 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003938:	4c0a      	ldr	r4, [pc, #40]	; (8003964 <LoopFillZerobss+0x22>)
  movs r3, #0
 800393a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800393c:	e001      	b.n	8003942 <LoopFillZerobss>

0800393e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800393e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003940:	3204      	adds	r2, #4

08003942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003944:	d3fb      	bcc.n	800393e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003946:	f7ff fd9b 	bl	8003480 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800394a:	f008 fe59 	bl	800c600 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800394e:	f7fd fa8f 	bl	8000e70 <main>
  bx lr
 8003952:	4770      	bx	lr
  ldr r0, =_sdata
 8003954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003958:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 800395c:	0800ce68 	.word	0x0800ce68
  ldr r2, =_sbss
 8003960:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8003964:	20001710 	.word	0x20001710

08003968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003968:	e7fe      	b.n	8003968 <ADC1_2_IRQHandler>
	...

0800396c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003970:	4b08      	ldr	r3, [pc, #32]	; (8003994 <HAL_Init+0x28>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a07      	ldr	r2, [pc, #28]	; (8003994 <HAL_Init+0x28>)
 8003976:	f043 0310 	orr.w	r3, r3, #16
 800397a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800397c:	2003      	movs	r0, #3
 800397e:	f000 f947 	bl	8003c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003982:	200f      	movs	r0, #15
 8003984:	f000 f808 	bl	8003998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003988:	f7ff fc6e 	bl	8003268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40022000 	.word	0x40022000

08003998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039a0:	4b12      	ldr	r3, [pc, #72]	; (80039ec <HAL_InitTick+0x54>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <HAL_InitTick+0x58>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	4619      	mov	r1, r3
 80039aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80039b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 f95f 	bl	8003c7a <HAL_SYSTICK_Config>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e00e      	b.n	80039e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b0f      	cmp	r3, #15
 80039ca:	d80a      	bhi.n	80039e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039cc:	2200      	movs	r2, #0
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	f04f 30ff 	mov.w	r0, #4294967295
 80039d4:	f000 f927 	bl	8003c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039d8:	4a06      	ldr	r2, [pc, #24]	; (80039f4 <HAL_InitTick+0x5c>)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	e000      	b.n	80039e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000014 	.word	0x20000014
 80039f0:	2000001c 	.word	0x2000001c
 80039f4:	20000018 	.word	0x20000018

080039f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <HAL_IncTick+0x1c>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	461a      	mov	r2, r3
 8003a02:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_IncTick+0x20>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4413      	add	r3, r2
 8003a08:	4a03      	ldr	r2, [pc, #12]	; (8003a18 <HAL_IncTick+0x20>)
 8003a0a:	6013      	str	r3, [r2, #0]
}
 8003a0c:	bf00      	nop
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	2000001c 	.word	0x2000001c
 8003a18:	2000078c 	.word	0x2000078c

08003a1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a20:	4b02      	ldr	r3, [pc, #8]	; (8003a2c <HAL_GetTick+0x10>)
 8003a22:	681b      	ldr	r3, [r3, #0]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr
 8003a2c:	2000078c 	.word	0x2000078c

08003a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a38:	f7ff fff0 	bl	8003a1c <HAL_GetTick>
 8003a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a48:	d005      	beq.n	8003a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a4a:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <HAL_Delay+0x44>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a56:	bf00      	nop
 8003a58:	f7ff ffe0 	bl	8003a1c <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d8f7      	bhi.n	8003a58 <HAL_Delay+0x28>
  {
  }
}
 8003a68:	bf00      	nop
 8003a6a:	bf00      	nop
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	2000001c 	.word	0x2000001c

08003a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a88:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <__NVIC_SetPriorityGrouping+0x44>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a94:	4013      	ands	r3, r2
 8003a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aaa:	4a04      	ldr	r2, [pc, #16]	; (8003abc <__NVIC_SetPriorityGrouping+0x44>)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	60d3      	str	r3, [r2, #12]
}
 8003ab0:	bf00      	nop
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ac4:	4b04      	ldr	r3, [pc, #16]	; (8003ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	0a1b      	lsrs	r3, r3, #8
 8003aca:	f003 0307 	and.w	r3, r3, #7
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	e000ed00 	.word	0xe000ed00

08003adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	db0b      	blt.n	8003b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	f003 021f 	and.w	r2, r3, #31
 8003af4:	4906      	ldr	r1, [pc, #24]	; (8003b10 <__NVIC_EnableIRQ+0x34>)
 8003af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	2001      	movs	r0, #1
 8003afe:	fa00 f202 	lsl.w	r2, r0, r2
 8003b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr
 8003b10:	e000e100 	.word	0xe000e100

08003b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	6039      	str	r1, [r7, #0]
 8003b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	db0a      	blt.n	8003b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	490c      	ldr	r1, [pc, #48]	; (8003b60 <__NVIC_SetPriority+0x4c>)
 8003b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b32:	0112      	lsls	r2, r2, #4
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	440b      	add	r3, r1
 8003b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b3c:	e00a      	b.n	8003b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	4908      	ldr	r1, [pc, #32]	; (8003b64 <__NVIC_SetPriority+0x50>)
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	3b04      	subs	r3, #4
 8003b4c:	0112      	lsls	r2, r2, #4
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	440b      	add	r3, r1
 8003b52:	761a      	strb	r2, [r3, #24]
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	e000e100 	.word	0xe000e100
 8003b64:	e000ed00 	.word	0xe000ed00

08003b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b089      	sub	sp, #36	; 0x24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f1c3 0307 	rsb	r3, r3, #7
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	bf28      	it	cs
 8003b86:	2304      	movcs	r3, #4
 8003b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	2b06      	cmp	r3, #6
 8003b90:	d902      	bls.n	8003b98 <NVIC_EncodePriority+0x30>
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	3b03      	subs	r3, #3
 8003b96:	e000      	b.n	8003b9a <NVIC_EncodePriority+0x32>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43da      	mvns	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	401a      	ands	r2, r3
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bba:	43d9      	mvns	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc0:	4313      	orrs	r3, r2
         );
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3724      	adds	r7, #36	; 0x24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bdc:	d301      	bcc.n	8003be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bde:	2301      	movs	r3, #1
 8003be0:	e00f      	b.n	8003c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003be2:	4a0a      	ldr	r2, [pc, #40]	; (8003c0c <SysTick_Config+0x40>)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bea:	210f      	movs	r1, #15
 8003bec:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf0:	f7ff ff90 	bl	8003b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bf4:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <SysTick_Config+0x40>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bfa:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <SysTick_Config+0x40>)
 8003bfc:	2207      	movs	r2, #7
 8003bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	e000e010 	.word	0xe000e010

08003c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff ff2d 	bl	8003a78 <__NVIC_SetPriorityGrouping>
}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b086      	sub	sp, #24
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	607a      	str	r2, [r7, #4]
 8003c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c38:	f7ff ff42 	bl	8003ac0 <__NVIC_GetPriorityGrouping>
 8003c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	68b9      	ldr	r1, [r7, #8]
 8003c42:	6978      	ldr	r0, [r7, #20]
 8003c44:	f7ff ff90 	bl	8003b68 <NVIC_EncodePriority>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff ff5f 	bl	8003b14 <__NVIC_SetPriority>
}
 8003c56:	bf00      	nop
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	4603      	mov	r3, r0
 8003c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff ff35 	bl	8003adc <__NVIC_EnableIRQ>
}
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff ffa2 	bl	8003bcc <SysTick_Config>
 8003c88:	4603      	mov	r3, r0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b08b      	sub	sp, #44	; 0x2c
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ca6:	e169      	b.n	8003f7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ca8:	2201      	movs	r2, #1
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	f040 8158 	bne.w	8003f76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	4a9a      	ldr	r2, [pc, #616]	; (8003f34 <HAL_GPIO_Init+0x2a0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d05e      	beq.n	8003d8e <HAL_GPIO_Init+0xfa>
 8003cd0:	4a98      	ldr	r2, [pc, #608]	; (8003f34 <HAL_GPIO_Init+0x2a0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d875      	bhi.n	8003dc2 <HAL_GPIO_Init+0x12e>
 8003cd6:	4a98      	ldr	r2, [pc, #608]	; (8003f38 <HAL_GPIO_Init+0x2a4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d058      	beq.n	8003d8e <HAL_GPIO_Init+0xfa>
 8003cdc:	4a96      	ldr	r2, [pc, #600]	; (8003f38 <HAL_GPIO_Init+0x2a4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d86f      	bhi.n	8003dc2 <HAL_GPIO_Init+0x12e>
 8003ce2:	4a96      	ldr	r2, [pc, #600]	; (8003f3c <HAL_GPIO_Init+0x2a8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d052      	beq.n	8003d8e <HAL_GPIO_Init+0xfa>
 8003ce8:	4a94      	ldr	r2, [pc, #592]	; (8003f3c <HAL_GPIO_Init+0x2a8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d869      	bhi.n	8003dc2 <HAL_GPIO_Init+0x12e>
 8003cee:	4a94      	ldr	r2, [pc, #592]	; (8003f40 <HAL_GPIO_Init+0x2ac>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d04c      	beq.n	8003d8e <HAL_GPIO_Init+0xfa>
 8003cf4:	4a92      	ldr	r2, [pc, #584]	; (8003f40 <HAL_GPIO_Init+0x2ac>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d863      	bhi.n	8003dc2 <HAL_GPIO_Init+0x12e>
 8003cfa:	4a92      	ldr	r2, [pc, #584]	; (8003f44 <HAL_GPIO_Init+0x2b0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d046      	beq.n	8003d8e <HAL_GPIO_Init+0xfa>
 8003d00:	4a90      	ldr	r2, [pc, #576]	; (8003f44 <HAL_GPIO_Init+0x2b0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d85d      	bhi.n	8003dc2 <HAL_GPIO_Init+0x12e>
 8003d06:	2b12      	cmp	r3, #18
 8003d08:	d82a      	bhi.n	8003d60 <HAL_GPIO_Init+0xcc>
 8003d0a:	2b12      	cmp	r3, #18
 8003d0c:	d859      	bhi.n	8003dc2 <HAL_GPIO_Init+0x12e>
 8003d0e:	a201      	add	r2, pc, #4	; (adr r2, 8003d14 <HAL_GPIO_Init+0x80>)
 8003d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d14:	08003d8f 	.word	0x08003d8f
 8003d18:	08003d69 	.word	0x08003d69
 8003d1c:	08003d7b 	.word	0x08003d7b
 8003d20:	08003dbd 	.word	0x08003dbd
 8003d24:	08003dc3 	.word	0x08003dc3
 8003d28:	08003dc3 	.word	0x08003dc3
 8003d2c:	08003dc3 	.word	0x08003dc3
 8003d30:	08003dc3 	.word	0x08003dc3
 8003d34:	08003dc3 	.word	0x08003dc3
 8003d38:	08003dc3 	.word	0x08003dc3
 8003d3c:	08003dc3 	.word	0x08003dc3
 8003d40:	08003dc3 	.word	0x08003dc3
 8003d44:	08003dc3 	.word	0x08003dc3
 8003d48:	08003dc3 	.word	0x08003dc3
 8003d4c:	08003dc3 	.word	0x08003dc3
 8003d50:	08003dc3 	.word	0x08003dc3
 8003d54:	08003dc3 	.word	0x08003dc3
 8003d58:	08003d71 	.word	0x08003d71
 8003d5c:	08003d85 	.word	0x08003d85
 8003d60:	4a79      	ldr	r2, [pc, #484]	; (8003f48 <HAL_GPIO_Init+0x2b4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d66:	e02c      	b.n	8003dc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	623b      	str	r3, [r7, #32]
          break;
 8003d6e:	e029      	b.n	8003dc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	3304      	adds	r3, #4
 8003d76:	623b      	str	r3, [r7, #32]
          break;
 8003d78:	e024      	b.n	8003dc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	3308      	adds	r3, #8
 8003d80:	623b      	str	r3, [r7, #32]
          break;
 8003d82:	e01f      	b.n	8003dc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	330c      	adds	r3, #12
 8003d8a:	623b      	str	r3, [r7, #32]
          break;
 8003d8c:	e01a      	b.n	8003dc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d102      	bne.n	8003d9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d96:	2304      	movs	r3, #4
 8003d98:	623b      	str	r3, [r7, #32]
          break;
 8003d9a:	e013      	b.n	8003dc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d105      	bne.n	8003db0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003da4:	2308      	movs	r3, #8
 8003da6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	611a      	str	r2, [r3, #16]
          break;
 8003dae:	e009      	b.n	8003dc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003db0:	2308      	movs	r3, #8
 8003db2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	615a      	str	r2, [r3, #20]
          break;
 8003dba:	e003      	b.n	8003dc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	623b      	str	r3, [r7, #32]
          break;
 8003dc0:	e000      	b.n	8003dc4 <HAL_GPIO_Init+0x130>
          break;
 8003dc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2bff      	cmp	r3, #255	; 0xff
 8003dc8:	d801      	bhi.n	8003dce <HAL_GPIO_Init+0x13a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	e001      	b.n	8003dd2 <HAL_GPIO_Init+0x13e>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2bff      	cmp	r3, #255	; 0xff
 8003dd8:	d802      	bhi.n	8003de0 <HAL_GPIO_Init+0x14c>
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	e002      	b.n	8003de6 <HAL_GPIO_Init+0x152>
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	3b08      	subs	r3, #8
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	210f      	movs	r1, #15
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	fa01 f303 	lsl.w	r3, r1, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	401a      	ands	r2, r3
 8003df8:	6a39      	ldr	r1, [r7, #32]
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003e00:	431a      	orrs	r2, r3
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 80b1 	beq.w	8003f76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e14:	4b4d      	ldr	r3, [pc, #308]	; (8003f4c <HAL_GPIO_Init+0x2b8>)
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	4a4c      	ldr	r2, [pc, #304]	; (8003f4c <HAL_GPIO_Init+0x2b8>)
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	6193      	str	r3, [r2, #24]
 8003e20:	4b4a      	ldr	r3, [pc, #296]	; (8003f4c <HAL_GPIO_Init+0x2b8>)
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e2c:	4a48      	ldr	r2, [pc, #288]	; (8003f50 <HAL_GPIO_Init+0x2bc>)
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	089b      	lsrs	r3, r3, #2
 8003e32:	3302      	adds	r3, #2
 8003e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	220f      	movs	r2, #15
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a40      	ldr	r2, [pc, #256]	; (8003f54 <HAL_GPIO_Init+0x2c0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d013      	beq.n	8003e80 <HAL_GPIO_Init+0x1ec>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a3f      	ldr	r2, [pc, #252]	; (8003f58 <HAL_GPIO_Init+0x2c4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00d      	beq.n	8003e7c <HAL_GPIO_Init+0x1e8>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a3e      	ldr	r2, [pc, #248]	; (8003f5c <HAL_GPIO_Init+0x2c8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d007      	beq.n	8003e78 <HAL_GPIO_Init+0x1e4>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a3d      	ldr	r2, [pc, #244]	; (8003f60 <HAL_GPIO_Init+0x2cc>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d101      	bne.n	8003e74 <HAL_GPIO_Init+0x1e0>
 8003e70:	2303      	movs	r3, #3
 8003e72:	e006      	b.n	8003e82 <HAL_GPIO_Init+0x1ee>
 8003e74:	2304      	movs	r3, #4
 8003e76:	e004      	b.n	8003e82 <HAL_GPIO_Init+0x1ee>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e002      	b.n	8003e82 <HAL_GPIO_Init+0x1ee>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <HAL_GPIO_Init+0x1ee>
 8003e80:	2300      	movs	r3, #0
 8003e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e84:	f002 0203 	and.w	r2, r2, #3
 8003e88:	0092      	lsls	r2, r2, #2
 8003e8a:	4093      	lsls	r3, r2
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e92:	492f      	ldr	r1, [pc, #188]	; (8003f50 <HAL_GPIO_Init+0x2bc>)
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	089b      	lsrs	r3, r3, #2
 8003e98:	3302      	adds	r3, #2
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d006      	beq.n	8003eba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003eac:	4b2d      	ldr	r3, [pc, #180]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	492c      	ldr	r1, [pc, #176]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	600b      	str	r3, [r1, #0]
 8003eb8:	e006      	b.n	8003ec8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003eba:	4b2a      	ldr	r3, [pc, #168]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	4928      	ldr	r1, [pc, #160]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d006      	beq.n	8003ee2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ed4:	4b23      	ldr	r3, [pc, #140]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	4922      	ldr	r1, [pc, #136]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	604b      	str	r3, [r1, #4]
 8003ee0:	e006      	b.n	8003ef0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ee2:	4b20      	ldr	r3, [pc, #128]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	491e      	ldr	r1, [pc, #120]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d006      	beq.n	8003f0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003efc:	4b19      	ldr	r3, [pc, #100]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	4918      	ldr	r1, [pc, #96]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	608b      	str	r3, [r1, #8]
 8003f08:	e006      	b.n	8003f18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f0a:	4b16      	ldr	r3, [pc, #88]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	4914      	ldr	r1, [pc, #80]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d021      	beq.n	8003f68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f24:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	490e      	ldr	r1, [pc, #56]	; (8003f64 <HAL_GPIO_Init+0x2d0>)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60cb      	str	r3, [r1, #12]
 8003f30:	e021      	b.n	8003f76 <HAL_GPIO_Init+0x2e2>
 8003f32:	bf00      	nop
 8003f34:	10320000 	.word	0x10320000
 8003f38:	10310000 	.word	0x10310000
 8003f3c:	10220000 	.word	0x10220000
 8003f40:	10210000 	.word	0x10210000
 8003f44:	10120000 	.word	0x10120000
 8003f48:	10110000 	.word	0x10110000
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	40010000 	.word	0x40010000
 8003f54:	40010800 	.word	0x40010800
 8003f58:	40010c00 	.word	0x40010c00
 8003f5c:	40011000 	.word	0x40011000
 8003f60:	40011400 	.word	0x40011400
 8003f64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <HAL_GPIO_Init+0x304>)
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	4909      	ldr	r1, [pc, #36]	; (8003f98 <HAL_GPIO_Init+0x304>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	3301      	adds	r3, #1
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	fa22 f303 	lsr.w	r3, r2, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f47f ae8e 	bne.w	8003ca8 <HAL_GPIO_Init+0x14>
  }
}
 8003f8c:	bf00      	nop
 8003f8e:	bf00      	nop
 8003f90:	372c      	adds	r7, #44	; 0x2c
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr
 8003f98:	40010400 	.word	0x40010400

08003f9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	887b      	ldrh	r3, [r7, #2]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
 8003fb8:	e001      	b.n	8003fbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr

08003fca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	807b      	strh	r3, [r7, #2]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fda:	787b      	ldrb	r3, [r7, #1]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fe0:	887a      	ldrh	r2, [r7, #2]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003fe6:	e003      	b.n	8003ff0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fe8:	887b      	ldrh	r3, [r7, #2]
 8003fea:	041a      	lsls	r2, r3, #16
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	611a      	str	r2, [r3, #16]
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr

08003ffa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	460b      	mov	r3, r1
 8004004:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800400c:	887a      	ldrh	r2, [r7, #2]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4013      	ands	r3, r2
 8004012:	041a      	lsls	r2, r3, #16
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	43d9      	mvns	r1, r3
 8004018:	887b      	ldrh	r3, [r7, #2]
 800401a:	400b      	ands	r3, r1
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	611a      	str	r2, [r3, #16]
}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr

0800402c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e12b      	b.n	8004296 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d106      	bne.n	8004058 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff f93a 	bl	80032cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2224      	movs	r2, #36	; 0x24
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0201 	bic.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800407e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800408e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004090:	f003 f868 	bl	8007164 <HAL_RCC_GetPCLK1Freq>
 8004094:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	4a81      	ldr	r2, [pc, #516]	; (80042a0 <HAL_I2C_Init+0x274>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d807      	bhi.n	80040b0 <HAL_I2C_Init+0x84>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4a80      	ldr	r2, [pc, #512]	; (80042a4 <HAL_I2C_Init+0x278>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	bf94      	ite	ls
 80040a8:	2301      	movls	r3, #1
 80040aa:	2300      	movhi	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	e006      	b.n	80040be <HAL_I2C_Init+0x92>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4a7d      	ldr	r2, [pc, #500]	; (80042a8 <HAL_I2C_Init+0x27c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	bf94      	ite	ls
 80040b8:	2301      	movls	r3, #1
 80040ba:	2300      	movhi	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e0e7      	b.n	8004296 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4a78      	ldr	r2, [pc, #480]	; (80042ac <HAL_I2C_Init+0x280>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	0c9b      	lsrs	r3, r3, #18
 80040d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	4a6a      	ldr	r2, [pc, #424]	; (80042a0 <HAL_I2C_Init+0x274>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d802      	bhi.n	8004100 <HAL_I2C_Init+0xd4>
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	3301      	adds	r3, #1
 80040fe:	e009      	b.n	8004114 <HAL_I2C_Init+0xe8>
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004106:	fb02 f303 	mul.w	r3, r2, r3
 800410a:	4a69      	ldr	r2, [pc, #420]	; (80042b0 <HAL_I2C_Init+0x284>)
 800410c:	fba2 2303 	umull	r2, r3, r2, r3
 8004110:	099b      	lsrs	r3, r3, #6
 8004112:	3301      	adds	r3, #1
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	430b      	orrs	r3, r1
 800411a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004126:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	495c      	ldr	r1, [pc, #368]	; (80042a0 <HAL_I2C_Init+0x274>)
 8004130:	428b      	cmp	r3, r1
 8004132:	d819      	bhi.n	8004168 <HAL_I2C_Init+0x13c>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	1e59      	subs	r1, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004142:	1c59      	adds	r1, r3, #1
 8004144:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004148:	400b      	ands	r3, r1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_I2C_Init+0x138>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1e59      	subs	r1, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	fbb1 f3f3 	udiv	r3, r1, r3
 800415c:	3301      	adds	r3, #1
 800415e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004162:	e051      	b.n	8004208 <HAL_I2C_Init+0x1dc>
 8004164:	2304      	movs	r3, #4
 8004166:	e04f      	b.n	8004208 <HAL_I2C_Init+0x1dc>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d111      	bne.n	8004194 <HAL_I2C_Init+0x168>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	1e58      	subs	r0, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6859      	ldr	r1, [r3, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	440b      	add	r3, r1
 800417e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004182:	3301      	adds	r3, #1
 8004184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004188:	2b00      	cmp	r3, #0
 800418a:	bf0c      	ite	eq
 800418c:	2301      	moveq	r3, #1
 800418e:	2300      	movne	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	e012      	b.n	80041ba <HAL_I2C_Init+0x18e>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	1e58      	subs	r0, r3, #1
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6859      	ldr	r1, [r3, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	0099      	lsls	r1, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041aa:	3301      	adds	r3, #1
 80041ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bf0c      	ite	eq
 80041b4:	2301      	moveq	r3, #1
 80041b6:	2300      	movne	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_I2C_Init+0x196>
 80041be:	2301      	movs	r3, #1
 80041c0:	e022      	b.n	8004208 <HAL_I2C_Init+0x1dc>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10e      	bne.n	80041e8 <HAL_I2C_Init+0x1bc>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1e58      	subs	r0, r3, #1
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6859      	ldr	r1, [r3, #4]
 80041d2:	460b      	mov	r3, r1
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	440b      	add	r3, r1
 80041d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80041dc:	3301      	adds	r3, #1
 80041de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041e6:	e00f      	b.n	8004208 <HAL_I2C_Init+0x1dc>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	1e58      	subs	r0, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6859      	ldr	r1, [r3, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	0099      	lsls	r1, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80041fe:	3301      	adds	r3, #1
 8004200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004204:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	6809      	ldr	r1, [r1, #0]
 800420c:	4313      	orrs	r3, r2
 800420e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69da      	ldr	r2, [r3, #28]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004236:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6911      	ldr	r1, [r2, #16]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	68d2      	ldr	r2, [r2, #12]
 8004242:	4311      	orrs	r1, r2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	430b      	orrs	r3, r1
 800424a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695a      	ldr	r2, [r3, #20]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	000186a0 	.word	0x000186a0
 80042a4:	001e847f 	.word	0x001e847f
 80042a8:	003d08ff 	.word	0x003d08ff
 80042ac:	431bde83 	.word	0x431bde83
 80042b0:	10624dd3 	.word	0x10624dd3

080042b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	4608      	mov	r0, r1
 80042be:	4611      	mov	r1, r2
 80042c0:	461a      	mov	r2, r3
 80042c2:	4603      	mov	r3, r0
 80042c4:	817b      	strh	r3, [r7, #10]
 80042c6:	460b      	mov	r3, r1
 80042c8:	813b      	strh	r3, [r7, #8]
 80042ca:	4613      	mov	r3, r2
 80042cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042ce:	f7ff fba5 	bl	8003a1c <HAL_GetTick>
 80042d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b20      	cmp	r3, #32
 80042de:	f040 80d9 	bne.w	8004494 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	2319      	movs	r3, #25
 80042e8:	2201      	movs	r2, #1
 80042ea:	496d      	ldr	r1, [pc, #436]	; (80044a0 <HAL_I2C_Mem_Write+0x1ec>)
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 fcc1 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80042f8:	2302      	movs	r3, #2
 80042fa:	e0cc      	b.n	8004496 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <HAL_I2C_Mem_Write+0x56>
 8004306:	2302      	movs	r3, #2
 8004308:	e0c5      	b.n	8004496 <HAL_I2C_Mem_Write+0x1e2>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b01      	cmp	r3, #1
 800431e:	d007      	beq.n	8004330 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800433e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2221      	movs	r2, #33	; 0x21
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2240      	movs	r2, #64	; 0x40
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a3a      	ldr	r2, [r7, #32]
 800435a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004360:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4a4d      	ldr	r2, [pc, #308]	; (80044a4 <HAL_I2C_Mem_Write+0x1f0>)
 8004370:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004372:	88f8      	ldrh	r0, [r7, #6]
 8004374:	893a      	ldrh	r2, [r7, #8]
 8004376:	8979      	ldrh	r1, [r7, #10]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	9301      	str	r3, [sp, #4]
 800437c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	4603      	mov	r3, r0
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 faf8 	bl	8004978 <I2C_RequestMemoryWrite>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d052      	beq.n	8004434 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e081      	b.n	8004496 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 fd42 	bl	8004e20 <I2C_WaitOnTXEFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00d      	beq.n	80043be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d107      	bne.n	80043ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e06b      	b.n	8004496 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	781a      	ldrb	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d11b      	bne.n	8004434 <HAL_I2C_Mem_Write+0x180>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004400:	2b00      	cmp	r3, #0
 8004402:	d017      	beq.n	8004434 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	781a      	ldrb	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1aa      	bne.n	8004392 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 fd2e 	bl	8004ea2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00d      	beq.n	8004468 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	2b04      	cmp	r3, #4
 8004452:	d107      	bne.n	8004464 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004462:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e016      	b.n	8004496 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	e000      	b.n	8004496 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004494:	2302      	movs	r3, #2
  }
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	00100002 	.word	0x00100002
 80044a4:	ffff0000 	.word	0xffff0000

080044a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08c      	sub	sp, #48	; 0x30
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	4608      	mov	r0, r1
 80044b2:	4611      	mov	r1, r2
 80044b4:	461a      	mov	r2, r3
 80044b6:	4603      	mov	r3, r0
 80044b8:	817b      	strh	r3, [r7, #10]
 80044ba:	460b      	mov	r3, r1
 80044bc:	813b      	strh	r3, [r7, #8]
 80044be:	4613      	mov	r3, r2
 80044c0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044c6:	f7ff faa9 	bl	8003a1c <HAL_GetTick>
 80044ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	f040 8244 	bne.w	8004962 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	2319      	movs	r3, #25
 80044e0:	2201      	movs	r2, #1
 80044e2:	4982      	ldr	r1, [pc, #520]	; (80046ec <HAL_I2C_Mem_Read+0x244>)
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 fbc5 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80044f0:	2302      	movs	r3, #2
 80044f2:	e237      	b.n	8004964 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_I2C_Mem_Read+0x5a>
 80044fe:	2302      	movs	r3, #2
 8004500:	e230      	b.n	8004964 <HAL_I2C_Mem_Read+0x4bc>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b01      	cmp	r3, #1
 8004516:	d007      	beq.n	8004528 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004536:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2222      	movs	r2, #34	; 0x22
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2240      	movs	r2, #64	; 0x40
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004552:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004558:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4a62      	ldr	r2, [pc, #392]	; (80046f0 <HAL_I2C_Mem_Read+0x248>)
 8004568:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800456a:	88f8      	ldrh	r0, [r7, #6]
 800456c:	893a      	ldrh	r2, [r7, #8]
 800456e:	8979      	ldrh	r1, [r7, #10]
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	9301      	str	r3, [sp, #4]
 8004574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	4603      	mov	r3, r0
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 fa92 	bl	8004aa4 <I2C_RequestMemoryRead>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e1ec      	b.n	8004964 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458e:	2b00      	cmp	r3, #0
 8004590:	d113      	bne.n	80045ba <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	e1c0      	b.n	800493c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d11e      	bne.n	8004600 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045d2:	b672      	cpsid	i
}
 80045d4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d6:	2300      	movs	r3, #0
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80045fc:	b662      	cpsie	i
}
 80045fe:	e035      	b.n	800466c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004604:	2b02      	cmp	r3, #2
 8004606:	d11e      	bne.n	8004646 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004616:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004618:	b672      	cpsid	i
}
 800461a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004640:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004642:	b662      	cpsie	i
}
 8004644:	e012      	b.n	800466c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004654:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004656:	2300      	movs	r3, #0
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800466c:	e166      	b.n	800493c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004672:	2b03      	cmp	r3, #3
 8004674:	f200 811f 	bhi.w	80048b6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467c:	2b01      	cmp	r3, #1
 800467e:	d123      	bne.n	80046c8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004682:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 fc4d 	bl	8004f24 <I2C_WaitOnRXNEFlagUntilTimeout>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e167      	b.n	8004964 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	691a      	ldr	r2, [r3, #16]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046c6:	e139      	b.n	800493c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d152      	bne.n	8004776 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d6:	2200      	movs	r2, #0
 80046d8:	4906      	ldr	r1, [pc, #24]	; (80046f4 <HAL_I2C_Mem_Read+0x24c>)
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 faca 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d008      	beq.n	80046f8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e13c      	b.n	8004964 <HAL_I2C_Mem_Read+0x4bc>
 80046ea:	bf00      	nop
 80046ec:	00100002 	.word	0x00100002
 80046f0:	ffff0000 	.word	0xffff0000
 80046f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80046f8:	b672      	cpsid	i
}
 80046fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800470a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004728:	3b01      	subs	r3, #1
 800472a:	b29a      	uxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004734:	b29b      	uxth	r3, r3
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800473e:	b662      	cpsie	i
}
 8004740:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475e:	3b01      	subs	r3, #1
 8004760:	b29a      	uxth	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476a:	b29b      	uxth	r3, r3
 800476c:	3b01      	subs	r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004774:	e0e2      	b.n	800493c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477c:	2200      	movs	r2, #0
 800477e:	497b      	ldr	r1, [pc, #492]	; (800496c <HAL_I2C_Mem_Read+0x4c4>)
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 fa77 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0e9      	b.n	8004964 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800479e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80047a0:	b672      	cpsid	i
}
 80047a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691a      	ldr	r2, [r3, #16]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	3b01      	subs	r3, #1
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80047d6:	4b66      	ldr	r3, [pc, #408]	; (8004970 <HAL_I2C_Mem_Read+0x4c8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	08db      	lsrs	r3, r3, #3
 80047dc:	4a65      	ldr	r2, [pc, #404]	; (8004974 <HAL_I2C_Mem_Read+0x4cc>)
 80047de:	fba2 2303 	umull	r2, r3, r2, r3
 80047e2:	0a1a      	lsrs	r2, r3, #8
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	00da      	lsls	r2, r3, #3
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d118      	bne.n	800482e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f043 0220 	orr.w	r2, r3, #32
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800481e:	b662      	cpsie	i
}
 8004820:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e09a      	b.n	8004964 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b04      	cmp	r3, #4
 800483a:	d1d9      	bne.n	80047f0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691a      	ldr	r2, [r3, #16]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800487e:	b662      	cpsie	i
}
 8004880:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048b4:	e042      	b.n	800493c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 fb32 	bl	8004f24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e04c      	b.n	8004964 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b04      	cmp	r3, #4
 8004908:	d118      	bne.n	800493c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	b2d2      	uxtb	r2, r2
 8004916:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004926:	3b01      	subs	r3, #1
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004940:	2b00      	cmp	r3, #0
 8004942:	f47f ae94 	bne.w	800466e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2220      	movs	r2, #32
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	e000      	b.n	8004964 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004962:	2302      	movs	r3, #2
  }
}
 8004964:	4618      	mov	r0, r3
 8004966:	3728      	adds	r7, #40	; 0x28
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	00010004 	.word	0x00010004
 8004970:	20000014 	.word	0x20000014
 8004974:	14f8b589 	.word	0x14f8b589

08004978 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af02      	add	r7, sp, #8
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	4608      	mov	r0, r1
 8004982:	4611      	mov	r1, r2
 8004984:	461a      	mov	r2, r3
 8004986:	4603      	mov	r3, r0
 8004988:	817b      	strh	r3, [r7, #10]
 800498a:	460b      	mov	r3, r1
 800498c:	813b      	strh	r3, [r7, #8]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 f960 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00d      	beq.n	80049d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c8:	d103      	bne.n	80049d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e05f      	b.n	8004a96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049d6:	897b      	ldrh	r3, [r7, #10]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	461a      	mov	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	6a3a      	ldr	r2, [r7, #32]
 80049ea:	492d      	ldr	r1, [pc, #180]	; (8004aa0 <I2C_RequestMemoryWrite+0x128>)
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f998 	bl	8004d22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e04c      	b.n	8004a96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049fc:	2300      	movs	r3, #0
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a14:	6a39      	ldr	r1, [r7, #32]
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 fa02 	bl	8004e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00d      	beq.n	8004a3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d107      	bne.n	8004a3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e02b      	b.n	8004a96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a3e:	88fb      	ldrh	r3, [r7, #6]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d105      	bne.n	8004a50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a44:	893b      	ldrh	r3, [r7, #8]
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	611a      	str	r2, [r3, #16]
 8004a4e:	e021      	b.n	8004a94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a50:	893b      	ldrh	r3, [r7, #8]
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a60:	6a39      	ldr	r1, [r7, #32]
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 f9dc 	bl	8004e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00d      	beq.n	8004a8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d107      	bne.n	8004a86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e005      	b.n	8004a96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a8a:	893b      	ldrh	r3, [r7, #8]
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	00010002 	.word	0x00010002

08004aa4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af02      	add	r7, sp, #8
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	4608      	mov	r0, r1
 8004aae:	4611      	mov	r1, r2
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	817b      	strh	r3, [r7, #10]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	813b      	strh	r3, [r7, #8]
 8004aba:	4613      	mov	r3, r2
 8004abc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004acc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004adc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 f8c2 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00d      	beq.n	8004b12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b04:	d103      	bne.n	8004b0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e0aa      	b.n	8004c68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b12:	897b      	ldrh	r3, [r7, #10]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	461a      	mov	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	6a3a      	ldr	r2, [r7, #32]
 8004b26:	4952      	ldr	r1, [pc, #328]	; (8004c70 <I2C_RequestMemoryRead+0x1cc>)
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 f8fa 	bl	8004d22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e097      	b.n	8004c68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b38:	2300      	movs	r3, #0
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b50:	6a39      	ldr	r1, [r7, #32]
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 f964 	bl	8004e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00d      	beq.n	8004b7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d107      	bne.n	8004b76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e076      	b.n	8004c68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d105      	bne.n	8004b8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b80:	893b      	ldrh	r3, [r7, #8]
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	611a      	str	r2, [r3, #16]
 8004b8a:	e021      	b.n	8004bd0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b8c:	893b      	ldrh	r3, [r7, #8]
 8004b8e:	0a1b      	lsrs	r3, r3, #8
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9c:	6a39      	ldr	r1, [r7, #32]
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f93e 	bl	8004e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00d      	beq.n	8004bc6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d107      	bne.n	8004bc2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e050      	b.n	8004c68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bc6:	893b      	ldrh	r3, [r7, #8]
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd2:	6a39      	ldr	r1, [r7, #32]
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 f923 	bl	8004e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00d      	beq.n	8004bfc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d107      	bne.n	8004bf8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e035      	b.n	8004c68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 f82b 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00d      	beq.n	8004c40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c32:	d103      	bne.n	8004c3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e013      	b.n	8004c68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c40:	897b      	ldrh	r3, [r7, #10]
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	f043 0301 	orr.w	r3, r3, #1
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	6a3a      	ldr	r2, [r7, #32]
 8004c54:	4906      	ldr	r1, [pc, #24]	; (8004c70 <I2C_RequestMemoryRead+0x1cc>)
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 f863 	bl	8004d22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	00010002 	.word	0x00010002

08004c74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	4613      	mov	r3, r2
 8004c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c84:	e025      	b.n	8004cd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d021      	beq.n	8004cd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8e:	f7fe fec5 	bl	8003a1c <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d302      	bcc.n	8004ca4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d116      	bne.n	8004cd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f043 0220 	orr.w	r2, r3, #32
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e023      	b.n	8004d1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	0c1b      	lsrs	r3, r3, #16
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d10d      	bne.n	8004cf8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	43da      	mvns	r2, r3
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	bf0c      	ite	eq
 8004cee:	2301      	moveq	r3, #1
 8004cf0:	2300      	movne	r3, #0
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	e00c      	b.n	8004d12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	43da      	mvns	r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4013      	ands	r3, r2
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	bf0c      	ite	eq
 8004d0a:	2301      	moveq	r3, #1
 8004d0c:	2300      	movne	r3, #0
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	461a      	mov	r2, r3
 8004d12:	79fb      	ldrb	r3, [r7, #7]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d0b6      	beq.n	8004c86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d30:	e051      	b.n	8004dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d40:	d123      	bne.n	8004d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f043 0204 	orr.w	r2, r3, #4
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e046      	b.n	8004e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d90:	d021      	beq.n	8004dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d92:	f7fe fe43 	bl	8003a1c <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d302      	bcc.n	8004da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d116      	bne.n	8004dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	f043 0220 	orr.w	r2, r3, #32
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e020      	b.n	8004e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	0c1b      	lsrs	r3, r3, #16
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d10c      	bne.n	8004dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	43da      	mvns	r2, r3
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4013      	ands	r3, r2
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	bf14      	ite	ne
 8004df2:	2301      	movne	r3, #1
 8004df4:	2300      	moveq	r3, #0
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	e00b      	b.n	8004e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	43da      	mvns	r2, r3
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	4013      	ands	r3, r2
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	bf14      	ite	ne
 8004e0c:	2301      	movne	r3, #1
 8004e0e:	2300      	moveq	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d18d      	bne.n	8004d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e2c:	e02d      	b.n	8004e8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 f8ce 	bl	8004fd0 <I2C_IsAcknowledgeFailed>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e02d      	b.n	8004e9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e44:	d021      	beq.n	8004e8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e46:	f7fe fde9 	bl	8003a1c <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d302      	bcc.n	8004e5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d116      	bne.n	8004e8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	f043 0220 	orr.w	r2, r3, #32
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e007      	b.n	8004e9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e94:	2b80      	cmp	r3, #128	; 0x80
 8004e96:	d1ca      	bne.n	8004e2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	60f8      	str	r0, [r7, #12]
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004eae:	e02d      	b.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 f88d 	bl	8004fd0 <I2C_IsAcknowledgeFailed>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e02d      	b.n	8004f1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec6:	d021      	beq.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec8:	f7fe fda8 	bl	8003a1c <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d302      	bcc.n	8004ede <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d116      	bne.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	f043 0220 	orr.w	r2, r3, #32
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e007      	b.n	8004f1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d1ca      	bne.n	8004eb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f30:	e042      	b.n	8004fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b10      	cmp	r3, #16
 8004f3e:	d119      	bne.n	8004f74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0210 	mvn.w	r2, #16
 8004f48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e029      	b.n	8004fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f74:	f7fe fd52 	bl	8003a1c <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d302      	bcc.n	8004f8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d116      	bne.n	8004fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa4:	f043 0220 	orr.w	r2, r3, #32
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e007      	b.n	8004fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc2:	2b40      	cmp	r3, #64	; 0x40
 8004fc4:	d1b5      	bne.n	8004f32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe6:	d11b      	bne.n	8005020 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ff0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	f043 0204 	orr.w	r2, r3, #4
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	bc80      	pop	{r7}
 800502a:	4770      	bx	lr

0800502c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800502c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800502e:	b08b      	sub	sp, #44	; 0x2c
 8005030:	af06      	add	r7, sp, #24
 8005032:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e0fd      	b.n	800523a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d106      	bne.n	8005058 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f007 f82a 	bl	800c0ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2203      	movs	r2, #3
 800505c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4618      	mov	r0, r3
 8005066:	f003 f847 	bl	80080f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	687e      	ldr	r6, [r7, #4]
 8005072:	466d      	mov	r5, sp
 8005074:	f106 0410 	add.w	r4, r6, #16
 8005078:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800507a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	602b      	str	r3, [r5, #0]
 8005080:	1d33      	adds	r3, r6, #4
 8005082:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005084:	6838      	ldr	r0, [r7, #0]
 8005086:	f003 f811 	bl	80080ac <USB_CoreInit>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e0ce      	b.n	800523a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2100      	movs	r1, #0
 80050a2:	4618      	mov	r0, r3
 80050a4:	f003 f842 	bl	800812c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050a8:	2300      	movs	r3, #0
 80050aa:	73fb      	strb	r3, [r7, #15]
 80050ac:	e04c      	b.n	8005148 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	440b      	add	r3, r1
 80050be:	3301      	adds	r3, #1
 80050c0:	2201      	movs	r2, #1
 80050c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	440b      	add	r3, r1
 80050d4:	7bfa      	ldrb	r2, [r7, #15]
 80050d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050d8:	7bfa      	ldrb	r2, [r7, #15]
 80050da:	7bfb      	ldrb	r3, [r7, #15]
 80050dc:	b298      	uxth	r0, r3
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	4613      	mov	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	440b      	add	r3, r1
 80050ea:	3336      	adds	r3, #54	; 0x36
 80050ec:	4602      	mov	r2, r0
 80050ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	440b      	add	r3, r1
 8005100:	3303      	adds	r3, #3
 8005102:	2200      	movs	r2, #0
 8005104:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005106:	7bfa      	ldrb	r2, [r7, #15]
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	440b      	add	r3, r1
 8005114:	3338      	adds	r3, #56	; 0x38
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800511a:	7bfa      	ldrb	r2, [r7, #15]
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	440b      	add	r3, r1
 8005128:	333c      	adds	r3, #60	; 0x3c
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800512e:	7bfa      	ldrb	r2, [r7, #15]
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	440b      	add	r3, r1
 800513c:	3340      	adds	r3, #64	; 0x40
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005142:	7bfb      	ldrb	r3, [r7, #15]
 8005144:	3301      	adds	r3, #1
 8005146:	73fb      	strb	r3, [r7, #15]
 8005148:	7bfa      	ldrb	r2, [r7, #15]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	429a      	cmp	r2, r3
 8005150:	d3ad      	bcc.n	80050ae <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005152:	2300      	movs	r3, #0
 8005154:	73fb      	strb	r3, [r7, #15]
 8005156:	e044      	b.n	80051e2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005158:	7bfa      	ldrb	r2, [r7, #15]
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	4613      	mov	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	440b      	add	r3, r1
 8005166:	f203 1369 	addw	r3, r3, #361	; 0x169
 800516a:	2200      	movs	r2, #0
 800516c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800516e:	7bfa      	ldrb	r2, [r7, #15]
 8005170:	6879      	ldr	r1, [r7, #4]
 8005172:	4613      	mov	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	440b      	add	r3, r1
 800517c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005180:	7bfa      	ldrb	r2, [r7, #15]
 8005182:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005184:	7bfa      	ldrb	r2, [r7, #15]
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	4613      	mov	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	440b      	add	r3, r1
 8005192:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005196:	2200      	movs	r2, #0
 8005198:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800519a:	7bfa      	ldrb	r2, [r7, #15]
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	440b      	add	r3, r1
 80051a8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80051ac:	2200      	movs	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80051b0:	7bfa      	ldrb	r2, [r7, #15]
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	4613      	mov	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	440b      	add	r3, r1
 80051be:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051c6:	7bfa      	ldrb	r2, [r7, #15]
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	440b      	add	r3, r1
 80051d4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	3301      	adds	r3, #1
 80051e0:	73fb      	strb	r3, [r7, #15]
 80051e2:	7bfa      	ldrb	r2, [r7, #15]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d3b5      	bcc.n	8005158 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	603b      	str	r3, [r7, #0]
 80051f2:	687e      	ldr	r6, [r7, #4]
 80051f4:	466d      	mov	r5, sp
 80051f6:	f106 0410 	add.w	r4, r6, #16
 80051fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	602b      	str	r3, [r5, #0]
 8005202:	1d33      	adds	r3, r6, #4
 8005204:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005206:	6838      	ldr	r0, [r7, #0]
 8005208:	f002 ff9c 	bl	8008144 <USB_DevInit>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2202      	movs	r2, #2
 8005216:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e00d      	b.n	800523a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f005 f90d 	bl	800a452 <USB_DevDisconnect>

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005242 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_PCD_Start+0x16>
 8005254:	2302      	movs	r3, #2
 8005256:	e016      	b.n	8005286 <HAL_PCD_Start+0x44>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4618      	mov	r0, r3
 8005266:	f002 ff31 	bl	80080cc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800526a:	2101      	movs	r1, #1
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f007 f990 	bl	800c592 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f005 f8e1 	bl	800a43e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b088      	sub	sp, #32
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f005 f8e3 	bl	800a466 <USB_ReadInterrupts>
 80052a0:	4603      	mov	r3, r0
 80052a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052aa:	d102      	bne.n	80052b2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fb61 	bl	8005974 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f005 f8d5 	bl	800a466 <USB_ReadInterrupts>
 80052bc:	4603      	mov	r3, r0
 80052be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c6:	d112      	bne.n	80052ee <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052da:	b292      	uxth	r2, r2
 80052dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f006 ff5e 	bl	800c1a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80052e6:	2100      	movs	r1, #0
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f925 	bl	8005538 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f005 f8b7 	bl	800a466 <USB_ReadInterrupts>
 80052f8:	4603      	mov	r3, r0
 80052fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005302:	d10b      	bne.n	800531c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800530c:	b29a      	uxth	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005316:	b292      	uxth	r2, r2
 8005318:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4618      	mov	r0, r3
 8005322:	f005 f8a0 	bl	800a466 <USB_ReadInterrupts>
 8005326:	4603      	mov	r3, r0
 8005328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800532c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005330:	d10b      	bne.n	800534a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800533a:	b29a      	uxth	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005344:	b292      	uxth	r2, r2
 8005346:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4618      	mov	r0, r3
 8005350:	f005 f889 	bl	800a466 <USB_ReadInterrupts>
 8005354:	4603      	mov	r3, r0
 8005356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800535a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535e:	d126      	bne.n	80053ae <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005368:	b29a      	uxth	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0204 	bic.w	r2, r2, #4
 8005372:	b292      	uxth	r2, r2
 8005374:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005380:	b29a      	uxth	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0208 	bic.w	r2, r2, #8
 800538a:	b292      	uxth	r2, r2
 800538c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f006 ff3f 	bl	800c214 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800539e:	b29a      	uxth	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053a8:	b292      	uxth	r2, r2
 80053aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f005 f857 	bl	800a466 <USB_ReadInterrupts>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053c2:	f040 8084 	bne.w	80054ce <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80053c6:	2300      	movs	r3, #0
 80053c8:	77fb      	strb	r3, [r7, #31]
 80053ca:	e011      	b.n	80053f0 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	7ffb      	ldrb	r3, [r7, #31]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	441a      	add	r2, r3
 80053d8:	7ffb      	ldrb	r3, [r7, #31]
 80053da:	8812      	ldrh	r2, [r2, #0]
 80053dc:	b292      	uxth	r2, r2
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	f107 0120 	add.w	r1, r7, #32
 80053e4:	440b      	add	r3, r1
 80053e6:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80053ea:	7ffb      	ldrb	r3, [r7, #31]
 80053ec:	3301      	adds	r3, #1
 80053ee:	77fb      	strb	r3, [r7, #31]
 80053f0:	7ffb      	ldrb	r3, [r7, #31]
 80053f2:	2b07      	cmp	r3, #7
 80053f4:	d9ea      	bls.n	80053cc <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053fe:	b29a      	uxth	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f042 0201 	orr.w	r2, r2, #1
 8005408:	b292      	uxth	r2, r2
 800540a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005416:	b29a      	uxth	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0201 	bic.w	r2, r2, #1
 8005420:	b292      	uxth	r2, r2
 8005422:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005426:	bf00      	nop
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005430:	b29b      	uxth	r3, r3
 8005432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0f6      	beq.n	8005428 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005442:	b29a      	uxth	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800544c:	b292      	uxth	r2, r2
 800544e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005452:	2300      	movs	r3, #0
 8005454:	77fb      	strb	r3, [r7, #31]
 8005456:	e010      	b.n	800547a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005458:	7ffb      	ldrb	r3, [r7, #31]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	4611      	mov	r1, r2
 8005460:	7ffa      	ldrb	r2, [r7, #31]
 8005462:	0092      	lsls	r2, r2, #2
 8005464:	440a      	add	r2, r1
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	f107 0120 	add.w	r1, r7, #32
 800546c:	440b      	add	r3, r1
 800546e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005472:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005474:	7ffb      	ldrb	r3, [r7, #31]
 8005476:	3301      	adds	r3, #1
 8005478:	77fb      	strb	r3, [r7, #31]
 800547a:	7ffb      	ldrb	r3, [r7, #31]
 800547c:	2b07      	cmp	r3, #7
 800547e:	d9eb      	bls.n	8005458 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005488:	b29a      	uxth	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0208 	orr.w	r2, r2, #8
 8005492:	b292      	uxth	r2, r2
 8005494:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054aa:	b292      	uxth	r2, r2
 80054ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0204 	orr.w	r2, r2, #4
 80054c2:	b292      	uxth	r2, r2
 80054c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f006 fe89 	bl	800c1e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f004 ffc7 	bl	800a466 <USB_ReadInterrupts>
 80054d8:	4603      	mov	r3, r0
 80054da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054e2:	d10e      	bne.n	8005502 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80054f6:	b292      	uxth	r2, r2
 80054f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f006 fe42 	bl	800c186 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4618      	mov	r0, r3
 8005508:	f004 ffad 	bl	800a466 <USB_ReadInterrupts>
 800550c:	4603      	mov	r3, r0
 800550e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005516:	d10b      	bne.n	8005530 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005520:	b29a      	uxth	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800552a:	b292      	uxth	r2, r2
 800552c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8005530:	bf00      	nop
 8005532:	3720      	adds	r7, #32
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_PCD_SetAddress+0x1a>
 800554e:	2302      	movs	r3, #2
 8005550:	e013      	b.n	800557a <HAL_PCD_SetAddress+0x42>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	78fa      	ldrb	r2, [r7, #3]
 800555e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	78fa      	ldrb	r2, [r7, #3]
 8005568:	4611      	mov	r1, r2
 800556a:	4618      	mov	r0, r3
 800556c:	f004 ff54 	bl	800a418 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b084      	sub	sp, #16
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	4608      	mov	r0, r1
 800558c:	4611      	mov	r1, r2
 800558e:	461a      	mov	r2, r3
 8005590:	4603      	mov	r3, r0
 8005592:	70fb      	strb	r3, [r7, #3]
 8005594:	460b      	mov	r3, r1
 8005596:	803b      	strh	r3, [r7, #0]
 8005598:	4613      	mov	r3, r2
 800559a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800559c:	2300      	movs	r3, #0
 800559e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	da0e      	bge.n	80055c6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	4413      	add	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	705a      	strb	r2, [r3, #1]
 80055c4:	e00e      	b.n	80055e4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055c6:	78fb      	ldrb	r3, [r7, #3]
 80055c8:	f003 0207 	and.w	r2, r3, #7
 80055cc:	4613      	mov	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	4413      	add	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80055f0:	883a      	ldrh	r2, [r7, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	78ba      	ldrb	r2, [r7, #2]
 80055fa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	785b      	ldrb	r3, [r3, #1]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d004      	beq.n	800560e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	b29a      	uxth	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800560e:	78bb      	ldrb	r3, [r7, #2]
 8005610:	2b02      	cmp	r3, #2
 8005612:	d102      	bne.n	800561a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <HAL_PCD_EP_Open+0xa6>
 8005624:	2302      	movs	r3, #2
 8005626:	e00e      	b.n	8005646 <HAL_PCD_EP_Open+0xc4>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68f9      	ldr	r1, [r7, #12]
 8005636:	4618      	mov	r0, r3
 8005638:	f002 fda4 	bl	8008184 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005644:	7afb      	ldrb	r3, [r7, #11]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	460b      	mov	r3, r1
 8005658:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800565a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800565e:	2b00      	cmp	r3, #0
 8005660:	da0e      	bge.n	8005680 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005662:	78fb      	ldrb	r3, [r7, #3]
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	4413      	add	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2201      	movs	r2, #1
 800567c:	705a      	strb	r2, [r3, #1]
 800567e:	e00e      	b.n	800569e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	f003 0207 	and.w	r2, r3, #7
 8005686:	4613      	mov	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	4413      	add	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800569e:	78fb      	ldrb	r3, [r7, #3]
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_PCD_EP_Close+0x6a>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e00e      	b.n	80056d6 <HAL_PCD_EP_Close+0x88>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68f9      	ldr	r1, [r7, #12]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f003 f8c6 	bl	8008858 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b086      	sub	sp, #24
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	603b      	str	r3, [r7, #0]
 80056ea:	460b      	mov	r3, r1
 80056ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056ee:	7afb      	ldrb	r3, [r7, #11]
 80056f0:	f003 0207 	and.w	r2, r3, #7
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2200      	movs	r2, #0
 8005716:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2200      	movs	r2, #0
 800571c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800571e:	7afb      	ldrb	r3, [r7, #11]
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	b2da      	uxtb	r2, r3
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800572a:	7afb      	ldrb	r3, [r7, #11]
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	2b00      	cmp	r3, #0
 8005732:	d106      	bne.n	8005742 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6979      	ldr	r1, [r7, #20]
 800573a:	4618      	mov	r0, r3
 800573c:	f003 fa78 	bl	8008c30 <USB_EPStartXfer>
 8005740:	e005      	b.n	800574e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6979      	ldr	r1, [r7, #20]
 8005748:	4618      	mov	r0, r3
 800574a:	f003 fa71 	bl	8008c30 <USB_EPStartXfer>
  }

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	460b      	mov	r3, r1
 8005762:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	f003 0207 	and.w	r2, r3, #7
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	440b      	add	r3, r1
 8005776:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800577a:	681b      	ldr	r3, [r3, #0]
}
 800577c:	4618      	mov	r0, r3
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	bc80      	pop	{r7}
 8005784:	4770      	bx	lr

08005786 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b086      	sub	sp, #24
 800578a:	af00      	add	r7, sp, #0
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	603b      	str	r3, [r7, #0]
 8005792:	460b      	mov	r3, r1
 8005794:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005796:	7afb      	ldrb	r3, [r7, #11]
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	4613      	mov	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	4413      	add	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2200      	movs	r2, #0
 80057ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2201      	movs	r2, #1
 80057d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057d2:	7afb      	ldrb	r3, [r7, #11]
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057de:	7afb      	ldrb	r3, [r7, #11]
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d106      	bne.n	80057f6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6979      	ldr	r1, [r7, #20]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f003 fa1e 	bl	8008c30 <USB_EPStartXfer>
 80057f4:	e005      	b.n	8005802 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6979      	ldr	r1, [r7, #20]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f003 fa17 	bl	8008c30 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3718      	adds	r7, #24
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005818:	78fb      	ldrb	r3, [r7, #3]
 800581a:	f003 0207 	and.w	r2, r3, #7
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	429a      	cmp	r2, r3
 8005824:	d901      	bls.n	800582a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e04c      	b.n	80058c4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800582a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800582e:	2b00      	cmp	r3, #0
 8005830:	da0e      	bge.n	8005850 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005832:	78fb      	ldrb	r3, [r7, #3]
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	4413      	add	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	705a      	strb	r2, [r3, #1]
 800584e:	e00c      	b.n	800586a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005850:	78fa      	ldrb	r2, [r7, #3]
 8005852:	4613      	mov	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	4413      	add	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2201      	movs	r2, #1
 800586e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005870:	78fb      	ldrb	r3, [r7, #3]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	b2da      	uxtb	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_PCD_EP_SetStall+0x7e>
 8005886:	2302      	movs	r3, #2
 8005888:	e01c      	b.n	80058c4 <HAL_PCD_EP_SetStall+0xb8>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68f9      	ldr	r1, [r7, #12]
 8005898:	4618      	mov	r0, r3
 800589a:	f004 fcc0 	bl	800a21e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800589e:	78fb      	ldrb	r3, [r7, #3]
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d108      	bne.n	80058ba <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80058b2:	4619      	mov	r1, r3
 80058b4:	4610      	mov	r0, r2
 80058b6:	f004 fde5 	bl	800a484 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058d8:	78fb      	ldrb	r3, [r7, #3]
 80058da:	f003 020f 	and.w	r2, r3, #15
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d901      	bls.n	80058ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e040      	b.n	800596c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	da0e      	bge.n	8005910 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	4613      	mov	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	4413      	add	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2201      	movs	r2, #1
 800590c:	705a      	strb	r2, [r3, #1]
 800590e:	e00e      	b.n	800592e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	f003 0207 	and.w	r2, r3, #7
 8005916:	4613      	mov	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	4413      	add	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	b2da      	uxtb	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_PCD_EP_ClrStall+0x82>
 800594a:	2302      	movs	r3, #2
 800594c:	e00e      	b.n	800596c <HAL_PCD_EP_ClrStall+0xa0>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68f9      	ldr	r1, [r7, #12]
 800595c:	4618      	mov	r0, r3
 800595e:	f004 fcae 	bl	800a2be <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08e      	sub	sp, #56	; 0x38
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800597c:	e2ec      	b.n	8005f58 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005986:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005988:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800598a:	b2db      	uxtb	r3, r3
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005994:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005998:	2b00      	cmp	r3, #0
 800599a:	f040 8161 	bne.w	8005c60 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800599e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d152      	bne.n	8005a4e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80059b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b8:	81fb      	strh	r3, [r7, #14]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	89fb      	ldrh	r3, [r7, #14]
 80059c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3328      	adds	r3, #40	; 0x28
 80059d0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059da:	b29b      	uxth	r3, r3
 80059dc:	461a      	mov	r2, r3
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	4413      	add	r3, r2
 80059e6:	3302      	adds	r3, #2
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6812      	ldr	r2, [r2, #0]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	695a      	ldr	r2, [r3, #20]
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	441a      	add	r2, r3
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f006 fb9f 	bl	800c152 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 829b 	beq.w	8005f58 <PCD_EP_ISR_Handler+0x5e4>
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f040 8296 	bne.w	8005f58 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	b292      	uxth	r2, r2
 8005a40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005a4c:	e284      	b.n	8005f58 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005a5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d034      	beq.n	8005ad2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	461a      	mov	r2, r3
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	4413      	add	r3, r2
 8005a7c:	3306      	adds	r3, #6
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6818      	ldr	r0, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f004 fd3c 	bl	800a524 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005ab8:	4013      	ands	r3, r2
 8005aba:	823b      	strh	r3, [r7, #16]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	8a3a      	ldrh	r2, [r7, #16]
 8005ac2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ac6:	b292      	uxth	r2, r2
 8005ac8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f006 fb14 	bl	800c0f8 <HAL_PCD_SetupStageCallback>
 8005ad0:	e242      	b.n	8005f58 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005ad2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f280 823e 	bge.w	8005f58 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005ae8:	4013      	ands	r3, r2
 8005aea:	83bb      	strh	r3, [r7, #28]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	8bba      	ldrh	r2, [r7, #28]
 8005af2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005af6:	b292      	uxth	r2, r2
 8005af8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	4413      	add	r3, r2
 8005b0e:	3306      	adds	r3, #6
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	6812      	ldr	r2, [r2, #0]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d019      	beq.n	8005b62 <PCD_EP_ISR_Handler+0x1ee>
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d015      	beq.n	8005b62 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6818      	ldr	r0, [r3, #0]
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	6959      	ldr	r1, [r3, #20]
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	f004 fcec 	bl	800a524 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	695a      	ldr	r2, [r3, #20]
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	441a      	add	r2, r3
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f006 fadd 	bl	800c11c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f040 81f2 	bne.w	8005f58 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	461a      	mov	r2, r3
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	4413      	add	r3, r2
 8005b8a:	61bb      	str	r3, [r7, #24]
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d112      	bne.n	8005bc2 <PCD_EP_ISR_Handler+0x24e>
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	801a      	strh	r2, [r3, #0]
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	801a      	strh	r2, [r3, #0]
 8005bc0:	e02f      	b.n	8005c22 <PCD_EP_ISR_Handler+0x2ae>
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b3e      	cmp	r3, #62	; 0x3e
 8005bc8:	d813      	bhi.n	8005bf2 <PCD_EP_ISR_Handler+0x27e>
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	085b      	lsrs	r3, r3, #1
 8005bd0:	633b      	str	r3, [r7, #48]	; 0x30
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <PCD_EP_ISR_Handler+0x270>
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	3301      	adds	r3, #1
 8005be2:	633b      	str	r3, [r7, #48]	; 0x30
 8005be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	029b      	lsls	r3, r3, #10
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	801a      	strh	r2, [r3, #0]
 8005bf0:	e017      	b.n	8005c22 <PCD_EP_ISR_Handler+0x2ae>
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	095b      	lsrs	r3, r3, #5
 8005bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f003 031f 	and.w	r3, r3, #31
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d102      	bne.n	8005c0c <PCD_EP_ISR_Handler+0x298>
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	633b      	str	r3, [r7, #48]	; 0x30
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	029b      	lsls	r3, r3, #10
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c32:	827b      	strh	r3, [r7, #18]
 8005c34:	8a7b      	ldrh	r3, [r7, #18]
 8005c36:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c3a:	827b      	strh	r3, [r7, #18]
 8005c3c:	8a7b      	ldrh	r3, [r7, #18]
 8005c3e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c42:	827b      	strh	r3, [r7, #18]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	8a7b      	ldrh	r3, [r7, #18]
 8005c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	8013      	strh	r3, [r2, #0]
 8005c5e:	e17b      	b.n	8005f58 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	461a      	mov	r2, r3
 8005c66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005c72:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f280 80ea 	bge.w	8005e50 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	461a      	mov	r2, r3
 8005c82:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005c92:	4013      	ands	r3, r2
 8005c94:	853b      	strh	r3, [r7, #40]	; 0x28
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005ca6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005caa:	b292      	uxth	r2, r2
 8005cac:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005cae:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	7b1b      	ldrb	r3, [r3, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d122      	bne.n	8005d12 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	4413      	add	r3, r2
 8005ce0:	3306      	adds	r3, #6
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6812      	ldr	r2, [r2, #0]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cf4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005cf6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 8087 	beq.w	8005e0c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6818      	ldr	r0, [r3, #0]
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	6959      	ldr	r1, [r3, #20]
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	88da      	ldrh	r2, [r3, #6]
 8005d0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d0c:	f004 fc0a 	bl	800a524 <USB_ReadPMA>
 8005d10:	e07c      	b.n	8005e0c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	78db      	ldrb	r3, [r3, #3]
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d108      	bne.n	8005d2c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005d1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f927 	bl	8005f74 <HAL_PCD_EP_DB_Receive>
 8005d26:	4603      	mov	r3, r0
 8005d28:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005d2a:	e06f      	b.n	8005e0c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	461a      	mov	r2, r3
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d46:	847b      	strh	r3, [r7, #34]	; 0x22
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	441a      	add	r2, r3
 8005d56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d021      	beq.n	8005dca <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	4413      	add	r3, r2
 8005d9a:	3302      	adds	r3, #2
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dae:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005db0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d02a      	beq.n	8005e0c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	6959      	ldr	r1, [r3, #20]
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	891a      	ldrh	r2, [r3, #8]
 8005dc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005dc4:	f004 fbae 	bl	800a524 <USB_ReadPMA>
 8005dc8:	e020      	b.n	8005e0c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	4413      	add	r3, r2
 8005dde:	3306      	adds	r3, #6
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6812      	ldr	r2, [r2, #0]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005df2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005df4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d008      	beq.n	8005e0c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6818      	ldr	r0, [r3, #0]
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	6959      	ldr	r1, [r3, #20]
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	895a      	ldrh	r2, [r3, #10]
 8005e06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e08:	f004 fb8c 	bl	800a524 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	69da      	ldr	r2, [r3, #28]
 8005e10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e12:	441a      	add	r2, r3
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	695a      	ldr	r2, [r3, #20]
 8005e1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e1e:	441a      	add	r2, r3
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d004      	beq.n	8005e36 <PCD_EP_ISR_Handler+0x4c2>
 8005e2c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d206      	bcs.n	8005e44 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f006 f96d 	bl	800c11c <HAL_PCD_DataOutStageCallback>
 8005e42:	e005      	b.n	8005e50 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f002 fef0 	bl	8008c30 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005e50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d07e      	beq.n	8005f58 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005e5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	4613      	mov	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e88:	843b      	strh	r3, [r7, #32]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	441a      	add	r2, r3
 8005e98:	8c3b      	ldrh	r3, [r7, #32]
 8005e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	78db      	ldrb	r3, [r3, #3]
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d00c      	beq.n	8005ec8 <PCD_EP_ISR_Handler+0x554>
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	78db      	ldrb	r3, [r3, #3]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d008      	beq.n	8005ec8 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d146      	bne.n	8005f4c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005ebe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d141      	bne.n	8005f4c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	4413      	add	r3, r2
 8005edc:	3302      	adds	r3, #2
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6812      	ldr	r2, [r2, #0]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ef0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	699a      	ldr	r2, [r3, #24]
 8005ef6:	8bfb      	ldrh	r3, [r7, #30]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d906      	bls.n	8005f0a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	699a      	ldr	r2, [r3, #24]
 8005f00:	8bfb      	ldrh	r3, [r7, #30]
 8005f02:	1ad2      	subs	r2, r2, r3
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	619a      	str	r2, [r3, #24]
 8005f08:	e002      	b.n	8005f10 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d106      	bne.n	8005f26 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f006 f917 	bl	800c152 <HAL_PCD_DataInStageCallback>
 8005f24:	e018      	b.n	8005f58 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	695a      	ldr	r2, [r3, #20]
 8005f2a:	8bfb      	ldrh	r3, [r7, #30]
 8005f2c:	441a      	add	r2, r3
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	69da      	ldr	r2, [r3, #28]
 8005f36:	8bfb      	ldrh	r3, [r7, #30]
 8005f38:	441a      	add	r2, r3
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f44:	4618      	mov	r0, r3
 8005f46:	f002 fe73 	bl	8008c30 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005f4a:	e005      	b.n	8005f58 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005f4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005f4e:	461a      	mov	r2, r3
 8005f50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f91b 	bl	800618e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	b21b      	sxth	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f6ff ad0a 	blt.w	800597e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3738      	adds	r7, #56	; 0x38
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005f82:	88fb      	ldrh	r3, [r7, #6]
 8005f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d07e      	beq.n	800608a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	461a      	mov	r2, r3
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	4413      	add	r3, r2
 8005fa0:	3302      	adds	r3, #2
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	6812      	ldr	r2, [r2, #0]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fb4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	699a      	ldr	r2, [r3, #24]
 8005fba:	8b7b      	ldrh	r3, [r7, #26]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d306      	bcc.n	8005fce <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	699a      	ldr	r2, [r3, #24]
 8005fc4:	8b7b      	ldrh	r3, [r7, #26]
 8005fc6:	1ad2      	subs	r2, r2, r3
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	619a      	str	r2, [r3, #24]
 8005fcc:	e002      	b.n	8005fd4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d123      	bne.n	8006024 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff6:	833b      	strh	r3, [r7, #24]
 8005ff8:	8b3b      	ldrh	r3, [r7, #24]
 8005ffa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ffe:	833b      	strh	r3, [r7, #24]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	461a      	mov	r2, r3
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	441a      	add	r2, r3
 800600e:	8b3b      	ldrh	r3, [r7, #24]
 8006010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800601c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006020:	b29b      	uxth	r3, r3
 8006022:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006024:	88fb      	ldrh	r3, [r7, #6]
 8006026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602a:	2b00      	cmp	r3, #0
 800602c:	d01f      	beq.n	800606e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006048:	82fb      	strh	r3, [r7, #22]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	441a      	add	r2, r3
 8006058:	8afb      	ldrh	r3, [r7, #22]
 800605a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006066:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800606a:	b29b      	uxth	r3, r3
 800606c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800606e:	8b7b      	ldrh	r3, [r7, #26]
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 8087 	beq.w	8006184 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6818      	ldr	r0, [r3, #0]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	6959      	ldr	r1, [r3, #20]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	891a      	ldrh	r2, [r3, #8]
 8006082:	8b7b      	ldrh	r3, [r7, #26]
 8006084:	f004 fa4e 	bl	800a524 <USB_ReadPMA>
 8006088:	e07c      	b.n	8006184 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006092:	b29b      	uxth	r3, r3
 8006094:	461a      	mov	r2, r3
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	4413      	add	r3, r2
 800609e:	3306      	adds	r3, #6
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	6812      	ldr	r2, [r2, #0]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060b2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	699a      	ldr	r2, [r3, #24]
 80060b8:	8b7b      	ldrh	r3, [r7, #26]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d306      	bcc.n	80060cc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	699a      	ldr	r2, [r3, #24]
 80060c2:	8b7b      	ldrh	r3, [r7, #26]
 80060c4:	1ad2      	subs	r2, r2, r3
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	619a      	str	r2, [r3, #24]
 80060ca:	e002      	b.n	80060d2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2200      	movs	r2, #0
 80060d0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d123      	bne.n	8006122 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f4:	83fb      	strh	r3, [r7, #30]
 80060f6:	8bfb      	ldrh	r3, [r7, #30]
 80060f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060fc:	83fb      	strh	r3, [r7, #30]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	441a      	add	r2, r3
 800610c:	8bfb      	ldrh	r3, [r7, #30]
 800610e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611e:	b29b      	uxth	r3, r3
 8006120:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006122:	88fb      	ldrh	r3, [r7, #6]
 8006124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006128:	2b00      	cmp	r3, #0
 800612a:	d11f      	bne.n	800616c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	b29b      	uxth	r3, r3
 800613e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006146:	83bb      	strh	r3, [r7, #28]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	461a      	mov	r2, r3
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	441a      	add	r2, r3
 8006156:	8bbb      	ldrh	r3, [r7, #28]
 8006158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800615c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006164:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006168:	b29b      	uxth	r3, r3
 800616a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800616c:	8b7b      	ldrh	r3, [r7, #26]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d008      	beq.n	8006184 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6818      	ldr	r0, [r3, #0]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	6959      	ldr	r1, [r3, #20]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	895a      	ldrh	r2, [r3, #10]
 800617e:	8b7b      	ldrh	r3, [r7, #26]
 8006180:	f004 f9d0 	bl	800a524 <USB_ReadPMA>
    }
  }

  return count;
 8006184:	8b7b      	ldrh	r3, [r7, #26]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3720      	adds	r7, #32
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b0a2      	sub	sp, #136	; 0x88
 8006192:	af00      	add	r7, sp, #0
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	4613      	mov	r3, r2
 800619a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800619c:	88fb      	ldrh	r3, [r7, #6]
 800619e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 81c7 	beq.w	8006536 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	461a      	mov	r2, r3
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	4413      	add	r3, r2
 80061bc:	3302      	adds	r3, #2
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	6812      	ldr	r2, [r2, #0]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	699a      	ldr	r2, [r3, #24]
 80061d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80061dc:	429a      	cmp	r2, r3
 80061de:	d907      	bls.n	80061f0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	699a      	ldr	r2, [r3, #24]
 80061e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80061e8:	1ad2      	subs	r2, r2, r3
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	619a      	str	r2, [r3, #24]
 80061ee:	e002      	b.n	80061f6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2200      	movs	r2, #0
 80061f4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f040 80b9 	bne.w	8006372 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	785b      	ldrb	r3, [r3, #1]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d126      	bne.n	8006256 <HAL_PCD_EP_DB_Transmit+0xc8>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	62bb      	str	r3, [r7, #40]	; 0x28
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006216:	b29b      	uxth	r3, r3
 8006218:	461a      	mov	r2, r3
 800621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621c:	4413      	add	r3, r2
 800621e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	011a      	lsls	r2, r3, #4
 8006226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006228:	4413      	add	r3, r2
 800622a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800622e:	627b      	str	r3, [r7, #36]	; 0x24
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	b29b      	uxth	r3, r3
 8006236:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800623a:	b29a      	uxth	r2, r3
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	801a      	strh	r2, [r3, #0]
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800624a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800624e:	b29a      	uxth	r2, r3
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	801a      	strh	r2, [r3, #0]
 8006254:	e01a      	b.n	800628c <HAL_PCD_EP_DB_Transmit+0xfe>
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	785b      	ldrb	r3, [r3, #1]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d116      	bne.n	800628c <HAL_PCD_EP_DB_Transmit+0xfe>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	633b      	str	r3, [r7, #48]	; 0x30
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800626c:	b29b      	uxth	r3, r3
 800626e:	461a      	mov	r2, r3
 8006270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006272:	4413      	add	r3, r2
 8006274:	633b      	str	r3, [r7, #48]	; 0x30
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	011a      	lsls	r2, r3, #4
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	4413      	add	r3, r2
 8006280:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006288:	2200      	movs	r2, #0
 800628a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	623b      	str	r3, [r7, #32]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	785b      	ldrb	r3, [r3, #1]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d126      	bne.n	80062e8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	61bb      	str	r3, [r7, #24]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	461a      	mov	r2, r3
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	4413      	add	r3, r2
 80062b0:	61bb      	str	r3, [r7, #24]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	011a      	lsls	r2, r3, #4
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	4413      	add	r3, r2
 80062bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	801a      	strh	r2, [r3, #0]
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	801a      	strh	r2, [r3, #0]
 80062e6:	e017      	b.n	8006318 <HAL_PCD_EP_DB_Transmit+0x18a>
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	785b      	ldrb	r3, [r3, #1]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d113      	bne.n	8006318 <HAL_PCD_EP_DB_Transmit+0x18a>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	461a      	mov	r2, r3
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	4413      	add	r3, r2
 8006300:	623b      	str	r3, [r7, #32]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	011a      	lsls	r2, r3, #4
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	4413      	add	r3, r2
 800630c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006310:	61fb      	str	r3, [r7, #28]
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	2200      	movs	r2, #0
 8006316:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	4619      	mov	r1, r3
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f005 ff17 	bl	800c152 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006324:	88fb      	ldrh	r3, [r7, #6]
 8006326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 82d4 	beq.w	80068d8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	461a      	mov	r2, r3
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	b29b      	uxth	r3, r3
 8006342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634a:	827b      	strh	r3, [r7, #18]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	461a      	mov	r2, r3
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	441a      	add	r2, r3
 800635a:	8a7b      	ldrh	r3, [r7, #18]
 800635c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006364:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800636c:	b29b      	uxth	r3, r3
 800636e:	8013      	strh	r3, [r2, #0]
 8006370:	e2b2      	b.n	80068d8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006372:	88fb      	ldrh	r3, [r7, #6]
 8006374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d021      	beq.n	80063c0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	461a      	mov	r2, r3
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29b      	uxth	r3, r3
 800638e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006396:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	441a      	add	r2, r3
 80063a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80063ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063bc:	b29b      	uxth	r3, r3
 80063be:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	f040 8286 	bne.w	80068d8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	695a      	ldr	r2, [r3, #20]
 80063d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80063d4:	441a      	add	r2, r3
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	69da      	ldr	r2, [r3, #28]
 80063de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80063e2:	441a      	add	r2, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	6a1a      	ldr	r2, [r3, #32]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d309      	bcc.n	8006408 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	6a1a      	ldr	r2, [r3, #32]
 80063fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006400:	1ad2      	subs	r2, r2, r3
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	621a      	str	r2, [r3, #32]
 8006406:	e015      	b.n	8006434 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d107      	bne.n	8006420 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8006410:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006414:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800641e:	e009      	b.n	8006434 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	2200      	movs	r2, #0
 8006432:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	785b      	ldrb	r3, [r3, #1]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d155      	bne.n	80064e8 <HAL_PCD_EP_DB_Transmit+0x35a>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	63bb      	str	r3, [r7, #56]	; 0x38
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800644a:	b29b      	uxth	r3, r3
 800644c:	461a      	mov	r2, r3
 800644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006450:	4413      	add	r3, r2
 8006452:	63bb      	str	r3, [r7, #56]	; 0x38
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	011a      	lsls	r2, r3, #4
 800645a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645c:	4413      	add	r3, r2
 800645e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006462:	637b      	str	r3, [r7, #52]	; 0x34
 8006464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006466:	2b00      	cmp	r3, #0
 8006468:	d112      	bne.n	8006490 <HAL_PCD_EP_DB_Transmit+0x302>
 800646a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	b29b      	uxth	r3, r3
 8006470:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006474:	b29a      	uxth	r2, r3
 8006476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006478:	801a      	strh	r2, [r3, #0]
 800647a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	b29b      	uxth	r3, r3
 8006480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006488:	b29a      	uxth	r2, r3
 800648a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648c:	801a      	strh	r2, [r3, #0]
 800648e:	e047      	b.n	8006520 <HAL_PCD_EP_DB_Transmit+0x392>
 8006490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006492:	2b3e      	cmp	r3, #62	; 0x3e
 8006494:	d811      	bhi.n	80064ba <HAL_PCD_EP_DB_Transmit+0x32c>
 8006496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006498:	085b      	lsrs	r3, r3, #1
 800649a:	64bb      	str	r3, [r7, #72]	; 0x48
 800649c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <HAL_PCD_EP_DB_Transmit+0x31e>
 80064a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064a8:	3301      	adds	r3, #1
 80064aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80064ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	029b      	lsls	r3, r3, #10
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b6:	801a      	strh	r2, [r3, #0]
 80064b8:	e032      	b.n	8006520 <HAL_PCD_EP_DB_Transmit+0x392>
 80064ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064bc:	095b      	lsrs	r3, r3, #5
 80064be:	64bb      	str	r3, [r7, #72]	; 0x48
 80064c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064c2:	f003 031f 	and.w	r3, r3, #31
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d102      	bne.n	80064d0 <HAL_PCD_EP_DB_Transmit+0x342>
 80064ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064cc:	3b01      	subs	r3, #1
 80064ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80064d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	029b      	lsls	r3, r3, #10
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e4:	801a      	strh	r2, [r3, #0]
 80064e6:	e01b      	b.n	8006520 <HAL_PCD_EP_DB_Transmit+0x392>
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	785b      	ldrb	r3, [r3, #1]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d117      	bne.n	8006520 <HAL_PCD_EP_DB_Transmit+0x392>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	643b      	str	r3, [r7, #64]	; 0x40
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064fe:	b29b      	uxth	r3, r3
 8006500:	461a      	mov	r2, r3
 8006502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006504:	4413      	add	r3, r2
 8006506:	643b      	str	r3, [r7, #64]	; 0x40
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	011a      	lsls	r2, r3, #4
 800650e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006510:	4413      	add	r3, r2
 8006512:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800651a:	b29a      	uxth	r2, r3
 800651c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800651e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6818      	ldr	r0, [r3, #0]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	6959      	ldr	r1, [r3, #20]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	891a      	ldrh	r2, [r3, #8]
 800652c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800652e:	b29b      	uxth	r3, r3
 8006530:	f003 ffb3 	bl	800a49a <USB_WritePMA>
 8006534:	e1d0      	b.n	80068d8 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800653e:	b29b      	uxth	r3, r3
 8006540:	461a      	mov	r2, r3
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	00db      	lsls	r3, r3, #3
 8006548:	4413      	add	r3, r2
 800654a:	3306      	adds	r3, #6
 800654c:	005b      	lsls	r3, r3, #1
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	6812      	ldr	r2, [r2, #0]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800655e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	699a      	ldr	r2, [r3, #24]
 8006566:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800656a:	429a      	cmp	r2, r3
 800656c:	d307      	bcc.n	800657e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	699a      	ldr	r2, [r3, #24]
 8006572:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006576:	1ad2      	subs	r2, r2, r3
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	619a      	str	r2, [r3, #24]
 800657c:	e002      	b.n	8006584 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2200      	movs	r2, #0
 8006582:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	2b00      	cmp	r3, #0
 800658a:	f040 80c4 	bne.w	8006716 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	785b      	ldrb	r3, [r3, #1]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d126      	bne.n	80065e4 <HAL_PCD_EP_DB_Transmit+0x456>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	461a      	mov	r2, r3
 80065a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065aa:	4413      	add	r3, r2
 80065ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	011a      	lsls	r2, r3, #4
 80065b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b6:	4413      	add	r3, r2
 80065b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80065be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065cc:	801a      	strh	r2, [r3, #0]
 80065ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065dc:	b29a      	uxth	r2, r3
 80065de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065e0:	801a      	strh	r2, [r3, #0]
 80065e2:	e01a      	b.n	800661a <HAL_PCD_EP_DB_Transmit+0x48c>
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	785b      	ldrb	r3, [r3, #1]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d116      	bne.n	800661a <HAL_PCD_EP_DB_Transmit+0x48c>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	677b      	str	r3, [r7, #116]	; 0x74
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	461a      	mov	r2, r3
 80065fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006600:	4413      	add	r3, r2
 8006602:	677b      	str	r3, [r7, #116]	; 0x74
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	011a      	lsls	r2, r3, #4
 800660a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800660c:	4413      	add	r3, r2
 800660e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006612:	673b      	str	r3, [r7, #112]	; 0x70
 8006614:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006616:	2200      	movs	r2, #0
 8006618:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	785b      	ldrb	r3, [r3, #1]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d12f      	bne.n	8006688 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006638:	b29b      	uxth	r3, r3
 800663a:	461a      	mov	r2, r3
 800663c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006640:	4413      	add	r3, r2
 8006642:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	011a      	lsls	r2, r3, #4
 800664c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006650:	4413      	add	r3, r2
 8006652:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006656:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800665a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800665e:	881b      	ldrh	r3, [r3, #0]
 8006660:	b29b      	uxth	r3, r3
 8006662:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006666:	b29a      	uxth	r2, r3
 8006668:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800666c:	801a      	strh	r2, [r3, #0]
 800666e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	b29b      	uxth	r3, r3
 8006676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800667a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800667e:	b29a      	uxth	r2, r3
 8006680:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006684:	801a      	strh	r2, [r3, #0]
 8006686:	e017      	b.n	80066b8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	785b      	ldrb	r3, [r3, #1]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d113      	bne.n	80066b8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006698:	b29b      	uxth	r3, r3
 800669a:	461a      	mov	r2, r3
 800669c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800669e:	4413      	add	r3, r2
 80066a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	011a      	lsls	r2, r3, #4
 80066a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066aa:	4413      	add	r3, r2
 80066ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80066b4:	2200      	movs	r2, #0
 80066b6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	4619      	mov	r1, r3
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f005 fd47 	bl	800c152 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80066c4:	88fb      	ldrh	r3, [r7, #6]
 80066c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f040 8104 	bne.w	80068d8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	461a      	mov	r2, r3
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	441a      	add	r2, r3
 80066fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006708:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800670c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006710:	b29b      	uxth	r3, r3
 8006712:	8013      	strh	r3, [r2, #0]
 8006714:	e0e0      	b.n	80068d8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006716:	88fb      	ldrh	r3, [r7, #6]
 8006718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d121      	bne.n	8006764 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	461a      	mov	r2, r3
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	b29b      	uxth	r3, r3
 8006732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	441a      	add	r2, r3
 800674c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006758:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800675c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006760:	b29b      	uxth	r3, r3
 8006762:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800676a:	2b01      	cmp	r3, #1
 800676c:	f040 80b4 	bne.w	80068d8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	695a      	ldr	r2, [r3, #20]
 8006774:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006778:	441a      	add	r2, r3
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	69da      	ldr	r2, [r3, #28]
 8006782:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006786:	441a      	add	r2, r3
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	6a1a      	ldr	r2, [r3, #32]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	429a      	cmp	r2, r3
 8006796:	d309      	bcc.n	80067ac <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	6a1a      	ldr	r2, [r3, #32]
 80067a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a4:	1ad2      	subs	r2, r2, r3
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	621a      	str	r2, [r3, #32]
 80067aa:	e015      	b.n	80067d8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d107      	bne.n	80067c4 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80067b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80067b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80067c2:	e009      	b.n	80067d8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2200      	movs	r2, #0
 80067ce:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	667b      	str	r3, [r7, #100]	; 0x64
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	785b      	ldrb	r3, [r3, #1]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d155      	bne.n	8006892 <HAL_PCD_EP_DB_Transmit+0x704>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	461a      	mov	r2, r3
 80067f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067fa:	4413      	add	r3, r2
 80067fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	011a      	lsls	r2, r3, #4
 8006804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006806:	4413      	add	r3, r2
 8006808:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800680c:	65bb      	str	r3, [r7, #88]	; 0x58
 800680e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006810:	2b00      	cmp	r3, #0
 8006812:	d112      	bne.n	800683a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006814:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800681e:	b29a      	uxth	r2, r3
 8006820:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006822:	801a      	strh	r2, [r3, #0]
 8006824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	b29b      	uxth	r3, r3
 800682a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800682e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006832:	b29a      	uxth	r2, r3
 8006834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006836:	801a      	strh	r2, [r3, #0]
 8006838:	e044      	b.n	80068c4 <HAL_PCD_EP_DB_Transmit+0x736>
 800683a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800683c:	2b3e      	cmp	r3, #62	; 0x3e
 800683e:	d811      	bhi.n	8006864 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006842:	085b      	lsrs	r3, r3, #1
 8006844:	657b      	str	r3, [r7, #84]	; 0x54
 8006846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006852:	3301      	adds	r3, #1
 8006854:	657b      	str	r3, [r7, #84]	; 0x54
 8006856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006858:	b29b      	uxth	r3, r3
 800685a:	029b      	lsls	r3, r3, #10
 800685c:	b29a      	uxth	r2, r3
 800685e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006860:	801a      	strh	r2, [r3, #0]
 8006862:	e02f      	b.n	80068c4 <HAL_PCD_EP_DB_Transmit+0x736>
 8006864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006866:	095b      	lsrs	r3, r3, #5
 8006868:	657b      	str	r3, [r7, #84]	; 0x54
 800686a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800686c:	f003 031f 	and.w	r3, r3, #31
 8006870:	2b00      	cmp	r3, #0
 8006872:	d102      	bne.n	800687a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8006874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006876:	3b01      	subs	r3, #1
 8006878:	657b      	str	r3, [r7, #84]	; 0x54
 800687a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800687c:	b29b      	uxth	r3, r3
 800687e:	029b      	lsls	r3, r3, #10
 8006880:	b29b      	uxth	r3, r3
 8006882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800688a:	b29a      	uxth	r2, r3
 800688c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800688e:	801a      	strh	r2, [r3, #0]
 8006890:	e018      	b.n	80068c4 <HAL_PCD_EP_DB_Transmit+0x736>
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	785b      	ldrb	r3, [r3, #1]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d114      	bne.n	80068c4 <HAL_PCD_EP_DB_Transmit+0x736>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	461a      	mov	r2, r3
 80068a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068a8:	4413      	add	r3, r2
 80068aa:	667b      	str	r3, [r7, #100]	; 0x64
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	011a      	lsls	r2, r3, #4
 80068b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068b4:	4413      	add	r3, r2
 80068b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068ba:	663b      	str	r3, [r7, #96]	; 0x60
 80068bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068be:	b29a      	uxth	r2, r3
 80068c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068c2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6818      	ldr	r0, [r3, #0]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	6959      	ldr	r1, [r3, #20]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	895a      	ldrh	r2, [r3, #10]
 80068d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	f003 fde1 	bl	800a49a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	461a      	mov	r2, r3
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068f2:	823b      	strh	r3, [r7, #16]
 80068f4:	8a3b      	ldrh	r3, [r7, #16]
 80068f6:	f083 0310 	eor.w	r3, r3, #16
 80068fa:	823b      	strh	r3, [r7, #16]
 80068fc:	8a3b      	ldrh	r3, [r7, #16]
 80068fe:	f083 0320 	eor.w	r3, r3, #32
 8006902:	823b      	strh	r3, [r7, #16]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	461a      	mov	r2, r3
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	441a      	add	r2, r3
 8006912:	8a3b      	ldrh	r3, [r7, #16]
 8006914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800691c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006924:	b29b      	uxth	r3, r3
 8006926:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3788      	adds	r7, #136	; 0x88
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006932:	b480      	push	{r7}
 8006934:	b087      	sub	sp, #28
 8006936:	af00      	add	r7, sp, #0
 8006938:	60f8      	str	r0, [r7, #12]
 800693a:	607b      	str	r3, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	817b      	strh	r3, [r7, #10]
 8006940:	4613      	mov	r3, r2
 8006942:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006944:	897b      	ldrh	r3, [r7, #10]
 8006946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694a:	b29b      	uxth	r3, r3
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00b      	beq.n	8006968 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006950:	897b      	ldrh	r3, [r7, #10]
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	4613      	mov	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	00db      	lsls	r3, r3, #3
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	617b      	str	r3, [r7, #20]
 8006966:	e009      	b.n	800697c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006968:	897a      	ldrh	r2, [r7, #10]
 800696a:	4613      	mov	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	4413      	add	r3, r2
 800697a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800697c:	893b      	ldrh	r3, [r7, #8]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d107      	bne.n	8006992 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2200      	movs	r2, #0
 8006986:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	b29a      	uxth	r2, r3
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	80da      	strh	r2, [r3, #6]
 8006990:	e00b      	b.n	80069aa <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2201      	movs	r2, #1
 8006996:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	b29a      	uxth	r2, r3
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	0c1b      	lsrs	r3, r3, #16
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	371c      	adds	r7, #28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bc80      	pop	{r7}
 80069b4:	4770      	bx	lr
	...

080069b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e26c      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 8087 	beq.w	8006ae6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80069d8:	4b92      	ldr	r3, [pc, #584]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f003 030c 	and.w	r3, r3, #12
 80069e0:	2b04      	cmp	r3, #4
 80069e2:	d00c      	beq.n	80069fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80069e4:	4b8f      	ldr	r3, [pc, #572]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f003 030c 	and.w	r3, r3, #12
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d112      	bne.n	8006a16 <HAL_RCC_OscConfig+0x5e>
 80069f0:	4b8c      	ldr	r3, [pc, #560]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069fc:	d10b      	bne.n	8006a16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069fe:	4b89      	ldr	r3, [pc, #548]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d06c      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x12c>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d168      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e246      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a1e:	d106      	bne.n	8006a2e <HAL_RCC_OscConfig+0x76>
 8006a20:	4b80      	ldr	r3, [pc, #512]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a7f      	ldr	r2, [pc, #508]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	e02e      	b.n	8006a8c <HAL_RCC_OscConfig+0xd4>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10c      	bne.n	8006a50 <HAL_RCC_OscConfig+0x98>
 8006a36:	4b7b      	ldr	r3, [pc, #492]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a7a      	ldr	r2, [pc, #488]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a40:	6013      	str	r3, [r2, #0]
 8006a42:	4b78      	ldr	r3, [pc, #480]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a77      	ldr	r2, [pc, #476]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006a48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	e01d      	b.n	8006a8c <HAL_RCC_OscConfig+0xd4>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a58:	d10c      	bne.n	8006a74 <HAL_RCC_OscConfig+0xbc>
 8006a5a:	4b72      	ldr	r3, [pc, #456]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a71      	ldr	r2, [pc, #452]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a64:	6013      	str	r3, [r2, #0]
 8006a66:	4b6f      	ldr	r3, [pc, #444]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a6e      	ldr	r2, [pc, #440]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a70:	6013      	str	r3, [r2, #0]
 8006a72:	e00b      	b.n	8006a8c <HAL_RCC_OscConfig+0xd4>
 8006a74:	4b6b      	ldr	r3, [pc, #428]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a6a      	ldr	r2, [pc, #424]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	4b68      	ldr	r3, [pc, #416]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a67      	ldr	r2, [pc, #412]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d013      	beq.n	8006abc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a94:	f7fc ffc2 	bl	8003a1c <HAL_GetTick>
 8006a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a9a:	e008      	b.n	8006aae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a9c:	f7fc ffbe 	bl	8003a1c <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	2b64      	cmp	r3, #100	; 0x64
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e1fa      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aae:	4b5d      	ldr	r3, [pc, #372]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d0f0      	beq.n	8006a9c <HAL_RCC_OscConfig+0xe4>
 8006aba:	e014      	b.n	8006ae6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006abc:	f7fc ffae 	bl	8003a1c <HAL_GetTick>
 8006ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ac2:	e008      	b.n	8006ad6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ac4:	f7fc ffaa 	bl	8003a1c <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b64      	cmp	r3, #100	; 0x64
 8006ad0:	d901      	bls.n	8006ad6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e1e6      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ad6:	4b53      	ldr	r3, [pc, #332]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1f0      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x10c>
 8006ae2:	e000      	b.n	8006ae6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d063      	beq.n	8006bba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006af2:	4b4c      	ldr	r3, [pc, #304]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f003 030c 	and.w	r3, r3, #12
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00b      	beq.n	8006b16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006afe:	4b49      	ldr	r3, [pc, #292]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f003 030c 	and.w	r3, r3, #12
 8006b06:	2b08      	cmp	r3, #8
 8006b08:	d11c      	bne.n	8006b44 <HAL_RCC_OscConfig+0x18c>
 8006b0a:	4b46      	ldr	r3, [pc, #280]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d116      	bne.n	8006b44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b16:	4b43      	ldr	r3, [pc, #268]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d005      	beq.n	8006b2e <HAL_RCC_OscConfig+0x176>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d001      	beq.n	8006b2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e1ba      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b2e:	4b3d      	ldr	r3, [pc, #244]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	00db      	lsls	r3, r3, #3
 8006b3c:	4939      	ldr	r1, [pc, #228]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b42:	e03a      	b.n	8006bba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d020      	beq.n	8006b8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b4c:	4b36      	ldr	r3, [pc, #216]	; (8006c28 <HAL_RCC_OscConfig+0x270>)
 8006b4e:	2201      	movs	r2, #1
 8006b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b52:	f7fc ff63 	bl	8003a1c <HAL_GetTick>
 8006b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b58:	e008      	b.n	8006b6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b5a:	f7fc ff5f 	bl	8003a1c <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d901      	bls.n	8006b6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e19b      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b6c:	4b2d      	ldr	r3, [pc, #180]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d0f0      	beq.n	8006b5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b78:	4b2a      	ldr	r3, [pc, #168]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	4927      	ldr	r1, [pc, #156]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	600b      	str	r3, [r1, #0]
 8006b8c:	e015      	b.n	8006bba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b8e:	4b26      	ldr	r3, [pc, #152]	; (8006c28 <HAL_RCC_OscConfig+0x270>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b94:	f7fc ff42 	bl	8003a1c <HAL_GetTick>
 8006b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b9a:	e008      	b.n	8006bae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b9c:	f7fc ff3e 	bl	8003a1c <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d901      	bls.n	8006bae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e17a      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bae:	4b1d      	ldr	r3, [pc, #116]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1f0      	bne.n	8006b9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0308 	and.w	r3, r3, #8
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d03a      	beq.n	8006c3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d019      	beq.n	8006c02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bce:	4b17      	ldr	r3, [pc, #92]	; (8006c2c <HAL_RCC_OscConfig+0x274>)
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bd4:	f7fc ff22 	bl	8003a1c <HAL_GetTick>
 8006bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bda:	e008      	b.n	8006bee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bdc:	f7fc ff1e 	bl	8003a1c <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d901      	bls.n	8006bee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e15a      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bee:	4b0d      	ldr	r3, [pc, #52]	; (8006c24 <HAL_RCC_OscConfig+0x26c>)
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0f0      	beq.n	8006bdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006bfa:	2001      	movs	r0, #1
 8006bfc:	f000 fac6 	bl	800718c <RCC_Delay>
 8006c00:	e01c      	b.n	8006c3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c02:	4b0a      	ldr	r3, [pc, #40]	; (8006c2c <HAL_RCC_OscConfig+0x274>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c08:	f7fc ff08 	bl	8003a1c <HAL_GetTick>
 8006c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c0e:	e00f      	b.n	8006c30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c10:	f7fc ff04 	bl	8003a1c <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d908      	bls.n	8006c30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e140      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4ec>
 8006c22:	bf00      	nop
 8006c24:	40021000 	.word	0x40021000
 8006c28:	42420000 	.word	0x42420000
 8006c2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c30:	4b9e      	ldr	r3, [pc, #632]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e9      	bne.n	8006c10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 80a6 	beq.w	8006d96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c4e:	4b97      	ldr	r3, [pc, #604]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10d      	bne.n	8006c76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c5a:	4b94      	ldr	r3, [pc, #592]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	4a93      	ldr	r2, [pc, #588]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c64:	61d3      	str	r3, [r2, #28]
 8006c66:	4b91      	ldr	r3, [pc, #580]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c6e:	60bb      	str	r3, [r7, #8]
 8006c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c72:	2301      	movs	r3, #1
 8006c74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c76:	4b8e      	ldr	r3, [pc, #568]	; (8006eb0 <HAL_RCC_OscConfig+0x4f8>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d118      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c82:	4b8b      	ldr	r3, [pc, #556]	; (8006eb0 <HAL_RCC_OscConfig+0x4f8>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a8a      	ldr	r2, [pc, #552]	; (8006eb0 <HAL_RCC_OscConfig+0x4f8>)
 8006c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c8e:	f7fc fec5 	bl	8003a1c <HAL_GetTick>
 8006c92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c94:	e008      	b.n	8006ca8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c96:	f7fc fec1 	bl	8003a1c <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	2b64      	cmp	r3, #100	; 0x64
 8006ca2:	d901      	bls.n	8006ca8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e0fd      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ca8:	4b81      	ldr	r3, [pc, #516]	; (8006eb0 <HAL_RCC_OscConfig+0x4f8>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d0f0      	beq.n	8006c96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d106      	bne.n	8006cca <HAL_RCC_OscConfig+0x312>
 8006cbc:	4b7b      	ldr	r3, [pc, #492]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	4a7a      	ldr	r2, [pc, #488]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006cc2:	f043 0301 	orr.w	r3, r3, #1
 8006cc6:	6213      	str	r3, [r2, #32]
 8006cc8:	e02d      	b.n	8006d26 <HAL_RCC_OscConfig+0x36e>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10c      	bne.n	8006cec <HAL_RCC_OscConfig+0x334>
 8006cd2:	4b76      	ldr	r3, [pc, #472]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	4a75      	ldr	r2, [pc, #468]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006cd8:	f023 0301 	bic.w	r3, r3, #1
 8006cdc:	6213      	str	r3, [r2, #32]
 8006cde:	4b73      	ldr	r3, [pc, #460]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	4a72      	ldr	r2, [pc, #456]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006ce4:	f023 0304 	bic.w	r3, r3, #4
 8006ce8:	6213      	str	r3, [r2, #32]
 8006cea:	e01c      	b.n	8006d26 <HAL_RCC_OscConfig+0x36e>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	2b05      	cmp	r3, #5
 8006cf2:	d10c      	bne.n	8006d0e <HAL_RCC_OscConfig+0x356>
 8006cf4:	4b6d      	ldr	r3, [pc, #436]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	4a6c      	ldr	r2, [pc, #432]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006cfa:	f043 0304 	orr.w	r3, r3, #4
 8006cfe:	6213      	str	r3, [r2, #32]
 8006d00:	4b6a      	ldr	r3, [pc, #424]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	4a69      	ldr	r2, [pc, #420]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006d06:	f043 0301 	orr.w	r3, r3, #1
 8006d0a:	6213      	str	r3, [r2, #32]
 8006d0c:	e00b      	b.n	8006d26 <HAL_RCC_OscConfig+0x36e>
 8006d0e:	4b67      	ldr	r3, [pc, #412]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	4a66      	ldr	r2, [pc, #408]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006d14:	f023 0301 	bic.w	r3, r3, #1
 8006d18:	6213      	str	r3, [r2, #32]
 8006d1a:	4b64      	ldr	r3, [pc, #400]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	4a63      	ldr	r2, [pc, #396]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006d20:	f023 0304 	bic.w	r3, r3, #4
 8006d24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d015      	beq.n	8006d5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d2e:	f7fc fe75 	bl	8003a1c <HAL_GetTick>
 8006d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d34:	e00a      	b.n	8006d4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d36:	f7fc fe71 	bl	8003a1c <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d901      	bls.n	8006d4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e0ab      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d4c:	4b57      	ldr	r3, [pc, #348]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006d4e:	6a1b      	ldr	r3, [r3, #32]
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d0ee      	beq.n	8006d36 <HAL_RCC_OscConfig+0x37e>
 8006d58:	e014      	b.n	8006d84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d5a:	f7fc fe5f 	bl	8003a1c <HAL_GetTick>
 8006d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d60:	e00a      	b.n	8006d78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d62:	f7fc fe5b 	bl	8003a1c <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d901      	bls.n	8006d78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e095      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d78:	4b4c      	ldr	r3, [pc, #304]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1ee      	bne.n	8006d62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d105      	bne.n	8006d96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d8a:	4b48      	ldr	r3, [pc, #288]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	4a47      	ldr	r2, [pc, #284]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 8081 	beq.w	8006ea2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006da0:	4b42      	ldr	r3, [pc, #264]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f003 030c 	and.w	r3, r3, #12
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d061      	beq.n	8006e70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d146      	bne.n	8006e42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006db4:	4b3f      	ldr	r3, [pc, #252]	; (8006eb4 <HAL_RCC_OscConfig+0x4fc>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dba:	f7fc fe2f 	bl	8003a1c <HAL_GetTick>
 8006dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dc0:	e008      	b.n	8006dd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dc2:	f7fc fe2b 	bl	8003a1c <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d901      	bls.n	8006dd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e067      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dd4:	4b35      	ldr	r3, [pc, #212]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1f0      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006de8:	d108      	bne.n	8006dfc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006dea:	4b30      	ldr	r3, [pc, #192]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	492d      	ldr	r1, [pc, #180]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006dfc:	4b2b      	ldr	r3, [pc, #172]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a19      	ldr	r1, [r3, #32]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0c:	430b      	orrs	r3, r1
 8006e0e:	4927      	ldr	r1, [pc, #156]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e14:	4b27      	ldr	r3, [pc, #156]	; (8006eb4 <HAL_RCC_OscConfig+0x4fc>)
 8006e16:	2201      	movs	r2, #1
 8006e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e1a:	f7fc fdff 	bl	8003a1c <HAL_GetTick>
 8006e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e20:	e008      	b.n	8006e34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e22:	f7fc fdfb 	bl	8003a1c <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d901      	bls.n	8006e34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e037      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e34:	4b1d      	ldr	r3, [pc, #116]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0f0      	beq.n	8006e22 <HAL_RCC_OscConfig+0x46a>
 8006e40:	e02f      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e42:	4b1c      	ldr	r3, [pc, #112]	; (8006eb4 <HAL_RCC_OscConfig+0x4fc>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e48:	f7fc fde8 	bl	8003a1c <HAL_GetTick>
 8006e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e4e:	e008      	b.n	8006e62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e50:	f7fc fde4 	bl	8003a1c <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e020      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e62:	4b12      	ldr	r3, [pc, #72]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1f0      	bne.n	8006e50 <HAL_RCC_OscConfig+0x498>
 8006e6e:	e018      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d101      	bne.n	8006e7c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e013      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006e7c:	4b0b      	ldr	r3, [pc, #44]	; (8006eac <HAL_RCC_OscConfig+0x4f4>)
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d106      	bne.n	8006e9e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d001      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e000      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	40021000 	.word	0x40021000
 8006eb0:	40007000 	.word	0x40007000
 8006eb4:	42420060 	.word	0x42420060

08006eb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e0d0      	b.n	800706e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ecc:	4b6a      	ldr	r3, [pc, #424]	; (8007078 <HAL_RCC_ClockConfig+0x1c0>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0307 	and.w	r3, r3, #7
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d910      	bls.n	8006efc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eda:	4b67      	ldr	r3, [pc, #412]	; (8007078 <HAL_RCC_ClockConfig+0x1c0>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f023 0207 	bic.w	r2, r3, #7
 8006ee2:	4965      	ldr	r1, [pc, #404]	; (8007078 <HAL_RCC_ClockConfig+0x1c0>)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eea:	4b63      	ldr	r3, [pc, #396]	; (8007078 <HAL_RCC_ClockConfig+0x1c0>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d001      	beq.n	8006efc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e0b8      	b.n	800706e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d020      	beq.n	8006f4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0304 	and.w	r3, r3, #4
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d005      	beq.n	8006f20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f14:	4b59      	ldr	r3, [pc, #356]	; (800707c <HAL_RCC_ClockConfig+0x1c4>)
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	4a58      	ldr	r2, [pc, #352]	; (800707c <HAL_RCC_ClockConfig+0x1c4>)
 8006f1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006f1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0308 	and.w	r3, r3, #8
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d005      	beq.n	8006f38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f2c:	4b53      	ldr	r3, [pc, #332]	; (800707c <HAL_RCC_ClockConfig+0x1c4>)
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	4a52      	ldr	r2, [pc, #328]	; (800707c <HAL_RCC_ClockConfig+0x1c4>)
 8006f32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006f36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f38:	4b50      	ldr	r3, [pc, #320]	; (800707c <HAL_RCC_ClockConfig+0x1c4>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	494d      	ldr	r1, [pc, #308]	; (800707c <HAL_RCC_ClockConfig+0x1c4>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d040      	beq.n	8006fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d107      	bne.n	8006f6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f5e:	4b47      	ldr	r3, [pc, #284]	; (800707c <HAL_RCC_ClockConfig+0x1c4>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d115      	bne.n	8006f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e07f      	b.n	800706e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d107      	bne.n	8006f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f76:	4b41      	ldr	r3, [pc, #260]	; (800707c <HAL_RCC_ClockConfig+0x1c4>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d109      	bne.n	8006f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e073      	b.n	800706e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f86:	4b3d      	ldr	r3, [pc, #244]	; (800707c <HAL_RCC_ClockConfig+0x1c4>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e06b      	b.n	800706e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f96:	4b39      	ldr	r3, [pc, #228]	; (800707c <HAL_RCC_ClockConfig+0x1c4>)
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f023 0203 	bic.w	r2, r3, #3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	4936      	ldr	r1, [pc, #216]	; (800707c <HAL_RCC_ClockConfig+0x1c4>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fa8:	f7fc fd38 	bl	8003a1c <HAL_GetTick>
 8006fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fae:	e00a      	b.n	8006fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fb0:	f7fc fd34 	bl	8003a1c <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e053      	b.n	800706e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fc6:	4b2d      	ldr	r3, [pc, #180]	; (800707c <HAL_RCC_ClockConfig+0x1c4>)
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f003 020c 	and.w	r2, r3, #12
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d1eb      	bne.n	8006fb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fd8:	4b27      	ldr	r3, [pc, #156]	; (8007078 <HAL_RCC_ClockConfig+0x1c0>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0307 	and.w	r3, r3, #7
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d210      	bcs.n	8007008 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fe6:	4b24      	ldr	r3, [pc, #144]	; (8007078 <HAL_RCC_ClockConfig+0x1c0>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f023 0207 	bic.w	r2, r3, #7
 8006fee:	4922      	ldr	r1, [pc, #136]	; (8007078 <HAL_RCC_ClockConfig+0x1c0>)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ff6:	4b20      	ldr	r3, [pc, #128]	; (8007078 <HAL_RCC_ClockConfig+0x1c0>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0307 	and.w	r3, r3, #7
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	429a      	cmp	r2, r3
 8007002:	d001      	beq.n	8007008 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e032      	b.n	800706e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0304 	and.w	r3, r3, #4
 8007010:	2b00      	cmp	r3, #0
 8007012:	d008      	beq.n	8007026 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007014:	4b19      	ldr	r3, [pc, #100]	; (800707c <HAL_RCC_ClockConfig+0x1c4>)
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	4916      	ldr	r1, [pc, #88]	; (800707c <HAL_RCC_ClockConfig+0x1c4>)
 8007022:	4313      	orrs	r3, r2
 8007024:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0308 	and.w	r3, r3, #8
 800702e:	2b00      	cmp	r3, #0
 8007030:	d009      	beq.n	8007046 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007032:	4b12      	ldr	r3, [pc, #72]	; (800707c <HAL_RCC_ClockConfig+0x1c4>)
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	00db      	lsls	r3, r3, #3
 8007040:	490e      	ldr	r1, [pc, #56]	; (800707c <HAL_RCC_ClockConfig+0x1c4>)
 8007042:	4313      	orrs	r3, r2
 8007044:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007046:	f000 f821 	bl	800708c <HAL_RCC_GetSysClockFreq>
 800704a:	4602      	mov	r2, r0
 800704c:	4b0b      	ldr	r3, [pc, #44]	; (800707c <HAL_RCC_ClockConfig+0x1c4>)
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	091b      	lsrs	r3, r3, #4
 8007052:	f003 030f 	and.w	r3, r3, #15
 8007056:	490a      	ldr	r1, [pc, #40]	; (8007080 <HAL_RCC_ClockConfig+0x1c8>)
 8007058:	5ccb      	ldrb	r3, [r1, r3]
 800705a:	fa22 f303 	lsr.w	r3, r2, r3
 800705e:	4a09      	ldr	r2, [pc, #36]	; (8007084 <HAL_RCC_ClockConfig+0x1cc>)
 8007060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007062:	4b09      	ldr	r3, [pc, #36]	; (8007088 <HAL_RCC_ClockConfig+0x1d0>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4618      	mov	r0, r3
 8007068:	f7fc fc96 	bl	8003998 <HAL_InitTick>

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	40022000 	.word	0x40022000
 800707c:	40021000 	.word	0x40021000
 8007080:	0800cd3c 	.word	0x0800cd3c
 8007084:	20000014 	.word	0x20000014
 8007088:	20000018 	.word	0x20000018

0800708c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800708c:	b490      	push	{r4, r7}
 800708e:	b08a      	sub	sp, #40	; 0x28
 8007090:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007092:	4b2a      	ldr	r3, [pc, #168]	; (800713c <HAL_RCC_GetSysClockFreq+0xb0>)
 8007094:	1d3c      	adds	r4, r7, #4
 8007096:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007098:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800709c:	f240 2301 	movw	r3, #513	; 0x201
 80070a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	61fb      	str	r3, [r7, #28]
 80070a6:	2300      	movs	r3, #0
 80070a8:	61bb      	str	r3, [r7, #24]
 80070aa:	2300      	movs	r3, #0
 80070ac:	627b      	str	r3, [r7, #36]	; 0x24
 80070ae:	2300      	movs	r3, #0
 80070b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80070b2:	2300      	movs	r3, #0
 80070b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80070b6:	4b22      	ldr	r3, [pc, #136]	; (8007140 <HAL_RCC_GetSysClockFreq+0xb4>)
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	f003 030c 	and.w	r3, r3, #12
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d002      	beq.n	80070cc <HAL_RCC_GetSysClockFreq+0x40>
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	d003      	beq.n	80070d2 <HAL_RCC_GetSysClockFreq+0x46>
 80070ca:	e02d      	b.n	8007128 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80070cc:	4b1d      	ldr	r3, [pc, #116]	; (8007144 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070ce:	623b      	str	r3, [r7, #32]
      break;
 80070d0:	e02d      	b.n	800712e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	0c9b      	lsrs	r3, r3, #18
 80070d6:	f003 030f 	and.w	r3, r3, #15
 80070da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80070de:	4413      	add	r3, r2
 80070e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80070e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d013      	beq.n	8007118 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80070f0:	4b13      	ldr	r3, [pc, #76]	; (8007140 <HAL_RCC_GetSysClockFreq+0xb4>)
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	0c5b      	lsrs	r3, r3, #17
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80070fe:	4413      	add	r3, r2
 8007100:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007104:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	4a0e      	ldr	r2, [pc, #56]	; (8007144 <HAL_RCC_GetSysClockFreq+0xb8>)
 800710a:	fb02 f203 	mul.w	r2, r2, r3
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	fbb2 f3f3 	udiv	r3, r2, r3
 8007114:	627b      	str	r3, [r7, #36]	; 0x24
 8007116:	e004      	b.n	8007122 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	4a0b      	ldr	r2, [pc, #44]	; (8007148 <HAL_RCC_GetSysClockFreq+0xbc>)
 800711c:	fb02 f303 	mul.w	r3, r2, r3
 8007120:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	623b      	str	r3, [r7, #32]
      break;
 8007126:	e002      	b.n	800712e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007128:	4b08      	ldr	r3, [pc, #32]	; (800714c <HAL_RCC_GetSysClockFreq+0xc0>)
 800712a:	623b      	str	r3, [r7, #32]
      break;
 800712c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800712e:	6a3b      	ldr	r3, [r7, #32]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3728      	adds	r7, #40	; 0x28
 8007134:	46bd      	mov	sp, r7
 8007136:	bc90      	pop	{r4, r7}
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	0800ca40 	.word	0x0800ca40
 8007140:	40021000 	.word	0x40021000
 8007144:	00f42400 	.word	0x00f42400
 8007148:	003d0900 	.word	0x003d0900
 800714c:	007a1200 	.word	0x007a1200

08007150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007150:	b480      	push	{r7}
 8007152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007154:	4b02      	ldr	r3, [pc, #8]	; (8007160 <HAL_RCC_GetHCLKFreq+0x10>)
 8007156:	681b      	ldr	r3, [r3, #0]
}
 8007158:	4618      	mov	r0, r3
 800715a:	46bd      	mov	sp, r7
 800715c:	bc80      	pop	{r7}
 800715e:	4770      	bx	lr
 8007160:	20000014 	.word	0x20000014

08007164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007168:	f7ff fff2 	bl	8007150 <HAL_RCC_GetHCLKFreq>
 800716c:	4602      	mov	r2, r0
 800716e:	4b05      	ldr	r3, [pc, #20]	; (8007184 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	0a1b      	lsrs	r3, r3, #8
 8007174:	f003 0307 	and.w	r3, r3, #7
 8007178:	4903      	ldr	r1, [pc, #12]	; (8007188 <HAL_RCC_GetPCLK1Freq+0x24>)
 800717a:	5ccb      	ldrb	r3, [r1, r3]
 800717c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007180:	4618      	mov	r0, r3
 8007182:	bd80      	pop	{r7, pc}
 8007184:	40021000 	.word	0x40021000
 8007188:	0800cd4c 	.word	0x0800cd4c

0800718c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007194:	4b0a      	ldr	r3, [pc, #40]	; (80071c0 <RCC_Delay+0x34>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a0a      	ldr	r2, [pc, #40]	; (80071c4 <RCC_Delay+0x38>)
 800719a:	fba2 2303 	umull	r2, r3, r2, r3
 800719e:	0a5b      	lsrs	r3, r3, #9
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	fb02 f303 	mul.w	r3, r2, r3
 80071a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80071a8:	bf00      	nop
  }
  while (Delay --);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	1e5a      	subs	r2, r3, #1
 80071ae:	60fa      	str	r2, [r7, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1f9      	bne.n	80071a8 <RCC_Delay+0x1c>
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bc80      	pop	{r7}
 80071be:	4770      	bx	lr
 80071c0:	20000014 	.word	0x20000014
 80071c4:	10624dd3 	.word	0x10624dd3

080071c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80071d0:	2300      	movs	r3, #0
 80071d2:	613b      	str	r3, [r7, #16]
 80071d4:	2300      	movs	r3, #0
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d07d      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80071e4:	2300      	movs	r3, #0
 80071e6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071e8:	4b4f      	ldr	r3, [pc, #316]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10d      	bne.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071f4:	4b4c      	ldr	r3, [pc, #304]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071f6:	69db      	ldr	r3, [r3, #28]
 80071f8:	4a4b      	ldr	r2, [pc, #300]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071fe:	61d3      	str	r3, [r2, #28]
 8007200:	4b49      	ldr	r3, [pc, #292]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007202:	69db      	ldr	r3, [r3, #28]
 8007204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007208:	60bb      	str	r3, [r7, #8]
 800720a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800720c:	2301      	movs	r3, #1
 800720e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007210:	4b46      	ldr	r3, [pc, #280]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007218:	2b00      	cmp	r3, #0
 800721a:	d118      	bne.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800721c:	4b43      	ldr	r3, [pc, #268]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a42      	ldr	r2, [pc, #264]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007226:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007228:	f7fc fbf8 	bl	8003a1c <HAL_GetTick>
 800722c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800722e:	e008      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007230:	f7fc fbf4 	bl	8003a1c <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	2b64      	cmp	r3, #100	; 0x64
 800723c:	d901      	bls.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e06d      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007242:	4b3a      	ldr	r3, [pc, #232]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0f0      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800724e:	4b36      	ldr	r3, [pc, #216]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007256:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d02e      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	429a      	cmp	r2, r3
 800726a:	d027      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800726c:	4b2e      	ldr	r3, [pc, #184]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007274:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007276:	4b2e      	ldr	r3, [pc, #184]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007278:	2201      	movs	r2, #1
 800727a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800727c:	4b2c      	ldr	r3, [pc, #176]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800727e:	2200      	movs	r2, #0
 8007280:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007282:	4a29      	ldr	r2, [pc, #164]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d014      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007292:	f7fc fbc3 	bl	8003a1c <HAL_GetTick>
 8007296:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007298:	e00a      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800729a:	f7fc fbbf 	bl	8003a1c <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d901      	bls.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e036      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072b0:	4b1d      	ldr	r3, [pc, #116]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072b2:	6a1b      	ldr	r3, [r3, #32]
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d0ee      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072bc:	4b1a      	ldr	r3, [pc, #104]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	4917      	ldr	r1, [pc, #92]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d105      	bne.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072d4:	4b14      	ldr	r3, [pc, #80]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	4a13      	ldr	r2, [pc, #76]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d008      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072ec:	4b0e      	ldr	r3, [pc, #56]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	490b      	ldr	r1, [pc, #44]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0310 	and.w	r3, r3, #16
 8007306:	2b00      	cmp	r3, #0
 8007308:	d008      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800730a:	4b07      	ldr	r3, [pc, #28]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	4904      	ldr	r1, [pc, #16]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007318:	4313      	orrs	r3, r2
 800731a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	40021000 	.word	0x40021000
 800732c:	40007000 	.word	0x40007000
 8007330:	42420440 	.word	0x42420440

08007334 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e076      	b.n	8007434 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	2b00      	cmp	r3, #0
 800734c:	d108      	bne.n	8007360 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007356:	d009      	beq.n	800736c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	61da      	str	r2, [r3, #28]
 800735e:	e005      	b.n	800736c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d106      	bne.n	800738c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7fb ffde 	bl	8003348 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2202      	movs	r2, #2
 8007390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80073b4:	431a      	orrs	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073be:	431a      	orrs	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	f003 0302 	and.w	r3, r3, #2
 80073c8:	431a      	orrs	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073e6:	431a      	orrs	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f0:	ea42 0103 	orr.w	r1, r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	430a      	orrs	r2, r1
 8007402:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	0c1a      	lsrs	r2, r3, #16
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f002 0204 	and.w	r2, r2, #4
 8007412:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	69da      	ldr	r2, [r3, #28]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007422:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b088      	sub	sp, #32
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	603b      	str	r3, [r7, #0]
 8007448:	4613      	mov	r3, r2
 800744a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800744c:	2300      	movs	r3, #0
 800744e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007456:	2b01      	cmp	r3, #1
 8007458:	d101      	bne.n	800745e <HAL_SPI_Transmit+0x22>
 800745a:	2302      	movs	r3, #2
 800745c:	e126      	b.n	80076ac <HAL_SPI_Transmit+0x270>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007466:	f7fc fad9 	bl	8003a1c <HAL_GetTick>
 800746a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800746c:	88fb      	ldrh	r3, [r7, #6]
 800746e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b01      	cmp	r3, #1
 800747a:	d002      	beq.n	8007482 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800747c:	2302      	movs	r3, #2
 800747e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007480:	e10b      	b.n	800769a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d002      	beq.n	800748e <HAL_SPI_Transmit+0x52>
 8007488:	88fb      	ldrh	r3, [r7, #6]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d102      	bne.n	8007494 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007492:	e102      	b.n	800769a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2203      	movs	r2, #3
 8007498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2200      	movs	r2, #0
 80074a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	88fa      	ldrh	r2, [r7, #6]
 80074ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	88fa      	ldrh	r2, [r7, #6]
 80074b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074da:	d10f      	bne.n	80074fc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007506:	2b40      	cmp	r3, #64	; 0x40
 8007508:	d007      	beq.n	800751a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007518:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007522:	d14b      	bne.n	80075bc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <HAL_SPI_Transmit+0xf6>
 800752c:	8afb      	ldrh	r3, [r7, #22]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d13e      	bne.n	80075b0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007536:	881a      	ldrh	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007542:	1c9a      	adds	r2, r3, #2
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800754c:	b29b      	uxth	r3, r3
 800754e:	3b01      	subs	r3, #1
 8007550:	b29a      	uxth	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007556:	e02b      	b.n	80075b0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f003 0302 	and.w	r3, r3, #2
 8007562:	2b02      	cmp	r3, #2
 8007564:	d112      	bne.n	800758c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756a:	881a      	ldrh	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007576:	1c9a      	adds	r2, r3, #2
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007580:	b29b      	uxth	r3, r3
 8007582:	3b01      	subs	r3, #1
 8007584:	b29a      	uxth	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	86da      	strh	r2, [r3, #54]	; 0x36
 800758a:	e011      	b.n	80075b0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800758c:	f7fc fa46 	bl	8003a1c <HAL_GetTick>
 8007590:	4602      	mov	r2, r0
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	429a      	cmp	r2, r3
 800759a:	d803      	bhi.n	80075a4 <HAL_SPI_Transmit+0x168>
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a2:	d102      	bne.n	80075aa <HAL_SPI_Transmit+0x16e>
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d102      	bne.n	80075b0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075ae:	e074      	b.n	800769a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1ce      	bne.n	8007558 <HAL_SPI_Transmit+0x11c>
 80075ba:	e04c      	b.n	8007656 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <HAL_SPI_Transmit+0x18e>
 80075c4:	8afb      	ldrh	r3, [r7, #22]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d140      	bne.n	800764c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	330c      	adds	r3, #12
 80075d4:	7812      	ldrb	r2, [r2, #0]
 80075d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	3b01      	subs	r3, #1
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80075f0:	e02c      	b.n	800764c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f003 0302 	and.w	r3, r3, #2
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d113      	bne.n	8007628 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	330c      	adds	r3, #12
 800760a:	7812      	ldrb	r2, [r2, #0]
 800760c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007612:	1c5a      	adds	r2, r3, #1
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800761c:	b29b      	uxth	r3, r3
 800761e:	3b01      	subs	r3, #1
 8007620:	b29a      	uxth	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	86da      	strh	r2, [r3, #54]	; 0x36
 8007626:	e011      	b.n	800764c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007628:	f7fc f9f8 	bl	8003a1c <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	429a      	cmp	r2, r3
 8007636:	d803      	bhi.n	8007640 <HAL_SPI_Transmit+0x204>
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763e:	d102      	bne.n	8007646 <HAL_SPI_Transmit+0x20a>
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d102      	bne.n	800764c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	77fb      	strb	r3, [r7, #31]
          goto error;
 800764a:	e026      	b.n	800769a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007650:	b29b      	uxth	r3, r3
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1cd      	bne.n	80075f2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007656:	69ba      	ldr	r2, [r7, #24]
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f000 fa54 	bl	8007b08 <SPI_EndRxTxTransaction>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d002      	beq.n	800766c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2220      	movs	r2, #32
 800766a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10a      	bne.n	800768a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007674:	2300      	movs	r3, #0
 8007676:	613b      	str	r3, [r7, #16]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	613b      	str	r3, [r7, #16]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	613b      	str	r3, [r7, #16]
 8007688:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768e:	2b00      	cmp	r3, #0
 8007690:	d002      	beq.n	8007698 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	77fb      	strb	r3, [r7, #31]
 8007696:	e000      	b.n	800769a <HAL_SPI_Transmit+0x25e>
  }

error:
 8007698:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3720      	adds	r7, #32
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b08c      	sub	sp, #48	; 0x30
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
 80076c0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80076c2:	2301      	movs	r3, #1
 80076c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d101      	bne.n	80076da <HAL_SPI_TransmitReceive+0x26>
 80076d6:	2302      	movs	r3, #2
 80076d8:	e18a      	b.n	80079f0 <HAL_SPI_TransmitReceive+0x33c>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076e2:	f7fc f99b 	bl	8003a1c <HAL_GetTick>
 80076e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80076f8:	887b      	ldrh	r3, [r7, #2]
 80076fa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007700:	2b01      	cmp	r3, #1
 8007702:	d00f      	beq.n	8007724 <HAL_SPI_TransmitReceive+0x70>
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800770a:	d107      	bne.n	800771c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d103      	bne.n	800771c <HAL_SPI_TransmitReceive+0x68>
 8007714:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007718:	2b04      	cmp	r3, #4
 800771a:	d003      	beq.n	8007724 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800771c:	2302      	movs	r3, #2
 800771e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007722:	e15b      	b.n	80079dc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d005      	beq.n	8007736 <HAL_SPI_TransmitReceive+0x82>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <HAL_SPI_TransmitReceive+0x82>
 8007730:	887b      	ldrh	r3, [r7, #2]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d103      	bne.n	800773e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800773c:	e14e      	b.n	80079dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b04      	cmp	r3, #4
 8007748:	d003      	beq.n	8007752 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2205      	movs	r2, #5
 800774e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	887a      	ldrh	r2, [r7, #2]
 8007762:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	887a      	ldrh	r2, [r7, #2]
 8007768:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	887a      	ldrh	r2, [r7, #2]
 8007774:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	887a      	ldrh	r2, [r7, #2]
 800777a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007792:	2b40      	cmp	r3, #64	; 0x40
 8007794:	d007      	beq.n	80077a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077ae:	d178      	bne.n	80078a2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <HAL_SPI_TransmitReceive+0x10a>
 80077b8:	8b7b      	ldrh	r3, [r7, #26]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d166      	bne.n	800788c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c2:	881a      	ldrh	r2, [r3, #0]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ce:	1c9a      	adds	r2, r3, #2
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077d8:	b29b      	uxth	r3, r3
 80077da:	3b01      	subs	r3, #1
 80077dc:	b29a      	uxth	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077e2:	e053      	b.n	800788c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d11b      	bne.n	800782a <HAL_SPI_TransmitReceive+0x176>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d016      	beq.n	800782a <HAL_SPI_TransmitReceive+0x176>
 80077fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d113      	bne.n	800782a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007806:	881a      	ldrh	r2, [r3, #0]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007812:	1c9a      	adds	r2, r3, #2
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800781c:	b29b      	uxth	r3, r3
 800781e:	3b01      	subs	r3, #1
 8007820:	b29a      	uxth	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007826:	2300      	movs	r3, #0
 8007828:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b01      	cmp	r3, #1
 8007836:	d119      	bne.n	800786c <HAL_SPI_TransmitReceive+0x1b8>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800783c:	b29b      	uxth	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d014      	beq.n	800786c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68da      	ldr	r2, [r3, #12]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784c:	b292      	uxth	r2, r2
 800784e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007854:	1c9a      	adds	r2, r3, #2
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800785e:	b29b      	uxth	r3, r3
 8007860:	3b01      	subs	r3, #1
 8007862:	b29a      	uxth	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007868:	2301      	movs	r3, #1
 800786a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800786c:	f7fc f8d6 	bl	8003a1c <HAL_GetTick>
 8007870:	4602      	mov	r2, r0
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007878:	429a      	cmp	r2, r3
 800787a:	d807      	bhi.n	800788c <HAL_SPI_TransmitReceive+0x1d8>
 800787c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007882:	d003      	beq.n	800788c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007884:	2303      	movs	r3, #3
 8007886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800788a:	e0a7      	b.n	80079dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007890:	b29b      	uxth	r3, r3
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1a6      	bne.n	80077e4 <HAL_SPI_TransmitReceive+0x130>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800789a:	b29b      	uxth	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1a1      	bne.n	80077e4 <HAL_SPI_TransmitReceive+0x130>
 80078a0:	e07c      	b.n	800799c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d002      	beq.n	80078b0 <HAL_SPI_TransmitReceive+0x1fc>
 80078aa:	8b7b      	ldrh	r3, [r7, #26]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d16b      	bne.n	8007988 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	330c      	adds	r3, #12
 80078ba:	7812      	ldrb	r2, [r2, #0]
 80078bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	3b01      	subs	r3, #1
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078d6:	e057      	b.n	8007988 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d11c      	bne.n	8007920 <HAL_SPI_TransmitReceive+0x26c>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d017      	beq.n	8007920 <HAL_SPI_TransmitReceive+0x26c>
 80078f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d114      	bne.n	8007920 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	330c      	adds	r3, #12
 8007900:	7812      	ldrb	r2, [r2, #0]
 8007902:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007908:	1c5a      	adds	r2, r3, #1
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007912:	b29b      	uxth	r3, r3
 8007914:	3b01      	subs	r3, #1
 8007916:	b29a      	uxth	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800791c:	2300      	movs	r3, #0
 800791e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b01      	cmp	r3, #1
 800792c:	d119      	bne.n	8007962 <HAL_SPI_TransmitReceive+0x2ae>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007932:	b29b      	uxth	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	d014      	beq.n	8007962 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007942:	b2d2      	uxtb	r2, r2
 8007944:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794a:	1c5a      	adds	r2, r3, #1
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007954:	b29b      	uxth	r3, r3
 8007956:	3b01      	subs	r3, #1
 8007958:	b29a      	uxth	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800795e:	2301      	movs	r3, #1
 8007960:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007962:	f7fc f85b 	bl	8003a1c <HAL_GetTick>
 8007966:	4602      	mov	r2, r0
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800796e:	429a      	cmp	r2, r3
 8007970:	d803      	bhi.n	800797a <HAL_SPI_TransmitReceive+0x2c6>
 8007972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007978:	d102      	bne.n	8007980 <HAL_SPI_TransmitReceive+0x2cc>
 800797a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797c:	2b00      	cmp	r3, #0
 800797e:	d103      	bne.n	8007988 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007986:	e029      	b.n	80079dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800798c:	b29b      	uxth	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1a2      	bne.n	80078d8 <HAL_SPI_TransmitReceive+0x224>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007996:	b29b      	uxth	r3, r3
 8007998:	2b00      	cmp	r3, #0
 800799a:	d19d      	bne.n	80078d8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800799c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800799e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f000 f8b1 	bl	8007b08 <SPI_EndRxTxTransaction>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d006      	beq.n	80079ba <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2220      	movs	r2, #32
 80079b6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80079b8:	e010      	b.n	80079dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10b      	bne.n	80079da <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079c2:	2300      	movs	r3, #0
 80079c4:	617b      	str	r3, [r7, #20]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	617b      	str	r3, [r7, #20]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	617b      	str	r3, [r7, #20]
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	e000      	b.n	80079dc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80079da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3730      	adds	r7, #48	; 0x30
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b088      	sub	sp, #32
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	603b      	str	r3, [r7, #0]
 8007a04:	4613      	mov	r3, r2
 8007a06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a08:	f7fc f808 	bl	8003a1c <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	1a9b      	subs	r3, r3, r2
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	4413      	add	r3, r2
 8007a16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a18:	f7fc f800 	bl	8003a1c <HAL_GetTick>
 8007a1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a1e:	4b39      	ldr	r3, [pc, #228]	; (8007b04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	015b      	lsls	r3, r3, #5
 8007a24:	0d1b      	lsrs	r3, r3, #20
 8007a26:	69fa      	ldr	r2, [r7, #28]
 8007a28:	fb02 f303 	mul.w	r3, r2, r3
 8007a2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a2e:	e054      	b.n	8007ada <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a36:	d050      	beq.n	8007ada <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a38:	f7fb fff0 	bl	8003a1c <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	69fa      	ldr	r2, [r7, #28]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d902      	bls.n	8007a4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d13d      	bne.n	8007aca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	685a      	ldr	r2, [r3, #4]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a66:	d111      	bne.n	8007a8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a70:	d004      	beq.n	8007a7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a7a:	d107      	bne.n	8007a8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a94:	d10f      	bne.n	8007ab6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ab4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e017      	b.n	8007afa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	689a      	ldr	r2, [r3, #8]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	bf0c      	ite	eq
 8007aea:	2301      	moveq	r3, #1
 8007aec:	2300      	movne	r3, #0
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	461a      	mov	r2, r3
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d19b      	bne.n	8007a30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3720      	adds	r7, #32
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	20000014 	.word	0x20000014

08007b08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af02      	add	r7, sp, #8
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	2180      	movs	r1, #128	; 0x80
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f7ff ff6a 	bl	80079f8 <SPI_WaitFlagStateUntilTimeout>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d007      	beq.n	8007b3a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b2e:	f043 0220 	orr.w	r2, r3, #32
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e000      	b.n	8007b3c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e041      	b.n	8007bda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d106      	bne.n	8007b70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7fb fc38 	bl	80033e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	3304      	adds	r3, #4
 8007b80:	4619      	mov	r1, r3
 8007b82:	4610      	mov	r0, r2
 8007b84:	f000 f93c 	bl	8007e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
	...

08007be4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d001      	beq.n	8007bfc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e032      	b.n	8007c62 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a18      	ldr	r2, [pc, #96]	; (8007c6c <HAL_TIM_Base_Start+0x88>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00e      	beq.n	8007c2c <HAL_TIM_Base_Start+0x48>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c16:	d009      	beq.n	8007c2c <HAL_TIM_Base_Start+0x48>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a14      	ldr	r2, [pc, #80]	; (8007c70 <HAL_TIM_Base_Start+0x8c>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d004      	beq.n	8007c2c <HAL_TIM_Base_Start+0x48>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a13      	ldr	r2, [pc, #76]	; (8007c74 <HAL_TIM_Base_Start+0x90>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d111      	bne.n	8007c50 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b06      	cmp	r3, #6
 8007c3c:	d010      	beq.n	8007c60 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f042 0201 	orr.w	r2, r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c4e:	e007      	b.n	8007c60 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f042 0201 	orr.w	r2, r2, #1
 8007c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bc80      	pop	{r7}
 8007c6a:	4770      	bx	lr
 8007c6c:	40012c00 	.word	0x40012c00
 8007c70:	40000400 	.word	0x40000400
 8007c74:	40000800 	.word	0x40000800

08007c78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d101      	bne.n	8007c90 <HAL_TIM_ConfigClockSource+0x18>
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	e0b3      	b.n	8007df8 <HAL_TIM_ConfigClockSource+0x180>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007cae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cc8:	d03e      	beq.n	8007d48 <HAL_TIM_ConfigClockSource+0xd0>
 8007cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cce:	f200 8087 	bhi.w	8007de0 <HAL_TIM_ConfigClockSource+0x168>
 8007cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cd6:	f000 8085 	beq.w	8007de4 <HAL_TIM_ConfigClockSource+0x16c>
 8007cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cde:	d87f      	bhi.n	8007de0 <HAL_TIM_ConfigClockSource+0x168>
 8007ce0:	2b70      	cmp	r3, #112	; 0x70
 8007ce2:	d01a      	beq.n	8007d1a <HAL_TIM_ConfigClockSource+0xa2>
 8007ce4:	2b70      	cmp	r3, #112	; 0x70
 8007ce6:	d87b      	bhi.n	8007de0 <HAL_TIM_ConfigClockSource+0x168>
 8007ce8:	2b60      	cmp	r3, #96	; 0x60
 8007cea:	d050      	beq.n	8007d8e <HAL_TIM_ConfigClockSource+0x116>
 8007cec:	2b60      	cmp	r3, #96	; 0x60
 8007cee:	d877      	bhi.n	8007de0 <HAL_TIM_ConfigClockSource+0x168>
 8007cf0:	2b50      	cmp	r3, #80	; 0x50
 8007cf2:	d03c      	beq.n	8007d6e <HAL_TIM_ConfigClockSource+0xf6>
 8007cf4:	2b50      	cmp	r3, #80	; 0x50
 8007cf6:	d873      	bhi.n	8007de0 <HAL_TIM_ConfigClockSource+0x168>
 8007cf8:	2b40      	cmp	r3, #64	; 0x40
 8007cfa:	d058      	beq.n	8007dae <HAL_TIM_ConfigClockSource+0x136>
 8007cfc:	2b40      	cmp	r3, #64	; 0x40
 8007cfe:	d86f      	bhi.n	8007de0 <HAL_TIM_ConfigClockSource+0x168>
 8007d00:	2b30      	cmp	r3, #48	; 0x30
 8007d02:	d064      	beq.n	8007dce <HAL_TIM_ConfigClockSource+0x156>
 8007d04:	2b30      	cmp	r3, #48	; 0x30
 8007d06:	d86b      	bhi.n	8007de0 <HAL_TIM_ConfigClockSource+0x168>
 8007d08:	2b20      	cmp	r3, #32
 8007d0a:	d060      	beq.n	8007dce <HAL_TIM_ConfigClockSource+0x156>
 8007d0c:	2b20      	cmp	r3, #32
 8007d0e:	d867      	bhi.n	8007de0 <HAL_TIM_ConfigClockSource+0x168>
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d05c      	beq.n	8007dce <HAL_TIM_ConfigClockSource+0x156>
 8007d14:	2b10      	cmp	r3, #16
 8007d16:	d05a      	beq.n	8007dce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007d18:	e062      	b.n	8007de0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6818      	ldr	r0, [r3, #0]
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	6899      	ldr	r1, [r3, #8]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	f000 f942 	bl	8007fb2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	609a      	str	r2, [r3, #8]
      break;
 8007d46:	e04e      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6818      	ldr	r0, [r3, #0]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	6899      	ldr	r1, [r3, #8]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	685a      	ldr	r2, [r3, #4]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	f000 f92b 	bl	8007fb2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	689a      	ldr	r2, [r3, #8]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d6a:	609a      	str	r2, [r3, #8]
      break;
 8007d6c:	e03b      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6818      	ldr	r0, [r3, #0]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	6859      	ldr	r1, [r3, #4]
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f000 f8a2 	bl	8007ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2150      	movs	r1, #80	; 0x50
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 f8f9 	bl	8007f7e <TIM_ITRx_SetConfig>
      break;
 8007d8c:	e02b      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6818      	ldr	r0, [r3, #0]
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	6859      	ldr	r1, [r3, #4]
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	f000 f8c0 	bl	8007f20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2160      	movs	r1, #96	; 0x60
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 f8e9 	bl	8007f7e <TIM_ITRx_SetConfig>
      break;
 8007dac:	e01b      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6818      	ldr	r0, [r3, #0]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	6859      	ldr	r1, [r3, #4]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	f000 f882 	bl	8007ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2140      	movs	r1, #64	; 0x40
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 f8d9 	bl	8007f7e <TIM_ITRx_SetConfig>
      break;
 8007dcc:	e00b      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	4610      	mov	r0, r2
 8007dda:	f000 f8d0 	bl	8007f7e <TIM_ITRx_SetConfig>
        break;
 8007dde:	e002      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007de0:	bf00      	nop
 8007de2:	e000      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007de4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a29      	ldr	r2, [pc, #164]	; (8007eb8 <TIM_Base_SetConfig+0xb8>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d00b      	beq.n	8007e30 <TIM_Base_SetConfig+0x30>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e1e:	d007      	beq.n	8007e30 <TIM_Base_SetConfig+0x30>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a26      	ldr	r2, [pc, #152]	; (8007ebc <TIM_Base_SetConfig+0xbc>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d003      	beq.n	8007e30 <TIM_Base_SetConfig+0x30>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a25      	ldr	r2, [pc, #148]	; (8007ec0 <TIM_Base_SetConfig+0xc0>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d108      	bne.n	8007e42 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a1c      	ldr	r2, [pc, #112]	; (8007eb8 <TIM_Base_SetConfig+0xb8>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d00b      	beq.n	8007e62 <TIM_Base_SetConfig+0x62>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e50:	d007      	beq.n	8007e62 <TIM_Base_SetConfig+0x62>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a19      	ldr	r2, [pc, #100]	; (8007ebc <TIM_Base_SetConfig+0xbc>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d003      	beq.n	8007e62 <TIM_Base_SetConfig+0x62>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a18      	ldr	r2, [pc, #96]	; (8007ec0 <TIM_Base_SetConfig+0xc0>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d108      	bne.n	8007e74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	695b      	ldr	r3, [r3, #20]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	689a      	ldr	r2, [r3, #8]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a07      	ldr	r2, [pc, #28]	; (8007eb8 <TIM_Base_SetConfig+0xb8>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d103      	bne.n	8007ea8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	691a      	ldr	r2, [r3, #16]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	615a      	str	r2, [r3, #20]
}
 8007eae:	bf00      	nop
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bc80      	pop	{r7}
 8007eb6:	4770      	bx	lr
 8007eb8:	40012c00 	.word	0x40012c00
 8007ebc:	40000400 	.word	0x40000400
 8007ec0:	40000800 	.word	0x40000800

08007ec4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b087      	sub	sp, #28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	f023 0201 	bic.w	r2, r3, #1
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	011b      	lsls	r3, r3, #4
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f023 030a 	bic.w	r3, r3, #10
 8007f00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	621a      	str	r2, [r3, #32]
}
 8007f16:	bf00      	nop
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bc80      	pop	{r7}
 8007f1e:	4770      	bx	lr

08007f20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b087      	sub	sp, #28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6a1b      	ldr	r3, [r3, #32]
 8007f30:	f023 0210 	bic.w	r2, r3, #16
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	031b      	lsls	r3, r3, #12
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	011b      	lsls	r3, r3, #4
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	621a      	str	r2, [r3, #32]
}
 8007f74:	bf00      	nop
 8007f76:	371c      	adds	r7, #28
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bc80      	pop	{r7}
 8007f7c:	4770      	bx	lr

08007f7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b085      	sub	sp, #20
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	f043 0307 	orr.w	r3, r3, #7
 8007fa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	609a      	str	r2, [r3, #8]
}
 8007fa8:	bf00      	nop
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bc80      	pop	{r7}
 8007fb0:	4770      	bx	lr

08007fb2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b087      	sub	sp, #28
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	607a      	str	r2, [r7, #4]
 8007fbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fcc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	021a      	lsls	r2, r3, #8
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	431a      	orrs	r2, r3
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	609a      	str	r2, [r3, #8]
}
 8007fe6:	bf00      	nop
 8007fe8:	371c      	adds	r7, #28
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bc80      	pop	{r7}
 8007fee:	4770      	bx	lr

08007ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008000:	2b01      	cmp	r3, #1
 8008002:	d101      	bne.n	8008008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008004:	2302      	movs	r3, #2
 8008006:	e046      	b.n	8008096 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2202      	movs	r2, #2
 8008014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800802e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	4313      	orrs	r3, r2
 8008038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a16      	ldr	r2, [pc, #88]	; (80080a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d00e      	beq.n	800806a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008054:	d009      	beq.n	800806a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a12      	ldr	r2, [pc, #72]	; (80080a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d004      	beq.n	800806a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a10      	ldr	r2, [pc, #64]	; (80080a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d10c      	bne.n	8008084 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	4313      	orrs	r3, r2
 800807a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	bc80      	pop	{r7}
 800809e:	4770      	bx	lr
 80080a0:	40012c00 	.word	0x40012c00
 80080a4:	40000400 	.word	0x40000400
 80080a8:	40000800 	.word	0x40000800

080080ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80080ac:	b084      	sub	sp, #16
 80080ae:	b480      	push	{r7}
 80080b0:	b083      	sub	sp, #12
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
 80080b6:	f107 0014 	add.w	r0, r7, #20
 80080ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bc80      	pop	{r7}
 80080c8:	b004      	add	sp, #16
 80080ca:	4770      	bx	lr

080080cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80080dc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80080e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3714      	adds	r7, #20
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bc80      	pop	{r7}
 80080f6:	4770      	bx	lr

080080f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008100:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008104:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800810c:	b29a      	uxth	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	b29b      	uxth	r3, r3
 8008112:	43db      	mvns	r3, r3
 8008114:	b29b      	uxth	r3, r3
 8008116:	4013      	ands	r3, r2
 8008118:	b29a      	uxth	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	bc80      	pop	{r7}
 800812a:	4770      	bx	lr

0800812c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	460b      	mov	r3, r1
 8008136:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	bc80      	pop	{r7}
 8008142:	4770      	bx	lr

08008144 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008144:	b084      	sub	sp, #16
 8008146:	b480      	push	{r7}
 8008148:	b083      	sub	sp, #12
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
 800814e:	f107 0014 	add.w	r0, r7, #20
 8008152:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	bc80      	pop	{r7}
 8008180:	b004      	add	sp, #16
 8008182:	4770      	bx	lr

08008184 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008184:	b480      	push	{r7}
 8008186:	b09b      	sub	sp, #108	; 0x6c
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	881b      	ldrh	r3, [r3, #0]
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80081a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081aa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	78db      	ldrb	r3, [r3, #3]
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d81f      	bhi.n	80081f6 <USB_ActivateEndpoint+0x72>
 80081b6:	a201      	add	r2, pc, #4	; (adr r2, 80081bc <USB_ActivateEndpoint+0x38>)
 80081b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081bc:	080081cd 	.word	0x080081cd
 80081c0:	080081e9 	.word	0x080081e9
 80081c4:	080081ff 	.word	0x080081ff
 80081c8:	080081db 	.word	0x080081db
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80081cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80081d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081d4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80081d8:	e012      	b.n	8008200 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80081da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80081de:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80081e2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80081e6:	e00b      	b.n	8008200 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80081e8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80081ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80081f0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80081f4:	e004      	b.n	8008200 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80081fc:	e000      	b.n	8008200 <USB_ActivateEndpoint+0x7c>
      break;
 80081fe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	441a      	add	r2, r3
 800820a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800820e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800821a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800821e:	b29b      	uxth	r3, r3
 8008220:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	b29b      	uxth	r3, r3
 8008230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008238:	b29a      	uxth	r2, r3
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	b29b      	uxth	r3, r3
 8008240:	4313      	orrs	r3, r2
 8008242:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	441a      	add	r2, r3
 8008250:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800825c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008264:	b29b      	uxth	r3, r3
 8008266:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	7b1b      	ldrb	r3, [r3, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	f040 8149 	bne.w	8008504 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	785b      	ldrb	r3, [r3, #1]
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 8084 	beq.w	8008384 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	617b      	str	r3, [r7, #20]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008286:	b29b      	uxth	r3, r3
 8008288:	461a      	mov	r2, r3
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	4413      	add	r3, r2
 800828e:	617b      	str	r3, [r7, #20]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	011a      	lsls	r2, r3, #4
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	4413      	add	r3, r2
 800829a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800829e:	613b      	str	r3, [r7, #16]
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	88db      	ldrh	r3, [r3, #6]
 80082a4:	085b      	lsrs	r3, r3, #1
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	881b      	ldrh	r3, [r3, #0]
 80082bc:	81fb      	strh	r3, [r7, #14]
 80082be:	89fb      	ldrh	r3, [r7, #14]
 80082c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d01b      	beq.n	8008300 <USB_ActivateEndpoint+0x17c>
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	881b      	ldrh	r3, [r3, #0]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082de:	81bb      	strh	r3, [r7, #12]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	441a      	add	r2, r3
 80082ea:	89bb      	ldrh	r3, [r7, #12]
 80082ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	78db      	ldrb	r3, [r3, #3]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d020      	beq.n	800834a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	881b      	ldrh	r3, [r3, #0]
 8008314:	b29b      	uxth	r3, r3
 8008316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800831a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800831e:	813b      	strh	r3, [r7, #8]
 8008320:	893b      	ldrh	r3, [r7, #8]
 8008322:	f083 0320 	eor.w	r3, r3, #32
 8008326:	813b      	strh	r3, [r7, #8]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	441a      	add	r2, r3
 8008332:	893b      	ldrh	r3, [r7, #8]
 8008334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800833c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008344:	b29b      	uxth	r3, r3
 8008346:	8013      	strh	r3, [r2, #0]
 8008348:	e27f      	b.n	800884a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4413      	add	r3, r2
 8008354:	881b      	ldrh	r3, [r3, #0]
 8008356:	b29b      	uxth	r3, r3
 8008358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800835c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008360:	817b      	strh	r3, [r7, #10]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	441a      	add	r2, r3
 800836c:	897b      	ldrh	r3, [r7, #10]
 800836e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800837a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800837e:	b29b      	uxth	r3, r3
 8008380:	8013      	strh	r3, [r2, #0]
 8008382:	e262      	b.n	800884a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800838e:	b29b      	uxth	r3, r3
 8008390:	461a      	mov	r2, r3
 8008392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008394:	4413      	add	r3, r2
 8008396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	011a      	lsls	r2, r3, #4
 800839e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80083a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	88db      	ldrh	r3, [r3, #6]
 80083ac:	085b      	lsrs	r3, r3, #1
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	005b      	lsls	r3, r3, #1
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	627b      	str	r3, [r7, #36]	; 0x24
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	461a      	mov	r2, r3
 80083c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c8:	4413      	add	r3, r2
 80083ca:	627b      	str	r3, [r7, #36]	; 0x24
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	011a      	lsls	r2, r3, #4
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	4413      	add	r3, r2
 80083d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80083da:	623b      	str	r3, [r7, #32]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d112      	bne.n	800840a <USB_ActivateEndpoint+0x286>
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	801a      	strh	r2, [r3, #0]
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008402:	b29a      	uxth	r2, r3
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	801a      	strh	r2, [r3, #0]
 8008408:	e02f      	b.n	800846a <USB_ActivateEndpoint+0x2e6>
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	2b3e      	cmp	r3, #62	; 0x3e
 8008410:	d813      	bhi.n	800843a <USB_ActivateEndpoint+0x2b6>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	085b      	lsrs	r3, r3, #1
 8008418:	663b      	str	r3, [r7, #96]	; 0x60
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	f003 0301 	and.w	r3, r3, #1
 8008422:	2b00      	cmp	r3, #0
 8008424:	d002      	beq.n	800842c <USB_ActivateEndpoint+0x2a8>
 8008426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008428:	3301      	adds	r3, #1
 800842a:	663b      	str	r3, [r7, #96]	; 0x60
 800842c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800842e:	b29b      	uxth	r3, r3
 8008430:	029b      	lsls	r3, r3, #10
 8008432:	b29a      	uxth	r2, r3
 8008434:	6a3b      	ldr	r3, [r7, #32]
 8008436:	801a      	strh	r2, [r3, #0]
 8008438:	e017      	b.n	800846a <USB_ActivateEndpoint+0x2e6>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	095b      	lsrs	r3, r3, #5
 8008440:	663b      	str	r3, [r7, #96]	; 0x60
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	f003 031f 	and.w	r3, r3, #31
 800844a:	2b00      	cmp	r3, #0
 800844c:	d102      	bne.n	8008454 <USB_ActivateEndpoint+0x2d0>
 800844e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008450:	3b01      	subs	r3, #1
 8008452:	663b      	str	r3, [r7, #96]	; 0x60
 8008454:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008456:	b29b      	uxth	r3, r3
 8008458:	029b      	lsls	r3, r3, #10
 800845a:	b29b      	uxth	r3, r3
 800845c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008464:	b29a      	uxth	r2, r3
 8008466:	6a3b      	ldr	r3, [r7, #32]
 8008468:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	881b      	ldrh	r3, [r3, #0]
 8008476:	83fb      	strh	r3, [r7, #30]
 8008478:	8bfb      	ldrh	r3, [r7, #30]
 800847a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d01b      	beq.n	80084ba <USB_ActivateEndpoint+0x336>
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	b29b      	uxth	r3, r3
 8008490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008498:	83bb      	strh	r3, [r7, #28]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	441a      	add	r2, r3
 80084a4:	8bbb      	ldrh	r3, [r7, #28]
 80084a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084d0:	837b      	strh	r3, [r7, #26]
 80084d2:	8b7b      	ldrh	r3, [r7, #26]
 80084d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80084d8:	837b      	strh	r3, [r7, #26]
 80084da:	8b7b      	ldrh	r3, [r7, #26]
 80084dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80084e0:	837b      	strh	r3, [r7, #26]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	441a      	add	r2, r3
 80084ec:	8b7b      	ldrh	r3, [r7, #26]
 80084ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084fe:	b29b      	uxth	r3, r3
 8008500:	8013      	strh	r3, [r2, #0]
 8008502:	e1a2      	b.n	800884a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	4413      	add	r3, r2
 800850e:	881b      	ldrh	r3, [r3, #0]
 8008510:	b29b      	uxth	r3, r3
 8008512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800851a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	441a      	add	r2, r3
 8008528:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800852c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008534:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800853c:	b29b      	uxth	r3, r3
 800853e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	65bb      	str	r3, [r7, #88]	; 0x58
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800854a:	b29b      	uxth	r3, r3
 800854c:	461a      	mov	r2, r3
 800854e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008550:	4413      	add	r3, r2
 8008552:	65bb      	str	r3, [r7, #88]	; 0x58
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	011a      	lsls	r2, r3, #4
 800855a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800855c:	4413      	add	r3, r2
 800855e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008562:	657b      	str	r3, [r7, #84]	; 0x54
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	891b      	ldrh	r3, [r3, #8]
 8008568:	085b      	lsrs	r3, r3, #1
 800856a:	b29b      	uxth	r3, r3
 800856c:	005b      	lsls	r3, r3, #1
 800856e:	b29a      	uxth	r2, r3
 8008570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008572:	801a      	strh	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	653b      	str	r3, [r7, #80]	; 0x50
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800857e:	b29b      	uxth	r3, r3
 8008580:	461a      	mov	r2, r3
 8008582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008584:	4413      	add	r3, r2
 8008586:	653b      	str	r3, [r7, #80]	; 0x50
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	011a      	lsls	r2, r3, #4
 800858e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008590:	4413      	add	r3, r2
 8008592:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	895b      	ldrh	r3, [r3, #10]
 800859c:	085b      	lsrs	r3, r3, #1
 800859e:	b29b      	uxth	r3, r3
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085a6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	785b      	ldrb	r3, [r3, #1]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f040 8091 	bne.w	80086d4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	881b      	ldrh	r3, [r3, #0]
 80085be:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80085c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80085c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d01b      	beq.n	8008602 <USB_ActivateEndpoint+0x47e>
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	881b      	ldrh	r3, [r3, #0]
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085e0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	441a      	add	r2, r3
 80085ec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80085ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085fe:	b29b      	uxth	r3, r3
 8008600:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	881b      	ldrh	r3, [r3, #0]
 800860e:	873b      	strh	r3, [r7, #56]	; 0x38
 8008610:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008616:	2b00      	cmp	r3, #0
 8008618:	d01b      	beq.n	8008652 <USB_ActivateEndpoint+0x4ce>
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	b29b      	uxth	r3, r3
 8008628:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800862c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008630:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	441a      	add	r2, r3
 800863c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800863e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800864a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800864e:	b29b      	uxth	r3, r3
 8008650:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	b29b      	uxth	r3, r3
 8008660:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008668:	86bb      	strh	r3, [r7, #52]	; 0x34
 800866a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800866c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008670:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008672:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008674:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008678:	86bb      	strh	r3, [r7, #52]	; 0x34
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	441a      	add	r2, r3
 8008684:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800868a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800868e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008696:	b29b      	uxth	r3, r3
 8008698:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4413      	add	r3, r2
 80086a4:	881b      	ldrh	r3, [r3, #0]
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086b0:	867b      	strh	r3, [r7, #50]	; 0x32
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	441a      	add	r2, r3
 80086bc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80086be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	8013      	strh	r3, [r2, #0]
 80086d2:	e0ba      	b.n	800884a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4413      	add	r3, r2
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80086e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80086e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d01d      	beq.n	800872c <USB_ActivateEndpoint+0x5a8>
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	881b      	ldrh	r3, [r3, #0]
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008706:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	441a      	add	r2, r3
 8008714:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800871c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008728:	b29b      	uxth	r3, r3
 800872a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	881b      	ldrh	r3, [r3, #0]
 8008738:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800873c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008744:	2b00      	cmp	r3, #0
 8008746:	d01d      	beq.n	8008784 <USB_ActivateEndpoint+0x600>
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	4413      	add	r3, r2
 8008752:	881b      	ldrh	r3, [r3, #0]
 8008754:	b29b      	uxth	r3, r3
 8008756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800875a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800875e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	441a      	add	r2, r3
 800876c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800877c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008780:	b29b      	uxth	r3, r3
 8008782:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	78db      	ldrb	r3, [r3, #3]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d024      	beq.n	80087d6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	b29b      	uxth	r3, r3
 800879a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800879e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80087a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80087aa:	f083 0320 	eor.w	r3, r3, #32
 80087ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	441a      	add	r2, r3
 80087bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80087c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	8013      	strh	r3, [r2, #0]
 80087d4:	e01d      	b.n	8008812 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	441a      	add	r2, r3
 80087fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80087fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800880a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800880e:	b29b      	uxth	r3, r3
 8008810:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	881b      	ldrh	r3, [r3, #0]
 800881e:	b29b      	uxth	r3, r3
 8008820:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008828:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	441a      	add	r2, r3
 8008834:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800883a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800883e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008846:	b29b      	uxth	r3, r3
 8008848:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800884a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800884e:	4618      	mov	r0, r3
 8008850:	376c      	adds	r7, #108	; 0x6c
 8008852:	46bd      	mov	sp, r7
 8008854:	bc80      	pop	{r7}
 8008856:	4770      	bx	lr

08008858 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008858:	b480      	push	{r7}
 800885a:	b08d      	sub	sp, #52	; 0x34
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	7b1b      	ldrb	r3, [r3, #12]
 8008866:	2b00      	cmp	r3, #0
 8008868:	f040 808e 	bne.w	8008988 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	785b      	ldrb	r3, [r3, #1]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d044      	beq.n	80088fe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4413      	add	r3, r2
 800887e:	881b      	ldrh	r3, [r3, #0]
 8008880:	81bb      	strh	r3, [r7, #12]
 8008882:	89bb      	ldrh	r3, [r7, #12]
 8008884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008888:	2b00      	cmp	r3, #0
 800888a:	d01b      	beq.n	80088c4 <USB_DeactivateEndpoint+0x6c>
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4413      	add	r3, r2
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	b29b      	uxth	r3, r3
 800889a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800889e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088a2:	817b      	strh	r3, [r7, #10]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	441a      	add	r2, r3
 80088ae:	897b      	ldrh	r3, [r7, #10]
 80088b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4413      	add	r3, r2
 80088ce:	881b      	ldrh	r3, [r3, #0]
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088da:	813b      	strh	r3, [r7, #8]
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	441a      	add	r2, r3
 80088e6:	893b      	ldrh	r3, [r7, #8]
 80088e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	8013      	strh	r3, [r2, #0]
 80088fc:	e192      	b.n	8008c24 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4413      	add	r3, r2
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	827b      	strh	r3, [r7, #18]
 800890c:	8a7b      	ldrh	r3, [r7, #18]
 800890e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008912:	2b00      	cmp	r3, #0
 8008914:	d01b      	beq.n	800894e <USB_DeactivateEndpoint+0xf6>
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4413      	add	r3, r2
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	b29b      	uxth	r3, r3
 8008924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800892c:	823b      	strh	r3, [r7, #16]
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	441a      	add	r2, r3
 8008938:	8a3b      	ldrh	r3, [r7, #16]
 800893a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800893e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008942:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800894a:	b29b      	uxth	r3, r3
 800894c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	4413      	add	r3, r2
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	b29b      	uxth	r3, r3
 800895c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008964:	81fb      	strh	r3, [r7, #14]
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	441a      	add	r2, r3
 8008970:	89fb      	ldrh	r3, [r7, #14]
 8008972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800897a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800897e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008982:	b29b      	uxth	r3, r3
 8008984:	8013      	strh	r3, [r2, #0]
 8008986:	e14d      	b.n	8008c24 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	785b      	ldrb	r3, [r3, #1]
 800898c:	2b00      	cmp	r3, #0
 800898e:	f040 80a5 	bne.w	8008adc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4413      	add	r3, r2
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	843b      	strh	r3, [r7, #32]
 80089a0:	8c3b      	ldrh	r3, [r7, #32]
 80089a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d01b      	beq.n	80089e2 <USB_DeactivateEndpoint+0x18a>
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	881b      	ldrh	r3, [r3, #0]
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c0:	83fb      	strh	r3, [r7, #30]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	441a      	add	r2, r3
 80089cc:	8bfb      	ldrh	r3, [r7, #30]
 80089ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80089da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089de:	b29b      	uxth	r3, r3
 80089e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	83bb      	strh	r3, [r7, #28]
 80089f0:	8bbb      	ldrh	r3, [r7, #28]
 80089f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d01b      	beq.n	8008a32 <USB_DeactivateEndpoint+0x1da>
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4413      	add	r3, r2
 8008a04:	881b      	ldrh	r3, [r3, #0]
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a10:	837b      	strh	r3, [r7, #26]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	441a      	add	r2, r3
 8008a1c:	8b7b      	ldrh	r3, [r7, #26]
 8008a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	881b      	ldrh	r3, [r3, #0]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a48:	833b      	strh	r3, [r7, #24]
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	441a      	add	r2, r3
 8008a54:	8b3b      	ldrh	r3, [r7, #24]
 8008a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a80:	82fb      	strh	r3, [r7, #22]
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	441a      	add	r2, r3
 8008a8c:	8afb      	ldrh	r3, [r7, #22]
 8008a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	881b      	ldrh	r3, [r3, #0]
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ab8:	82bb      	strh	r3, [r7, #20]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	441a      	add	r2, r3
 8008ac4:	8abb      	ldrh	r3, [r7, #20]
 8008ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	8013      	strh	r3, [r2, #0]
 8008ada:	e0a3      	b.n	8008c24 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	881b      	ldrh	r3, [r3, #0]
 8008ae8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008aea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d01b      	beq.n	8008b2c <USB_DeactivateEndpoint+0x2d4>
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	881b      	ldrh	r3, [r3, #0]
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b0a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	441a      	add	r2, r3
 8008b16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4413      	add	r3, r2
 8008b36:	881b      	ldrh	r3, [r3, #0]
 8008b38:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008b3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d01b      	beq.n	8008b7c <USB_DeactivateEndpoint+0x324>
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	4413      	add	r3, r2
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b5a:	853b      	strh	r3, [r7, #40]	; 0x28
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	441a      	add	r2, r3
 8008b66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4413      	add	r3, r2
 8008b86:	881b      	ldrh	r3, [r3, #0]
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b92:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	441a      	add	r2, r3
 8008b9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ba8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	4413      	add	r3, r2
 8008bbe:	881b      	ldrh	r3, [r3, #0]
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bca:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	441a      	add	r2, r3
 8008bd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	4413      	add	r3, r2
 8008bf6:	881b      	ldrh	r3, [r3, #0]
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c02:	847b      	strh	r3, [r7, #34]	; 0x22
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	441a      	add	r2, r3
 8008c0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3734      	adds	r7, #52	; 0x34
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bc80      	pop	{r7}
 8008c2e:	4770      	bx	lr

08008c30 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b0cc      	sub	sp, #304	; 0x130
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	1d3b      	adds	r3, r7, #4
 8008c38:	6018      	str	r0, [r3, #0]
 8008c3a:	463b      	mov	r3, r7
 8008c3c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c3e:	463b      	mov	r3, r7
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	785b      	ldrb	r3, [r3, #1]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	f040 872e 	bne.w	8009aa6 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008c4a:	463b      	mov	r3, r7
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	699a      	ldr	r2, [r3, #24]
 8008c50:	463b      	mov	r3, r7
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d905      	bls.n	8008c66 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008c5a:	463b      	mov	r3, r7
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008c64:	e004      	b.n	8008c70 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008c66:	463b      	mov	r3, r7
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008c70:	463b      	mov	r3, r7
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	7b1b      	ldrb	r3, [r3, #12]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d134      	bne.n	8008ce4 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008c7a:	463b      	mov	r3, r7
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6959      	ldr	r1, [r3, #20]
 8008c80:	463b      	mov	r3, r7
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	88da      	ldrh	r2, [r3, #6]
 8008c86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	1d38      	adds	r0, r7, #4
 8008c8e:	6800      	ldr	r0, [r0, #0]
 8008c90:	f001 fc03 	bl	800a49a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008c94:	f107 0310 	add.w	r3, r7, #16
 8008c98:	1d3a      	adds	r2, r7, #4
 8008c9a:	6812      	ldr	r2, [r2, #0]
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	1d3b      	adds	r3, r7, #4
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	4619      	mov	r1, r3
 8008caa:	f107 0310 	add.w	r3, r7, #16
 8008cae:	f107 0210 	add.w	r2, r7, #16
 8008cb2:	6812      	ldr	r2, [r2, #0]
 8008cb4:	440a      	add	r2, r1
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	463b      	mov	r3, r7
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	011a      	lsls	r2, r3, #4
 8008cc0:	f107 0310 	add.w	r3, r7, #16
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008ccc:	f107 030c 	add.w	r3, r7, #12
 8008cd0:	601a      	str	r2, [r3, #0]
 8008cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	f107 030c 	add.w	r3, r7, #12
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	801a      	strh	r2, [r3, #0]
 8008ce0:	f000 beac 	b.w	8009a3c <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008ce4:	463b      	mov	r3, r7
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	78db      	ldrb	r3, [r3, #3]
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	f040 838c 	bne.w	8009408 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008cf0:	463b      	mov	r3, r7
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	6a1a      	ldr	r2, [r3, #32]
 8008cf6:	463b      	mov	r3, r7
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	f240 8330 	bls.w	8009362 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008d02:	1d3b      	adds	r3, r7, #4
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	463b      	mov	r3, r7
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	881b      	ldrh	r3, [r3, #0]
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008d20:	1d3b      	adds	r3, r7, #4
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	463b      	mov	r3, r7
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	441a      	add	r2, r3
 8008d2e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d3a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008d46:	463b      	mov	r3, r7
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	6a1a      	ldr	r2, [r3, #32]
 8008d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d50:	1ad2      	subs	r2, r2, r3
 8008d52:	463b      	mov	r3, r7
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d58:	1d3b      	adds	r3, r7, #4
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	463b      	mov	r3, r7
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	881b      	ldrh	r3, [r3, #0]
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f000 819e 	beq.w	80090b0 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d78:	1d3a      	adds	r2, r7, #4
 8008d7a:	6812      	ldr	r2, [r2, #0]
 8008d7c:	601a      	str	r2, [r3, #0]
 8008d7e:	463b      	mov	r3, r7
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	785b      	ldrb	r3, [r3, #1]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d17a      	bne.n	8008e7e <USB_EPStartXfer+0x24e>
 8008d88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008d8c:	1d3a      	adds	r2, r7, #4
 8008d8e:	6812      	ldr	r2, [r2, #0]
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	1d3b      	adds	r3, r7, #4
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008da2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008da6:	6812      	ldr	r2, [r2, #0]
 8008da8:	440a      	add	r2, r1
 8008daa:	601a      	str	r2, [r3, #0]
 8008dac:	463b      	mov	r3, r7
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	011a      	lsls	r2, r3, #4
 8008db4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dc4:	601a      	str	r2, [r3, #0]
 8008dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d11a      	bne.n	8008e04 <USB_EPStartXfer+0x1d4>
 8008dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	881b      	ldrh	r3, [r3, #0]
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ddc:	b29a      	uxth	r2, r3
 8008dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	801a      	strh	r2, [r3, #0]
 8008de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	881b      	ldrh	r3, [r3, #0]
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	801a      	strh	r2, [r3, #0]
 8008e02:	e062      	b.n	8008eca <USB_EPStartXfer+0x29a>
 8008e04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e08:	2b3e      	cmp	r3, #62	; 0x3e
 8008e0a:	d819      	bhi.n	8008e40 <USB_EPStartXfer+0x210>
 8008e0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e10:	085b      	lsrs	r3, r3, #1
 8008e12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008e16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d004      	beq.n	8008e2c <USB_EPStartXfer+0x1fc>
 8008e22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e26:	3301      	adds	r3, #1
 8008e28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008e2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	029b      	lsls	r3, r3, #10
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	801a      	strh	r2, [r3, #0]
 8008e3e:	e044      	b.n	8008eca <USB_EPStartXfer+0x29a>
 8008e40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e44:	095b      	lsrs	r3, r3, #5
 8008e46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008e4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e4e:	f003 031f 	and.w	r3, r3, #31
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d104      	bne.n	8008e60 <USB_EPStartXfer+0x230>
 8008e56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008e60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	029b      	lsls	r3, r3, #10
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	801a      	strh	r2, [r3, #0]
 8008e7c:	e025      	b.n	8008eca <USB_EPStartXfer+0x29a>
 8008e7e:	463b      	mov	r3, r7
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	785b      	ldrb	r3, [r3, #1]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d120      	bne.n	8008eca <USB_EPStartXfer+0x29a>
 8008e88:	1d3b      	adds	r3, r7, #4
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	4619      	mov	r1, r3
 8008e94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e98:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008e9c:	6812      	ldr	r2, [r2, #0]
 8008e9e:	440a      	add	r2, r1
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	463b      	mov	r3, r7
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	011a      	lsls	r2, r3, #4
 8008eaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008eca:	463b      	mov	r3, r7
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	895b      	ldrh	r3, [r3, #10]
 8008ed0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ed4:	463b      	mov	r3, r7
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	6959      	ldr	r1, [r3, #20]
 8008eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ee4:	1d38      	adds	r0, r7, #4
 8008ee6:	6800      	ldr	r0, [r0, #0]
 8008ee8:	f001 fad7 	bl	800a49a <USB_WritePMA>
            ep->xfer_buff += len;
 8008eec:	463b      	mov	r3, r7
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	695a      	ldr	r2, [r3, #20]
 8008ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ef6:	441a      	add	r2, r3
 8008ef8:	463b      	mov	r3, r7
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008efe:	463b      	mov	r3, r7
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6a1a      	ldr	r2, [r3, #32]
 8008f04:	463b      	mov	r3, r7
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d909      	bls.n	8008f22 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8008f0e:	463b      	mov	r3, r7
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6a1a      	ldr	r2, [r3, #32]
 8008f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f18:	1ad2      	subs	r2, r2, r3
 8008f1a:	463b      	mov	r3, r7
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	621a      	str	r2, [r3, #32]
 8008f20:	e008      	b.n	8008f34 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8008f22:	463b      	mov	r3, r7
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	6a1b      	ldr	r3, [r3, #32]
 8008f28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008f2c:	463b      	mov	r3, r7
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2200      	movs	r2, #0
 8008f32:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f34:	463b      	mov	r3, r7
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	785b      	ldrb	r3, [r3, #1]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d17a      	bne.n	8009034 <USB_EPStartXfer+0x404>
 8008f3e:	f107 0318 	add.w	r3, r7, #24
 8008f42:	1d3a      	adds	r2, r7, #4
 8008f44:	6812      	ldr	r2, [r2, #0]
 8008f46:	601a      	str	r2, [r3, #0]
 8008f48:	1d3b      	adds	r3, r7, #4
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	4619      	mov	r1, r3
 8008f54:	f107 0318 	add.w	r3, r7, #24
 8008f58:	f107 0218 	add.w	r2, r7, #24
 8008f5c:	6812      	ldr	r2, [r2, #0]
 8008f5e:	440a      	add	r2, r1
 8008f60:	601a      	str	r2, [r3, #0]
 8008f62:	463b      	mov	r3, r7
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	011a      	lsls	r2, r3, #4
 8008f6a:	f107 0318 	add.w	r3, r7, #24
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4413      	add	r3, r2
 8008f72:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008f76:	f107 0314 	add.w	r3, r7, #20
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d11a      	bne.n	8008fba <USB_EPStartXfer+0x38a>
 8008f84:	f107 0314 	add.w	r3, r7, #20
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	881b      	ldrh	r3, [r3, #0]
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	f107 0314 	add.w	r3, r7, #20
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	801a      	strh	r2, [r3, #0]
 8008f9c:	f107 0314 	add.w	r3, r7, #20
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	f107 0314 	add.w	r3, r7, #20
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	801a      	strh	r2, [r3, #0]
 8008fb8:	e067      	b.n	800908a <USB_EPStartXfer+0x45a>
 8008fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fbe:	2b3e      	cmp	r3, #62	; 0x3e
 8008fc0:	d819      	bhi.n	8008ff6 <USB_EPStartXfer+0x3c6>
 8008fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fc6:	085b      	lsrs	r3, r3, #1
 8008fc8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fd0:	f003 0301 	and.w	r3, r3, #1
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d004      	beq.n	8008fe2 <USB_EPStartXfer+0x3b2>
 8008fd8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008fdc:	3301      	adds	r3, #1
 8008fde:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008fe2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	029b      	lsls	r3, r3, #10
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	f107 0314 	add.w	r3, r7, #20
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	801a      	strh	r2, [r3, #0]
 8008ff4:	e049      	b.n	800908a <USB_EPStartXfer+0x45a>
 8008ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ffa:	095b      	lsrs	r3, r3, #5
 8008ffc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009004:	f003 031f 	and.w	r3, r3, #31
 8009008:	2b00      	cmp	r3, #0
 800900a:	d104      	bne.n	8009016 <USB_EPStartXfer+0x3e6>
 800900c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009010:	3b01      	subs	r3, #1
 8009012:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009016:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800901a:	b29b      	uxth	r3, r3
 800901c:	029b      	lsls	r3, r3, #10
 800901e:	b29b      	uxth	r3, r3
 8009020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009028:	b29a      	uxth	r2, r3
 800902a:	f107 0314 	add.w	r3, r7, #20
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	801a      	strh	r2, [r3, #0]
 8009032:	e02a      	b.n	800908a <USB_EPStartXfer+0x45a>
 8009034:	463b      	mov	r3, r7
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	785b      	ldrb	r3, [r3, #1]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d125      	bne.n	800908a <USB_EPStartXfer+0x45a>
 800903e:	f107 0320 	add.w	r3, r7, #32
 8009042:	1d3a      	adds	r2, r7, #4
 8009044:	6812      	ldr	r2, [r2, #0]
 8009046:	601a      	str	r2, [r3, #0]
 8009048:	1d3b      	adds	r3, r7, #4
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009050:	b29b      	uxth	r3, r3
 8009052:	4619      	mov	r1, r3
 8009054:	f107 0320 	add.w	r3, r7, #32
 8009058:	f107 0220 	add.w	r2, r7, #32
 800905c:	6812      	ldr	r2, [r2, #0]
 800905e:	440a      	add	r2, r1
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	463b      	mov	r3, r7
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	011a      	lsls	r2, r3, #4
 800906a:	f107 0320 	add.w	r3, r7, #32
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4413      	add	r3, r2
 8009072:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009076:	f107 031c 	add.w	r3, r7, #28
 800907a:	601a      	str	r2, [r3, #0]
 800907c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009080:	b29a      	uxth	r2, r3
 8009082:	f107 031c 	add.w	r3, r7, #28
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800908a:	463b      	mov	r3, r7
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	891b      	ldrh	r3, [r3, #8]
 8009090:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009094:	463b      	mov	r3, r7
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6959      	ldr	r1, [r3, #20]
 800909a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800909e:	b29b      	uxth	r3, r3
 80090a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80090a4:	1d38      	adds	r0, r7, #4
 80090a6:	6800      	ldr	r0, [r0, #0]
 80090a8:	f001 f9f7 	bl	800a49a <USB_WritePMA>
 80090ac:	f000 bcc6 	b.w	8009a3c <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80090b0:	463b      	mov	r3, r7
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	785b      	ldrb	r3, [r3, #1]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d164      	bne.n	8009184 <USB_EPStartXfer+0x554>
 80090ba:	1d3b      	adds	r3, r7, #4
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	64bb      	str	r3, [r7, #72]	; 0x48
 80090c0:	1d3b      	adds	r3, r7, #4
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	461a      	mov	r2, r3
 80090cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090ce:	4413      	add	r3, r2
 80090d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80090d2:	463b      	mov	r3, r7
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	011a      	lsls	r2, r3, #4
 80090da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090dc:	4413      	add	r3, r2
 80090de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090e2:	647b      	str	r3, [r7, #68]	; 0x44
 80090e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d112      	bne.n	8009112 <USB_EPStartXfer+0x4e2>
 80090ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ee:	881b      	ldrh	r3, [r3, #0]
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090fa:	801a      	strh	r2, [r3, #0]
 80090fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090fe:	881b      	ldrh	r3, [r3, #0]
 8009100:	b29b      	uxth	r3, r3
 8009102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800910a:	b29a      	uxth	r2, r3
 800910c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800910e:	801a      	strh	r2, [r3, #0]
 8009110:	e057      	b.n	80091c2 <USB_EPStartXfer+0x592>
 8009112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009116:	2b3e      	cmp	r3, #62	; 0x3e
 8009118:	d817      	bhi.n	800914a <USB_EPStartXfer+0x51a>
 800911a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800911e:	085b      	lsrs	r3, r3, #1
 8009120:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009124:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009128:	f003 0301 	and.w	r3, r3, #1
 800912c:	2b00      	cmp	r3, #0
 800912e:	d004      	beq.n	800913a <USB_EPStartXfer+0x50a>
 8009130:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009134:	3301      	adds	r3, #1
 8009136:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800913a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800913e:	b29b      	uxth	r3, r3
 8009140:	029b      	lsls	r3, r3, #10
 8009142:	b29a      	uxth	r2, r3
 8009144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009146:	801a      	strh	r2, [r3, #0]
 8009148:	e03b      	b.n	80091c2 <USB_EPStartXfer+0x592>
 800914a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800914e:	095b      	lsrs	r3, r3, #5
 8009150:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009158:	f003 031f 	and.w	r3, r3, #31
 800915c:	2b00      	cmp	r3, #0
 800915e:	d104      	bne.n	800916a <USB_EPStartXfer+0x53a>
 8009160:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009164:	3b01      	subs	r3, #1
 8009166:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800916a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800916e:	b29b      	uxth	r3, r3
 8009170:	029b      	lsls	r3, r3, #10
 8009172:	b29b      	uxth	r3, r3
 8009174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800917c:	b29a      	uxth	r2, r3
 800917e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009180:	801a      	strh	r2, [r3, #0]
 8009182:	e01e      	b.n	80091c2 <USB_EPStartXfer+0x592>
 8009184:	463b      	mov	r3, r7
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	785b      	ldrb	r3, [r3, #1]
 800918a:	2b01      	cmp	r3, #1
 800918c:	d119      	bne.n	80091c2 <USB_EPStartXfer+0x592>
 800918e:	1d3b      	adds	r3, r7, #4
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	653b      	str	r3, [r7, #80]	; 0x50
 8009194:	1d3b      	adds	r3, r7, #4
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800919c:	b29b      	uxth	r3, r3
 800919e:	461a      	mov	r2, r3
 80091a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091a2:	4413      	add	r3, r2
 80091a4:	653b      	str	r3, [r7, #80]	; 0x50
 80091a6:	463b      	mov	r3, r7
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	011a      	lsls	r2, r3, #4
 80091ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091b0:	4413      	add	r3, r2
 80091b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091bc:	b29a      	uxth	r2, r3
 80091be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80091c2:	463b      	mov	r3, r7
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	891b      	ldrh	r3, [r3, #8]
 80091c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091cc:	463b      	mov	r3, r7
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6959      	ldr	r1, [r3, #20]
 80091d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80091dc:	1d38      	adds	r0, r7, #4
 80091de:	6800      	ldr	r0, [r0, #0]
 80091e0:	f001 f95b 	bl	800a49a <USB_WritePMA>
            ep->xfer_buff += len;
 80091e4:	463b      	mov	r3, r7
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	695a      	ldr	r2, [r3, #20]
 80091ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091ee:	441a      	add	r2, r3
 80091f0:	463b      	mov	r3, r7
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80091f6:	463b      	mov	r3, r7
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	6a1a      	ldr	r2, [r3, #32]
 80091fc:	463b      	mov	r3, r7
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	429a      	cmp	r2, r3
 8009204:	d909      	bls.n	800921a <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8009206:	463b      	mov	r3, r7
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	6a1a      	ldr	r2, [r3, #32]
 800920c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009210:	1ad2      	subs	r2, r2, r3
 8009212:	463b      	mov	r3, r7
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	621a      	str	r2, [r3, #32]
 8009218:	e008      	b.n	800922c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800921a:	463b      	mov	r3, r7
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	6a1b      	ldr	r3, [r3, #32]
 8009220:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8009224:	463b      	mov	r3, r7
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2200      	movs	r2, #0
 800922a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800922c:	1d3b      	adds	r3, r7, #4
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	643b      	str	r3, [r7, #64]	; 0x40
 8009232:	463b      	mov	r3, r7
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	785b      	ldrb	r3, [r3, #1]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d164      	bne.n	8009306 <USB_EPStartXfer+0x6d6>
 800923c:	1d3b      	adds	r3, r7, #4
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	63bb      	str	r3, [r7, #56]	; 0x38
 8009242:	1d3b      	adds	r3, r7, #4
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800924a:	b29b      	uxth	r3, r3
 800924c:	461a      	mov	r2, r3
 800924e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009250:	4413      	add	r3, r2
 8009252:	63bb      	str	r3, [r7, #56]	; 0x38
 8009254:	463b      	mov	r3, r7
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	011a      	lsls	r2, r3, #4
 800925c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925e:	4413      	add	r3, r2
 8009260:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009264:	637b      	str	r3, [r7, #52]	; 0x34
 8009266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800926a:	2b00      	cmp	r3, #0
 800926c:	d112      	bne.n	8009294 <USB_EPStartXfer+0x664>
 800926e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	b29b      	uxth	r3, r3
 8009274:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009278:	b29a      	uxth	r2, r3
 800927a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800927c:	801a      	strh	r2, [r3, #0]
 800927e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009280:	881b      	ldrh	r3, [r3, #0]
 8009282:	b29b      	uxth	r3, r3
 8009284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800928c:	b29a      	uxth	r2, r3
 800928e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009290:	801a      	strh	r2, [r3, #0]
 8009292:	e054      	b.n	800933e <USB_EPStartXfer+0x70e>
 8009294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009298:	2b3e      	cmp	r3, #62	; 0x3e
 800929a:	d817      	bhi.n	80092cc <USB_EPStartXfer+0x69c>
 800929c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092a0:	085b      	lsrs	r3, r3, #1
 80092a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80092a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d004      	beq.n	80092bc <USB_EPStartXfer+0x68c>
 80092b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80092b6:	3301      	adds	r3, #1
 80092b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80092bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	029b      	lsls	r3, r3, #10
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c8:	801a      	strh	r2, [r3, #0]
 80092ca:	e038      	b.n	800933e <USB_EPStartXfer+0x70e>
 80092cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092d0:	095b      	lsrs	r3, r3, #5
 80092d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80092d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092da:	f003 031f 	and.w	r3, r3, #31
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d104      	bne.n	80092ec <USB_EPStartXfer+0x6bc>
 80092e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80092e6:	3b01      	subs	r3, #1
 80092e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80092ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	029b      	lsls	r3, r3, #10
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092fe:	b29a      	uxth	r2, r3
 8009300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009302:	801a      	strh	r2, [r3, #0]
 8009304:	e01b      	b.n	800933e <USB_EPStartXfer+0x70e>
 8009306:	463b      	mov	r3, r7
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	785b      	ldrb	r3, [r3, #1]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d116      	bne.n	800933e <USB_EPStartXfer+0x70e>
 8009310:	1d3b      	adds	r3, r7, #4
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009318:	b29b      	uxth	r3, r3
 800931a:	461a      	mov	r2, r3
 800931c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800931e:	4413      	add	r3, r2
 8009320:	643b      	str	r3, [r7, #64]	; 0x40
 8009322:	463b      	mov	r3, r7
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	011a      	lsls	r2, r3, #4
 800932a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800932c:	4413      	add	r3, r2
 800932e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009338:	b29a      	uxth	r2, r3
 800933a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800933c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800933e:	463b      	mov	r3, r7
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	895b      	ldrh	r3, [r3, #10]
 8009344:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009348:	463b      	mov	r3, r7
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	6959      	ldr	r1, [r3, #20]
 800934e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009352:	b29b      	uxth	r3, r3
 8009354:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009358:	1d38      	adds	r0, r7, #4
 800935a:	6800      	ldr	r0, [r0, #0]
 800935c:	f001 f89d 	bl	800a49a <USB_WritePMA>
 8009360:	e36c      	b.n	8009a3c <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009362:	463b      	mov	r3, r7
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	6a1b      	ldr	r3, [r3, #32]
 8009368:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800936c:	1d3b      	adds	r3, r7, #4
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	463b      	mov	r3, r7
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4413      	add	r3, r2
 800937a:	881b      	ldrh	r3, [r3, #0]
 800937c:	b29b      	uxth	r3, r3
 800937e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009386:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800938a:	1d3b      	adds	r3, r7, #4
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	463b      	mov	r3, r7
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	441a      	add	r2, r3
 8009398:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800939c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80093b0:	1d3b      	adds	r3, r7, #4
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093b6:	1d3b      	adds	r3, r7, #4
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093be:	b29b      	uxth	r3, r3
 80093c0:	461a      	mov	r2, r3
 80093c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093c4:	4413      	add	r3, r2
 80093c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093c8:	463b      	mov	r3, r7
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	011a      	lsls	r2, r3, #4
 80093d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093d2:	4413      	add	r3, r2
 80093d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80093d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80093da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093de:	b29a      	uxth	r2, r3
 80093e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093e2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80093e4:	463b      	mov	r3, r7
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	891b      	ldrh	r3, [r3, #8]
 80093ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093ee:	463b      	mov	r3, r7
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	6959      	ldr	r1, [r3, #20]
 80093f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80093fe:	1d38      	adds	r0, r7, #4
 8009400:	6800      	ldr	r0, [r0, #0]
 8009402:	f001 f84a 	bl	800a49a <USB_WritePMA>
 8009406:	e319      	b.n	8009a3c <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8009408:	1d3b      	adds	r3, r7, #4
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	463b      	mov	r3, r7
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	4413      	add	r3, r2
 8009416:	881b      	ldrh	r3, [r3, #0]
 8009418:	b29b      	uxth	r3, r3
 800941a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800941e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009422:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009426:	1d3b      	adds	r3, r7, #4
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	463b      	mov	r3, r7
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	441a      	add	r2, r3
 8009434:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800943c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009440:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009448:	b29b      	uxth	r3, r3
 800944a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800944c:	463b      	mov	r3, r7
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6a1a      	ldr	r2, [r3, #32]
 8009452:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009456:	1ad2      	subs	r2, r2, r3
 8009458:	463b      	mov	r3, r7
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800945e:	1d3b      	adds	r3, r7, #4
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	463b      	mov	r3, r7
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	4413      	add	r3, r2
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	b29b      	uxth	r3, r3
 8009470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 8162 	beq.w	800973e <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800947a:	1d3b      	adds	r3, r7, #4
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009482:	463b      	mov	r3, r7
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	785b      	ldrb	r3, [r3, #1]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d164      	bne.n	8009556 <USB_EPStartXfer+0x926>
 800948c:	1d3b      	adds	r3, r7, #4
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	67bb      	str	r3, [r7, #120]	; 0x78
 8009492:	1d3b      	adds	r3, r7, #4
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800949a:	b29b      	uxth	r3, r3
 800949c:	461a      	mov	r2, r3
 800949e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094a0:	4413      	add	r3, r2
 80094a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80094a4:	463b      	mov	r3, r7
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	011a      	lsls	r2, r3, #4
 80094ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094ae:	4413      	add	r3, r2
 80094b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094b4:	677b      	str	r3, [r7, #116]	; 0x74
 80094b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d112      	bne.n	80094e4 <USB_EPStartXfer+0x8b4>
 80094be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094c0:	881b      	ldrh	r3, [r3, #0]
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094cc:	801a      	strh	r2, [r3, #0]
 80094ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094d0:	881b      	ldrh	r3, [r3, #0]
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094dc:	b29a      	uxth	r2, r3
 80094de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094e0:	801a      	strh	r2, [r3, #0]
 80094e2:	e057      	b.n	8009594 <USB_EPStartXfer+0x964>
 80094e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094e8:	2b3e      	cmp	r3, #62	; 0x3e
 80094ea:	d817      	bhi.n	800951c <USB_EPStartXfer+0x8ec>
 80094ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094f0:	085b      	lsrs	r3, r3, #1
 80094f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80094f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d004      	beq.n	800950c <USB_EPStartXfer+0x8dc>
 8009502:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009506:	3301      	adds	r3, #1
 8009508:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800950c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009510:	b29b      	uxth	r3, r3
 8009512:	029b      	lsls	r3, r3, #10
 8009514:	b29a      	uxth	r2, r3
 8009516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009518:	801a      	strh	r2, [r3, #0]
 800951a:	e03b      	b.n	8009594 <USB_EPStartXfer+0x964>
 800951c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009520:	095b      	lsrs	r3, r3, #5
 8009522:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800952a:	f003 031f 	and.w	r3, r3, #31
 800952e:	2b00      	cmp	r3, #0
 8009530:	d104      	bne.n	800953c <USB_EPStartXfer+0x90c>
 8009532:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009536:	3b01      	subs	r3, #1
 8009538:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800953c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009540:	b29b      	uxth	r3, r3
 8009542:	029b      	lsls	r3, r3, #10
 8009544:	b29b      	uxth	r3, r3
 8009546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800954a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800954e:	b29a      	uxth	r2, r3
 8009550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009552:	801a      	strh	r2, [r3, #0]
 8009554:	e01e      	b.n	8009594 <USB_EPStartXfer+0x964>
 8009556:	463b      	mov	r3, r7
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	785b      	ldrb	r3, [r3, #1]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d119      	bne.n	8009594 <USB_EPStartXfer+0x964>
 8009560:	1d3b      	adds	r3, r7, #4
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009568:	b29b      	uxth	r3, r3
 800956a:	461a      	mov	r2, r3
 800956c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009570:	4413      	add	r3, r2
 8009572:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009576:	463b      	mov	r3, r7
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	011a      	lsls	r2, r3, #4
 800957e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009582:	4413      	add	r3, r2
 8009584:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009588:	67fb      	str	r3, [r7, #124]	; 0x7c
 800958a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800958e:	b29a      	uxth	r2, r3
 8009590:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009592:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009594:	463b      	mov	r3, r7
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	895b      	ldrh	r3, [r3, #10]
 800959a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800959e:	463b      	mov	r3, r7
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	6959      	ldr	r1, [r3, #20]
 80095a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80095ae:	1d38      	adds	r0, r7, #4
 80095b0:	6800      	ldr	r0, [r0, #0]
 80095b2:	f000 ff72 	bl	800a49a <USB_WritePMA>
          ep->xfer_buff += len;
 80095b6:	463b      	mov	r3, r7
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	695a      	ldr	r2, [r3, #20]
 80095bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095c0:	441a      	add	r2, r3
 80095c2:	463b      	mov	r3, r7
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80095c8:	463b      	mov	r3, r7
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6a1a      	ldr	r2, [r3, #32]
 80095ce:	463b      	mov	r3, r7
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d909      	bls.n	80095ec <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80095d8:	463b      	mov	r3, r7
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6a1a      	ldr	r2, [r3, #32]
 80095de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095e2:	1ad2      	subs	r2, r2, r3
 80095e4:	463b      	mov	r3, r7
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	621a      	str	r2, [r3, #32]
 80095ea:	e008      	b.n	80095fe <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80095ec:	463b      	mov	r3, r7
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	6a1b      	ldr	r3, [r3, #32]
 80095f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80095f6:	463b      	mov	r3, r7
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2200      	movs	r2, #0
 80095fc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80095fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 821a 	beq.w	8009a3c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009608:	463b      	mov	r3, r7
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	785b      	ldrb	r3, [r3, #1]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d164      	bne.n	80096dc <USB_EPStartXfer+0xaac>
 8009612:	1d3b      	adds	r3, r7, #4
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	66bb      	str	r3, [r7, #104]	; 0x68
 8009618:	1d3b      	adds	r3, r7, #4
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009620:	b29b      	uxth	r3, r3
 8009622:	461a      	mov	r2, r3
 8009624:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009626:	4413      	add	r3, r2
 8009628:	66bb      	str	r3, [r7, #104]	; 0x68
 800962a:	463b      	mov	r3, r7
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	011a      	lsls	r2, r3, #4
 8009632:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009634:	4413      	add	r3, r2
 8009636:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800963a:	667b      	str	r3, [r7, #100]	; 0x64
 800963c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009640:	2b00      	cmp	r3, #0
 8009642:	d112      	bne.n	800966a <USB_EPStartXfer+0xa3a>
 8009644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009646:	881b      	ldrh	r3, [r3, #0]
 8009648:	b29b      	uxth	r3, r3
 800964a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800964e:	b29a      	uxth	r2, r3
 8009650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009652:	801a      	strh	r2, [r3, #0]
 8009654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009656:	881b      	ldrh	r3, [r3, #0]
 8009658:	b29b      	uxth	r3, r3
 800965a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800965e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009662:	b29a      	uxth	r2, r3
 8009664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009666:	801a      	strh	r2, [r3, #0]
 8009668:	e057      	b.n	800971a <USB_EPStartXfer+0xaea>
 800966a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800966e:	2b3e      	cmp	r3, #62	; 0x3e
 8009670:	d817      	bhi.n	80096a2 <USB_EPStartXfer+0xa72>
 8009672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009676:	085b      	lsrs	r3, r3, #1
 8009678:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800967c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009680:	f003 0301 	and.w	r3, r3, #1
 8009684:	2b00      	cmp	r3, #0
 8009686:	d004      	beq.n	8009692 <USB_EPStartXfer+0xa62>
 8009688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800968c:	3301      	adds	r3, #1
 800968e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009696:	b29b      	uxth	r3, r3
 8009698:	029b      	lsls	r3, r3, #10
 800969a:	b29a      	uxth	r2, r3
 800969c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800969e:	801a      	strh	r2, [r3, #0]
 80096a0:	e03b      	b.n	800971a <USB_EPStartXfer+0xaea>
 80096a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096a6:	095b      	lsrs	r3, r3, #5
 80096a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80096ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096b0:	f003 031f 	and.w	r3, r3, #31
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d104      	bne.n	80096c2 <USB_EPStartXfer+0xa92>
 80096b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096bc:	3b01      	subs	r3, #1
 80096be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80096c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	029b      	lsls	r3, r3, #10
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096d8:	801a      	strh	r2, [r3, #0]
 80096da:	e01e      	b.n	800971a <USB_EPStartXfer+0xaea>
 80096dc:	463b      	mov	r3, r7
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	785b      	ldrb	r3, [r3, #1]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d119      	bne.n	800971a <USB_EPStartXfer+0xaea>
 80096e6:	1d3b      	adds	r3, r7, #4
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	673b      	str	r3, [r7, #112]	; 0x70
 80096ec:	1d3b      	adds	r3, r7, #4
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	461a      	mov	r2, r3
 80096f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096fa:	4413      	add	r3, r2
 80096fc:	673b      	str	r3, [r7, #112]	; 0x70
 80096fe:	463b      	mov	r3, r7
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	011a      	lsls	r2, r3, #4
 8009706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009708:	4413      	add	r3, r2
 800970a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800970e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009714:	b29a      	uxth	r2, r3
 8009716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009718:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800971a:	463b      	mov	r3, r7
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	891b      	ldrh	r3, [r3, #8]
 8009720:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009724:	463b      	mov	r3, r7
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	6959      	ldr	r1, [r3, #20]
 800972a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800972e:	b29b      	uxth	r3, r3
 8009730:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009734:	1d38      	adds	r0, r7, #4
 8009736:	6800      	ldr	r0, [r0, #0]
 8009738:	f000 feaf 	bl	800a49a <USB_WritePMA>
 800973c:	e17e      	b.n	8009a3c <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800973e:	463b      	mov	r3, r7
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	785b      	ldrb	r3, [r3, #1]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d16f      	bne.n	8009828 <USB_EPStartXfer+0xbf8>
 8009748:	1d3b      	adds	r3, r7, #4
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009750:	1d3b      	adds	r3, r7, #4
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009758:	b29b      	uxth	r3, r3
 800975a:	461a      	mov	r2, r3
 800975c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009760:	4413      	add	r3, r2
 8009762:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009766:	463b      	mov	r3, r7
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	011a      	lsls	r2, r3, #4
 800976e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009772:	4413      	add	r3, r2
 8009774:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009778:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800977c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009780:	2b00      	cmp	r3, #0
 8009782:	d116      	bne.n	80097b2 <USB_EPStartXfer+0xb82>
 8009784:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009788:	881b      	ldrh	r3, [r3, #0]
 800978a:	b29b      	uxth	r3, r3
 800978c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009790:	b29a      	uxth	r2, r3
 8009792:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009796:	801a      	strh	r2, [r3, #0]
 8009798:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800979c:	881b      	ldrh	r3, [r3, #0]
 800979e:	b29b      	uxth	r3, r3
 80097a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097ae:	801a      	strh	r2, [r3, #0]
 80097b0:	e05f      	b.n	8009872 <USB_EPStartXfer+0xc42>
 80097b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097b6:	2b3e      	cmp	r3, #62	; 0x3e
 80097b8:	d818      	bhi.n	80097ec <USB_EPStartXfer+0xbbc>
 80097ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097be:	085b      	lsrs	r3, r3, #1
 80097c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80097c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097c8:	f003 0301 	and.w	r3, r3, #1
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d004      	beq.n	80097da <USB_EPStartXfer+0xbaa>
 80097d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80097d4:	3301      	adds	r3, #1
 80097d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80097da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80097de:	b29b      	uxth	r3, r3
 80097e0:	029b      	lsls	r3, r3, #10
 80097e2:	b29a      	uxth	r2, r3
 80097e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097e8:	801a      	strh	r2, [r3, #0]
 80097ea:	e042      	b.n	8009872 <USB_EPStartXfer+0xc42>
 80097ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097f0:	095b      	lsrs	r3, r3, #5
 80097f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80097f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097fa:	f003 031f 	and.w	r3, r3, #31
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d104      	bne.n	800980c <USB_EPStartXfer+0xbdc>
 8009802:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009806:	3b01      	subs	r3, #1
 8009808:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800980c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009810:	b29b      	uxth	r3, r3
 8009812:	029b      	lsls	r3, r3, #10
 8009814:	b29b      	uxth	r3, r3
 8009816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800981a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800981e:	b29a      	uxth	r2, r3
 8009820:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009824:	801a      	strh	r2, [r3, #0]
 8009826:	e024      	b.n	8009872 <USB_EPStartXfer+0xc42>
 8009828:	463b      	mov	r3, r7
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	785b      	ldrb	r3, [r3, #1]
 800982e:	2b01      	cmp	r3, #1
 8009830:	d11f      	bne.n	8009872 <USB_EPStartXfer+0xc42>
 8009832:	1d3b      	adds	r3, r7, #4
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800983a:	1d3b      	adds	r3, r7, #4
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009842:	b29b      	uxth	r3, r3
 8009844:	461a      	mov	r2, r3
 8009846:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800984a:	4413      	add	r3, r2
 800984c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009850:	463b      	mov	r3, r7
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	011a      	lsls	r2, r3, #4
 8009858:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800985c:	4413      	add	r3, r2
 800985e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800986a:	b29a      	uxth	r2, r3
 800986c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009870:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009872:	463b      	mov	r3, r7
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	891b      	ldrh	r3, [r3, #8]
 8009878:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800987c:	463b      	mov	r3, r7
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6959      	ldr	r1, [r3, #20]
 8009882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009886:	b29b      	uxth	r3, r3
 8009888:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800988c:	1d38      	adds	r0, r7, #4
 800988e:	6800      	ldr	r0, [r0, #0]
 8009890:	f000 fe03 	bl	800a49a <USB_WritePMA>
          ep->xfer_buff += len;
 8009894:	463b      	mov	r3, r7
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	695a      	ldr	r2, [r3, #20]
 800989a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800989e:	441a      	add	r2, r3
 80098a0:	463b      	mov	r3, r7
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80098a6:	463b      	mov	r3, r7
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	6a1a      	ldr	r2, [r3, #32]
 80098ac:	463b      	mov	r3, r7
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d909      	bls.n	80098ca <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80098b6:	463b      	mov	r3, r7
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	6a1a      	ldr	r2, [r3, #32]
 80098bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098c0:	1ad2      	subs	r2, r2, r3
 80098c2:	463b      	mov	r3, r7
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	621a      	str	r2, [r3, #32]
 80098c8:	e008      	b.n	80098dc <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80098ca:	463b      	mov	r3, r7
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	6a1b      	ldr	r3, [r3, #32]
 80098d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80098d4:	463b      	mov	r3, r7
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2200      	movs	r2, #0
 80098da:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80098dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f000 80ab 	beq.w	8009a3c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80098e6:	1d3b      	adds	r3, r7, #4
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098ee:	463b      	mov	r3, r7
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	785b      	ldrb	r3, [r3, #1]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d16f      	bne.n	80099d8 <USB_EPStartXfer+0xda8>
 80098f8:	1d3b      	adds	r3, r7, #4
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009900:	1d3b      	adds	r3, r7, #4
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009908:	b29b      	uxth	r3, r3
 800990a:	461a      	mov	r2, r3
 800990c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009910:	4413      	add	r3, r2
 8009912:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009916:	463b      	mov	r3, r7
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	011a      	lsls	r2, r3, #4
 800991e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009922:	4413      	add	r3, r2
 8009924:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800992c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009930:	2b00      	cmp	r3, #0
 8009932:	d116      	bne.n	8009962 <USB_EPStartXfer+0xd32>
 8009934:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	b29b      	uxth	r3, r3
 800993c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009940:	b29a      	uxth	r2, r3
 8009942:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009946:	801a      	strh	r2, [r3, #0]
 8009948:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800994c:	881b      	ldrh	r3, [r3, #0]
 800994e:	b29b      	uxth	r3, r3
 8009950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009958:	b29a      	uxth	r2, r3
 800995a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800995e:	801a      	strh	r2, [r3, #0]
 8009960:	e05b      	b.n	8009a1a <USB_EPStartXfer+0xdea>
 8009962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009966:	2b3e      	cmp	r3, #62	; 0x3e
 8009968:	d818      	bhi.n	800999c <USB_EPStartXfer+0xd6c>
 800996a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800996e:	085b      	lsrs	r3, r3, #1
 8009970:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009978:	f003 0301 	and.w	r3, r3, #1
 800997c:	2b00      	cmp	r3, #0
 800997e:	d004      	beq.n	800998a <USB_EPStartXfer+0xd5a>
 8009980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009984:	3301      	adds	r3, #1
 8009986:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800998a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800998e:	b29b      	uxth	r3, r3
 8009990:	029b      	lsls	r3, r3, #10
 8009992:	b29a      	uxth	r2, r3
 8009994:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009998:	801a      	strh	r2, [r3, #0]
 800999a:	e03e      	b.n	8009a1a <USB_EPStartXfer+0xdea>
 800999c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099a0:	095b      	lsrs	r3, r3, #5
 80099a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80099a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099aa:	f003 031f 	and.w	r3, r3, #31
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d104      	bne.n	80099bc <USB_EPStartXfer+0xd8c>
 80099b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099b6:	3b01      	subs	r3, #1
 80099b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80099bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	029b      	lsls	r3, r3, #10
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80099d4:	801a      	strh	r2, [r3, #0]
 80099d6:	e020      	b.n	8009a1a <USB_EPStartXfer+0xdea>
 80099d8:	463b      	mov	r3, r7
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	785b      	ldrb	r3, [r3, #1]
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d11b      	bne.n	8009a1a <USB_EPStartXfer+0xdea>
 80099e2:	1d3b      	adds	r3, r7, #4
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	461a      	mov	r2, r3
 80099ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099f2:	4413      	add	r3, r2
 80099f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80099f8:	463b      	mov	r3, r7
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	011a      	lsls	r2, r3, #4
 8009a00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a04:	4413      	add	r3, r2
 8009a06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009a1a:	463b      	mov	r3, r7
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	895b      	ldrh	r3, [r3, #10]
 8009a20:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a24:	463b      	mov	r3, r7
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6959      	ldr	r1, [r3, #20]
 8009a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009a34:	1d38      	adds	r0, r7, #4
 8009a36:	6800      	ldr	r0, [r0, #0]
 8009a38:	f000 fd2f 	bl	800a49a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009a3c:	1d3b      	adds	r3, r7, #4
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	463b      	mov	r3, r7
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	881b      	ldrh	r3, [r3, #0]
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	f107 020a 	add.w	r2, r7, #10
 8009a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a5a:	8013      	strh	r3, [r2, #0]
 8009a5c:	f107 030a 	add.w	r3, r7, #10
 8009a60:	f107 020a 	add.w	r2, r7, #10
 8009a64:	8812      	ldrh	r2, [r2, #0]
 8009a66:	f082 0210 	eor.w	r2, r2, #16
 8009a6a:	801a      	strh	r2, [r3, #0]
 8009a6c:	f107 030a 	add.w	r3, r7, #10
 8009a70:	f107 020a 	add.w	r2, r7, #10
 8009a74:	8812      	ldrh	r2, [r2, #0]
 8009a76:	f082 0220 	eor.w	r2, r2, #32
 8009a7a:	801a      	strh	r2, [r3, #0]
 8009a7c:	1d3b      	adds	r3, r7, #4
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	463b      	mov	r3, r7
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	441a      	add	r2, r3
 8009a8a:	f107 030a 	add.w	r3, r7, #10
 8009a8e:	881b      	ldrh	r3, [r3, #0]
 8009a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	8013      	strh	r3, [r2, #0]
 8009aa4:	e3b5      	b.n	800a212 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009aa6:	463b      	mov	r3, r7
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	7b1b      	ldrb	r3, [r3, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f040 8090 	bne.w	8009bd2 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009ab2:	463b      	mov	r3, r7
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	699a      	ldr	r2, [r3, #24]
 8009ab8:	463b      	mov	r3, r7
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d90e      	bls.n	8009ae0 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8009ac2:	463b      	mov	r3, r7
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	691b      	ldr	r3, [r3, #16]
 8009ac8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009acc:	463b      	mov	r3, r7
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	699a      	ldr	r2, [r3, #24]
 8009ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ad6:	1ad2      	subs	r2, r2, r3
 8009ad8:	463b      	mov	r3, r7
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	619a      	str	r2, [r3, #24]
 8009ade:	e008      	b.n	8009af2 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8009ae0:	463b      	mov	r3, r7
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009aea:	463b      	mov	r3, r7
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2200      	movs	r2, #0
 8009af0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009af2:	1d3b      	adds	r3, r7, #4
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009afa:	1d3b      	adds	r3, r7, #4
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	461a      	mov	r2, r3
 8009b06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b10:	463b      	mov	r3, r7
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	011a      	lsls	r2, r3, #4
 8009b18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b1c:	4413      	add	r3, r2
 8009b1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d116      	bne.n	8009b5c <USB_EPStartXfer+0xf2c>
 8009b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b32:	881b      	ldrh	r3, [r3, #0]
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b40:	801a      	strh	r2, [r3, #0]
 8009b42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b46:	881b      	ldrh	r3, [r3, #0]
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b58:	801a      	strh	r2, [r3, #0]
 8009b5a:	e32c      	b.n	800a1b6 <USB_EPStartXfer+0x1586>
 8009b5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b60:	2b3e      	cmp	r3, #62	; 0x3e
 8009b62:	d818      	bhi.n	8009b96 <USB_EPStartXfer+0xf66>
 8009b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b68:	085b      	lsrs	r3, r3, #1
 8009b6a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009b6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b72:	f003 0301 	and.w	r3, r3, #1
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d004      	beq.n	8009b84 <USB_EPStartXfer+0xf54>
 8009b7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009b7e:	3301      	adds	r3, #1
 8009b80:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009b84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	029b      	lsls	r3, r3, #10
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b92:	801a      	strh	r2, [r3, #0]
 8009b94:	e30f      	b.n	800a1b6 <USB_EPStartXfer+0x1586>
 8009b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b9a:	095b      	lsrs	r3, r3, #5
 8009b9c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ba4:	f003 031f 	and.w	r3, r3, #31
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d104      	bne.n	8009bb6 <USB_EPStartXfer+0xf86>
 8009bac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009bb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	029b      	lsls	r3, r3, #10
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bc8:	b29a      	uxth	r2, r3
 8009bca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bce:	801a      	strh	r2, [r3, #0]
 8009bd0:	e2f1      	b.n	800a1b6 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009bd2:	463b      	mov	r3, r7
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	78db      	ldrb	r3, [r3, #3]
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	f040 818f 	bne.w	8009efc <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009bde:	463b      	mov	r3, r7
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	785b      	ldrb	r3, [r3, #1]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d175      	bne.n	8009cd4 <USB_EPStartXfer+0x10a4>
 8009be8:	1d3b      	adds	r3, r7, #4
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009bf0:	1d3b      	adds	r3, r7, #4
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c00:	4413      	add	r3, r2
 8009c02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c06:	463b      	mov	r3, r7
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	011a      	lsls	r2, r3, #4
 8009c0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c12:	4413      	add	r3, r2
 8009c14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009c18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c1c:	463b      	mov	r3, r7
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d116      	bne.n	8009c54 <USB_EPStartXfer+0x1024>
 8009c26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c2a:	881b      	ldrh	r3, [r3, #0]
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c38:	801a      	strh	r2, [r3, #0]
 8009c3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c3e:	881b      	ldrh	r3, [r3, #0]
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c50:	801a      	strh	r2, [r3, #0]
 8009c52:	e065      	b.n	8009d20 <USB_EPStartXfer+0x10f0>
 8009c54:	463b      	mov	r3, r7
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	2b3e      	cmp	r3, #62	; 0x3e
 8009c5c:	d81a      	bhi.n	8009c94 <USB_EPStartXfer+0x1064>
 8009c5e:	463b      	mov	r3, r7
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	691b      	ldr	r3, [r3, #16]
 8009c64:	085b      	lsrs	r3, r3, #1
 8009c66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009c6a:	463b      	mov	r3, r7
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	f003 0301 	and.w	r3, r3, #1
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d004      	beq.n	8009c82 <USB_EPStartXfer+0x1052>
 8009c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	029b      	lsls	r3, r3, #10
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c90:	801a      	strh	r2, [r3, #0]
 8009c92:	e045      	b.n	8009d20 <USB_EPStartXfer+0x10f0>
 8009c94:	463b      	mov	r3, r7
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	095b      	lsrs	r3, r3, #5
 8009c9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009ca0:	463b      	mov	r3, r7
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	f003 031f 	and.w	r3, r3, #31
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d104      	bne.n	8009cb8 <USB_EPStartXfer+0x1088>
 8009cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	029b      	lsls	r3, r3, #10
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cd0:	801a      	strh	r2, [r3, #0]
 8009cd2:	e025      	b.n	8009d20 <USB_EPStartXfer+0x10f0>
 8009cd4:	463b      	mov	r3, r7
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	785b      	ldrb	r3, [r3, #1]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d120      	bne.n	8009d20 <USB_EPStartXfer+0x10f0>
 8009cde:	1d3b      	adds	r3, r7, #4
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009ce6:	1d3b      	adds	r3, r7, #4
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009cfc:	463b      	mov	r3, r7
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	011a      	lsls	r2, r3, #4
 8009d04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d08:	4413      	add	r3, r2
 8009d0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d12:	463b      	mov	r3, r7
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009d1e:	801a      	strh	r2, [r3, #0]
 8009d20:	1d3b      	adds	r3, r7, #4
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d28:	463b      	mov	r3, r7
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	785b      	ldrb	r3, [r3, #1]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d175      	bne.n	8009e1e <USB_EPStartXfer+0x11ee>
 8009d32:	1d3b      	adds	r3, r7, #4
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009d3a:	1d3b      	adds	r3, r7, #4
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	461a      	mov	r2, r3
 8009d46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009d4a:	4413      	add	r3, r2
 8009d4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009d50:	463b      	mov	r3, r7
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	011a      	lsls	r2, r3, #4
 8009d58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d66:	463b      	mov	r3, r7
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d116      	bne.n	8009d9e <USB_EPStartXfer+0x116e>
 8009d70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d74:	881b      	ldrh	r3, [r3, #0]
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d82:	801a      	strh	r2, [r3, #0]
 8009d84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d88:	881b      	ldrh	r3, [r3, #0]
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d9a:	801a      	strh	r2, [r3, #0]
 8009d9c:	e061      	b.n	8009e62 <USB_EPStartXfer+0x1232>
 8009d9e:	463b      	mov	r3, r7
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	2b3e      	cmp	r3, #62	; 0x3e
 8009da6:	d81a      	bhi.n	8009dde <USB_EPStartXfer+0x11ae>
 8009da8:	463b      	mov	r3, r7
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	085b      	lsrs	r3, r3, #1
 8009db0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009db4:	463b      	mov	r3, r7
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	f003 0301 	and.w	r3, r3, #1
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d004      	beq.n	8009dcc <USB_EPStartXfer+0x119c>
 8009dc2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009dcc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	029b      	lsls	r3, r3, #10
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009dda:	801a      	strh	r2, [r3, #0]
 8009ddc:	e041      	b.n	8009e62 <USB_EPStartXfer+0x1232>
 8009dde:	463b      	mov	r3, r7
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	095b      	lsrs	r3, r3, #5
 8009de6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009dea:	463b      	mov	r3, r7
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	f003 031f 	and.w	r3, r3, #31
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d104      	bne.n	8009e02 <USB_EPStartXfer+0x11d2>
 8009df8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009e02:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	029b      	lsls	r3, r3, #10
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e1a:	801a      	strh	r2, [r3, #0]
 8009e1c:	e021      	b.n	8009e62 <USB_EPStartXfer+0x1232>
 8009e1e:	463b      	mov	r3, r7
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	785b      	ldrb	r3, [r3, #1]
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d11c      	bne.n	8009e62 <USB_EPStartXfer+0x1232>
 8009e28:	1d3b      	adds	r3, r7, #4
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	461a      	mov	r2, r3
 8009e34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009e38:	4413      	add	r3, r2
 8009e3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e3e:	463b      	mov	r3, r7
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	011a      	lsls	r2, r3, #4
 8009e46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009e50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e54:	463b      	mov	r3, r7
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e60:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009e62:	463b      	mov	r3, r7
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	69db      	ldr	r3, [r3, #28]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f000 81a4 	beq.w	800a1b6 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009e6e:	1d3b      	adds	r3, r7, #4
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	463b      	mov	r3, r7
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4413      	add	r3, r2
 8009e7c:	881b      	ldrh	r3, [r3, #0]
 8009e7e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009e82:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d005      	beq.n	8009e9a <USB_EPStartXfer+0x126a>
 8009e8e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10d      	bne.n	8009eb6 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009e9a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f040 8187 	bne.w	800a1b6 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009ea8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f040 8180 	bne.w	800a1b6 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009eb6:	1d3b      	adds	r3, r7, #4
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	463b      	mov	r3, r7
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	4413      	add	r3, r2
 8009ec4:	881b      	ldrh	r3, [r3, #0]
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ed0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8009ed4:	1d3b      	adds	r3, r7, #4
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	463b      	mov	r3, r7
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	441a      	add	r2, r3
 8009ee2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8009ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ef2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	8013      	strh	r3, [r2, #0]
 8009efa:	e15c      	b.n	800a1b6 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009efc:	463b      	mov	r3, r7
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	78db      	ldrb	r3, [r3, #3]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	f040 8155 	bne.w	800a1b2 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009f08:	463b      	mov	r3, r7
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	699a      	ldr	r2, [r3, #24]
 8009f0e:	463b      	mov	r3, r7
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d90e      	bls.n	8009f36 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8009f18:	463b      	mov	r3, r7
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8009f22:	463b      	mov	r3, r7
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	699a      	ldr	r2, [r3, #24]
 8009f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f2c:	1ad2      	subs	r2, r2, r3
 8009f2e:	463b      	mov	r3, r7
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	619a      	str	r2, [r3, #24]
 8009f34:	e008      	b.n	8009f48 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8009f36:	463b      	mov	r3, r7
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	699b      	ldr	r3, [r3, #24]
 8009f3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8009f40:	463b      	mov	r3, r7
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2200      	movs	r2, #0
 8009f46:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009f48:	463b      	mov	r3, r7
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	785b      	ldrb	r3, [r3, #1]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d16f      	bne.n	800a032 <USB_EPStartXfer+0x1402>
 8009f52:	1d3b      	adds	r3, r7, #4
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009f5a:	1d3b      	adds	r3, r7, #4
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	461a      	mov	r2, r3
 8009f66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009f70:	463b      	mov	r3, r7
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	011a      	lsls	r2, r3, #4
 8009f78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009f7c:	4413      	add	r3, r2
 8009f7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d116      	bne.n	8009fbc <USB_EPStartXfer+0x138c>
 8009f8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009f92:	881b      	ldrh	r3, [r3, #0]
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f9a:	b29a      	uxth	r2, r3
 8009f9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009fa0:	801a      	strh	r2, [r3, #0]
 8009fa2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009fa6:	881b      	ldrh	r3, [r3, #0]
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009fb8:	801a      	strh	r2, [r3, #0]
 8009fba:	e05f      	b.n	800a07c <USB_EPStartXfer+0x144c>
 8009fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fc0:	2b3e      	cmp	r3, #62	; 0x3e
 8009fc2:	d818      	bhi.n	8009ff6 <USB_EPStartXfer+0x13c6>
 8009fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fc8:	085b      	lsrs	r3, r3, #1
 8009fca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fd2:	f003 0301 	and.w	r3, r3, #1
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d004      	beq.n	8009fe4 <USB_EPStartXfer+0x13b4>
 8009fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fde:	3301      	adds	r3, #1
 8009fe0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	029b      	lsls	r3, r3, #10
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ff2:	801a      	strh	r2, [r3, #0]
 8009ff4:	e042      	b.n	800a07c <USB_EPStartXfer+0x144c>
 8009ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ffa:	095b      	lsrs	r3, r3, #5
 8009ffc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a004:	f003 031f 	and.w	r3, r3, #31
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d104      	bne.n	800a016 <USB_EPStartXfer+0x13e6>
 800a00c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a010:	3b01      	subs	r3, #1
 800a012:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	029b      	lsls	r3, r3, #10
 800a01e:	b29b      	uxth	r3, r3
 800a020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a028:	b29a      	uxth	r2, r3
 800a02a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a02e:	801a      	strh	r2, [r3, #0]
 800a030:	e024      	b.n	800a07c <USB_EPStartXfer+0x144c>
 800a032:	463b      	mov	r3, r7
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	785b      	ldrb	r3, [r3, #1]
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d11f      	bne.n	800a07c <USB_EPStartXfer+0x144c>
 800a03c:	1d3b      	adds	r3, r7, #4
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a044:	1d3b      	adds	r3, r7, #4
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	461a      	mov	r2, r3
 800a050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a054:	4413      	add	r3, r2
 800a056:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a05a:	463b      	mov	r3, r7
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	011a      	lsls	r2, r3, #4
 800a062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a066:	4413      	add	r3, r2
 800a068:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a06c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a070:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a074:	b29a      	uxth	r2, r3
 800a076:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a07a:	801a      	strh	r2, [r3, #0]
 800a07c:	1d3b      	adds	r3, r7, #4
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a084:	463b      	mov	r3, r7
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	785b      	ldrb	r3, [r3, #1]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d16f      	bne.n	800a16e <USB_EPStartXfer+0x153e>
 800a08e:	1d3b      	adds	r3, r7, #4
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a096:	1d3b      	adds	r3, r7, #4
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0a6:	4413      	add	r3, r2
 800a0a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a0ac:	463b      	mov	r3, r7
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	011a      	lsls	r2, r3, #4
 800a0b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0b8:	4413      	add	r3, r2
 800a0ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a0be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a0c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d116      	bne.n	800a0f8 <USB_EPStartXfer+0x14c8>
 800a0ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0ce:	881b      	ldrh	r3, [r3, #0]
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0dc:	801a      	strh	r2, [r3, #0]
 800a0de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0e2:	881b      	ldrh	r3, [r3, #0]
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0ee:	b29a      	uxth	r2, r3
 800a0f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0f4:	801a      	strh	r2, [r3, #0]
 800a0f6:	e05e      	b.n	800a1b6 <USB_EPStartXfer+0x1586>
 800a0f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0fc:	2b3e      	cmp	r3, #62	; 0x3e
 800a0fe:	d818      	bhi.n	800a132 <USB_EPStartXfer+0x1502>
 800a100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a104:	085b      	lsrs	r3, r3, #1
 800a106:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a10a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a10e:	f003 0301 	and.w	r3, r3, #1
 800a112:	2b00      	cmp	r3, #0
 800a114:	d004      	beq.n	800a120 <USB_EPStartXfer+0x14f0>
 800a116:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a11a:	3301      	adds	r3, #1
 800a11c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a120:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a124:	b29b      	uxth	r3, r3
 800a126:	029b      	lsls	r3, r3, #10
 800a128:	b29a      	uxth	r2, r3
 800a12a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a12e:	801a      	strh	r2, [r3, #0]
 800a130:	e041      	b.n	800a1b6 <USB_EPStartXfer+0x1586>
 800a132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a136:	095b      	lsrs	r3, r3, #5
 800a138:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a13c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a140:	f003 031f 	and.w	r3, r3, #31
 800a144:	2b00      	cmp	r3, #0
 800a146:	d104      	bne.n	800a152 <USB_EPStartXfer+0x1522>
 800a148:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a14c:	3b01      	subs	r3, #1
 800a14e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a152:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a156:	b29b      	uxth	r3, r3
 800a158:	029b      	lsls	r3, r3, #10
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a164:	b29a      	uxth	r2, r3
 800a166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a16a:	801a      	strh	r2, [r3, #0]
 800a16c:	e023      	b.n	800a1b6 <USB_EPStartXfer+0x1586>
 800a16e:	463b      	mov	r3, r7
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	785b      	ldrb	r3, [r3, #1]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d11e      	bne.n	800a1b6 <USB_EPStartXfer+0x1586>
 800a178:	1d3b      	adds	r3, r7, #4
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a180:	b29b      	uxth	r3, r3
 800a182:	461a      	mov	r2, r3
 800a184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a188:	4413      	add	r3, r2
 800a18a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a18e:	463b      	mov	r3, r7
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	011a      	lsls	r2, r3, #4
 800a196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a19a:	4413      	add	r3, r2
 800a19c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a1a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a1a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1ae:	801a      	strh	r2, [r3, #0]
 800a1b0:	e001      	b.n	800a1b6 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e02e      	b.n	800a214 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a1b6:	1d3b      	adds	r3, r7, #4
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	463b      	mov	r3, r7
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	4413      	add	r3, r2
 800a1c4:	881b      	ldrh	r3, [r3, #0]
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1d0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a1d4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a1d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a1dc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a1e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a1e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a1e8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a1ec:	1d3b      	adds	r3, r7, #4
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	463b      	mov	r3, r7
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	441a      	add	r2, r3
 800a1fa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a1fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a20a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a20e:	b29b      	uxth	r3, r3
 800a210:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a212:	2300      	movs	r3, #0
}
 800a214:	4618      	mov	r0, r3
 800a216:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a21e:	b480      	push	{r7}
 800a220:	b085      	sub	sp, #20
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	785b      	ldrb	r3, [r3, #1]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d020      	beq.n	800a272 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	4413      	add	r3, r2
 800a23a:	881b      	ldrh	r3, [r3, #0]
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a246:	81bb      	strh	r3, [r7, #12]
 800a248:	89bb      	ldrh	r3, [r7, #12]
 800a24a:	f083 0310 	eor.w	r3, r3, #16
 800a24e:	81bb      	strh	r3, [r7, #12]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	441a      	add	r2, r3
 800a25a:	89bb      	ldrh	r3, [r7, #12]
 800a25c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	8013      	strh	r3, [r2, #0]
 800a270:	e01f      	b.n	800a2b2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	881b      	ldrh	r3, [r3, #0]
 800a27e:	b29b      	uxth	r3, r3
 800a280:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a288:	81fb      	strh	r3, [r7, #14]
 800a28a:	89fb      	ldrh	r3, [r7, #14]
 800a28c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a290:	81fb      	strh	r3, [r7, #14]
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	441a      	add	r2, r3
 800a29c:	89fb      	ldrh	r3, [r7, #14]
 800a29e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bc80      	pop	{r7}
 800a2bc:	4770      	bx	lr

0800a2be <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a2be:	b480      	push	{r7}
 800a2c0:	b087      	sub	sp, #28
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	7b1b      	ldrb	r3, [r3, #12]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f040 809d 	bne.w	800a40c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	785b      	ldrb	r3, [r3, #1]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d04c      	beq.n	800a374 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	4413      	add	r3, r2
 800a2e4:	881b      	ldrh	r3, [r3, #0]
 800a2e6:	823b      	strh	r3, [r7, #16]
 800a2e8:	8a3b      	ldrh	r3, [r7, #16]
 800a2ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d01b      	beq.n	800a32a <USB_EPClearStall+0x6c>
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	4413      	add	r3, r2
 800a2fc:	881b      	ldrh	r3, [r3, #0]
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a308:	81fb      	strh	r3, [r7, #14]
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	441a      	add	r2, r3
 800a314:	89fb      	ldrh	r3, [r7, #14]
 800a316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a31a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a31e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a322:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a326:	b29b      	uxth	r3, r3
 800a328:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	78db      	ldrb	r3, [r3, #3]
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d06c      	beq.n	800a40c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4413      	add	r3, r2
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	b29b      	uxth	r3, r3
 800a340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a348:	81bb      	strh	r3, [r7, #12]
 800a34a:	89bb      	ldrh	r3, [r7, #12]
 800a34c:	f083 0320 	eor.w	r3, r3, #32
 800a350:	81bb      	strh	r3, [r7, #12]
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	441a      	add	r2, r3
 800a35c:	89bb      	ldrh	r3, [r7, #12]
 800a35e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a36a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a36e:	b29b      	uxth	r3, r3
 800a370:	8013      	strh	r3, [r2, #0]
 800a372:	e04b      	b.n	800a40c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	881b      	ldrh	r3, [r3, #0]
 800a380:	82fb      	strh	r3, [r7, #22]
 800a382:	8afb      	ldrh	r3, [r7, #22]
 800a384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d01b      	beq.n	800a3c4 <USB_EPClearStall+0x106>
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	4413      	add	r3, r2
 800a396:	881b      	ldrh	r3, [r3, #0]
 800a398:	b29b      	uxth	r3, r3
 800a39a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a39e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3a2:	82bb      	strh	r3, [r7, #20]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	441a      	add	r2, r3
 800a3ae:	8abb      	ldrh	r3, [r7, #20]
 800a3b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a3bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	881b      	ldrh	r3, [r3, #0]
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3da:	827b      	strh	r3, [r7, #18]
 800a3dc:	8a7b      	ldrh	r3, [r7, #18]
 800a3de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a3e2:	827b      	strh	r3, [r7, #18]
 800a3e4:	8a7b      	ldrh	r3, [r7, #18]
 800a3e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a3ea:	827b      	strh	r3, [r7, #18]
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	441a      	add	r2, r3
 800a3f6:	8a7b      	ldrh	r3, [r7, #18]
 800a3f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a408:	b29b      	uxth	r3, r3
 800a40a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	371c      	adds	r7, #28
 800a412:	46bd      	mov	sp, r7
 800a414:	bc80      	pop	{r7}
 800a416:	4770      	bx	lr

0800a418 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	460b      	mov	r3, r1
 800a422:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a424:	78fb      	ldrb	r3, [r7, #3]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d103      	bne.n	800a432 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2280      	movs	r2, #128	; 0x80
 800a42e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	bc80      	pop	{r7}
 800a43c:	4770      	bx	lr

0800a43e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a43e:	b480      	push	{r7}
 800a440:	b083      	sub	sp, #12
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bc80      	pop	{r7}
 800a450:	4770      	bx	lr

0800a452 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a452:	b480      	push	{r7}
 800a454:	b083      	sub	sp, #12
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	bc80      	pop	{r7}
 800a464:	4770      	bx	lr

0800a466 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a466:	b480      	push	{r7}
 800a468:	b085      	sub	sp, #20
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a474:	b29b      	uxth	r3, r3
 800a476:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a478:	68fb      	ldr	r3, [r7, #12]
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3714      	adds	r7, #20
 800a47e:	46bd      	mov	sp, r7
 800a480:	bc80      	pop	{r7}
 800a482:	4770      	bx	lr

0800a484 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	bc80      	pop	{r7}
 800a498:	4770      	bx	lr

0800a49a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b08d      	sub	sp, #52	; 0x34
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	60f8      	str	r0, [r7, #12]
 800a4a2:	60b9      	str	r1, [r7, #8]
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	80fb      	strh	r3, [r7, #6]
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a4b0:	88bb      	ldrh	r3, [r7, #4]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	085b      	lsrs	r3, r3, #1
 800a4b6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a4c0:	88fb      	ldrh	r3, [r7, #6]
 800a4c2:	005a      	lsls	r2, r3, #1
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4cc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a4ce:	6a3b      	ldr	r3, [r7, #32]
 800a4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4d2:	e01e      	b.n	800a512 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4dc:	3301      	adds	r3, #1
 800a4de:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	021b      	lsls	r3, r3, #8
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fc:	3302      	adds	r3, #2
 800a4fe:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a502:	3302      	adds	r3, #2
 800a504:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a508:	3301      	adds	r3, #1
 800a50a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50e:	3b01      	subs	r3, #1
 800a510:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1dd      	bne.n	800a4d4 <USB_WritePMA+0x3a>
  }
}
 800a518:	bf00      	nop
 800a51a:	bf00      	nop
 800a51c:	3734      	adds	r7, #52	; 0x34
 800a51e:	46bd      	mov	sp, r7
 800a520:	bc80      	pop	{r7}
 800a522:	4770      	bx	lr

0800a524 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a524:	b480      	push	{r7}
 800a526:	b08b      	sub	sp, #44	; 0x2c
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	4611      	mov	r1, r2
 800a530:	461a      	mov	r2, r3
 800a532:	460b      	mov	r3, r1
 800a534:	80fb      	strh	r3, [r7, #6]
 800a536:	4613      	mov	r3, r2
 800a538:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a53a:	88bb      	ldrh	r3, [r7, #4]
 800a53c:	085b      	lsrs	r3, r3, #1
 800a53e:	b29b      	uxth	r3, r3
 800a540:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a54a:	88fb      	ldrh	r3, [r7, #6]
 800a54c:	005a      	lsls	r2, r3, #1
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	4413      	add	r3, r2
 800a552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a556:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	627b      	str	r3, [r7, #36]	; 0x24
 800a55c:	e01b      	b.n	800a596 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a55e:	6a3b      	ldr	r3, [r7, #32]
 800a560:	881b      	ldrh	r3, [r3, #0]
 800a562:	b29b      	uxth	r3, r3
 800a564:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a566:	6a3b      	ldr	r3, [r7, #32]
 800a568:	3302      	adds	r3, #2
 800a56a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	b2da      	uxtb	r2, r3
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	3301      	adds	r3, #1
 800a578:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	0a1b      	lsrs	r3, r3, #8
 800a57e:	b2da      	uxtb	r2, r3
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	3301      	adds	r3, #1
 800a588:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a58a:	6a3b      	ldr	r3, [r7, #32]
 800a58c:	3302      	adds	r3, #2
 800a58e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a592:	3b01      	subs	r3, #1
 800a594:	627b      	str	r3, [r7, #36]	; 0x24
 800a596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1e0      	bne.n	800a55e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a59c:	88bb      	ldrh	r3, [r7, #4]
 800a59e:	f003 0301 	and.w	r3, r3, #1
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d007      	beq.n	800a5b8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a5a8:	6a3b      	ldr	r3, [r7, #32]
 800a5aa:	881b      	ldrh	r3, [r3, #0]
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	b2da      	uxtb	r2, r3
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	701a      	strb	r2, [r3, #0]
  }
}
 800a5b8:	bf00      	nop
 800a5ba:	372c      	adds	r7, #44	; 0x2c
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bc80      	pop	{r7}
 800a5c0:	4770      	bx	lr

0800a5c2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b084      	sub	sp, #16
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	7c1b      	ldrb	r3, [r3, #16]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d115      	bne.n	800a606 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a5da:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5de:	2202      	movs	r2, #2
 800a5e0:	2181      	movs	r1, #129	; 0x81
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f001 fe99 	bl	800c31a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a5ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5f2:	2202      	movs	r2, #2
 800a5f4:	2101      	movs	r1, #1
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f001 fe8f 	bl	800c31a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a604:	e012      	b.n	800a62c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a606:	2340      	movs	r3, #64	; 0x40
 800a608:	2202      	movs	r2, #2
 800a60a:	2181      	movs	r1, #129	; 0x81
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f001 fe84 	bl	800c31a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2201      	movs	r2, #1
 800a616:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a618:	2340      	movs	r3, #64	; 0x40
 800a61a:	2202      	movs	r2, #2
 800a61c:	2101      	movs	r1, #1
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f001 fe7b 	bl	800c31a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a62c:	2308      	movs	r3, #8
 800a62e:	2203      	movs	r2, #3
 800a630:	2182      	movs	r1, #130	; 0x82
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f001 fe71 	bl	800c31a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a63e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a642:	f001 ff91 	bl	800c568 <USBD_static_malloc>
 800a646:	4602      	mov	r2, r0
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a654:	2b00      	cmp	r3, #0
 800a656:	d102      	bne.n	800a65e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a658:	2301      	movs	r3, #1
 800a65a:	73fb      	strb	r3, [r7, #15]
 800a65c:	e026      	b.n	800a6ac <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a664:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	2200      	movs	r2, #0
 800a674:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	7c1b      	ldrb	r3, [r3, #16]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d109      	bne.n	800a69c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a68e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a692:	2101      	movs	r1, #1
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f001 ff31 	bl	800c4fc <USBD_LL_PrepareReceive>
 800a69a:	e007      	b.n	800a6ac <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a6a2:	2340      	movs	r3, #64	; 0x40
 800a6a4:	2101      	movs	r1, #1
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f001 ff28 	bl	800c4fc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b084      	sub	sp, #16
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
 800a6be:	460b      	mov	r3, r1
 800a6c0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a6c6:	2181      	movs	r1, #129	; 0x81
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f001 fe4c 	bl	800c366 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a6d4:	2101      	movs	r1, #1
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f001 fe45 	bl	800c366 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a6e4:	2182      	movs	r1, #130	; 0x82
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f001 fe3d 	bl	800c366 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00e      	beq.n	800a71a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a70c:	4618      	mov	r0, r3
 800a70e:	f001 ff37 	bl	800c580 <USBD_static_free>
    pdev->pClassData = NULL;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a71a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a734:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a736:	2300      	movs	r3, #0
 800a738:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a73a:	2300      	movs	r3, #0
 800a73c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a73e:	2300      	movs	r3, #0
 800a740:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d039      	beq.n	800a7c2 <USBD_CDC_Setup+0x9e>
 800a74e:	2b20      	cmp	r3, #32
 800a750:	d17f      	bne.n	800a852 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	88db      	ldrh	r3, [r3, #6]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d029      	beq.n	800a7ae <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	b25b      	sxtb	r3, r3
 800a760:	2b00      	cmp	r3, #0
 800a762:	da11      	bge.n	800a788 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	683a      	ldr	r2, [r7, #0]
 800a76e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a770:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a772:	683a      	ldr	r2, [r7, #0]
 800a774:	88d2      	ldrh	r2, [r2, #6]
 800a776:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a778:	6939      	ldr	r1, [r7, #16]
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	88db      	ldrh	r3, [r3, #6]
 800a77e:	461a      	mov	r2, r3
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f001 fa0a 	bl	800bb9a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a786:	e06b      	b.n	800a860 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	785a      	ldrb	r2, [r3, #1]
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	88db      	ldrh	r3, [r3, #6]
 800a796:	b2da      	uxtb	r2, r3
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a79e:	6939      	ldr	r1, [r7, #16]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	88db      	ldrh	r3, [r3, #6]
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f001 fa25 	bl	800bbf6 <USBD_CtlPrepareRx>
      break;
 800a7ac:	e058      	b.n	800a860 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	683a      	ldr	r2, [r7, #0]
 800a7b8:	7850      	ldrb	r0, [r2, #1]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	6839      	ldr	r1, [r7, #0]
 800a7be:	4798      	blx	r3
      break;
 800a7c0:	e04e      	b.n	800a860 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	785b      	ldrb	r3, [r3, #1]
 800a7c6:	2b0b      	cmp	r3, #11
 800a7c8:	d02e      	beq.n	800a828 <USBD_CDC_Setup+0x104>
 800a7ca:	2b0b      	cmp	r3, #11
 800a7cc:	dc38      	bgt.n	800a840 <USBD_CDC_Setup+0x11c>
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d002      	beq.n	800a7d8 <USBD_CDC_Setup+0xb4>
 800a7d2:	2b0a      	cmp	r3, #10
 800a7d4:	d014      	beq.n	800a800 <USBD_CDC_Setup+0xdc>
 800a7d6:	e033      	b.n	800a840 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7de:	2b03      	cmp	r3, #3
 800a7e0:	d107      	bne.n	800a7f2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a7e2:	f107 030c 	add.w	r3, r7, #12
 800a7e6:	2202      	movs	r2, #2
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f001 f9d5 	bl	800bb9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a7f0:	e02e      	b.n	800a850 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a7f2:	6839      	ldr	r1, [r7, #0]
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f001 f966 	bl	800bac6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	75fb      	strb	r3, [r7, #23]
          break;
 800a7fe:	e027      	b.n	800a850 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a806:	2b03      	cmp	r3, #3
 800a808:	d107      	bne.n	800a81a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a80a:	f107 030f 	add.w	r3, r7, #15
 800a80e:	2201      	movs	r2, #1
 800a810:	4619      	mov	r1, r3
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f001 f9c1 	bl	800bb9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a818:	e01a      	b.n	800a850 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a81a:	6839      	ldr	r1, [r7, #0]
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f001 f952 	bl	800bac6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a822:	2302      	movs	r3, #2
 800a824:	75fb      	strb	r3, [r7, #23]
          break;
 800a826:	e013      	b.n	800a850 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a82e:	2b03      	cmp	r3, #3
 800a830:	d00d      	beq.n	800a84e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a832:	6839      	ldr	r1, [r7, #0]
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f001 f946 	bl	800bac6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a83a:	2302      	movs	r3, #2
 800a83c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a83e:	e006      	b.n	800a84e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f001 f93f 	bl	800bac6 <USBD_CtlError>
          ret = USBD_FAIL;
 800a848:	2302      	movs	r3, #2
 800a84a:	75fb      	strb	r3, [r7, #23]
          break;
 800a84c:	e000      	b.n	800a850 <USBD_CDC_Setup+0x12c>
          break;
 800a84e:	bf00      	nop
      }
      break;
 800a850:	e006      	b.n	800a860 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a852:	6839      	ldr	r1, [r7, #0]
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f001 f936 	bl	800bac6 <USBD_CtlError>
      ret = USBD_FAIL;
 800a85a:	2302      	movs	r3, #2
 800a85c:	75fb      	strb	r3, [r7, #23]
      break;
 800a85e:	bf00      	nop
  }

  return ret;
 800a860:	7dfb      	ldrb	r3, [r7, #23]
}
 800a862:	4618      	mov	r0, r3
 800a864:	3718      	adds	r7, #24
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b084      	sub	sp, #16
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	460b      	mov	r3, r1
 800a874:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a87c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a884:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d03a      	beq.n	800a906 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a890:	78fa      	ldrb	r2, [r7, #3]
 800a892:	6879      	ldr	r1, [r7, #4]
 800a894:	4613      	mov	r3, r2
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	4413      	add	r3, r2
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	440b      	add	r3, r1
 800a89e:	331c      	adds	r3, #28
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d029      	beq.n	800a8fa <USBD_CDC_DataIn+0x90>
 800a8a6:	78fa      	ldrb	r2, [r7, #3]
 800a8a8:	6879      	ldr	r1, [r7, #4]
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	4413      	add	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	440b      	add	r3, r1
 800a8b4:	331c      	adds	r3, #28
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	78f9      	ldrb	r1, [r7, #3]
 800a8ba:	68b8      	ldr	r0, [r7, #8]
 800a8bc:	460b      	mov	r3, r1
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	440b      	add	r3, r1
 800a8c2:	00db      	lsls	r3, r3, #3
 800a8c4:	4403      	add	r3, r0
 800a8c6:	3338      	adds	r3, #56	; 0x38
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	fbb2 f1f3 	udiv	r1, r2, r3
 800a8ce:	fb03 f301 	mul.w	r3, r3, r1
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d110      	bne.n	800a8fa <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a8d8:	78fa      	ldrb	r2, [r7, #3]
 800a8da:	6879      	ldr	r1, [r7, #4]
 800a8dc:	4613      	mov	r3, r2
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	4413      	add	r3, r2
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	440b      	add	r3, r1
 800a8e6:	331c      	adds	r3, #28
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a8ec:	78f9      	ldrb	r1, [r7, #3]
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f001 fddf 	bl	800c4b6 <USBD_LL_Transmit>
 800a8f8:	e003      	b.n	800a902 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a902:	2300      	movs	r3, #0
 800a904:	e000      	b.n	800a908 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a906:	2302      	movs	r3, #2
  }
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	460b      	mov	r3, r1
 800a91a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a922:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a924:	78fb      	ldrb	r3, [r7, #3]
 800a926:	4619      	mov	r1, r3
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f001 fe0a 	bl	800c542 <USBD_LL_GetRxDataSize>
 800a92e:	4602      	mov	r2, r0
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00d      	beq.n	800a95c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a954:	4611      	mov	r1, r2
 800a956:	4798      	blx	r3

    return USBD_OK;
 800a958:	2300      	movs	r3, #0
 800a95a:	e000      	b.n	800a95e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a95c:	2302      	movs	r3, #2
  }
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3710      	adds	r7, #16
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b084      	sub	sp, #16
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a974:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d015      	beq.n	800a9ac <USBD_CDC_EP0_RxReady+0x46>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a986:	2bff      	cmp	r3, #255	; 0xff
 800a988:	d010      	beq.n	800a9ac <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a998:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a99a:	68fa      	ldr	r2, [r7, #12]
 800a99c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a9a0:	b292      	uxth	r2, r2
 800a9a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	22ff      	movs	r2, #255	; 0xff
 800a9a8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
	...

0800a9b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2243      	movs	r2, #67	; 0x43
 800a9c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a9c6:	4b03      	ldr	r3, [pc, #12]	; (800a9d4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bc80      	pop	{r7}
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	200000a8 	.word	0x200000a8

0800a9d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2243      	movs	r2, #67	; 0x43
 800a9e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a9e6:	4b03      	ldr	r3, [pc, #12]	; (800a9f4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bc80      	pop	{r7}
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	20000064 	.word	0x20000064

0800a9f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2243      	movs	r2, #67	; 0x43
 800aa04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800aa06:	4b03      	ldr	r3, [pc, #12]	; (800aa14 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bc80      	pop	{r7}
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	200000ec 	.word	0x200000ec

0800aa18 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	220a      	movs	r2, #10
 800aa24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800aa26:	4b03      	ldr	r3, [pc, #12]	; (800aa34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bc80      	pop	{r7}
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	20000020 	.word	0x20000020

0800aa38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800aa42:	2302      	movs	r3, #2
 800aa44:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d005      	beq.n	800aa58 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	683a      	ldr	r2, [r7, #0]
 800aa50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800aa54:	2300      	movs	r3, #0
 800aa56:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800aa58:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bc80      	pop	{r7}
 800aa62:	4770      	bx	lr

0800aa64 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b087      	sub	sp, #28
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa78:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800aa82:	88fa      	ldrh	r2, [r7, #6]
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	371c      	adds	r7, #28
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bc80      	pop	{r7}
 800aa94:	4770      	bx	lr

0800aa96 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b085      	sub	sp, #20
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaa6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3714      	adds	r7, #20
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bc80      	pop	{r7}
 800aaba:	4770      	bx	lr

0800aabc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d01c      	beq.n	800ab10 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d115      	bne.n	800ab0c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	2181      	movs	r1, #129	; 0x81
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f001 fcd7 	bl	800c4b6 <USBD_LL_Transmit>

      return USBD_OK;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	e002      	b.n	800ab12 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e000      	b.n	800ab12 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800ab10:	2302      	movs	r3, #2
  }
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b084      	sub	sp, #16
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab28:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d017      	beq.n	800ab64 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	7c1b      	ldrb	r3, [r3, #16]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d109      	bne.n	800ab50 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab42:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab46:	2101      	movs	r1, #1
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f001 fcd7 	bl	800c4fc <USBD_LL_PrepareReceive>
 800ab4e:	e007      	b.n	800ab60 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab56:	2340      	movs	r3, #64	; 0x40
 800ab58:	2101      	movs	r1, #1
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f001 fcce 	bl	800c4fc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ab60:	2300      	movs	r3, #0
 800ab62:	e000      	b.n	800ab66 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ab64:	2302      	movs	r3, #2
  }
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3710      	adds	r7, #16
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b084      	sub	sp, #16
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	60f8      	str	r0, [r7, #12]
 800ab76:	60b9      	str	r1, [r7, #8]
 800ab78:	4613      	mov	r3, r2
 800ab7a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ab82:	2302      	movs	r3, #2
 800ab84:	e01a      	b.n	800abbc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d003      	beq.n	800ab98 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d003      	beq.n	800aba6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	68ba      	ldr	r2, [r7, #8]
 800aba2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2201      	movs	r2, #1
 800abaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	79fa      	ldrb	r2, [r7, #7]
 800abb2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f001 fb3b 	bl	800c230 <USBD_LL_Init>

  return USBD_OK;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800abce:	2300      	movs	r3, #0
 800abd0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d006      	beq.n	800abe6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	683a      	ldr	r2, [r7, #0]
 800abdc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800abe0:	2300      	movs	r3, #0
 800abe2:	73fb      	strb	r3, [r7, #15]
 800abe4:	e001      	b.n	800abea <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800abe6:	2302      	movs	r3, #2
 800abe8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800abea:	7bfb      	ldrb	r3, [r7, #15]
}
 800abec:	4618      	mov	r0, r3
 800abee:	3714      	adds	r7, #20
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bc80      	pop	{r7}
 800abf4:	4770      	bx	lr

0800abf6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b082      	sub	sp, #8
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f001 fb70 	bl	800c2e4 <USBD_LL_Start>

  return USBD_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ac0e:	b480      	push	{r7}
 800ac10:	b083      	sub	sp, #12
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	370c      	adds	r7, #12
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bc80      	pop	{r7}
 800ac20:	4770      	bx	lr

0800ac22 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b084      	sub	sp, #16
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ac2e:	2302      	movs	r3, #2
 800ac30:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00c      	beq.n	800ac56 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	78fa      	ldrb	r2, [r7, #3]
 800ac46:	4611      	mov	r1, r2
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	4798      	blx	r3
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d101      	bne.n	800ac56 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ac52:	2300      	movs	r3, #0
 800ac54:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ac56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	460b      	mov	r3, r1
 800ac6a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	78fa      	ldrb	r2, [r7, #3]
 800ac76:	4611      	mov	r1, r2
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	4798      	blx	r3

  return USBD_OK;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b082      	sub	sp, #8
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
 800ac8e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ac96:	6839      	ldr	r1, [r7, #0]
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f000 fed8 	bl	800ba4e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2201      	movs	r2, #1
 800aca2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800acac:	461a      	mov	r2, r3
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800acba:	f003 031f 	and.w	r3, r3, #31
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d016      	beq.n	800acf0 <USBD_LL_SetupStage+0x6a>
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	d81c      	bhi.n	800ad00 <USBD_LL_SetupStage+0x7a>
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d002      	beq.n	800acd0 <USBD_LL_SetupStage+0x4a>
 800acca:	2b01      	cmp	r3, #1
 800accc:	d008      	beq.n	800ace0 <USBD_LL_SetupStage+0x5a>
 800acce:	e017      	b.n	800ad00 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800acd6:	4619      	mov	r1, r3
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 f9cb 	bl	800b074 <USBD_StdDevReq>
      break;
 800acde:	e01a      	b.n	800ad16 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ace6:	4619      	mov	r1, r3
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 fa2d 	bl	800b148 <USBD_StdItfReq>
      break;
 800acee:	e012      	b.n	800ad16 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800acf6:	4619      	mov	r1, r3
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 fa6d 	bl	800b1d8 <USBD_StdEPReq>
      break;
 800acfe:	e00a      	b.n	800ad16 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ad06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f001 fb48 	bl	800c3a4 <USBD_LL_StallEP>
      break;
 800ad14:	bf00      	nop
  }

  return USBD_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3708      	adds	r7, #8
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b086      	sub	sp, #24
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	460b      	mov	r3, r1
 800ad2a:	607a      	str	r2, [r7, #4]
 800ad2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ad2e:	7afb      	ldrb	r3, [r7, #11]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d14b      	bne.n	800adcc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ad3a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad42:	2b03      	cmp	r3, #3
 800ad44:	d134      	bne.n	800adb0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	68da      	ldr	r2, [r3, #12]
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d919      	bls.n	800ad86 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	68da      	ldr	r2, [r3, #12]
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	1ad2      	subs	r2, r2, r3
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	68da      	ldr	r2, [r3, #12]
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d203      	bcs.n	800ad74 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	e002      	b.n	800ad7a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	6879      	ldr	r1, [r7, #4]
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	f000 ff57 	bl	800bc32 <USBD_CtlContinueRx>
 800ad84:	e038      	b.n	800adf8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00a      	beq.n	800ada8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ad98:	2b03      	cmp	r3, #3
 800ad9a:	d105      	bne.n	800ada8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ada2:	691b      	ldr	r3, [r3, #16]
 800ada4:	68f8      	ldr	r0, [r7, #12]
 800ada6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	f000 ff54 	bl	800bc56 <USBD_CtlSendStatus>
 800adae:	e023      	b.n	800adf8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800adb6:	2b05      	cmp	r3, #5
 800adb8:	d11e      	bne.n	800adf8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800adc2:	2100      	movs	r1, #0
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f001 faed 	bl	800c3a4 <USBD_LL_StallEP>
 800adca:	e015      	b.n	800adf8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800add2:	699b      	ldr	r3, [r3, #24]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00d      	beq.n	800adf4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800adde:	2b03      	cmp	r3, #3
 800ade0:	d108      	bne.n	800adf4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ade8:	699b      	ldr	r3, [r3, #24]
 800adea:	7afa      	ldrb	r2, [r7, #11]
 800adec:	4611      	mov	r1, r2
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	4798      	blx	r3
 800adf2:	e001      	b.n	800adf8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800adf4:	2302      	movs	r3, #2
 800adf6:	e000      	b.n	800adfa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3718      	adds	r7, #24
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b086      	sub	sp, #24
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	60f8      	str	r0, [r7, #12]
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	607a      	str	r2, [r7, #4]
 800ae0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ae10:	7afb      	ldrb	r3, [r7, #11]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d17f      	bne.n	800af16 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	3314      	adds	r3, #20
 800ae1a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	d15c      	bne.n	800aee0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	68da      	ldr	r2, [r3, #12]
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	691b      	ldr	r3, [r3, #16]
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d915      	bls.n	800ae5e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	68da      	ldr	r2, [r3, #12]
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	691b      	ldr	r3, [r3, #16]
 800ae3a:	1ad2      	subs	r2, r2, r3
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	461a      	mov	r2, r3
 800ae48:	6879      	ldr	r1, [r7, #4]
 800ae4a:	68f8      	ldr	r0, [r7, #12]
 800ae4c:	f000 fec1 	bl	800bbd2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae50:	2300      	movs	r3, #0
 800ae52:	2200      	movs	r2, #0
 800ae54:	2100      	movs	r1, #0
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f001 fb50 	bl	800c4fc <USBD_LL_PrepareReceive>
 800ae5c:	e04e      	b.n	800aefc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	6912      	ldr	r2, [r2, #16]
 800ae66:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae6a:	fb02 f201 	mul.w	r2, r2, r1
 800ae6e:	1a9b      	subs	r3, r3, r2
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d11c      	bne.n	800aeae <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	689a      	ldr	r2, [r3, #8]
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d316      	bcc.n	800aeae <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	689a      	ldr	r2, [r3, #8]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d20f      	bcs.n	800aeae <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ae8e:	2200      	movs	r2, #0
 800ae90:	2100      	movs	r1, #0
 800ae92:	68f8      	ldr	r0, [r7, #12]
 800ae94:	f000 fe9d 	bl	800bbd2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aea0:	2300      	movs	r3, #0
 800aea2:	2200      	movs	r2, #0
 800aea4:	2100      	movs	r1, #0
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f001 fb28 	bl	800c4fc <USBD_LL_PrepareReceive>
 800aeac:	e026      	b.n	800aefc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00a      	beq.n	800aed0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aec0:	2b03      	cmp	r3, #3
 800aec2:	d105      	bne.n	800aed0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800aed0:	2180      	movs	r1, #128	; 0x80
 800aed2:	68f8      	ldr	r0, [r7, #12]
 800aed4:	f001 fa66 	bl	800c3a4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f000 fecf 	bl	800bc7c <USBD_CtlReceiveStatus>
 800aede:	e00d      	b.n	800aefc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aee6:	2b04      	cmp	r3, #4
 800aee8:	d004      	beq.n	800aef4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d103      	bne.n	800aefc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800aef4:	2180      	movs	r1, #128	; 0x80
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f001 fa54 	bl	800c3a4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800af02:	2b01      	cmp	r3, #1
 800af04:	d11d      	bne.n	800af42 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800af06:	68f8      	ldr	r0, [r7, #12]
 800af08:	f7ff fe81 	bl	800ac0e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800af14:	e015      	b.n	800af42 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af1c:	695b      	ldr	r3, [r3, #20]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00d      	beq.n	800af3e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800af28:	2b03      	cmp	r3, #3
 800af2a:	d108      	bne.n	800af3e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af32:	695b      	ldr	r3, [r3, #20]
 800af34:	7afa      	ldrb	r2, [r7, #11]
 800af36:	4611      	mov	r1, r2
 800af38:	68f8      	ldr	r0, [r7, #12]
 800af3a:	4798      	blx	r3
 800af3c:	e001      	b.n	800af42 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800af3e:	2302      	movs	r3, #2
 800af40:	e000      	b.n	800af44 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800af42:	2300      	movs	r3, #0
}
 800af44:	4618      	mov	r0, r3
 800af46:	3718      	adds	r7, #24
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af54:	2340      	movs	r3, #64	; 0x40
 800af56:	2200      	movs	r2, #0
 800af58:	2100      	movs	r1, #0
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f001 f9dd 	bl	800c31a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2240      	movs	r2, #64	; 0x40
 800af6c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af70:	2340      	movs	r3, #64	; 0x40
 800af72:	2200      	movs	r2, #0
 800af74:	2180      	movs	r1, #128	; 0x80
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f001 f9cf 	bl	800c31a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2201      	movs	r2, #1
 800af80:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2240      	movs	r2, #64	; 0x40
 800af86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afac:	2b00      	cmp	r3, #0
 800afae:	d009      	beq.n	800afc4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	6852      	ldr	r2, [r2, #4]
 800afbc:	b2d2      	uxtb	r2, r2
 800afbe:	4611      	mov	r1, r2
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	4798      	blx	r3
  }

  return USBD_OK;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800afce:	b480      	push	{r7}
 800afd0:	b083      	sub	sp, #12
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
 800afd6:	460b      	mov	r3, r1
 800afd8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	78fa      	ldrb	r2, [r7, #3]
 800afde:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	370c      	adds	r7, #12
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bc80      	pop	{r7}
 800afea:	4770      	bx	lr

0800afec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2204      	movs	r2, #4
 800b004:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	370c      	adds	r7, #12
 800b00e:	46bd      	mov	sp, r7
 800b010:	bc80      	pop	{r7}
 800b012:	4770      	bx	lr

0800b014 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b022:	2b04      	cmp	r3, #4
 800b024:	d105      	bne.n	800b032 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b032:	2300      	movs	r3, #0
}
 800b034:	4618      	mov	r0, r3
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	bc80      	pop	{r7}
 800b03c:	4770      	bx	lr

0800b03e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b082      	sub	sp, #8
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b04c:	2b03      	cmp	r3, #3
 800b04e:	d10b      	bne.n	800b068 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b056:	69db      	ldr	r3, [r3, #28]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d005      	beq.n	800b068 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b062:	69db      	ldr	r3, [r3, #28]
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b068:	2300      	movs	r3, #0
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3708      	adds	r7, #8
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
	...

0800b074 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b07e:	2300      	movs	r3, #0
 800b080:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b08a:	2b40      	cmp	r3, #64	; 0x40
 800b08c:	d005      	beq.n	800b09a <USBD_StdDevReq+0x26>
 800b08e:	2b40      	cmp	r3, #64	; 0x40
 800b090:	d84f      	bhi.n	800b132 <USBD_StdDevReq+0xbe>
 800b092:	2b00      	cmp	r3, #0
 800b094:	d009      	beq.n	800b0aa <USBD_StdDevReq+0x36>
 800b096:	2b20      	cmp	r3, #32
 800b098:	d14b      	bne.n	800b132 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0a0:	689b      	ldr	r3, [r3, #8]
 800b0a2:	6839      	ldr	r1, [r7, #0]
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	4798      	blx	r3
      break;
 800b0a8:	e048      	b.n	800b13c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	785b      	ldrb	r3, [r3, #1]
 800b0ae:	2b09      	cmp	r3, #9
 800b0b0:	d839      	bhi.n	800b126 <USBD_StdDevReq+0xb2>
 800b0b2:	a201      	add	r2, pc, #4	; (adr r2, 800b0b8 <USBD_StdDevReq+0x44>)
 800b0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b8:	0800b109 	.word	0x0800b109
 800b0bc:	0800b11d 	.word	0x0800b11d
 800b0c0:	0800b127 	.word	0x0800b127
 800b0c4:	0800b113 	.word	0x0800b113
 800b0c8:	0800b127 	.word	0x0800b127
 800b0cc:	0800b0eb 	.word	0x0800b0eb
 800b0d0:	0800b0e1 	.word	0x0800b0e1
 800b0d4:	0800b127 	.word	0x0800b127
 800b0d8:	0800b0ff 	.word	0x0800b0ff
 800b0dc:	0800b0f5 	.word	0x0800b0f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b0e0:	6839      	ldr	r1, [r7, #0]
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f000 f9dc 	bl	800b4a0 <USBD_GetDescriptor>
          break;
 800b0e8:	e022      	b.n	800b130 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b0ea:	6839      	ldr	r1, [r7, #0]
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 fb3f 	bl	800b770 <USBD_SetAddress>
          break;
 800b0f2:	e01d      	b.n	800b130 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fb7e 	bl	800b7f8 <USBD_SetConfig>
          break;
 800b0fc:	e018      	b.n	800b130 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b0fe:	6839      	ldr	r1, [r7, #0]
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 fc07 	bl	800b914 <USBD_GetConfig>
          break;
 800b106:	e013      	b.n	800b130 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 fc37 	bl	800b97e <USBD_GetStatus>
          break;
 800b110:	e00e      	b.n	800b130 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b112:	6839      	ldr	r1, [r7, #0]
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 fc65 	bl	800b9e4 <USBD_SetFeature>
          break;
 800b11a:	e009      	b.n	800b130 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b11c:	6839      	ldr	r1, [r7, #0]
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 fc74 	bl	800ba0c <USBD_ClrFeature>
          break;
 800b124:	e004      	b.n	800b130 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b126:	6839      	ldr	r1, [r7, #0]
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 fccc 	bl	800bac6 <USBD_CtlError>
          break;
 800b12e:	bf00      	nop
      }
      break;
 800b130:	e004      	b.n	800b13c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b132:	6839      	ldr	r1, [r7, #0]
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 fcc6 	bl	800bac6 <USBD_CtlError>
      break;
 800b13a:	bf00      	nop
  }

  return ret;
 800b13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop

0800b148 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b152:	2300      	movs	r3, #0
 800b154:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b15e:	2b40      	cmp	r3, #64	; 0x40
 800b160:	d005      	beq.n	800b16e <USBD_StdItfReq+0x26>
 800b162:	2b40      	cmp	r3, #64	; 0x40
 800b164:	d82e      	bhi.n	800b1c4 <USBD_StdItfReq+0x7c>
 800b166:	2b00      	cmp	r3, #0
 800b168:	d001      	beq.n	800b16e <USBD_StdItfReq+0x26>
 800b16a:	2b20      	cmp	r3, #32
 800b16c:	d12a      	bne.n	800b1c4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b174:	3b01      	subs	r3, #1
 800b176:	2b02      	cmp	r3, #2
 800b178:	d81d      	bhi.n	800b1b6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	889b      	ldrh	r3, [r3, #4]
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	2b01      	cmp	r3, #1
 800b182:	d813      	bhi.n	800b1ac <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b18a:	689b      	ldr	r3, [r3, #8]
 800b18c:	6839      	ldr	r1, [r7, #0]
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	4798      	blx	r3
 800b192:	4603      	mov	r3, r0
 800b194:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	88db      	ldrh	r3, [r3, #6]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d110      	bne.n	800b1c0 <USBD_StdItfReq+0x78>
 800b19e:	7bfb      	ldrb	r3, [r7, #15]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10d      	bne.n	800b1c0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fd56 	bl	800bc56 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b1aa:	e009      	b.n	800b1c0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b1ac:	6839      	ldr	r1, [r7, #0]
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 fc89 	bl	800bac6 <USBD_CtlError>
          break;
 800b1b4:	e004      	b.n	800b1c0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b1b6:	6839      	ldr	r1, [r7, #0]
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 fc84 	bl	800bac6 <USBD_CtlError>
          break;
 800b1be:	e000      	b.n	800b1c2 <USBD_StdItfReq+0x7a>
          break;
 800b1c0:	bf00      	nop
      }
      break;
 800b1c2:	e004      	b.n	800b1ce <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b1c4:	6839      	ldr	r1, [r7, #0]
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 fc7d 	bl	800bac6 <USBD_CtlError>
      break;
 800b1cc:	bf00      	nop
  }

  return USBD_OK;
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	889b      	ldrh	r3, [r3, #4]
 800b1ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1f4:	2b40      	cmp	r3, #64	; 0x40
 800b1f6:	d007      	beq.n	800b208 <USBD_StdEPReq+0x30>
 800b1f8:	2b40      	cmp	r3, #64	; 0x40
 800b1fa:	f200 8146 	bhi.w	800b48a <USBD_StdEPReq+0x2b2>
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d00a      	beq.n	800b218 <USBD_StdEPReq+0x40>
 800b202:	2b20      	cmp	r3, #32
 800b204:	f040 8141 	bne.w	800b48a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	6839      	ldr	r1, [r7, #0]
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	4798      	blx	r3
      break;
 800b216:	e13d      	b.n	800b494 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b220:	2b20      	cmp	r3, #32
 800b222:	d10a      	bne.n	800b23a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	6839      	ldr	r1, [r7, #0]
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	4798      	blx	r3
 800b232:	4603      	mov	r3, r0
 800b234:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b236:	7bfb      	ldrb	r3, [r7, #15]
 800b238:	e12d      	b.n	800b496 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	785b      	ldrb	r3, [r3, #1]
 800b23e:	2b03      	cmp	r3, #3
 800b240:	d007      	beq.n	800b252 <USBD_StdEPReq+0x7a>
 800b242:	2b03      	cmp	r3, #3
 800b244:	f300 811b 	bgt.w	800b47e <USBD_StdEPReq+0x2a6>
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d072      	beq.n	800b332 <USBD_StdEPReq+0x15a>
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d03a      	beq.n	800b2c6 <USBD_StdEPReq+0xee>
 800b250:	e115      	b.n	800b47e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b258:	2b02      	cmp	r3, #2
 800b25a:	d002      	beq.n	800b262 <USBD_StdEPReq+0x8a>
 800b25c:	2b03      	cmp	r3, #3
 800b25e:	d015      	beq.n	800b28c <USBD_StdEPReq+0xb4>
 800b260:	e02b      	b.n	800b2ba <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b262:	7bbb      	ldrb	r3, [r7, #14]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d00c      	beq.n	800b282 <USBD_StdEPReq+0xaa>
 800b268:	7bbb      	ldrb	r3, [r7, #14]
 800b26a:	2b80      	cmp	r3, #128	; 0x80
 800b26c:	d009      	beq.n	800b282 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b26e:	7bbb      	ldrb	r3, [r7, #14]
 800b270:	4619      	mov	r1, r3
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f001 f896 	bl	800c3a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b278:	2180      	movs	r1, #128	; 0x80
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f001 f892 	bl	800c3a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b280:	e020      	b.n	800b2c4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b282:	6839      	ldr	r1, [r7, #0]
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 fc1e 	bl	800bac6 <USBD_CtlError>
              break;
 800b28a:	e01b      	b.n	800b2c4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	885b      	ldrh	r3, [r3, #2]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d10e      	bne.n	800b2b2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b294:	7bbb      	ldrb	r3, [r7, #14]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00b      	beq.n	800b2b2 <USBD_StdEPReq+0xda>
 800b29a:	7bbb      	ldrb	r3, [r7, #14]
 800b29c:	2b80      	cmp	r3, #128	; 0x80
 800b29e:	d008      	beq.n	800b2b2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	88db      	ldrh	r3, [r3, #6]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d104      	bne.n	800b2b2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b2a8:	7bbb      	ldrb	r3, [r7, #14]
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f001 f879 	bl	800c3a4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 fccf 	bl	800bc56 <USBD_CtlSendStatus>

              break;
 800b2b8:	e004      	b.n	800b2c4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b2ba:	6839      	ldr	r1, [r7, #0]
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 fc02 	bl	800bac6 <USBD_CtlError>
              break;
 800b2c2:	bf00      	nop
          }
          break;
 800b2c4:	e0e0      	b.n	800b488 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2cc:	2b02      	cmp	r3, #2
 800b2ce:	d002      	beq.n	800b2d6 <USBD_StdEPReq+0xfe>
 800b2d0:	2b03      	cmp	r3, #3
 800b2d2:	d015      	beq.n	800b300 <USBD_StdEPReq+0x128>
 800b2d4:	e026      	b.n	800b324 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2d6:	7bbb      	ldrb	r3, [r7, #14]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00c      	beq.n	800b2f6 <USBD_StdEPReq+0x11e>
 800b2dc:	7bbb      	ldrb	r3, [r7, #14]
 800b2de:	2b80      	cmp	r3, #128	; 0x80
 800b2e0:	d009      	beq.n	800b2f6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b2e2:	7bbb      	ldrb	r3, [r7, #14]
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f001 f85c 	bl	800c3a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b2ec:	2180      	movs	r1, #128	; 0x80
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f001 f858 	bl	800c3a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b2f4:	e01c      	b.n	800b330 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b2f6:	6839      	ldr	r1, [r7, #0]
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 fbe4 	bl	800bac6 <USBD_CtlError>
              break;
 800b2fe:	e017      	b.n	800b330 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	885b      	ldrh	r3, [r3, #2]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d112      	bne.n	800b32e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b308:	7bbb      	ldrb	r3, [r7, #14]
 800b30a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d004      	beq.n	800b31c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b312:	7bbb      	ldrb	r3, [r7, #14]
 800b314:	4619      	mov	r1, r3
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f001 f863 	bl	800c3e2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 fc9a 	bl	800bc56 <USBD_CtlSendStatus>
              }
              break;
 800b322:	e004      	b.n	800b32e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b324:	6839      	ldr	r1, [r7, #0]
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 fbcd 	bl	800bac6 <USBD_CtlError>
              break;
 800b32c:	e000      	b.n	800b330 <USBD_StdEPReq+0x158>
              break;
 800b32e:	bf00      	nop
          }
          break;
 800b330:	e0aa      	b.n	800b488 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b338:	2b02      	cmp	r3, #2
 800b33a:	d002      	beq.n	800b342 <USBD_StdEPReq+0x16a>
 800b33c:	2b03      	cmp	r3, #3
 800b33e:	d032      	beq.n	800b3a6 <USBD_StdEPReq+0x1ce>
 800b340:	e097      	b.n	800b472 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b342:	7bbb      	ldrb	r3, [r7, #14]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d007      	beq.n	800b358 <USBD_StdEPReq+0x180>
 800b348:	7bbb      	ldrb	r3, [r7, #14]
 800b34a:	2b80      	cmp	r3, #128	; 0x80
 800b34c:	d004      	beq.n	800b358 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b34e:	6839      	ldr	r1, [r7, #0]
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 fbb8 	bl	800bac6 <USBD_CtlError>
                break;
 800b356:	e091      	b.n	800b47c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	da0b      	bge.n	800b378 <USBD_StdEPReq+0x1a0>
 800b360:	7bbb      	ldrb	r3, [r7, #14]
 800b362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b366:	4613      	mov	r3, r2
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	4413      	add	r3, r2
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	3310      	adds	r3, #16
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	4413      	add	r3, r2
 800b374:	3304      	adds	r3, #4
 800b376:	e00b      	b.n	800b390 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b378:	7bbb      	ldrb	r3, [r7, #14]
 800b37a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b37e:	4613      	mov	r3, r2
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4413      	add	r3, r2
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	4413      	add	r3, r2
 800b38e:	3304      	adds	r3, #4
 800b390:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	2200      	movs	r2, #0
 800b396:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	2202      	movs	r2, #2
 800b39c:	4619      	mov	r1, r3
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 fbfb 	bl	800bb9a <USBD_CtlSendData>
              break;
 800b3a4:	e06a      	b.n	800b47c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b3a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	da11      	bge.n	800b3d2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b3ae:	7bbb      	ldrb	r3, [r7, #14]
 800b3b0:	f003 020f 	and.w	r2, r3, #15
 800b3b4:	6879      	ldr	r1, [r7, #4]
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	4413      	add	r3, r2
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	440b      	add	r3, r1
 800b3c0:	3318      	adds	r3, #24
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d117      	bne.n	800b3f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b3c8:	6839      	ldr	r1, [r7, #0]
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 fb7b 	bl	800bac6 <USBD_CtlError>
                  break;
 800b3d0:	e054      	b.n	800b47c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b3d2:	7bbb      	ldrb	r3, [r7, #14]
 800b3d4:	f003 020f 	and.w	r2, r3, #15
 800b3d8:	6879      	ldr	r1, [r7, #4]
 800b3da:	4613      	mov	r3, r2
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	4413      	add	r3, r2
 800b3e0:	009b      	lsls	r3, r3, #2
 800b3e2:	440b      	add	r3, r1
 800b3e4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d104      	bne.n	800b3f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b3ee:	6839      	ldr	r1, [r7, #0]
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 fb68 	bl	800bac6 <USBD_CtlError>
                  break;
 800b3f6:	e041      	b.n	800b47c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	da0b      	bge.n	800b418 <USBD_StdEPReq+0x240>
 800b400:	7bbb      	ldrb	r3, [r7, #14]
 800b402:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b406:	4613      	mov	r3, r2
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	4413      	add	r3, r2
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	3310      	adds	r3, #16
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	4413      	add	r3, r2
 800b414:	3304      	adds	r3, #4
 800b416:	e00b      	b.n	800b430 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b418:	7bbb      	ldrb	r3, [r7, #14]
 800b41a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b41e:	4613      	mov	r3, r2
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	4413      	add	r3, r2
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	4413      	add	r3, r2
 800b42e:	3304      	adds	r3, #4
 800b430:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b432:	7bbb      	ldrb	r3, [r7, #14]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d002      	beq.n	800b43e <USBD_StdEPReq+0x266>
 800b438:	7bbb      	ldrb	r3, [r7, #14]
 800b43a:	2b80      	cmp	r3, #128	; 0x80
 800b43c:	d103      	bne.n	800b446 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	2200      	movs	r2, #0
 800b442:	601a      	str	r2, [r3, #0]
 800b444:	e00e      	b.n	800b464 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b446:	7bbb      	ldrb	r3, [r7, #14]
 800b448:	4619      	mov	r1, r3
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 ffe8 	bl	800c420 <USBD_LL_IsStallEP>
 800b450:	4603      	mov	r3, r0
 800b452:	2b00      	cmp	r3, #0
 800b454:	d003      	beq.n	800b45e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	2201      	movs	r2, #1
 800b45a:	601a      	str	r2, [r3, #0]
 800b45c:	e002      	b.n	800b464 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	2200      	movs	r2, #0
 800b462:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	2202      	movs	r2, #2
 800b468:	4619      	mov	r1, r3
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 fb95 	bl	800bb9a <USBD_CtlSendData>
              break;
 800b470:	e004      	b.n	800b47c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b472:	6839      	ldr	r1, [r7, #0]
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 fb26 	bl	800bac6 <USBD_CtlError>
              break;
 800b47a:	bf00      	nop
          }
          break;
 800b47c:	e004      	b.n	800b488 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b47e:	6839      	ldr	r1, [r7, #0]
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 fb20 	bl	800bac6 <USBD_CtlError>
          break;
 800b486:	bf00      	nop
      }
      break;
 800b488:	e004      	b.n	800b494 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b48a:	6839      	ldr	r1, [r7, #0]
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 fb1a 	bl	800bac6 <USBD_CtlError>
      break;
 800b492:	bf00      	nop
  }

  return ret;
 800b494:	7bfb      	ldrb	r3, [r7, #15]
}
 800b496:	4618      	mov	r0, r3
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
	...

0800b4a0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	885b      	ldrh	r3, [r3, #2]
 800b4ba:	0a1b      	lsrs	r3, r3, #8
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	2b06      	cmp	r3, #6
 800b4c2:	f200 8128 	bhi.w	800b716 <USBD_GetDescriptor+0x276>
 800b4c6:	a201      	add	r2, pc, #4	; (adr r2, 800b4cc <USBD_GetDescriptor+0x2c>)
 800b4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4cc:	0800b4e9 	.word	0x0800b4e9
 800b4d0:	0800b501 	.word	0x0800b501
 800b4d4:	0800b541 	.word	0x0800b541
 800b4d8:	0800b717 	.word	0x0800b717
 800b4dc:	0800b717 	.word	0x0800b717
 800b4e0:	0800b6b7 	.word	0x0800b6b7
 800b4e4:	0800b6e3 	.word	0x0800b6e3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	7c12      	ldrb	r2, [r2, #16]
 800b4f4:	f107 0108 	add.w	r1, r7, #8
 800b4f8:	4610      	mov	r0, r2
 800b4fa:	4798      	blx	r3
 800b4fc:	60f8      	str	r0, [r7, #12]
      break;
 800b4fe:	e112      	b.n	800b726 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	7c1b      	ldrb	r3, [r3, #16]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d10d      	bne.n	800b524 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b50e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b510:	f107 0208 	add.w	r2, r7, #8
 800b514:	4610      	mov	r0, r2
 800b516:	4798      	blx	r3
 800b518:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	3301      	adds	r3, #1
 800b51e:	2202      	movs	r2, #2
 800b520:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b522:	e100      	b.n	800b726 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b52c:	f107 0208 	add.w	r2, r7, #8
 800b530:	4610      	mov	r0, r2
 800b532:	4798      	blx	r3
 800b534:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	3301      	adds	r3, #1
 800b53a:	2202      	movs	r2, #2
 800b53c:	701a      	strb	r2, [r3, #0]
      break;
 800b53e:	e0f2      	b.n	800b726 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	885b      	ldrh	r3, [r3, #2]
 800b544:	b2db      	uxtb	r3, r3
 800b546:	2b05      	cmp	r3, #5
 800b548:	f200 80ac 	bhi.w	800b6a4 <USBD_GetDescriptor+0x204>
 800b54c:	a201      	add	r2, pc, #4	; (adr r2, 800b554 <USBD_GetDescriptor+0xb4>)
 800b54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b552:	bf00      	nop
 800b554:	0800b56d 	.word	0x0800b56d
 800b558:	0800b5a1 	.word	0x0800b5a1
 800b55c:	0800b5d5 	.word	0x0800b5d5
 800b560:	0800b609 	.word	0x0800b609
 800b564:	0800b63d 	.word	0x0800b63d
 800b568:	0800b671 	.word	0x0800b671
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00b      	beq.n	800b590 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	7c12      	ldrb	r2, [r2, #16]
 800b584:	f107 0108 	add.w	r1, r7, #8
 800b588:	4610      	mov	r0, r2
 800b58a:	4798      	blx	r3
 800b58c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b58e:	e091      	b.n	800b6b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b590:	6839      	ldr	r1, [r7, #0]
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 fa97 	bl	800bac6 <USBD_CtlError>
            err++;
 800b598:	7afb      	ldrb	r3, [r7, #11]
 800b59a:	3301      	adds	r3, #1
 800b59c:	72fb      	strb	r3, [r7, #11]
          break;
 800b59e:	e089      	b.n	800b6b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00b      	beq.n	800b5c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	7c12      	ldrb	r2, [r2, #16]
 800b5b8:	f107 0108 	add.w	r1, r7, #8
 800b5bc:	4610      	mov	r0, r2
 800b5be:	4798      	blx	r3
 800b5c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5c2:	e077      	b.n	800b6b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5c4:	6839      	ldr	r1, [r7, #0]
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 fa7d 	bl	800bac6 <USBD_CtlError>
            err++;
 800b5cc:	7afb      	ldrb	r3, [r7, #11]
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b5d2:	e06f      	b.n	800b6b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00b      	beq.n	800b5f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	7c12      	ldrb	r2, [r2, #16]
 800b5ec:	f107 0108 	add.w	r1, r7, #8
 800b5f0:	4610      	mov	r0, r2
 800b5f2:	4798      	blx	r3
 800b5f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5f6:	e05d      	b.n	800b6b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5f8:	6839      	ldr	r1, [r7, #0]
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 fa63 	bl	800bac6 <USBD_CtlError>
            err++;
 800b600:	7afb      	ldrb	r3, [r7, #11]
 800b602:	3301      	adds	r3, #1
 800b604:	72fb      	strb	r3, [r7, #11]
          break;
 800b606:	e055      	b.n	800b6b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b60e:	691b      	ldr	r3, [r3, #16]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d00b      	beq.n	800b62c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b61a:	691b      	ldr	r3, [r3, #16]
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	7c12      	ldrb	r2, [r2, #16]
 800b620:	f107 0108 	add.w	r1, r7, #8
 800b624:	4610      	mov	r0, r2
 800b626:	4798      	blx	r3
 800b628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b62a:	e043      	b.n	800b6b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b62c:	6839      	ldr	r1, [r7, #0]
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 fa49 	bl	800bac6 <USBD_CtlError>
            err++;
 800b634:	7afb      	ldrb	r3, [r7, #11]
 800b636:	3301      	adds	r3, #1
 800b638:	72fb      	strb	r3, [r7, #11]
          break;
 800b63a:	e03b      	b.n	800b6b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b642:	695b      	ldr	r3, [r3, #20]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d00b      	beq.n	800b660 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b64e:	695b      	ldr	r3, [r3, #20]
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	7c12      	ldrb	r2, [r2, #16]
 800b654:	f107 0108 	add.w	r1, r7, #8
 800b658:	4610      	mov	r0, r2
 800b65a:	4798      	blx	r3
 800b65c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b65e:	e029      	b.n	800b6b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b660:	6839      	ldr	r1, [r7, #0]
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fa2f 	bl	800bac6 <USBD_CtlError>
            err++;
 800b668:	7afb      	ldrb	r3, [r7, #11]
 800b66a:	3301      	adds	r3, #1
 800b66c:	72fb      	strb	r3, [r7, #11]
          break;
 800b66e:	e021      	b.n	800b6b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b676:	699b      	ldr	r3, [r3, #24]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d00b      	beq.n	800b694 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b682:	699b      	ldr	r3, [r3, #24]
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	7c12      	ldrb	r2, [r2, #16]
 800b688:	f107 0108 	add.w	r1, r7, #8
 800b68c:	4610      	mov	r0, r2
 800b68e:	4798      	blx	r3
 800b690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b692:	e00f      	b.n	800b6b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b694:	6839      	ldr	r1, [r7, #0]
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 fa15 	bl	800bac6 <USBD_CtlError>
            err++;
 800b69c:	7afb      	ldrb	r3, [r7, #11]
 800b69e:	3301      	adds	r3, #1
 800b6a0:	72fb      	strb	r3, [r7, #11]
          break;
 800b6a2:	e007      	b.n	800b6b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b6a4:	6839      	ldr	r1, [r7, #0]
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 fa0d 	bl	800bac6 <USBD_CtlError>
          err++;
 800b6ac:	7afb      	ldrb	r3, [r7, #11]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b6b2:	e038      	b.n	800b726 <USBD_GetDescriptor+0x286>
 800b6b4:	e037      	b.n	800b726 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	7c1b      	ldrb	r3, [r3, #16]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d109      	bne.n	800b6d2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6c6:	f107 0208 	add.w	r2, r7, #8
 800b6ca:	4610      	mov	r0, r2
 800b6cc:	4798      	blx	r3
 800b6ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6d0:	e029      	b.n	800b726 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b6d2:	6839      	ldr	r1, [r7, #0]
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 f9f6 	bl	800bac6 <USBD_CtlError>
        err++;
 800b6da:	7afb      	ldrb	r3, [r7, #11]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	72fb      	strb	r3, [r7, #11]
      break;
 800b6e0:	e021      	b.n	800b726 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	7c1b      	ldrb	r3, [r3, #16]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d10d      	bne.n	800b706 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6f2:	f107 0208 	add.w	r2, r7, #8
 800b6f6:	4610      	mov	r0, r2
 800b6f8:	4798      	blx	r3
 800b6fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	3301      	adds	r3, #1
 800b700:	2207      	movs	r2, #7
 800b702:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b704:	e00f      	b.n	800b726 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 f9dc 	bl	800bac6 <USBD_CtlError>
        err++;
 800b70e:	7afb      	ldrb	r3, [r7, #11]
 800b710:	3301      	adds	r3, #1
 800b712:	72fb      	strb	r3, [r7, #11]
      break;
 800b714:	e007      	b.n	800b726 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b716:	6839      	ldr	r1, [r7, #0]
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 f9d4 	bl	800bac6 <USBD_CtlError>
      err++;
 800b71e:	7afb      	ldrb	r3, [r7, #11]
 800b720:	3301      	adds	r3, #1
 800b722:	72fb      	strb	r3, [r7, #11]
      break;
 800b724:	bf00      	nop
  }

  if (err != 0U)
 800b726:	7afb      	ldrb	r3, [r7, #11]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d11c      	bne.n	800b766 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b72c:	893b      	ldrh	r3, [r7, #8]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d011      	beq.n	800b756 <USBD_GetDescriptor+0x2b6>
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	88db      	ldrh	r3, [r3, #6]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00d      	beq.n	800b756 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	88da      	ldrh	r2, [r3, #6]
 800b73e:	893b      	ldrh	r3, [r7, #8]
 800b740:	4293      	cmp	r3, r2
 800b742:	bf28      	it	cs
 800b744:	4613      	movcs	r3, r2
 800b746:	b29b      	uxth	r3, r3
 800b748:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b74a:	893b      	ldrh	r3, [r7, #8]
 800b74c:	461a      	mov	r2, r3
 800b74e:	68f9      	ldr	r1, [r7, #12]
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 fa22 	bl	800bb9a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	88db      	ldrh	r3, [r3, #6]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d104      	bne.n	800b768 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 fa79 	bl	800bc56 <USBD_CtlSendStatus>
 800b764:	e000      	b.n	800b768 <USBD_GetDescriptor+0x2c8>
    return;
 800b766:	bf00      	nop
    }
  }
}
 800b768:	3710      	adds	r7, #16
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop

0800b770 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	889b      	ldrh	r3, [r3, #4]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d130      	bne.n	800b7e4 <USBD_SetAddress+0x74>
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	88db      	ldrh	r3, [r3, #6]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d12c      	bne.n	800b7e4 <USBD_SetAddress+0x74>
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	885b      	ldrh	r3, [r3, #2]
 800b78e:	2b7f      	cmp	r3, #127	; 0x7f
 800b790:	d828      	bhi.n	800b7e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	885b      	ldrh	r3, [r3, #2]
 800b796:	b2db      	uxtb	r3, r3
 800b798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b79c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7a4:	2b03      	cmp	r3, #3
 800b7a6:	d104      	bne.n	800b7b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b7a8:	6839      	ldr	r1, [r7, #0]
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 f98b 	bl	800bac6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7b0:	e01d      	b.n	800b7ee <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	7bfa      	ldrb	r2, [r7, #15]
 800b7b6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b7ba:	7bfb      	ldrb	r3, [r7, #15]
 800b7bc:	4619      	mov	r1, r3
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 fe5a 	bl	800c478 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 fa46 	bl	800bc56 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b7ca:	7bfb      	ldrb	r3, [r7, #15]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d004      	beq.n	800b7da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2202      	movs	r2, #2
 800b7d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7d8:	e009      	b.n	800b7ee <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7e2:	e004      	b.n	800b7ee <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b7e4:	6839      	ldr	r1, [r7, #0]
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 f96d 	bl	800bac6 <USBD_CtlError>
  }
}
 800b7ec:	bf00      	nop
 800b7ee:	bf00      	nop
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
	...

0800b7f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	885b      	ldrh	r3, [r3, #2]
 800b806:	b2da      	uxtb	r2, r3
 800b808:	4b41      	ldr	r3, [pc, #260]	; (800b910 <USBD_SetConfig+0x118>)
 800b80a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b80c:	4b40      	ldr	r3, [pc, #256]	; (800b910 <USBD_SetConfig+0x118>)
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	2b01      	cmp	r3, #1
 800b812:	d904      	bls.n	800b81e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b814:	6839      	ldr	r1, [r7, #0]
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 f955 	bl	800bac6 <USBD_CtlError>
 800b81c:	e075      	b.n	800b90a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b824:	2b02      	cmp	r3, #2
 800b826:	d002      	beq.n	800b82e <USBD_SetConfig+0x36>
 800b828:	2b03      	cmp	r3, #3
 800b82a:	d023      	beq.n	800b874 <USBD_SetConfig+0x7c>
 800b82c:	e062      	b.n	800b8f4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b82e:	4b38      	ldr	r3, [pc, #224]	; (800b910 <USBD_SetConfig+0x118>)
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d01a      	beq.n	800b86c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b836:	4b36      	ldr	r3, [pc, #216]	; (800b910 <USBD_SetConfig+0x118>)
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	461a      	mov	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2203      	movs	r2, #3
 800b844:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b848:	4b31      	ldr	r3, [pc, #196]	; (800b910 <USBD_SetConfig+0x118>)
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	4619      	mov	r1, r3
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f7ff f9e7 	bl	800ac22 <USBD_SetClassConfig>
 800b854:	4603      	mov	r3, r0
 800b856:	2b02      	cmp	r3, #2
 800b858:	d104      	bne.n	800b864 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b85a:	6839      	ldr	r1, [r7, #0]
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f932 	bl	800bac6 <USBD_CtlError>
            return;
 800b862:	e052      	b.n	800b90a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 f9f6 	bl	800bc56 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b86a:	e04e      	b.n	800b90a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 f9f2 	bl	800bc56 <USBD_CtlSendStatus>
        break;
 800b872:	e04a      	b.n	800b90a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b874:	4b26      	ldr	r3, [pc, #152]	; (800b910 <USBD_SetConfig+0x118>)
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d112      	bne.n	800b8a2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2202      	movs	r2, #2
 800b880:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b884:	4b22      	ldr	r3, [pc, #136]	; (800b910 <USBD_SetConfig+0x118>)
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	461a      	mov	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b88e:	4b20      	ldr	r3, [pc, #128]	; (800b910 <USBD_SetConfig+0x118>)
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	4619      	mov	r1, r3
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f7ff f9e3 	bl	800ac60 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 f9db 	bl	800bc56 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b8a0:	e033      	b.n	800b90a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b8a2:	4b1b      	ldr	r3, [pc, #108]	; (800b910 <USBD_SetConfig+0x118>)
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d01d      	beq.n	800b8ec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f7ff f9d1 	bl	800ac60 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b8be:	4b14      	ldr	r3, [pc, #80]	; (800b910 <USBD_SetConfig+0x118>)
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b8c8:	4b11      	ldr	r3, [pc, #68]	; (800b910 <USBD_SetConfig+0x118>)
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f7ff f9a7 	bl	800ac22 <USBD_SetClassConfig>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b02      	cmp	r3, #2
 800b8d8:	d104      	bne.n	800b8e4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b8da:	6839      	ldr	r1, [r7, #0]
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 f8f2 	bl	800bac6 <USBD_CtlError>
            return;
 800b8e2:	e012      	b.n	800b90a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 f9b6 	bl	800bc56 <USBD_CtlSendStatus>
        break;
 800b8ea:	e00e      	b.n	800b90a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 f9b2 	bl	800bc56 <USBD_CtlSendStatus>
        break;
 800b8f2:	e00a      	b.n	800b90a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b8f4:	6839      	ldr	r1, [r7, #0]
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 f8e5 	bl	800bac6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b8fc:	4b04      	ldr	r3, [pc, #16]	; (800b910 <USBD_SetConfig+0x118>)
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	4619      	mov	r1, r3
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f7ff f9ac 	bl	800ac60 <USBD_ClrClassConfig>
        break;
 800b908:	bf00      	nop
    }
  }
}
 800b90a:	3708      	adds	r7, #8
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	2000024a 	.word	0x2000024a

0800b914 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	88db      	ldrh	r3, [r3, #6]
 800b922:	2b01      	cmp	r3, #1
 800b924:	d004      	beq.n	800b930 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b926:	6839      	ldr	r1, [r7, #0]
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 f8cc 	bl	800bac6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b92e:	e022      	b.n	800b976 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b936:	2b02      	cmp	r3, #2
 800b938:	dc02      	bgt.n	800b940 <USBD_GetConfig+0x2c>
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	dc03      	bgt.n	800b946 <USBD_GetConfig+0x32>
 800b93e:	e015      	b.n	800b96c <USBD_GetConfig+0x58>
 800b940:	2b03      	cmp	r3, #3
 800b942:	d00b      	beq.n	800b95c <USBD_GetConfig+0x48>
 800b944:	e012      	b.n	800b96c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2200      	movs	r2, #0
 800b94a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	3308      	adds	r3, #8
 800b950:	2201      	movs	r2, #1
 800b952:	4619      	mov	r1, r3
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 f920 	bl	800bb9a <USBD_CtlSendData>
        break;
 800b95a:	e00c      	b.n	800b976 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	3304      	adds	r3, #4
 800b960:	2201      	movs	r2, #1
 800b962:	4619      	mov	r1, r3
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 f918 	bl	800bb9a <USBD_CtlSendData>
        break;
 800b96a:	e004      	b.n	800b976 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b96c:	6839      	ldr	r1, [r7, #0]
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 f8a9 	bl	800bac6 <USBD_CtlError>
        break;
 800b974:	bf00      	nop
}
 800b976:	bf00      	nop
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b97e:	b580      	push	{r7, lr}
 800b980:	b082      	sub	sp, #8
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
 800b986:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b98e:	3b01      	subs	r3, #1
 800b990:	2b02      	cmp	r3, #2
 800b992:	d81e      	bhi.n	800b9d2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	88db      	ldrh	r3, [r3, #6]
 800b998:	2b02      	cmp	r3, #2
 800b99a:	d004      	beq.n	800b9a6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b99c:	6839      	ldr	r1, [r7, #0]
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 f891 	bl	800bac6 <USBD_CtlError>
        break;
 800b9a4:	e01a      	b.n	800b9dc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d005      	beq.n	800b9c2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	f043 0202 	orr.w	r2, r3, #2
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	330c      	adds	r3, #12
 800b9c6:	2202      	movs	r2, #2
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 f8e5 	bl	800bb9a <USBD_CtlSendData>
      break;
 800b9d0:	e004      	b.n	800b9dc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b9d2:	6839      	ldr	r1, [r7, #0]
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 f876 	bl	800bac6 <USBD_CtlError>
      break;
 800b9da:	bf00      	nop
  }
}
 800b9dc:	bf00      	nop
 800b9de:	3708      	adds	r7, #8
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	885b      	ldrh	r3, [r3, #2]
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d106      	bne.n	800ba04 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 f929 	bl	800bc56 <USBD_CtlSendStatus>
  }
}
 800ba04:	bf00      	nop
 800ba06:	3708      	adds	r7, #8
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba1c:	3b01      	subs	r3, #1
 800ba1e:	2b02      	cmp	r3, #2
 800ba20:	d80b      	bhi.n	800ba3a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	885b      	ldrh	r3, [r3, #2]
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d10c      	bne.n	800ba44 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f90f 	bl	800bc56 <USBD_CtlSendStatus>
      }
      break;
 800ba38:	e004      	b.n	800ba44 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ba3a:	6839      	ldr	r1, [r7, #0]
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 f842 	bl	800bac6 <USBD_CtlError>
      break;
 800ba42:	e000      	b.n	800ba46 <USBD_ClrFeature+0x3a>
      break;
 800ba44:	bf00      	nop
  }
}
 800ba46:	bf00      	nop
 800ba48:	3708      	adds	r7, #8
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ba4e:	b480      	push	{r7}
 800ba50:	b083      	sub	sp, #12
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
 800ba56:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	781a      	ldrb	r2, [r3, #0]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	785a      	ldrb	r2, [r3, #1]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	3302      	adds	r3, #2
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	3303      	adds	r3, #3
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	021b      	lsls	r3, r3, #8
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	4413      	add	r3, r2
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	3304      	adds	r3, #4
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	3305      	adds	r3, #5
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	021b      	lsls	r3, r3, #8
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	4413      	add	r3, r2
 800ba9a:	b29a      	uxth	r2, r3
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	3306      	adds	r3, #6
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	b29a      	uxth	r2, r3
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	3307      	adds	r3, #7
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	b29b      	uxth	r3, r3
 800bab0:	021b      	lsls	r3, r3, #8
 800bab2:	b29b      	uxth	r3, r3
 800bab4:	4413      	add	r3, r2
 800bab6:	b29a      	uxth	r2, r3
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	80da      	strh	r2, [r3, #6]

}
 800babc:	bf00      	nop
 800babe:	370c      	adds	r7, #12
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bc80      	pop	{r7}
 800bac4:	4770      	bx	lr

0800bac6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bac6:	b580      	push	{r7, lr}
 800bac8:	b082      	sub	sp, #8
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
 800bace:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bad0:	2180      	movs	r1, #128	; 0x80
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 fc66 	bl	800c3a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bad8:	2100      	movs	r1, #0
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 fc62 	bl	800c3a4 <USBD_LL_StallEP>
}
 800bae0:	bf00      	nop
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b086      	sub	sp, #24
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800baf4:	2300      	movs	r3, #0
 800baf6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d032      	beq.n	800bb64 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f000 f834 	bl	800bb6c <USBD_GetLen>
 800bb04:	4603      	mov	r3, r0
 800bb06:	3301      	adds	r3, #1
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	005b      	lsls	r3, r3, #1
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bb12:	7dfb      	ldrb	r3, [r7, #23]
 800bb14:	1c5a      	adds	r2, r3, #1
 800bb16:	75fa      	strb	r2, [r7, #23]
 800bb18:	461a      	mov	r2, r3
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	7812      	ldrb	r2, [r2, #0]
 800bb22:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bb24:	7dfb      	ldrb	r3, [r7, #23]
 800bb26:	1c5a      	adds	r2, r3, #1
 800bb28:	75fa      	strb	r2, [r7, #23]
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	4413      	add	r3, r2
 800bb30:	2203      	movs	r2, #3
 800bb32:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bb34:	e012      	b.n	800bb5c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	1c5a      	adds	r2, r3, #1
 800bb3a:	60fa      	str	r2, [r7, #12]
 800bb3c:	7dfa      	ldrb	r2, [r7, #23]
 800bb3e:	1c51      	adds	r1, r2, #1
 800bb40:	75f9      	strb	r1, [r7, #23]
 800bb42:	4611      	mov	r1, r2
 800bb44:	68ba      	ldr	r2, [r7, #8]
 800bb46:	440a      	add	r2, r1
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bb4c:	7dfb      	ldrb	r3, [r7, #23]
 800bb4e:	1c5a      	adds	r2, r3, #1
 800bb50:	75fa      	strb	r2, [r7, #23]
 800bb52:	461a      	mov	r2, r3
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	4413      	add	r3, r2
 800bb58:	2200      	movs	r2, #0
 800bb5a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1e8      	bne.n	800bb36 <USBD_GetString+0x4e>
    }
  }
}
 800bb64:	bf00      	nop
 800bb66:	3718      	adds	r7, #24
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b085      	sub	sp, #20
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bb74:	2300      	movs	r3, #0
 800bb76:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800bb78:	e005      	b.n	800bb86 <USBD_GetLen+0x1a>
  {
    len++;
 800bb7a:	7bfb      	ldrb	r3, [r7, #15]
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	3301      	adds	r3, #1
 800bb84:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d1f5      	bne.n	800bb7a <USBD_GetLen+0xe>
  }

  return len;
 800bb8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3714      	adds	r7, #20
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bc80      	pop	{r7}
 800bb98:	4770      	bx	lr

0800bb9a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b084      	sub	sp, #16
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	60f8      	str	r0, [r7, #12]
 800bba2:	60b9      	str	r1, [r7, #8]
 800bba4:	4613      	mov	r3, r2
 800bba6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2202      	movs	r2, #2
 800bbac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bbb0:	88fa      	ldrh	r2, [r7, #6]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bbb6:	88fa      	ldrh	r2, [r7, #6]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbbc:	88fb      	ldrh	r3, [r7, #6]
 800bbbe:	68ba      	ldr	r2, [r7, #8]
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	68f8      	ldr	r0, [r7, #12]
 800bbc4:	f000 fc77 	bl	800c4b6 <USBD_LL_Transmit>

  return USBD_OK;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b084      	sub	sp, #16
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	60f8      	str	r0, [r7, #12]
 800bbda:	60b9      	str	r1, [r7, #8]
 800bbdc:	4613      	mov	r3, r2
 800bbde:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbe0:	88fb      	ldrh	r3, [r7, #6]
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f000 fc65 	bl	800c4b6 <USBD_LL_Transmit>

  return USBD_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b084      	sub	sp, #16
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	60f8      	str	r0, [r7, #12]
 800bbfe:	60b9      	str	r1, [r7, #8]
 800bc00:	4613      	mov	r3, r2
 800bc02:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2203      	movs	r2, #3
 800bc08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bc0c:	88fa      	ldrh	r2, [r7, #6]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800bc14:	88fa      	ldrh	r2, [r7, #6]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc1c:	88fb      	ldrh	r3, [r7, #6]
 800bc1e:	68ba      	ldr	r2, [r7, #8]
 800bc20:	2100      	movs	r1, #0
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	f000 fc6a 	bl	800c4fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc28:	2300      	movs	r3, #0
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}

0800bc32 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b084      	sub	sp, #16
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	60f8      	str	r0, [r7, #12]
 800bc3a:	60b9      	str	r1, [r7, #8]
 800bc3c:	4613      	mov	r3, r2
 800bc3e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc40:	88fb      	ldrh	r3, [r7, #6]
 800bc42:	68ba      	ldr	r2, [r7, #8]
 800bc44:	2100      	movs	r1, #0
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f000 fc58 	bl	800c4fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc4c:	2300      	movs	r3, #0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bc56:	b580      	push	{r7, lr}
 800bc58:	b082      	sub	sp, #8
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2204      	movs	r2, #4
 800bc62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bc66:	2300      	movs	r3, #0
 800bc68:	2200      	movs	r2, #0
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f000 fc22 	bl	800c4b6 <USBD_LL_Transmit>

  return USBD_OK;
 800bc72:	2300      	movs	r3, #0
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3708      	adds	r7, #8
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2205      	movs	r2, #5
 800bc88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	2200      	movs	r2, #0
 800bc90:	2100      	movs	r1, #0
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 fc32 	bl	800c4fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc98:	2300      	movs	r3, #0
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3708      	adds	r7, #8
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
	...

0800bca4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	4912      	ldr	r1, [pc, #72]	; (800bcf4 <MX_USB_DEVICE_Init+0x50>)
 800bcac:	4812      	ldr	r0, [pc, #72]	; (800bcf8 <MX_USB_DEVICE_Init+0x54>)
 800bcae:	f7fe ff5e 	bl	800ab6e <USBD_Init>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d001      	beq.n	800bcbc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bcb8:	f7f5 fb50 	bl	800135c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bcbc:	490f      	ldr	r1, [pc, #60]	; (800bcfc <MX_USB_DEVICE_Init+0x58>)
 800bcbe:	480e      	ldr	r0, [pc, #56]	; (800bcf8 <MX_USB_DEVICE_Init+0x54>)
 800bcc0:	f7fe ff80 	bl	800abc4 <USBD_RegisterClass>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d001      	beq.n	800bcce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bcca:	f7f5 fb47 	bl	800135c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bcce:	490c      	ldr	r1, [pc, #48]	; (800bd00 <MX_USB_DEVICE_Init+0x5c>)
 800bcd0:	4809      	ldr	r0, [pc, #36]	; (800bcf8 <MX_USB_DEVICE_Init+0x54>)
 800bcd2:	f7fe feb1 	bl	800aa38 <USBD_CDC_RegisterInterface>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d001      	beq.n	800bce0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bcdc:	f7f5 fb3e 	bl	800135c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bce0:	4805      	ldr	r0, [pc, #20]	; (800bcf8 <MX_USB_DEVICE_Init+0x54>)
 800bce2:	f7fe ff88 	bl	800abf6 <USBD_Start>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d001      	beq.n	800bcf0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bcec:	f7f5 fb36 	bl	800135c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bcf0:	bf00      	nop
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	20000140 	.word	0x20000140
 800bcf8:	20000790 	.word	0x20000790
 800bcfc:	2000002c 	.word	0x2000002c
 800bd00:	20000130 	.word	0x20000130

0800bd04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bd08:	2200      	movs	r2, #0
 800bd0a:	4905      	ldr	r1, [pc, #20]	; (800bd20 <CDC_Init_FS+0x1c>)
 800bd0c:	4805      	ldr	r0, [pc, #20]	; (800bd24 <CDC_Init_FS+0x20>)
 800bd0e:	f7fe fea9 	bl	800aa64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bd12:	4905      	ldr	r1, [pc, #20]	; (800bd28 <CDC_Init_FS+0x24>)
 800bd14:	4803      	ldr	r0, [pc, #12]	; (800bd24 <CDC_Init_FS+0x20>)
 800bd16:	f7fe febe 	bl	800aa96 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bd1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	20000e3c 	.word	0x20000e3c
 800bd24:	20000790 	.word	0x20000790
 800bd28:	20000a54 	.word	0x20000a54

0800bd2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bd30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bc80      	pop	{r7}
 800bd38:	4770      	bx	lr
	...

0800bd3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	4603      	mov	r3, r0
 800bd44:	6039      	str	r1, [r7, #0]
 800bd46:	71fb      	strb	r3, [r7, #7]
 800bd48:	4613      	mov	r3, r2
 800bd4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bd4c:	79fb      	ldrb	r3, [r7, #7]
 800bd4e:	2b23      	cmp	r3, #35	; 0x23
 800bd50:	d84a      	bhi.n	800bde8 <CDC_Control_FS+0xac>
 800bd52:	a201      	add	r2, pc, #4	; (adr r2, 800bd58 <CDC_Control_FS+0x1c>)
 800bd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd58:	0800bde9 	.word	0x0800bde9
 800bd5c:	0800bde9 	.word	0x0800bde9
 800bd60:	0800bde9 	.word	0x0800bde9
 800bd64:	0800bde9 	.word	0x0800bde9
 800bd68:	0800bde9 	.word	0x0800bde9
 800bd6c:	0800bde9 	.word	0x0800bde9
 800bd70:	0800bde9 	.word	0x0800bde9
 800bd74:	0800bde9 	.word	0x0800bde9
 800bd78:	0800bde9 	.word	0x0800bde9
 800bd7c:	0800bde9 	.word	0x0800bde9
 800bd80:	0800bde9 	.word	0x0800bde9
 800bd84:	0800bde9 	.word	0x0800bde9
 800bd88:	0800bde9 	.word	0x0800bde9
 800bd8c:	0800bde9 	.word	0x0800bde9
 800bd90:	0800bde9 	.word	0x0800bde9
 800bd94:	0800bde9 	.word	0x0800bde9
 800bd98:	0800bde9 	.word	0x0800bde9
 800bd9c:	0800bde9 	.word	0x0800bde9
 800bda0:	0800bde9 	.word	0x0800bde9
 800bda4:	0800bde9 	.word	0x0800bde9
 800bda8:	0800bde9 	.word	0x0800bde9
 800bdac:	0800bde9 	.word	0x0800bde9
 800bdb0:	0800bde9 	.word	0x0800bde9
 800bdb4:	0800bde9 	.word	0x0800bde9
 800bdb8:	0800bde9 	.word	0x0800bde9
 800bdbc:	0800bde9 	.word	0x0800bde9
 800bdc0:	0800bde9 	.word	0x0800bde9
 800bdc4:	0800bde9 	.word	0x0800bde9
 800bdc8:	0800bde9 	.word	0x0800bde9
 800bdcc:	0800bde9 	.word	0x0800bde9
 800bdd0:	0800bde9 	.word	0x0800bde9
 800bdd4:	0800bde9 	.word	0x0800bde9
 800bdd8:	0800bde9 	.word	0x0800bde9
 800bddc:	0800bde9 	.word	0x0800bde9
 800bde0:	0800bde9 	.word	0x0800bde9
 800bde4:	0800bde9 	.word	0x0800bde9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bde8:	bf00      	nop
  }

  return (USBD_OK);
 800bdea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bc80      	pop	{r7}
 800bdf4:	4770      	bx	lr
 800bdf6:	bf00      	nop

0800bdf8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	for (int i = 0; i < (*Len); i++)
 800be02:	2300      	movs	r3, #0
 800be04:	60fb      	str	r3, [r7, #12]
 800be06:	e009      	b.n	800be1c <CDC_Receive_FS+0x24>
		fifo_push(Buf[i]);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	4413      	add	r3, r2
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	4618      	mov	r0, r3
 800be12:	f7f4 f9ad 	bl	8000170 <fifo_push>
	for (int i = 0; i < (*Len); i++)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	3301      	adds	r3, #1
 800be1a:	60fb      	str	r3, [r7, #12]
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	429a      	cmp	r2, r3
 800be24:	d8f0      	bhi.n	800be08 <CDC_Receive_FS+0x10>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800be26:	6879      	ldr	r1, [r7, #4]
 800be28:	4805      	ldr	r0, [pc, #20]	; (800be40 <CDC_Receive_FS+0x48>)
 800be2a:	f7fe fe34 	bl	800aa96 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800be2e:	4804      	ldr	r0, [pc, #16]	; (800be40 <CDC_Receive_FS+0x48>)
 800be30:	f7fe fe73 	bl	800ab1a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800be34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800be36:	4618      	mov	r0, r3
 800be38:	3710      	adds	r7, #16
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	20000790 	.word	0x20000790

0800be44 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	460b      	mov	r3, r1
 800be4e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800be50:	2300      	movs	r3, #0
 800be52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800be54:	4b0d      	ldr	r3, [pc, #52]	; (800be8c <CDC_Transmit_FS+0x48>)
 800be56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be5a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800be62:	2b00      	cmp	r3, #0
 800be64:	d001      	beq.n	800be6a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800be66:	2301      	movs	r3, #1
 800be68:	e00b      	b.n	800be82 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800be6a:	887b      	ldrh	r3, [r7, #2]
 800be6c:	461a      	mov	r2, r3
 800be6e:	6879      	ldr	r1, [r7, #4]
 800be70:	4806      	ldr	r0, [pc, #24]	; (800be8c <CDC_Transmit_FS+0x48>)
 800be72:	f7fe fdf7 	bl	800aa64 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800be76:	4805      	ldr	r0, [pc, #20]	; (800be8c <CDC_Transmit_FS+0x48>)
 800be78:	f7fe fe20 	bl	800aabc <USBD_CDC_TransmitPacket>
 800be7c:	4603      	mov	r3, r0
 800be7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800be80:	7bfb      	ldrb	r3, [r7, #15]
}
 800be82:	4618      	mov	r0, r3
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	20000790 	.word	0x20000790

0800be90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	4603      	mov	r3, r0
 800be98:	6039      	str	r1, [r7, #0]
 800be9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	2212      	movs	r2, #18
 800bea0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bea2:	4b03      	ldr	r3, [pc, #12]	; (800beb0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bc80      	pop	{r7}
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop
 800beb0:	2000015c 	.word	0x2000015c

0800beb4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
 800beba:	4603      	mov	r3, r0
 800bebc:	6039      	str	r1, [r7, #0]
 800bebe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	2204      	movs	r2, #4
 800bec4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bec6:	4b03      	ldr	r3, [pc, #12]	; (800bed4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bec8:	4618      	mov	r0, r3
 800beca:	370c      	adds	r7, #12
 800becc:	46bd      	mov	sp, r7
 800bece:	bc80      	pop	{r7}
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	20000170 	.word	0x20000170

0800bed8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	4603      	mov	r3, r0
 800bee0:	6039      	str	r1, [r7, #0]
 800bee2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bee4:	79fb      	ldrb	r3, [r7, #7]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d105      	bne.n	800bef6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	4907      	ldr	r1, [pc, #28]	; (800bf0c <USBD_FS_ProductStrDescriptor+0x34>)
 800beee:	4808      	ldr	r0, [pc, #32]	; (800bf10 <USBD_FS_ProductStrDescriptor+0x38>)
 800bef0:	f7ff fdfa 	bl	800bae8 <USBD_GetString>
 800bef4:	e004      	b.n	800bf00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bef6:	683a      	ldr	r2, [r7, #0]
 800bef8:	4904      	ldr	r1, [pc, #16]	; (800bf0c <USBD_FS_ProductStrDescriptor+0x34>)
 800befa:	4805      	ldr	r0, [pc, #20]	; (800bf10 <USBD_FS_ProductStrDescriptor+0x38>)
 800befc:	f7ff fdf4 	bl	800bae8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf00:	4b02      	ldr	r3, [pc, #8]	; (800bf0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3708      	adds	r7, #8
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	20001224 	.word	0x20001224
 800bf10:	0800ca50 	.word	0x0800ca50

0800bf14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	6039      	str	r1, [r7, #0]
 800bf1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bf20:	683a      	ldr	r2, [r7, #0]
 800bf22:	4904      	ldr	r1, [pc, #16]	; (800bf34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bf24:	4804      	ldr	r0, [pc, #16]	; (800bf38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bf26:	f7ff fddf 	bl	800bae8 <USBD_GetString>
  return USBD_StrDesc;
 800bf2a:	4b02      	ldr	r3, [pc, #8]	; (800bf34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3708      	adds	r7, #8
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	20001224 	.word	0x20001224
 800bf38:	0800ca68 	.word	0x0800ca68

0800bf3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	4603      	mov	r3, r0
 800bf44:	6039      	str	r1, [r7, #0]
 800bf46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	221a      	movs	r2, #26
 800bf4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bf4e:	f000 f843 	bl	800bfd8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bf52:	4b02      	ldr	r3, [pc, #8]	; (800bf5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3708      	adds	r7, #8
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	20000174 	.word	0x20000174

0800bf60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	4603      	mov	r3, r0
 800bf68:	6039      	str	r1, [r7, #0]
 800bf6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bf6c:	79fb      	ldrb	r3, [r7, #7]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d105      	bne.n	800bf7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf72:	683a      	ldr	r2, [r7, #0]
 800bf74:	4907      	ldr	r1, [pc, #28]	; (800bf94 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf76:	4808      	ldr	r0, [pc, #32]	; (800bf98 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf78:	f7ff fdb6 	bl	800bae8 <USBD_GetString>
 800bf7c:	e004      	b.n	800bf88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf7e:	683a      	ldr	r2, [r7, #0]
 800bf80:	4904      	ldr	r1, [pc, #16]	; (800bf94 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf82:	4805      	ldr	r0, [pc, #20]	; (800bf98 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf84:	f7ff fdb0 	bl	800bae8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf88:	4b02      	ldr	r3, [pc, #8]	; (800bf94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3708      	adds	r7, #8
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	bf00      	nop
 800bf94:	20001224 	.word	0x20001224
 800bf98:	0800ca7c 	.word	0x0800ca7c

0800bf9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b082      	sub	sp, #8
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	6039      	str	r1, [r7, #0]
 800bfa6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bfa8:	79fb      	ldrb	r3, [r7, #7]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d105      	bne.n	800bfba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bfae:	683a      	ldr	r2, [r7, #0]
 800bfb0:	4907      	ldr	r1, [pc, #28]	; (800bfd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bfb2:	4808      	ldr	r0, [pc, #32]	; (800bfd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bfb4:	f7ff fd98 	bl	800bae8 <USBD_GetString>
 800bfb8:	e004      	b.n	800bfc4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bfba:	683a      	ldr	r2, [r7, #0]
 800bfbc:	4904      	ldr	r1, [pc, #16]	; (800bfd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bfbe:	4805      	ldr	r0, [pc, #20]	; (800bfd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bfc0:	f7ff fd92 	bl	800bae8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bfc4:	4b02      	ldr	r3, [pc, #8]	; (800bfd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3708      	adds	r7, #8
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	20001224 	.word	0x20001224
 800bfd4:	0800ca88 	.word	0x0800ca88

0800bfd8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bfde:	4b0f      	ldr	r3, [pc, #60]	; (800c01c <Get_SerialNum+0x44>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bfe4:	4b0e      	ldr	r3, [pc, #56]	; (800c020 <Get_SerialNum+0x48>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bfea:	4b0e      	ldr	r3, [pc, #56]	; (800c024 <Get_SerialNum+0x4c>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bff0:	68fa      	ldr	r2, [r7, #12]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	4413      	add	r3, r2
 800bff6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d009      	beq.n	800c012 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bffe:	2208      	movs	r2, #8
 800c000:	4909      	ldr	r1, [pc, #36]	; (800c028 <Get_SerialNum+0x50>)
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	f000 f814 	bl	800c030 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c008:	2204      	movs	r2, #4
 800c00a:	4908      	ldr	r1, [pc, #32]	; (800c02c <Get_SerialNum+0x54>)
 800c00c:	68b8      	ldr	r0, [r7, #8]
 800c00e:	f000 f80f 	bl	800c030 <IntToUnicode>
  }
}
 800c012:	bf00      	nop
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	1ffff7e8 	.word	0x1ffff7e8
 800c020:	1ffff7ec 	.word	0x1ffff7ec
 800c024:	1ffff7f0 	.word	0x1ffff7f0
 800c028:	20000176 	.word	0x20000176
 800c02c:	20000186 	.word	0x20000186

0800c030 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c030:	b480      	push	{r7}
 800c032:	b087      	sub	sp, #28
 800c034:	af00      	add	r7, sp, #0
 800c036:	60f8      	str	r0, [r7, #12]
 800c038:	60b9      	str	r1, [r7, #8]
 800c03a:	4613      	mov	r3, r2
 800c03c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c03e:	2300      	movs	r3, #0
 800c040:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c042:	2300      	movs	r3, #0
 800c044:	75fb      	strb	r3, [r7, #23]
 800c046:	e027      	b.n	800c098 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	0f1b      	lsrs	r3, r3, #28
 800c04c:	2b09      	cmp	r3, #9
 800c04e:	d80b      	bhi.n	800c068 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	0f1b      	lsrs	r3, r3, #28
 800c054:	b2da      	uxtb	r2, r3
 800c056:	7dfb      	ldrb	r3, [r7, #23]
 800c058:	005b      	lsls	r3, r3, #1
 800c05a:	4619      	mov	r1, r3
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	440b      	add	r3, r1
 800c060:	3230      	adds	r2, #48	; 0x30
 800c062:	b2d2      	uxtb	r2, r2
 800c064:	701a      	strb	r2, [r3, #0]
 800c066:	e00a      	b.n	800c07e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	0f1b      	lsrs	r3, r3, #28
 800c06c:	b2da      	uxtb	r2, r3
 800c06e:	7dfb      	ldrb	r3, [r7, #23]
 800c070:	005b      	lsls	r3, r3, #1
 800c072:	4619      	mov	r1, r3
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	440b      	add	r3, r1
 800c078:	3237      	adds	r2, #55	; 0x37
 800c07a:	b2d2      	uxtb	r2, r2
 800c07c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	011b      	lsls	r3, r3, #4
 800c082:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c084:	7dfb      	ldrb	r3, [r7, #23]
 800c086:	005b      	lsls	r3, r3, #1
 800c088:	3301      	adds	r3, #1
 800c08a:	68ba      	ldr	r2, [r7, #8]
 800c08c:	4413      	add	r3, r2
 800c08e:	2200      	movs	r2, #0
 800c090:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c092:	7dfb      	ldrb	r3, [r7, #23]
 800c094:	3301      	adds	r3, #1
 800c096:	75fb      	strb	r3, [r7, #23]
 800c098:	7dfa      	ldrb	r2, [r7, #23]
 800c09a:	79fb      	ldrb	r3, [r7, #7]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d3d3      	bcc.n	800c048 <IntToUnicode+0x18>
  }
}
 800c0a0:	bf00      	nop
 800c0a2:	bf00      	nop
 800c0a4:	371c      	adds	r7, #28
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bc80      	pop	{r7}
 800c0aa:	4770      	bx	lr

0800c0ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a0d      	ldr	r2, [pc, #52]	; (800c0f0 <HAL_PCD_MspInit+0x44>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d113      	bne.n	800c0e6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c0be:	4b0d      	ldr	r3, [pc, #52]	; (800c0f4 <HAL_PCD_MspInit+0x48>)
 800c0c0:	69db      	ldr	r3, [r3, #28]
 800c0c2:	4a0c      	ldr	r2, [pc, #48]	; (800c0f4 <HAL_PCD_MspInit+0x48>)
 800c0c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c0c8:	61d3      	str	r3, [r2, #28]
 800c0ca:	4b0a      	ldr	r3, [pc, #40]	; (800c0f4 <HAL_PCD_MspInit+0x48>)
 800c0cc:	69db      	ldr	r3, [r3, #28]
 800c0ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0d2:	60fb      	str	r3, [r7, #12]
 800c0d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	2100      	movs	r1, #0
 800c0da:	2014      	movs	r0, #20
 800c0dc:	f7f7 fda3 	bl	8003c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c0e0:	2014      	movs	r0, #20
 800c0e2:	f7f7 fdbc 	bl	8003c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c0e6:	bf00      	nop
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	40005c00 	.word	0x40005c00
 800c0f4:	40021000 	.word	0x40021000

0800c0f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c10c:	4619      	mov	r1, r3
 800c10e:	4610      	mov	r0, r2
 800c110:	f7fe fdb9 	bl	800ac86 <USBD_LL_SetupStage>
}
 800c114:	bf00      	nop
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	460b      	mov	r3, r1
 800c126:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c12e:	78fa      	ldrb	r2, [r7, #3]
 800c130:	6879      	ldr	r1, [r7, #4]
 800c132:	4613      	mov	r3, r2
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	4413      	add	r3, r2
 800c138:	00db      	lsls	r3, r3, #3
 800c13a:	440b      	add	r3, r1
 800c13c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	78fb      	ldrb	r3, [r7, #3]
 800c144:	4619      	mov	r1, r3
 800c146:	f7fe fdeb 	bl	800ad20 <USBD_LL_DataOutStage>
}
 800c14a:	bf00      	nop
 800c14c:	3708      	adds	r7, #8
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c152:	b580      	push	{r7, lr}
 800c154:	b082      	sub	sp, #8
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
 800c15a:	460b      	mov	r3, r1
 800c15c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c164:	78fa      	ldrb	r2, [r7, #3]
 800c166:	6879      	ldr	r1, [r7, #4]
 800c168:	4613      	mov	r3, r2
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	4413      	add	r3, r2
 800c16e:	00db      	lsls	r3, r3, #3
 800c170:	440b      	add	r3, r1
 800c172:	333c      	adds	r3, #60	; 0x3c
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	78fb      	ldrb	r3, [r7, #3]
 800c178:	4619      	mov	r1, r3
 800c17a:	f7fe fe42 	bl	800ae02 <USBD_LL_DataInStage>
}
 800c17e:	bf00      	nop
 800c180:	3708      	adds	r7, #8
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}

0800c186 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c186:	b580      	push	{r7, lr}
 800c188:	b082      	sub	sp, #8
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c194:	4618      	mov	r0, r3
 800c196:	f7fe ff52 	bl	800b03e <USBD_LL_SOF>
}
 800c19a:	bf00      	nop
 800c19c:	3708      	adds	r7, #8
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}

0800c1a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1a2:	b580      	push	{r7, lr}
 800c1a4:	b084      	sub	sp, #16
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	689b      	ldr	r3, [r3, #8]
 800c1b2:	2b02      	cmp	r3, #2
 800c1b4:	d001      	beq.n	800c1ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c1b6:	f7f5 f8d1 	bl	800135c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c1c0:	7bfa      	ldrb	r2, [r7, #15]
 800c1c2:	4611      	mov	r1, r2
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7fe ff02 	bl	800afce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7fe febb 	bl	800af4c <USBD_LL_Reset>
}
 800c1d6:	bf00      	nop
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
	...

0800c1e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fe fefc 	bl	800afec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	699b      	ldr	r3, [r3, #24]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d005      	beq.n	800c208 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1fc:	4b04      	ldr	r3, [pc, #16]	; (800c210 <HAL_PCD_SuspendCallback+0x30>)
 800c1fe:	691b      	ldr	r3, [r3, #16]
 800c200:	4a03      	ldr	r2, [pc, #12]	; (800c210 <HAL_PCD_SuspendCallback+0x30>)
 800c202:	f043 0306 	orr.w	r3, r3, #6
 800c206:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c208:	bf00      	nop
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}
 800c210:	e000ed00 	.word	0xe000ed00

0800c214 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c222:	4618      	mov	r0, r3
 800c224:	f7fe fef6 	bl	800b014 <USBD_LL_Resume>
}
 800c228:	bf00      	nop
 800c22a:	3708      	adds	r7, #8
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c238:	4a28      	ldr	r2, [pc, #160]	; (800c2dc <USBD_LL_Init+0xac>)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4a26      	ldr	r2, [pc, #152]	; (800c2dc <USBD_LL_Init+0xac>)
 800c244:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c248:	4b24      	ldr	r3, [pc, #144]	; (800c2dc <USBD_LL_Init+0xac>)
 800c24a:	4a25      	ldr	r2, [pc, #148]	; (800c2e0 <USBD_LL_Init+0xb0>)
 800c24c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c24e:	4b23      	ldr	r3, [pc, #140]	; (800c2dc <USBD_LL_Init+0xac>)
 800c250:	2208      	movs	r2, #8
 800c252:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c254:	4b21      	ldr	r3, [pc, #132]	; (800c2dc <USBD_LL_Init+0xac>)
 800c256:	2202      	movs	r2, #2
 800c258:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c25a:	4b20      	ldr	r3, [pc, #128]	; (800c2dc <USBD_LL_Init+0xac>)
 800c25c:	2200      	movs	r2, #0
 800c25e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c260:	4b1e      	ldr	r3, [pc, #120]	; (800c2dc <USBD_LL_Init+0xac>)
 800c262:	2200      	movs	r2, #0
 800c264:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c266:	4b1d      	ldr	r3, [pc, #116]	; (800c2dc <USBD_LL_Init+0xac>)
 800c268:	2200      	movs	r2, #0
 800c26a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c26c:	481b      	ldr	r0, [pc, #108]	; (800c2dc <USBD_LL_Init+0xac>)
 800c26e:	f7f8 fedd 	bl	800502c <HAL_PCD_Init>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d001      	beq.n	800c27c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c278:	f7f5 f870 	bl	800135c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c282:	2318      	movs	r3, #24
 800c284:	2200      	movs	r2, #0
 800c286:	2100      	movs	r1, #0
 800c288:	f7fa fb53 	bl	8006932 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c292:	2358      	movs	r3, #88	; 0x58
 800c294:	2200      	movs	r2, #0
 800c296:	2180      	movs	r1, #128	; 0x80
 800c298:	f7fa fb4b 	bl	8006932 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c2a2:	23c0      	movs	r3, #192	; 0xc0
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	2181      	movs	r1, #129	; 0x81
 800c2a8:	f7fa fb43 	bl	8006932 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c2b2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	2101      	movs	r1, #1
 800c2ba:	f7fa fb3a 	bl	8006932 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c2c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	2182      	movs	r1, #130	; 0x82
 800c2cc:	f7fa fb31 	bl	8006932 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c2d0:	2300      	movs	r3, #0
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3708      	adds	r7, #8
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	20001424 	.word	0x20001424
 800c2e0:	40005c00 	.word	0x40005c00

0800c2e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b084      	sub	sp, #16
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7f8 ffa1 	bl	8005242 <HAL_PCD_Start>
 800c300:	4603      	mov	r3, r0
 800c302:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c304:	7bfb      	ldrb	r3, [r7, #15]
 800c306:	4618      	mov	r0, r3
 800c308:	f000 f94e 	bl	800c5a8 <USBD_Get_USB_Status>
 800c30c:	4603      	mov	r3, r0
 800c30e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c310:	7bbb      	ldrb	r3, [r7, #14]
}
 800c312:	4618      	mov	r0, r3
 800c314:	3710      	adds	r7, #16
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}

0800c31a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c31a:	b580      	push	{r7, lr}
 800c31c:	b084      	sub	sp, #16
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
 800c322:	4608      	mov	r0, r1
 800c324:	4611      	mov	r1, r2
 800c326:	461a      	mov	r2, r3
 800c328:	4603      	mov	r3, r0
 800c32a:	70fb      	strb	r3, [r7, #3]
 800c32c:	460b      	mov	r3, r1
 800c32e:	70bb      	strb	r3, [r7, #2]
 800c330:	4613      	mov	r3, r2
 800c332:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c334:	2300      	movs	r3, #0
 800c336:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c338:	2300      	movs	r3, #0
 800c33a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c342:	78bb      	ldrb	r3, [r7, #2]
 800c344:	883a      	ldrh	r2, [r7, #0]
 800c346:	78f9      	ldrb	r1, [r7, #3]
 800c348:	f7f9 f91b 	bl	8005582 <HAL_PCD_EP_Open>
 800c34c:	4603      	mov	r3, r0
 800c34e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c350:	7bfb      	ldrb	r3, [r7, #15]
 800c352:	4618      	mov	r0, r3
 800c354:	f000 f928 	bl	800c5a8 <USBD_Get_USB_Status>
 800c358:	4603      	mov	r3, r0
 800c35a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c35c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b084      	sub	sp, #16
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
 800c36e:	460b      	mov	r3, r1
 800c370:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c372:	2300      	movs	r3, #0
 800c374:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c376:	2300      	movs	r3, #0
 800c378:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c380:	78fa      	ldrb	r2, [r7, #3]
 800c382:	4611      	mov	r1, r2
 800c384:	4618      	mov	r0, r3
 800c386:	f7f9 f962 	bl	800564e <HAL_PCD_EP_Close>
 800c38a:	4603      	mov	r3, r0
 800c38c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c38e:	7bfb      	ldrb	r3, [r7, #15]
 800c390:	4618      	mov	r0, r3
 800c392:	f000 f909 	bl	800c5a8 <USBD_Get_USB_Status>
 800c396:	4603      	mov	r3, r0
 800c398:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c39a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3710      	adds	r7, #16
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3be:	78fa      	ldrb	r2, [r7, #3]
 800c3c0:	4611      	mov	r1, r2
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7f9 fa22 	bl	800580c <HAL_PCD_EP_SetStall>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3cc:	7bfb      	ldrb	r3, [r7, #15]
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f000 f8ea 	bl	800c5a8 <USBD_Get_USB_Status>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b084      	sub	sp, #16
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3fc:	78fa      	ldrb	r2, [r7, #3]
 800c3fe:	4611      	mov	r1, r2
 800c400:	4618      	mov	r0, r3
 800c402:	f7f9 fa63 	bl	80058cc <HAL_PCD_EP_ClrStall>
 800c406:	4603      	mov	r3, r0
 800c408:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c40a:	7bfb      	ldrb	r3, [r7, #15]
 800c40c:	4618      	mov	r0, r3
 800c40e:	f000 f8cb 	bl	800c5a8 <USBD_Get_USB_Status>
 800c412:	4603      	mov	r3, r0
 800c414:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c416:	7bbb      	ldrb	r3, [r7, #14]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3710      	adds	r7, #16
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	460b      	mov	r3, r1
 800c42a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c432:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c434:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	da0c      	bge.n	800c456 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c43c:	78fb      	ldrb	r3, [r7, #3]
 800c43e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c442:	68f9      	ldr	r1, [r7, #12]
 800c444:	1c5a      	adds	r2, r3, #1
 800c446:	4613      	mov	r3, r2
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	4413      	add	r3, r2
 800c44c:	00db      	lsls	r3, r3, #3
 800c44e:	440b      	add	r3, r1
 800c450:	3302      	adds	r3, #2
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	e00b      	b.n	800c46e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c456:	78fb      	ldrb	r3, [r7, #3]
 800c458:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c45c:	68f9      	ldr	r1, [r7, #12]
 800c45e:	4613      	mov	r3, r2
 800c460:	009b      	lsls	r3, r3, #2
 800c462:	4413      	add	r3, r2
 800c464:	00db      	lsls	r3, r3, #3
 800c466:	440b      	add	r3, r1
 800c468:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c46c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3714      	adds	r7, #20
 800c472:	46bd      	mov	sp, r7
 800c474:	bc80      	pop	{r7}
 800c476:	4770      	bx	lr

0800c478 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b084      	sub	sp, #16
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	460b      	mov	r3, r1
 800c482:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c484:	2300      	movs	r3, #0
 800c486:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c488:	2300      	movs	r3, #0
 800c48a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c492:	78fa      	ldrb	r2, [r7, #3]
 800c494:	4611      	mov	r1, r2
 800c496:	4618      	mov	r0, r3
 800c498:	f7f9 f84e 	bl	8005538 <HAL_PCD_SetAddress>
 800c49c:	4603      	mov	r3, r0
 800c49e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4a0:	7bfb      	ldrb	r3, [r7, #15]
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f000 f880 	bl	800c5a8 <USBD_Get_USB_Status>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b086      	sub	sp, #24
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	60f8      	str	r0, [r7, #12]
 800c4be:	607a      	str	r2, [r7, #4]
 800c4c0:	461a      	mov	r2, r3
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	72fb      	strb	r3, [r7, #11]
 800c4c6:	4613      	mov	r3, r2
 800c4c8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c4d8:	893b      	ldrh	r3, [r7, #8]
 800c4da:	7af9      	ldrb	r1, [r7, #11]
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	f7f9 f952 	bl	8005786 <HAL_PCD_EP_Transmit>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4e6:	7dfb      	ldrb	r3, [r7, #23]
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f000 f85d 	bl	800c5a8 <USBD_Get_USB_Status>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4f2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3718      	adds	r7, #24
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b086      	sub	sp, #24
 800c500:	af00      	add	r7, sp, #0
 800c502:	60f8      	str	r0, [r7, #12]
 800c504:	607a      	str	r2, [r7, #4]
 800c506:	461a      	mov	r2, r3
 800c508:	460b      	mov	r3, r1
 800c50a:	72fb      	strb	r3, [r7, #11]
 800c50c:	4613      	mov	r3, r2
 800c50e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c510:	2300      	movs	r3, #0
 800c512:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c514:	2300      	movs	r3, #0
 800c516:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c51e:	893b      	ldrh	r3, [r7, #8]
 800c520:	7af9      	ldrb	r1, [r7, #11]
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	f7f9 f8db 	bl	80056de <HAL_PCD_EP_Receive>
 800c528:	4603      	mov	r3, r0
 800c52a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c52c:	7dfb      	ldrb	r3, [r7, #23]
 800c52e:	4618      	mov	r0, r3
 800c530:	f000 f83a 	bl	800c5a8 <USBD_Get_USB_Status>
 800c534:	4603      	mov	r3, r0
 800c536:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c538:	7dbb      	ldrb	r3, [r7, #22]
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3718      	adds	r7, #24
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c542:	b580      	push	{r7, lr}
 800c544:	b082      	sub	sp, #8
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
 800c54a:	460b      	mov	r3, r1
 800c54c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c554:	78fa      	ldrb	r2, [r7, #3]
 800c556:	4611      	mov	r1, r2
 800c558:	4618      	mov	r0, r3
 800c55a:	f7f9 f8fd 	bl	8005758 <HAL_PCD_EP_GetRxCount>
 800c55e:	4603      	mov	r3, r0
}
 800c560:	4618      	mov	r0, r3
 800c562:	3708      	adds	r7, #8
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c570:	4b02      	ldr	r3, [pc, #8]	; (800c57c <USBD_static_malloc+0x14>)
}
 800c572:	4618      	mov	r0, r3
 800c574:	370c      	adds	r7, #12
 800c576:	46bd      	mov	sp, r7
 800c578:	bc80      	pop	{r7}
 800c57a:	4770      	bx	lr
 800c57c:	2000024c 	.word	0x2000024c

0800c580 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c580:	b480      	push	{r7}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]

}
 800c588:	bf00      	nop
 800c58a:	370c      	adds	r7, #12
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bc80      	pop	{r7}
 800c590:	4770      	bx	lr

0800c592 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c592:	b480      	push	{r7}
 800c594:	b083      	sub	sp, #12
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
 800c59a:	460b      	mov	r3, r1
 800c59c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c59e:	bf00      	nop
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bc80      	pop	{r7}
 800c5a6:	4770      	bx	lr

0800c5a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b085      	sub	sp, #20
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c5b6:	79fb      	ldrb	r3, [r7, #7]
 800c5b8:	2b03      	cmp	r3, #3
 800c5ba:	d817      	bhi.n	800c5ec <USBD_Get_USB_Status+0x44>
 800c5bc:	a201      	add	r2, pc, #4	; (adr r2, 800c5c4 <USBD_Get_USB_Status+0x1c>)
 800c5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c2:	bf00      	nop
 800c5c4:	0800c5d5 	.word	0x0800c5d5
 800c5c8:	0800c5db 	.word	0x0800c5db
 800c5cc:	0800c5e1 	.word	0x0800c5e1
 800c5d0:	0800c5e7 	.word	0x0800c5e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c5d8:	e00b      	b.n	800c5f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5da:	2302      	movs	r3, #2
 800c5dc:	73fb      	strb	r3, [r7, #15]
    break;
 800c5de:	e008      	b.n	800c5f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c5e4:	e005      	b.n	800c5f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5e6:	2302      	movs	r3, #2
 800c5e8:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ea:	e002      	b.n	800c5f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c5ec:	2302      	movs	r3, #2
 800c5ee:	73fb      	strb	r3, [r7, #15]
    break;
 800c5f0:	bf00      	nop
  }
  return usb_status;
 800c5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bc80      	pop	{r7}
 800c5fc:	4770      	bx	lr
 800c5fe:	bf00      	nop

0800c600 <__libc_init_array>:
 800c600:	b570      	push	{r4, r5, r6, lr}
 800c602:	2600      	movs	r6, #0
 800c604:	4d0c      	ldr	r5, [pc, #48]	; (800c638 <__libc_init_array+0x38>)
 800c606:	4c0d      	ldr	r4, [pc, #52]	; (800c63c <__libc_init_array+0x3c>)
 800c608:	1b64      	subs	r4, r4, r5
 800c60a:	10a4      	asrs	r4, r4, #2
 800c60c:	42a6      	cmp	r6, r4
 800c60e:	d109      	bne.n	800c624 <__libc_init_array+0x24>
 800c610:	f000 f862 	bl	800c6d8 <_init>
 800c614:	2600      	movs	r6, #0
 800c616:	4d0a      	ldr	r5, [pc, #40]	; (800c640 <__libc_init_array+0x40>)
 800c618:	4c0a      	ldr	r4, [pc, #40]	; (800c644 <__libc_init_array+0x44>)
 800c61a:	1b64      	subs	r4, r4, r5
 800c61c:	10a4      	asrs	r4, r4, #2
 800c61e:	42a6      	cmp	r6, r4
 800c620:	d105      	bne.n	800c62e <__libc_init_array+0x2e>
 800c622:	bd70      	pop	{r4, r5, r6, pc}
 800c624:	f855 3b04 	ldr.w	r3, [r5], #4
 800c628:	4798      	blx	r3
 800c62a:	3601      	adds	r6, #1
 800c62c:	e7ee      	b.n	800c60c <__libc_init_array+0xc>
 800c62e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c632:	4798      	blx	r3
 800c634:	3601      	adds	r6, #1
 800c636:	e7f2      	b.n	800c61e <__libc_init_array+0x1e>
 800c638:	0800ce60 	.word	0x0800ce60
 800c63c:	0800ce60 	.word	0x0800ce60
 800c640:	0800ce60 	.word	0x0800ce60
 800c644:	0800ce64 	.word	0x0800ce64

0800c648 <memcpy>:
 800c648:	440a      	add	r2, r1
 800c64a:	4291      	cmp	r1, r2
 800c64c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c650:	d100      	bne.n	800c654 <memcpy+0xc>
 800c652:	4770      	bx	lr
 800c654:	b510      	push	{r4, lr}
 800c656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c65a:	4291      	cmp	r1, r2
 800c65c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c660:	d1f9      	bne.n	800c656 <memcpy+0xe>
 800c662:	bd10      	pop	{r4, pc}

0800c664 <memmove>:
 800c664:	4288      	cmp	r0, r1
 800c666:	b510      	push	{r4, lr}
 800c668:	eb01 0402 	add.w	r4, r1, r2
 800c66c:	d902      	bls.n	800c674 <memmove+0x10>
 800c66e:	4284      	cmp	r4, r0
 800c670:	4623      	mov	r3, r4
 800c672:	d807      	bhi.n	800c684 <memmove+0x20>
 800c674:	1e43      	subs	r3, r0, #1
 800c676:	42a1      	cmp	r1, r4
 800c678:	d008      	beq.n	800c68c <memmove+0x28>
 800c67a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c67e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c682:	e7f8      	b.n	800c676 <memmove+0x12>
 800c684:	4601      	mov	r1, r0
 800c686:	4402      	add	r2, r0
 800c688:	428a      	cmp	r2, r1
 800c68a:	d100      	bne.n	800c68e <memmove+0x2a>
 800c68c:	bd10      	pop	{r4, pc}
 800c68e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c692:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c696:	e7f7      	b.n	800c688 <memmove+0x24>

0800c698 <memset>:
 800c698:	4603      	mov	r3, r0
 800c69a:	4402      	add	r2, r0
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d100      	bne.n	800c6a2 <memset+0xa>
 800c6a0:	4770      	bx	lr
 800c6a2:	f803 1b01 	strb.w	r1, [r3], #1
 800c6a6:	e7f9      	b.n	800c69c <memset+0x4>

0800c6a8 <strstr>:
 800c6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6aa:	780c      	ldrb	r4, [r1, #0]
 800c6ac:	b164      	cbz	r4, 800c6c8 <strstr+0x20>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	781a      	ldrb	r2, [r3, #0]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	1c5e      	adds	r6, r3, #1
 800c6b6:	b90a      	cbnz	r2, 800c6bc <strstr+0x14>
 800c6b8:	4610      	mov	r0, r2
 800c6ba:	e005      	b.n	800c6c8 <strstr+0x20>
 800c6bc:	4294      	cmp	r4, r2
 800c6be:	d108      	bne.n	800c6d2 <strstr+0x2a>
 800c6c0:	460d      	mov	r5, r1
 800c6c2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800c6c6:	b902      	cbnz	r2, 800c6ca <strstr+0x22>
 800c6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6ca:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800c6ce:	4297      	cmp	r7, r2
 800c6d0:	d0f7      	beq.n	800c6c2 <strstr+0x1a>
 800c6d2:	4633      	mov	r3, r6
 800c6d4:	e7ec      	b.n	800c6b0 <strstr+0x8>
	...

0800c6d8 <_init>:
 800c6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6da:	bf00      	nop
 800c6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6de:	bc08      	pop	{r3}
 800c6e0:	469e      	mov	lr, r3
 800c6e2:	4770      	bx	lr

0800c6e4 <_fini>:
 800c6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6e6:	bf00      	nop
 800c6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ea:	bc08      	pop	{r3}
 800c6ec:	469e      	mov	lr, r3
 800c6ee:	4770      	bx	lr
