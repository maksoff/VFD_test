
VFD_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ddc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08003ee8  08003ee8  00013ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004080  08004080  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004080  08004080  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004080  08004080  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004080  08004080  00014080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004084  08004084  00014084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000014  0800409c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  0800409c  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a11a  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001965  00000000  00000000  0002a157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002bac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a98  00000000  00000000  0002c5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cb0  00000000  00000000  0002d090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b8e8  00000000  00000000  00043d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008431e  00000000  00000000  0004f628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3946  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d50  00000000  00000000  000d399c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ed0 	.word	0x08003ed0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003ed0 	.word	0x08003ed0

0800014c <nrf24l01p_spi_ss>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void nrf24l01p_spi_ss(nrf24l01p_spi_ss_level_t level)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	// we will transmit data to nRF, MSB FIRST
	if (!level)
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b00      	cmp	r3, #0
 800015a:	d107      	bne.n	800016c <nrf24l01p_spi_ss+0x20>
		hspi2.Instance->CR1 &= ~(SPI_CR1_LSBFIRST);
 800015c:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <nrf24l01p_spi_ss+0x4c>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	681a      	ldr	r2, [r3, #0]
 8000162:	4b0d      	ldr	r3, [pc, #52]	; (8000198 <nrf24l01p_spi_ss+0x4c>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800016a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(SPI2_nRF_CSn_GPIO_Port, SPI2_nRF_CSn_Pin, level);
 800016c:	79fb      	ldrb	r3, [r7, #7]
 800016e:	461a      	mov	r2, r3
 8000170:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000174:	4809      	ldr	r0, [pc, #36]	; (800019c <nrf24l01p_spi_ss+0x50>)
 8000176:	f001 fe3e 	bl	8001df6 <HAL_GPIO_WritePin>
	// we will transmit data to VFD, LSB FIRST
	if (level)
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d007      	beq.n	8000190 <nrf24l01p_spi_ss+0x44>
		hspi2.Instance->CR1 |= SPI_CR1_LSBFIRST;
 8000180:	4b05      	ldr	r3, [pc, #20]	; (8000198 <nrf24l01p_spi_ss+0x4c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	681a      	ldr	r2, [r3, #0]
 8000186:	4b04      	ldr	r3, [pc, #16]	; (8000198 <nrf24l01p_spi_ss+0x4c>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800018e:	601a      	str	r2, [r3, #0]
}
 8000190:	bf00      	nop
 8000192:	3708      	adds	r7, #8
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}
 8000198:	2000004c 	.word	0x2000004c
 800019c:	40010c00 	.word	0x40010c00

080001a0 <nrf24l01p_spi_rw>:

uint8_t nrf24l01p_spi_rw(uint8_t value)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b086      	sub	sp, #24
 80001a4:	af02      	add	r7, sp, #8
 80001a6:	4603      	mov	r3, r0
 80001a8:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	HAL_SPI_TransmitReceive(&hspi2, &value, &data, 1, 100);
 80001aa:	f107 020f 	add.w	r2, r7, #15
 80001ae:	1df9      	adds	r1, r7, #7
 80001b0:	2364      	movs	r3, #100	; 0x64
 80001b2:	9300      	str	r3, [sp, #0]
 80001b4:	2301      	movs	r3, #1
 80001b6:	4804      	ldr	r0, [pc, #16]	; (80001c8 <nrf24l01p_spi_rw+0x28>)
 80001b8:	f003 fc16 	bl	80039e8 <HAL_SPI_TransmitReceive>
	return data;
 80001bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80001be:	4618      	mov	r0, r3
 80001c0:	3710      	adds	r7, #16
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	2000004c 	.word	0x2000004c

080001cc <vfd_update>:

void vfd_update(void) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
	uint8_t data = 0b11000000; // command 3, set address to 0
 80001d2:	23c0      	movs	r3, #192	; 0xc0
 80001d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80001d6:	2200      	movs	r2, #0
 80001d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001dc:	480d      	ldr	r0, [pc, #52]	; (8000214 <vfd_update+0x48>)
 80001de:	f001 fe0a 	bl	8001df6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80001e2:	1df9      	adds	r1, r7, #7
 80001e4:	f04f 33ff 	mov.w	r3, #4294967295
 80001e8:	2201      	movs	r2, #1
 80001ea:	480b      	ldr	r0, [pc, #44]	; (8000218 <vfd_update+0x4c>)
 80001ec:	f003 fac0 	bl	8003770 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	2221      	movs	r2, #33	; 0x21
 80001f6:	4909      	ldr	r1, [pc, #36]	; (800021c <vfd_update+0x50>)
 80001f8:	4807      	ldr	r0, [pc, #28]	; (8000218 <vfd_update+0x4c>)
 80001fa:	f003 fab9 	bl	8003770 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80001fe:	2201      	movs	r2, #1
 8000200:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <vfd_update+0x48>)
 8000206:	f001 fdf6 	bl	8001df6 <HAL_GPIO_WritePin>
}
 800020a:	bf00      	nop
 800020c:	3708      	adds	r7, #8
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	40010c00 	.word	0x40010c00
 8000218:	2000004c 	.word	0x2000004c
 800021c:	2000017c 	.word	0x2000017c

08000220 <do_microrl>:

void do_microrl(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
	return;
 8000224:	bf00      	nop
}
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr

0800022c <do_vfd_init>:


void do_vfd_init(void)
{
 800022c:	b5b0      	push	{r4, r5, r7, lr}
 800022e:	b094      	sub	sp, #80	; 0x50
 8000230:	af00      	add	r7, sp, #0
#define FULL_DEMO (0)
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1); // put CS high
 8000232:	2201      	movs	r2, #1
 8000234:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000238:	48ca      	ldr	r0, [pc, #808]	; (8000564 <do_vfd_init+0x338>)
 800023a:	f001 fddc 	bl	8001df6 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 800023e:	200a      	movs	r0, #10
 8000240:	f001 fb36 	bl	80018b0 <HAL_Delay>
	HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 8000244:	2201      	movs	r2, #1
 8000246:	2120      	movs	r1, #32
 8000248:	48c6      	ldr	r0, [pc, #792]	; (8000564 <do_vfd_init+0x338>)
 800024a:	f001 fdd4 	bl	8001df6 <HAL_GPIO_WritePin>

	for (int i = 0; i < sizeof(vfd.arr1); i++) {
 800024e:	2300      	movs	r3, #0
 8000250:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000252:	e007      	b.n	8000264 <do_vfd_init+0x38>
		vfd.arr1[i] = 0xFF;
 8000254:	4ac4      	ldr	r2, [pc, #784]	; (8000568 <do_vfd_init+0x33c>)
 8000256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000258:	4413      	add	r3, r2
 800025a:	22ff      	movs	r2, #255	; 0xff
 800025c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(vfd.arr1); i++) {
 800025e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000260:	3301      	adds	r3, #1
 8000262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000266:	2b20      	cmp	r3, #32
 8000268:	d9f4      	bls.n	8000254 <do_vfd_init+0x28>
	}
	uint8_t data;

	data = 0b01000001; // command 2, write to LED port
 800026a:	2341      	movs	r3, #65	; 0x41
 800026c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000270:	2200      	movs	r2, #0
 8000272:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000276:	48bb      	ldr	r0, [pc, #748]	; (8000564 <do_vfd_init+0x338>)
 8000278:	f001 fdbd 	bl	8001df6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800027c:	f107 0133 	add.w	r1, r7, #51	; 0x33
 8000280:	f04f 33ff 	mov.w	r3, #4294967295
 8000284:	2201      	movs	r2, #1
 8000286:	48b9      	ldr	r0, [pc, #740]	; (800056c <do_vfd_init+0x340>)
 8000288:	f003 fa72 	bl	8003770 <HAL_SPI_Transmit>
	HAL_Delay(10);
 800028c:	200a      	movs	r0, #10
 800028e:	f001 fb0f 	bl	80018b0 <HAL_Delay>

	data = 0b1111; // disable LEDs
 8000292:	230f      	movs	r3, #15
 8000294:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000298:	f107 0133 	add.w	r1, r7, #51	; 0x33
 800029c:	f04f 33ff 	mov.w	r3, #4294967295
 80002a0:	2201      	movs	r2, #1
 80002a2:	48b2      	ldr	r0, [pc, #712]	; (800056c <do_vfd_init+0x340>)
 80002a4:	f003 fa64 	bl	8003770 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80002a8:	2201      	movs	r2, #1
 80002aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ae:	48ad      	ldr	r0, [pc, #692]	; (8000564 <do_vfd_init+0x338>)
 80002b0:	f001 fda1 	bl	8001df6 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80002b4:	200a      	movs	r0, #10
 80002b6:	f001 fafb 	bl	80018b0 <HAL_Delay>

	//write twice, some strange problem with SPI init

	data = 0b01000001; // command 2, write to LED port
 80002ba:	2341      	movs	r3, #65	; 0x41
 80002bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80002c0:	2200      	movs	r2, #0
 80002c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002c6:	48a7      	ldr	r0, [pc, #668]	; (8000564 <do_vfd_init+0x338>)
 80002c8:	f001 fd95 	bl	8001df6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80002cc:	f107 0133 	add.w	r1, r7, #51	; 0x33
 80002d0:	f04f 33ff 	mov.w	r3, #4294967295
 80002d4:	2201      	movs	r2, #1
 80002d6:	48a5      	ldr	r0, [pc, #660]	; (800056c <do_vfd_init+0x340>)
 80002d8:	f003 fa4a 	bl	8003770 <HAL_SPI_Transmit>
	HAL_Delay(10);
 80002dc:	200a      	movs	r0, #10
 80002de:	f001 fae7 	bl	80018b0 <HAL_Delay>

	data = 0b1111; // disable LEDs
 80002e2:	230f      	movs	r3, #15
 80002e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80002e8:	f107 0133 	add.w	r1, r7, #51	; 0x33
 80002ec:	f04f 33ff 	mov.w	r3, #4294967295
 80002f0:	2201      	movs	r2, #1
 80002f2:	489e      	ldr	r0, [pc, #632]	; (800056c <do_vfd_init+0x340>)
 80002f4:	f003 fa3c 	bl	8003770 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80002f8:	2201      	movs	r2, #1
 80002fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002fe:	4899      	ldr	r0, [pc, #612]	; (8000564 <do_vfd_init+0x338>)
 8000300:	f001 fd79 	bl	8001df6 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000304:	200a      	movs	r0, #10
 8000306:	f001 fad3 	bl	80018b0 <HAL_Delay>

	data = 0b01000000; // command 2, write to Display port
 800030a:	2340      	movs	r3, #64	; 0x40
 800030c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000310:	2200      	movs	r2, #0
 8000312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000316:	4893      	ldr	r0, [pc, #588]	; (8000564 <do_vfd_init+0x338>)
 8000318:	f001 fd6d 	bl	8001df6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800031c:	f107 0133 	add.w	r1, r7, #51	; 0x33
 8000320:	f04f 33ff 	mov.w	r3, #4294967295
 8000324:	2201      	movs	r2, #1
 8000326:	4891      	ldr	r0, [pc, #580]	; (800056c <do_vfd_init+0x340>)
 8000328:	f003 fa22 	bl	8003770 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800032c:	2201      	movs	r2, #1
 800032e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000332:	488c      	ldr	r0, [pc, #560]	; (8000564 <do_vfd_init+0x338>)
 8000334:	f001 fd5f 	bl	8001df6 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000338:	200a      	movs	r0, #10
 800033a:	f001 fab9 	bl	80018b0 <HAL_Delay>
	vfd_update();
 800033e:	f7ff ff45 	bl	80001cc <vfd_update>
	HAL_Delay(10);
 8000342:	200a      	movs	r0, #10
 8000344:	f001 fab4 	bl	80018b0 <HAL_Delay>
	// init display, 11 digits 17 segments
	data = 0b00000111; // command 1, 11 digits 17 segments
 8000348:	2307      	movs	r3, #7
 800034a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800034e:	2200      	movs	r2, #0
 8000350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000354:	4883      	ldr	r0, [pc, #524]	; (8000564 <do_vfd_init+0x338>)
 8000356:	f001 fd4e 	bl	8001df6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800035a:	f107 0133 	add.w	r1, r7, #51	; 0x33
 800035e:	f04f 33ff 	mov.w	r3, #4294967295
 8000362:	2201      	movs	r2, #1
 8000364:	4881      	ldr	r0, [pc, #516]	; (800056c <do_vfd_init+0x340>)
 8000366:	f003 fa03 	bl	8003770 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000370:	487c      	ldr	r0, [pc, #496]	; (8000564 <do_vfd_init+0x338>)
 8000372:	f001 fd40 	bl	8001df6 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000376:	200a      	movs	r0, #10
 8000378:	f001 fa9a 	bl	80018b0 <HAL_Delay>
	data = 0b10000000; // command 4
 800037c:	2380      	movs	r3, #128	; 0x80
 800037e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	data |= 1 << 3; // enable/disable display
 8000382:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000386:	f043 0308 	orr.w	r3, r3, #8
 800038a:	b2db      	uxtb	r3, r3
 800038c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	data |= 0b111; // set brightness
 8000390:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000394:	f043 0307 	orr.w	r3, r3, #7
 8000398:	b2db      	uxtb	r3, r3
 800039a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800039e:	2200      	movs	r2, #0
 80003a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a4:	486f      	ldr	r0, [pc, #444]	; (8000564 <do_vfd_init+0x338>)
 80003a6:	f001 fd26 	bl	8001df6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80003aa:	f107 0133 	add.w	r1, r7, #51	; 0x33
 80003ae:	f04f 33ff 	mov.w	r3, #4294967295
 80003b2:	2201      	movs	r2, #1
 80003b4:	486d      	ldr	r0, [pc, #436]	; (800056c <do_vfd_init+0x340>)
 80003b6:	f003 f9db 	bl	8003770 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80003ba:	2201      	movs	r2, #1
 80003bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003c0:	4868      	ldr	r0, [pc, #416]	; (8000564 <do_vfd_init+0x338>)
 80003c2:	f001 fd18 	bl	8001df6 <HAL_GPIO_WritePin>
		do_microrl();
	}


	//erase everything... just in case
	clr_vfd();
 80003c6:	f001 f9d1 	bl	800176c <clr_vfd>

	data = 0b10000000; // command 4
 80003ca:	2380      	movs	r3, #128	; 0x80
 80003cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	data |= 1 << 3; // enable/disable display
 80003d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80003d4:	f043 0308 	orr.w	r3, r3, #8
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	data |= 0b111; // set max brightness
 80003de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80003e2:	f043 0307 	orr.w	r3, r3, #7
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80003ec:	2200      	movs	r2, #0
 80003ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f2:	485c      	ldr	r0, [pc, #368]	; (8000564 <do_vfd_init+0x338>)
 80003f4:	f001 fcff 	bl	8001df6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80003f8:	f107 0133 	add.w	r1, r7, #51	; 0x33
 80003fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000400:	2201      	movs	r2, #1
 8000402:	485a      	ldr	r0, [pc, #360]	; (800056c <do_vfd_init+0x340>)
 8000404:	f003 f9b4 	bl	8003770 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000408:	2201      	movs	r2, #1
 800040a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800040e:	4855      	ldr	r0, [pc, #340]	; (8000564 <do_vfd_init+0x338>)
 8000410:	f001 fcf1 	bl	8001df6 <HAL_GPIO_WritePin>

	// fill everything
	for (int j = 1; j < 15; j++) {
 8000414:	2301      	movs	r3, #1
 8000416:	64bb      	str	r3, [r7, #72]	; 0x48
 8000418:	e03b      	b.n	8000492 <do_vfd_init+0x266>
		uint32_t temp = 1 << j;
 800041a:	2201      	movs	r2, #1
 800041c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800041e:	fa02 f303 	lsl.w	r3, r2, r3
 8000422:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i = 1; i < 11; i++) {
 8000424:	2301      	movs	r3, #1
 8000426:	647b      	str	r3, [r7, #68]	; 0x44
 8000428:	e026      	b.n	8000478 <do_vfd_init+0x24c>
			for (int b = 0; b < 3; b++) {
 800042a:	2300      	movs	r3, #0
 800042c:	643b      	str	r3, [r7, #64]	; 0x40
 800042e:	e01d      	b.n	800046c <do_vfd_init+0x240>
				vfd.arr2[i][b] |= (temp >> (b << 3)) & 0xFF;
 8000430:	494d      	ldr	r1, [pc, #308]	; (8000568 <do_vfd_init+0x33c>)
 8000432:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000434:	4613      	mov	r3, r2
 8000436:	005b      	lsls	r3, r3, #1
 8000438:	4413      	add	r3, r2
 800043a:	18ca      	adds	r2, r1, r3
 800043c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800043e:	4413      	add	r3, r2
 8000440:	781a      	ldrb	r2, [r3, #0]
 8000442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000444:	00db      	lsls	r3, r3, #3
 8000446:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000448:	fa21 f303 	lsr.w	r3, r1, r3
 800044c:	b2db      	uxtb	r3, r3
 800044e:	4313      	orrs	r3, r2
 8000450:	b2d8      	uxtb	r0, r3
 8000452:	4945      	ldr	r1, [pc, #276]	; (8000568 <do_vfd_init+0x33c>)
 8000454:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000456:	4613      	mov	r3, r2
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	4413      	add	r3, r2
 800045c:	18ca      	adds	r2, r1, r3
 800045e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000460:	4413      	add	r3, r2
 8000462:	4602      	mov	r2, r0
 8000464:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++) {
 8000466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000468:	3301      	adds	r3, #1
 800046a:	643b      	str	r3, [r7, #64]	; 0x40
 800046c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800046e:	2b02      	cmp	r3, #2
 8000470:	ddde      	ble.n	8000430 <do_vfd_init+0x204>
		for (int i = 1; i < 11; i++) {
 8000472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000474:	3301      	adds	r3, #1
 8000476:	647b      	str	r3, [r7, #68]	; 0x44
 8000478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800047a:	2b0a      	cmp	r3, #10
 800047c:	ddd5      	ble.n	800042a <do_vfd_init+0x1fe>
			}
		}
		vfd_update();
 800047e:	f7ff fea5 	bl	80001cc <vfd_update>
		HAL_Delay(100);
 8000482:	2064      	movs	r0, #100	; 0x64
 8000484:	f001 fa14 	bl	80018b0 <HAL_Delay>
		do_microrl();
 8000488:	f7ff feca 	bl	8000220 <do_microrl>
	for (int j = 1; j < 15; j++) {
 800048c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800048e:	3301      	adds	r3, #1
 8000490:	64bb      	str	r3, [r7, #72]	; 0x48
 8000492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000494:	2b0e      	cmp	r3, #14
 8000496:	ddc0      	ble.n	800041a <do_vfd_init+0x1ee>
	}

	const uint8_t arr[][2] = {
 8000498:	4b35      	ldr	r3, [pc, #212]	; (8000570 <do_vfd_init+0x344>)
 800049a:	463c      	mov	r4, r7
 800049c:	461d      	mov	r5, r3
 800049e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004aa:	682b      	ldr	r3, [r5, #0]
 80004ac:	8023      	strh	r3, [r4, #0]
			{ 9, 16 },
			{ 10, 16 },
			{ 10, 15 },
	};

	for (int j = 0; j < sizeof(arr) / 2; j++) {
 80004ae:	2300      	movs	r3, #0
 80004b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80004b2:	e047      	b.n	8000544 <do_vfd_init+0x318>
		for (int b = 0; b < 3; b++)
 80004b4:	2300      	movs	r3, #0
 80004b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80004b8:	e037      	b.n	800052a <do_vfd_init+0x2fe>
			vfd.arr2[arr[j][0]][b] |= ((1 << arr[j][1]) >> (b << 3)) & 0xFF;
 80004ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004bc:	005b      	lsls	r3, r3, #1
 80004be:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80004c2:	4413      	add	r3, r2
 80004c4:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 80004c8:	4619      	mov	r1, r3
 80004ca:	4a27      	ldr	r2, [pc, #156]	; (8000568 <do_vfd_init+0x33c>)
 80004cc:	460b      	mov	r3, r1
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	440b      	add	r3, r1
 80004d2:	441a      	add	r2, r3
 80004d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80004d6:	4413      	add	r3, r2
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	b25a      	sxtb	r2, r3
 80004dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80004e4:	440b      	add	r3, r1
 80004e6:	f813 3c4f 	ldrb.w	r3, [r3, #-79]
 80004ea:	4619      	mov	r1, r3
 80004ec:	2301      	movs	r3, #1
 80004ee:	fa03 f101 	lsl.w	r1, r3, r1
 80004f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	fa41 f303 	asr.w	r3, r1, r3
 80004fa:	b25b      	sxtb	r3, r3
 80004fc:	4313      	orrs	r3, r2
 80004fe:	b25a      	sxtb	r2, r3
 8000500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000508:	440b      	add	r3, r1
 800050a:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 800050e:	4619      	mov	r1, r3
 8000510:	b2d0      	uxtb	r0, r2
 8000512:	4a15      	ldr	r2, [pc, #84]	; (8000568 <do_vfd_init+0x33c>)
 8000514:	460b      	mov	r3, r1
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	440b      	add	r3, r1
 800051a:	441a      	add	r2, r3
 800051c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800051e:	4413      	add	r3, r2
 8000520:	4602      	mov	r2, r0
 8000522:	701a      	strb	r2, [r3, #0]
		for (int b = 0; b < 3; b++)
 8000524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000526:	3301      	adds	r3, #1
 8000528:	63bb      	str	r3, [r7, #56]	; 0x38
 800052a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800052c:	2b02      	cmp	r3, #2
 800052e:	ddc4      	ble.n	80004ba <do_vfd_init+0x28e>
		vfd_update();
 8000530:	f7ff fe4c 	bl	80001cc <vfd_update>
		HAL_Delay(50);
 8000534:	2032      	movs	r0, #50	; 0x32
 8000536:	f001 f9bb 	bl	80018b0 <HAL_Delay>
		do_microrl();
 800053a:	f7ff fe71 	bl	8000220 <do_microrl>
	for (int j = 0; j < sizeof(arr) / 2; j++) {
 800053e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000540:	3301      	adds	r3, #1
 8000542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000546:	2b18      	cmp	r3, #24
 8000548:	d9b4      	bls.n	80004b4 <do_vfd_init+0x288>
	}

	HAL_Delay(300);
 800054a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800054e:	f001 f9af 	bl	80018b0 <HAL_Delay>

	str2vfd("TEST BOARD");
 8000552:	4808      	ldr	r0, [pc, #32]	; (8000574 <do_vfd_init+0x348>)
 8000554:	f001 f884 	bl	8001660 <str2vfd>

	vfd_update();
 8000558:	f7ff fe38 	bl	80001cc <vfd_update>
}
 800055c:	bf00      	nop
 800055e:	3750      	adds	r7, #80	; 0x50
 8000560:	46bd      	mov	sp, r7
 8000562:	bdb0      	pop	{r4, r5, r7, pc}
 8000564:	40010c00 	.word	0x40010c00
 8000568:	2000017c 	.word	0x2000017c
 800056c:	2000004c 	.word	0x2000004c
 8000570:	08003ef4 	.word	0x08003ef4
 8000574:	08003ee8 	.word	0x08003ee8

08000578 <vfd_leds>:

void vfd_leds(uint8_t leds)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0b01000001; // command 2, write to LED port
 8000582:	2341      	movs	r3, #65	; 0x41
 8000584:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058c:	4811      	ldr	r0, [pc, #68]	; (80005d4 <vfd_leds+0x5c>)
 800058e:	f001 fc32 	bl	8001df6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000592:	f107 010f 	add.w	r1, r7, #15
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
 800059a:	2201      	movs	r2, #1
 800059c:	480e      	ldr	r0, [pc, #56]	; (80005d8 <vfd_leds+0x60>)
 800059e:	f003 f8e7 	bl	8003770 <HAL_SPI_Transmit>

	data = (~leds)&0b1111;
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	43db      	mvns	r3, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	f003 030f 	and.w	r3, r3, #15
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80005b0:	f107 010f 	add.w	r1, r7, #15
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
 80005b8:	2201      	movs	r2, #1
 80005ba:	4807      	ldr	r0, [pc, #28]	; (80005d8 <vfd_leds+0x60>)
 80005bc:	f003 f8d8 	bl	8003770 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c6:	4803      	ldr	r0, [pc, #12]	; (80005d4 <vfd_leds+0x5c>)
 80005c8:	f001 fc15 	bl	8001df6 <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40010c00 	.word	0x40010c00
 80005d8:	2000004c 	.word	0x2000004c

080005dc <do_leds>:

void do_leds(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	static uint8_t tick_counter = 0;
	if (HAL_GetTick() - last_time < 500)
 80005e2:	f001 f95b 	bl	800189c <HAL_GetTick>
 80005e6:	4602      	mov	r2, r0
 80005e8:	4b2c      	ldr	r3, [pc, #176]	; (800069c <do_leds+0xc0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005f2:	d34f      	bcc.n	8000694 <do_leds+0xb8>
		return;
	last_time = HAL_GetTick();
 80005f4:	f001 f952 	bl	800189c <HAL_GetTick>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a28      	ldr	r2, [pc, #160]	; (800069c <do_leds+0xc0>)
 80005fc:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000602:	4827      	ldr	r0, [pc, #156]	; (80006a0 <do_leds+0xc4>)
 8000604:	f001 fc0f 	bl	8001e26 <HAL_GPIO_TogglePin>
	bool PB1 = HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin);
 8000608:	2102      	movs	r1, #2
 800060a:	4826      	ldr	r0, [pc, #152]	; (80006a4 <do_leds+0xc8>)
 800060c:	f001 fbdc 	bl	8001dc8 <HAL_GPIO_ReadPin>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	bf14      	ite	ne
 8000616:	2301      	movne	r3, #1
 8000618:	2300      	moveq	r3, #0
 800061a:	71fb      	strb	r3, [r7, #7]
	bool PB2 = HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin);
 800061c:	2104      	movs	r1, #4
 800061e:	4821      	ldr	r0, [pc, #132]	; (80006a4 <do_leds+0xc8>)
 8000620:	f001 fbd2 	bl	8001dc8 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	bf14      	ite	ne
 800062a:	2301      	movne	r3, #1
 800062c:	2300      	moveq	r3, #0
 800062e:	71bb      	strb	r3, [r7, #6]
	if (PB1 || PB2)
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d102      	bne.n	800063c <do_leds+0x60>
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d02c      	beq.n	8000696 <do_leds+0xba>
	{
		vfd_leds((1<<((tick_counter >> 1)&0b11)));
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <do_leds+0xcc>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	085b      	lsrs	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	f003 0303 	and.w	r3, r3, #3
 8000648:	2201      	movs	r2, #1
 800064a:	fa02 f303 	lsl.w	r3, r2, r3
 800064e:	b2db      	uxtb	r3, r3
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ff91 	bl	8000578 <vfd_leds>
		if (PB1)
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d00d      	beq.n	8000678 <do_leds+0x9c>
		{
			tick_counter++;
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <do_leds+0xcc>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	3301      	adds	r3, #1
 8000662:	b2da      	uxtb	r2, r3
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <do_leds+0xcc>)
 8000666:	701a      	strb	r2, [r3, #0]
			clr_vfd();
 8000668:	f001 f880 	bl	800176c <clr_vfd>
			str2vfd("PB1 OKAY");
 800066c:	480f      	ldr	r0, [pc, #60]	; (80006ac <do_leds+0xd0>)
 800066e:	f000 fff7 	bl	8001660 <str2vfd>
			vfd_update();
 8000672:	f7ff fdab 	bl	80001cc <vfd_update>
 8000676:	e00e      	b.n	8000696 <do_leds+0xba>
		}
		else
		{
			tick_counter--;
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <do_leds+0xcc>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	3b01      	subs	r3, #1
 800067e:	b2da      	uxtb	r2, r3
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <do_leds+0xcc>)
 8000682:	701a      	strb	r2, [r3, #0]
			clr_vfd();
 8000684:	f001 f872 	bl	800176c <clr_vfd>
			str2vfd("PB2 OKAY");
 8000688:	4809      	ldr	r0, [pc, #36]	; (80006b0 <do_leds+0xd4>)
 800068a:	f000 ffe9 	bl	8001660 <str2vfd>
			vfd_update();
 800068e:	f7ff fd9d 	bl	80001cc <vfd_update>
 8000692:	e000      	b.n	8000696 <do_leds+0xba>
		return;
 8000694:	bf00      	nop
	}
	else
	{
		//vfd_leds(0);
	}
}
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000030 	.word	0x20000030
 80006a0:	40011000 	.word	0x40011000
 80006a4:	40010c00 	.word	0x40010c00
 80006a8:	20000034 	.word	0x20000034
 80006ac:	08003f28 	.word	0x08003f28
 80006b0:	08003f34 	.word	0x08003f34

080006b4 <read.6589>:

void do_fram_test(void)
{
	bool read(void)
	{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af04      	add	r7, sp, #16
 80006ba:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t temp;
		HAL_I2C_Mem_Read(&hi2c1, 0b10100000, 0x42, 1, &temp, 1, 10);
 80006be:	230a      	movs	r3, #10
 80006c0:	9302      	str	r3, [sp, #8]
 80006c2:	2301      	movs	r3, #1
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	f107 030f 	add.w	r3, r7, #15
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2301      	movs	r3, #1
 80006ce:	2242      	movs	r2, #66	; 0x42
 80006d0:	21a0      	movs	r1, #160	; 0xa0
 80006d2:	480f      	ldr	r0, [pc, #60]	; (8000710 <read.6589+0x5c>)
 80006d4:	f001 fdfe 	bl	80022d4 <HAL_I2C_Mem_Read>
		if (temp != 0x42)
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	2b42      	cmp	r3, #66	; 0x42
 80006dc:	d001      	beq.n	80006e2 <read.6589+0x2e>
			return false;
 80006de:	2300      	movs	r3, #0
 80006e0:	e012      	b.n	8000708 <read.6589+0x54>
		HAL_I2C_Mem_Read(&hi2c1, 0b10100010, 0x5A, 1, &temp, 1, 10);
 80006e2:	230a      	movs	r3, #10
 80006e4:	9302      	str	r3, [sp, #8]
 80006e6:	2301      	movs	r3, #1
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	f107 030f 	add.w	r3, r7, #15
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	225a      	movs	r2, #90	; 0x5a
 80006f4:	21a2      	movs	r1, #162	; 0xa2
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <read.6589+0x5c>)
 80006f8:	f001 fdec 	bl	80022d4 <HAL_I2C_Mem_Read>
		if (temp != 0xA5)
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	2ba5      	cmp	r3, #165	; 0xa5
 8000700:	d001      	beq.n	8000706 <read.6589+0x52>
			return false;
 8000702:	2300      	movs	r3, #0
 8000704:	e000      	b.n	8000708 <read.6589+0x54>
		return true;
 8000706:	2301      	movs	r3, #1
	}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000a4 	.word	0x200000a4

08000714 <do_fram_test>:
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b0c6      	sub	sp, #280	; 0x118
 8000718:	af04      	add	r7, sp, #16
void do_fram_test(void)
 800071a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800071e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		HAL_I2C_Mem_Write(&hi2c1, 0b10100000, 0x42, 1, &temp, 1, 10);
		temp = 0xA5;
		HAL_I2C_Mem_Write(&hi2c1, 0b10100010, 0x5A, 1, &temp, 1, 10);
	}
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 200)
 8000722:	f001 f8bb 	bl	800189c <HAL_GetTick>
 8000726:	4602      	mov	r2, r0
 8000728:	4b5e      	ldr	r3, [pc, #376]	; (80008a4 <do_fram_test+0x190>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	2bc7      	cmp	r3, #199	; 0xc7
 8000730:	f240 80b3 	bls.w	800089a <do_fram_test+0x186>
		return;
	bool PB1 = HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin);
 8000734:	2102      	movs	r1, #2
 8000736:	485c      	ldr	r0, [pc, #368]	; (80008a8 <do_fram_test+0x194>)
 8000738:	f001 fb46 	bl	8001dc8 <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	bf14      	ite	ne
 8000742:	2301      	movne	r3, #1
 8000744:	2300      	moveq	r3, #0
 8000746:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	bool PB2 = HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin);
 800074a:	2104      	movs	r1, #4
 800074c:	4856      	ldr	r0, [pc, #344]	; (80008a8 <do_fram_test+0x194>)
 800074e:	f001 fb3b 	bl	8001dc8 <HAL_GPIO_ReadPin>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	bf14      	ite	ne
 8000758:	2301      	movne	r3, #1
 800075a:	2300      	moveq	r3, #0
 800075c:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	if (PB1 && PB2)
 8000760:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000764:	2b00      	cmp	r3, #0
 8000766:	f000 8092 	beq.w	800088e <do_fram_test+0x17a>
 800076a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800076e:	2b00      	cmp	r3, #0
 8000770:	f000 808d 	beq.w	800088e <do_fram_test+0x17a>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0); // turn led on
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077a:	484c      	ldr	r0, [pc, #304]	; (80008ac <do_fram_test+0x198>)
 800077c:	f001 fb3b 	bl	8001df6 <HAL_GPIO_WritePin>
		vfd_leds(0b1111);
 8000780:	200f      	movs	r0, #15
 8000782:	f7ff fef9 	bl	8000578 <vfd_leds>
		HAL_Delay(500);
 8000786:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800078a:	f001 f891 	bl	80018b0 <HAL_Delay>
		if (read())
 800078e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000792:	469c      	mov	ip, r3
 8000794:	f7ff ff8e 	bl	80006b4 <read.6589>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d00a      	beq.n	80007b4 <do_fram_test+0xa0>
		{
			vfd_leds(0b0100);
 800079e:	2004      	movs	r0, #4
 80007a0:	f7ff feea 	bl	8000578 <vfd_leds>
			clr_vfd();
 80007a4:	f000 ffe2 	bl	800176c <clr_vfd>
			str2vfd("FRAM FOUND");
 80007a8:	4841      	ldr	r0, [pc, #260]	; (80008b0 <do_fram_test+0x19c>)
 80007aa:	f000 ff59 	bl	8001660 <str2vfd>
			vfd_update();
 80007ae:	f7ff fd0d 	bl	80001cc <vfd_update>
 80007b2:	e028      	b.n	8000806 <do_fram_test+0xf2>
		}
		else
		{
			vfd_leds(0b0001);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff fedf 	bl	8000578 <vfd_leds>
			write();
 80007ba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80007be:	469c      	mov	ip, r3
 80007c0:	f000 f87e 	bl	80008c0 <write.6593>
			HAL_Delay(500);
 80007c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007c8:	f001 f872 	bl	80018b0 <HAL_Delay>
			if (read())
 80007cc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80007d0:	469c      	mov	ip, r3
 80007d2:	f7ff ff6f 	bl	80006b4 <read.6589>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d00a      	beq.n	80007f2 <do_fram_test+0xde>
			{
				vfd_leds(0b0011);
 80007dc:	2003      	movs	r0, #3
 80007de:	f7ff fecb 	bl	8000578 <vfd_leds>
				clr_vfd();
 80007e2:	f000 ffc3 	bl	800176c <clr_vfd>
				str2vfd("FRAM OKAY");
 80007e6:	4833      	ldr	r0, [pc, #204]	; (80008b4 <do_fram_test+0x1a0>)
 80007e8:	f000 ff3a 	bl	8001660 <str2vfd>
				vfd_update();
 80007ec:	f7ff fcee 	bl	80001cc <vfd_update>
 80007f0:	e009      	b.n	8000806 <do_fram_test+0xf2>
			}
			else
			{
				vfd_leds(0b1000);
 80007f2:	2008      	movs	r0, #8
 80007f4:	f7ff fec0 	bl	8000578 <vfd_leds>
				clr_vfd();
 80007f8:	f000 ffb8 	bl	800176c <clr_vfd>
				str2vfd("NO FRAM!");
 80007fc:	482e      	ldr	r0, [pc, #184]	; (80008b8 <do_fram_test+0x1a4>)
 80007fe:	f000 ff2f 	bl	8001660 <str2vfd>
				vfd_update();
 8000802:	f7ff fce3 	bl	80001cc <vfd_update>
			}
		}

		while(HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin));
 8000806:	bf00      	nop
 8000808:	2102      	movs	r1, #2
 800080a:	4827      	ldr	r0, [pc, #156]	; (80008a8 <do_fram_test+0x194>)
 800080c:	f001 fadc 	bl	8001dc8 <HAL_GPIO_ReadPin>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1f8      	bne.n	8000808 <do_fram_test+0xf4>
		if (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin))
 8000816:	2104      	movs	r1, #4
 8000818:	4823      	ldr	r0, [pc, #140]	; (80008a8 <do_fram_test+0x194>)
 800081a:	f001 fad5 	bl	8001dc8 <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d034      	beq.n	800088e <do_fram_test+0x17a>
		{
			// PB2 still pressed, erase RAM
			vfd_leds(0b1001);
 8000824:	2009      	movs	r0, #9
 8000826:	f7ff fea7 	bl	8000578 <vfd_leds>
			uint8_t zero[256] = {0};
 800082a:	463b      	mov	r3, r7
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	3304      	adds	r3, #4
 8000832:	22fc      	movs	r2, #252	; 0xfc
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f003 fb42 	bl	8003ec0 <memset>
			//first half
			HAL_I2C_Mem_Write(&hi2c1, 0b10100000, 0, 1, zero, sizeof(zero), 200);
 800083c:	23c8      	movs	r3, #200	; 0xc8
 800083e:	9302      	str	r3, [sp, #8]
 8000840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000844:	9301      	str	r3, [sp, #4]
 8000846:	463b      	mov	r3, r7
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2200      	movs	r2, #0
 800084e:	21a0      	movs	r1, #160	; 0xa0
 8000850:	481a      	ldr	r0, [pc, #104]	; (80008bc <do_fram_test+0x1a8>)
 8000852:	f001 fc45 	bl	80020e0 <HAL_I2C_Mem_Write>
			//second half
			HAL_I2C_Mem_Write(&hi2c1, 0b10100010, 0, 1, zero, sizeof(zero), 200);
 8000856:	23c8      	movs	r3, #200	; 0xc8
 8000858:	9302      	str	r3, [sp, #8]
 800085a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	463b      	mov	r3, r7
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2301      	movs	r3, #1
 8000866:	2200      	movs	r2, #0
 8000868:	21a2      	movs	r1, #162	; 0xa2
 800086a:	4814      	ldr	r0, [pc, #80]	; (80008bc <do_fram_test+0x1a8>)
 800086c:	f001 fc38 	bl	80020e0 <HAL_I2C_Mem_Write>
			HAL_Delay(500);
 8000870:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000874:	f001 f81c 	bl	80018b0 <HAL_Delay>
			vfd_leds(0b1010);
 8000878:	200a      	movs	r0, #10
 800087a:	f7ff fe7d 	bl	8000578 <vfd_leds>
			while (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin));
 800087e:	bf00      	nop
 8000880:	2104      	movs	r1, #4
 8000882:	4809      	ldr	r0, [pc, #36]	; (80008a8 <do_fram_test+0x194>)
 8000884:	f001 faa0 	bl	8001dc8 <HAL_GPIO_ReadPin>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1f8      	bne.n	8000880 <do_fram_test+0x16c>
		}
	}
	last_time = HAL_GetTick();
 800088e:	f001 f805 	bl	800189c <HAL_GetTick>
 8000892:	4603      	mov	r3, r0
 8000894:	4a03      	ldr	r2, [pc, #12]	; (80008a4 <do_fram_test+0x190>)
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	e000      	b.n	800089c <do_fram_test+0x188>
		return;
 800089a:	bf00      	nop
}
 800089c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000038 	.word	0x20000038
 80008a8:	40010c00 	.word	0x40010c00
 80008ac:	40011000 	.word	0x40011000
 80008b0:	08003f40 	.word	0x08003f40
 80008b4:	08003f4c 	.word	0x08003f4c
 80008b8:	08003f58 	.word	0x08003f58
 80008bc:	200000a4 	.word	0x200000a4

080008c0 <write.6593>:
	{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af04      	add	r7, sp, #16
 80008c6:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t temp = 0x42;
 80008ca:	2342      	movs	r3, #66	; 0x42
 80008cc:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, 0b10100000, 0x42, 1, &temp, 1, 10);
 80008ce:	230a      	movs	r3, #10
 80008d0:	9302      	str	r3, [sp, #8]
 80008d2:	2301      	movs	r3, #1
 80008d4:	9301      	str	r3, [sp, #4]
 80008d6:	f107 030f 	add.w	r3, r7, #15
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2301      	movs	r3, #1
 80008de:	2242      	movs	r2, #66	; 0x42
 80008e0:	21a0      	movs	r1, #160	; 0xa0
 80008e2:	480b      	ldr	r0, [pc, #44]	; (8000910 <write.6593+0x50>)
 80008e4:	f001 fbfc 	bl	80020e0 <HAL_I2C_Mem_Write>
		temp = 0xA5;
 80008e8:	23a5      	movs	r3, #165	; 0xa5
 80008ea:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, 0b10100010, 0x5A, 1, &temp, 1, 10);
 80008ec:	230a      	movs	r3, #10
 80008ee:	9302      	str	r3, [sp, #8]
 80008f0:	2301      	movs	r3, #1
 80008f2:	9301      	str	r3, [sp, #4]
 80008f4:	f107 030f 	add.w	r3, r7, #15
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2301      	movs	r3, #1
 80008fc:	225a      	movs	r2, #90	; 0x5a
 80008fe:	21a2      	movs	r1, #162	; 0xa2
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <write.6593+0x50>)
 8000902:	f001 fbed 	bl	80020e0 <HAL_I2C_Mem_Write>
	}
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000a4 	.word	0x200000a4

08000914 <delay>:
};

uint8_t address[5] = { 0x31, 0x41, 0x59, 0x26, 0x56 };

void delay(uint32_t delay)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f000 ffc7 	bl	80018b0 <HAL_Delay>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <nrf_init_tx>:

void nrf_init_tx(uint8_t *address)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
    nrf24l01p_get_clear_irq_flags();
 8000932:	f000 fa78 	bl	8000e26 <nrf24l01p_get_clear_irq_flags>
    nrf24l01p_close_pipe(NRF24L01P_ALL);
 8000936:	20ff      	movs	r0, #255	; 0xff
 8000938:	f000 fb0f 	bl	8000f5a <nrf24l01p_close_pipe>
    nrf24l01p_open_pipe(NRF24L01P_TX, false);
 800093c:	2100      	movs	r1, #0
 800093e:	2006      	movs	r0, #6
 8000940:	f000 fab4 	bl	8000eac <nrf24l01p_open_pipe>
    nrf24l01p_set_crc_mode(NRF24L01P_CRC_16BIT);
 8000944:	2003      	movs	r0, #3
 8000946:	f000 fa96 	bl	8000e76 <nrf24l01p_set_crc_mode>
    nrf24l01p_set_address_width(NRF24L01P_AW_5BYTES);
 800094a:	2005      	movs	r0, #5
 800094c:	f000 fb71 	bl	8001032 <nrf24l01p_set_address_width>
    nrf24l01p_set_address(NRF24L01P_TX, address);
 8000950:	6879      	ldr	r1, [r7, #4]
 8000952:	2006      	movs	r0, #6
 8000954:	f000 fb43 	bl	8000fde <nrf24l01p_set_address>
    nrf24l01p_set_operation_mode(NRF24L01P_PTX);
 8000958:	2000      	movs	r0, #0
 800095a:	f000 fb98 	bl	800108e <nrf24l01p_set_operation_mode>
    nrf24l01p_set_rf_channel(NRF_CHANNEL);
 800095e:	207b      	movs	r0, #123	; 0x7b
 8000960:	f000 fbd2 	bl	8001108 <nrf24l01p_set_rf_channel>

    nrf24l01p_set_power_mode(NRF24L01P_PWR_UP);
 8000964:	2001      	movs	r0, #1
 8000966:	f000 fbb1 	bl	80010cc <nrf24l01p_set_power_mode>
    delay(NRF_POWER_UP_DELAY);
 800096a:	2002      	movs	r0, #2
 800096c:	f7ff ffd2 	bl	8000914 <delay>
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <nrf_init_rx>:

void nrf_init_rx(uint8_t *address)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
    nrf24l01p_get_clear_irq_flags();
 8000980:	f000 fa51 	bl	8000e26 <nrf24l01p_get_clear_irq_flags>
    nrf24l01p_close_pipe(NRF24L01P_ALL);
 8000984:	20ff      	movs	r0, #255	; 0xff
 8000986:	f000 fae8 	bl	8000f5a <nrf24l01p_close_pipe>
    nrf24l01p_open_pipe(NRF24L01P_PIPE0, false);
 800098a:	2100      	movs	r1, #0
 800098c:	2000      	movs	r0, #0
 800098e:	f000 fa8d 	bl	8000eac <nrf24l01p_open_pipe>
    nrf24l01p_set_crc_mode(NRF24L01P_CRC_16BIT);
 8000992:	2003      	movs	r0, #3
 8000994:	f000 fa6f 	bl	8000e76 <nrf24l01p_set_crc_mode>
    nrf24l01p_set_address_width(NRF24L01P_AW_5BYTES);
 8000998:	2005      	movs	r0, #5
 800099a:	f000 fb4a 	bl	8001032 <nrf24l01p_set_address_width>
    nrf24l01p_set_address(NRF24L01P_PIPE0, address);
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 fb1c 	bl	8000fde <nrf24l01p_set_address>
    nrf24l01p_set_operation_mode(NRF24L01P_PRX);
 80009a6:	2001      	movs	r0, #1
 80009a8:	f000 fb71 	bl	800108e <nrf24l01p_set_operation_mode>
    nrf24l01p_set_rx_payload_width(NRF24L01P_PIPE0, NRF_PAYLOAD_LENGTH);
 80009ac:	210a      	movs	r1, #10
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 fb4f 	bl	8001052 <nrf24l01p_set_rx_payload_width>
    nrf24l01p_set_rf_channel(NRF_CHANNEL);
 80009b4:	207b      	movs	r0, #123	; 0x7b
 80009b6:	f000 fba7 	bl	8001108 <nrf24l01p_set_rf_channel>

    nrf24l01p_set_power_mode(NRF24L01P_PWR_UP);
 80009ba:	2001      	movs	r0, #1
 80009bc:	f000 fb86 	bl	80010cc <nrf24l01p_set_power_mode>
    delay(NRF_POWER_UP_DELAY);
 80009c0:	2002      	movs	r0, #2
 80009c2:	f7ff ffa7 	bl	8000914 <delay>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d6:	f000 ff09 	bl	80017ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009da:	f000 f8dd 	bl	8000b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009de:	f000 f985 	bl	8000cec <MX_GPIO_Init>
  MX_SPI2_Init();
 80009e2:	f000 f94d 	bl	8000c80 <MX_SPI2_Init>
  MX_I2C1_Init();
 80009e6:	f000 f91d 	bl	8000c24 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_SPI_ENABLE(&hspi2);
 80009ea:	4b62      	ldr	r3, [pc, #392]	; (8000b74 <main+0x1a4>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b60      	ldr	r3, [pc, #384]	; (8000b74 <main+0x1a4>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009f8:	601a      	str	r2, [r3, #0]

  uint8_t test;
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 80009fa:	2001      	movs	r0, #1
 80009fc:	f7ff fba6 	bl	800014c <nrf24l01p_spi_ss>

	// hold PB1 to enable tx
	bool rx = !HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin);
 8000a00:	2102      	movs	r1, #2
 8000a02:	485d      	ldr	r0, [pc, #372]	; (8000b78 <main+0x1a8>)
 8000a04:	f001 f9e0 	bl	8001dc8 <HAL_GPIO_ReadPin>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bf0c      	ite	eq
 8000a0e:	2301      	moveq	r3, #1
 8000a10:	2300      	movne	r3, #0
 8000a12:	73fb      	strb	r3, [r7, #15]

  do_vfd_init();
 8000a14:	f7ff fc0a 	bl	800022c <do_vfd_init>
  test = nrf24l01p_nop();
 8000a18:	f000 fbcf 	bl	80011ba <nrf24l01p_nop>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	73bb      	strb	r3, [r7, #14]
  if (test == 0b1110)
 8000a20:	7bbb      	ldrb	r3, [r7, #14]
 8000a22:	2b0e      	cmp	r3, #14
 8000a24:	d104      	bne.n	8000a30 <main+0x60>
  {
	  str2vfd("NRF24L01+");
 8000a26:	4855      	ldr	r0, [pc, #340]	; (8000b7c <main+0x1ac>)
 8000a28:	f000 fe1a 	bl	8001660 <str2vfd>
	  vfd_update();
 8000a2c:	f7ff fbce 	bl	80001cc <vfd_update>
  }

  if (rx)
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d008      	beq.n	8000a48 <main+0x78>
  {
	  nrf_init_rx(address);
 8000a36:	4852      	ldr	r0, [pc, #328]	; (8000b80 <main+0x1b0>)
 8000a38:	f7ff ff9e 	bl	8000978 <nrf_init_rx>
	  // enable read
	  HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 1);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2101      	movs	r1, #1
 8000a40:	484d      	ldr	r0, [pc, #308]	; (8000b78 <main+0x1a8>)
 8000a42:	f001 f9d8 	bl	8001df6 <HAL_GPIO_WritePin>
 8000a46:	e002      	b.n	8000a4e <main+0x7e>
  }
  else
	  nrf_init_tx(address);
 8000a48:	484d      	ldr	r0, [pc, #308]	; (8000b80 <main+0x1b0>)
 8000a4a:	f7ff ff6e 	bl	800092a <nrf_init_tx>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  do_leds();
 8000a4e:	f7ff fdc5 	bl	80005dc <do_leds>
	  do_fram_test();
 8000a52:	f7ff fe5f 	bl	8000714 <do_fram_test>

	  if (HAL_GetTick() > 10*60*1000)
 8000a56:	f000 ff21 	bl	800189c <HAL_GetTick>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4a49      	ldr	r2, [pc, #292]	; (8000b84 <main+0x1b4>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d904      	bls.n	8000a6c <main+0x9c>
		  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2120      	movs	r1, #32
 8000a66:	4844      	ldr	r0, [pc, #272]	; (8000b78 <main+0x1a8>)
 8000a68:	f001 f9c5 	bl	8001df6 <HAL_GPIO_WritePin>

	  static uint32_t last_time = 0;
	  if (HAL_GetTick() - last_time > (rx?110:100))
 8000a6c:	f000 ff16 	bl	800189c <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	4b45      	ldr	r3, [pc, #276]	; (8000b88 <main+0x1b8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	7bfa      	ldrb	r2, [r7, #15]
 8000a7a:	2a00      	cmp	r2, #0
 8000a7c:	d001      	beq.n	8000a82 <main+0xb2>
 8000a7e:	226e      	movs	r2, #110	; 0x6e
 8000a80:	e000      	b.n	8000a84 <main+0xb4>
 8000a82:	2264      	movs	r2, #100	; 0x64
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d2e2      	bcs.n	8000a4e <main+0x7e>
	  {
		  if (rx)
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d02f      	beq.n	8000aee <main+0x11e>
		  {
			  if (nrf24l01p_get_irq_flags() & (1 << NRF24L01P_IRQ_RX_DR))
 8000a8e:	f000 f9e8 	bl	8000e62 <nrf24l01p_get_irq_flags>
 8000a92:	4603      	mov	r3, r0
 8000a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d024      	beq.n	8000ae6 <main+0x116>
			  {
				  nrf24l01p_clear_irq_flag(NRF24L01P_IRQ_RX_DR);
 8000a9c:	2006      	movs	r0, #6
 8000a9e:	f000 f9ce 	bl	8000e3e <nrf24l01p_clear_irq_flag>

				  uint8_t payload[NRF_PAYLOAD_LENGTH];

				  while (!nrf24l01p_rx_fifo_empty())
 8000aa2:	e003      	b.n	8000aac <main+0xdc>
					  nrf24l01p_read_rx_payload(payload);
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 fb7a 	bl	80011a0 <nrf24l01p_read_rx_payload>
				  while (!nrf24l01p_rx_fifo_empty())
 8000aac:	f000 fb3a 	bl	8001124 <nrf24l01p_rx_fifo_empty>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	f083 0301 	eor.w	r3, r3, #1
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1f3      	bne.n	8000aa4 <main+0xd4>

				 if (payload[0] == 1)
 8000abc:	783b      	ldrb	r3, [r7, #0]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d108      	bne.n	8000ad4 <main+0x104>
				 {
					 vfd_leds(0b0100);
 8000ac2:	2004      	movs	r0, #4
 8000ac4:	f7ff fd58 	bl	8000578 <vfd_leds>
					 str2vfd("RX PB1");
 8000ac8:	4830      	ldr	r0, [pc, #192]	; (8000b8c <main+0x1bc>)
 8000aca:	f000 fdc9 	bl	8001660 <str2vfd>
					 vfd_update();
 8000ace:	f7ff fb7d 	bl	80001cc <vfd_update>
 8000ad2:	e049      	b.n	8000b68 <main+0x198>
				 }
				 else
				 {
					 vfd_leds(0b0010);
 8000ad4:	2002      	movs	r0, #2
 8000ad6:	f7ff fd4f 	bl	8000578 <vfd_leds>
					 str2vfd("RX PB2");
 8000ada:	482d      	ldr	r0, [pc, #180]	; (8000b90 <main+0x1c0>)
 8000adc:	f000 fdc0 	bl	8001660 <str2vfd>
					 vfd_update();
 8000ae0:	f7ff fb74 	bl	80001cc <vfd_update>
 8000ae4:	e040      	b.n	8000b68 <main+0x198>
				 }

			  }
			  else
			  {
				  vfd_leds(0b0000);
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f7ff fd46 	bl	8000578 <vfd_leds>
 8000aec:	e03c      	b.n	8000b68 <main+0x198>
			  }
		  }
		  else
		  {
			bool PB1 = HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin);
 8000aee:	2102      	movs	r1, #2
 8000af0:	4821      	ldr	r0, [pc, #132]	; (8000b78 <main+0x1a8>)
 8000af2:	f001 f969 	bl	8001dc8 <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	bf14      	ite	ne
 8000afc:	2301      	movne	r3, #1
 8000afe:	2300      	moveq	r3, #0
 8000b00:	737b      	strb	r3, [r7, #13]
			bool PB2 = HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin);
 8000b02:	2104      	movs	r1, #4
 8000b04:	481c      	ldr	r0, [pc, #112]	; (8000b78 <main+0x1a8>)
 8000b06:	f001 f95f 	bl	8001dc8 <HAL_GPIO_ReadPin>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	bf14      	ite	ne
 8000b10:	2301      	movne	r3, #1
 8000b12:	2300      	moveq	r3, #0
 8000b14:	733b      	strb	r3, [r7, #12]
			if (PB1 || PB2)
 8000b16:	7b7b      	ldrb	r3, [r7, #13]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <main+0x152>
 8000b1c:	7b3b      	ldrb	r3, [r7, #12]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d022      	beq.n	8000b68 <main+0x198>
			{
				static uint8_t payload[NRF_PAYLOAD_LENGTH];
				memset(payload, 0x44, sizeof(payload));
 8000b22:	220a      	movs	r2, #10
 8000b24:	2144      	movs	r1, #68	; 0x44
 8000b26:	481b      	ldr	r0, [pc, #108]	; (8000b94 <main+0x1c4>)
 8000b28:	f003 f9ca 	bl	8003ec0 <memset>
				payload[0] = PB1;
 8000b2c:	7b7a      	ldrb	r2, [r7, #13]
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <main+0x1c4>)
 8000b30:	701a      	strb	r2, [r3, #0]
				nrf24l01p_write_tx_payload(payload, sizeof(payload));
 8000b32:	210a      	movs	r1, #10
 8000b34:	4817      	ldr	r0, [pc, #92]	; (8000b94 <main+0x1c4>)
 8000b36:	f000 fb01 	bl	800113c <nrf24l01p_write_tx_payload>

				HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 1);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	480e      	ldr	r0, [pc, #56]	; (8000b78 <main+0x1a8>)
 8000b40:	f001 f959 	bl	8001df6 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 8000b44:	2001      	movs	r0, #1
 8000b46:	f000 feb3 	bl	80018b0 <HAL_Delay>
				HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	480a      	ldr	r0, [pc, #40]	; (8000b78 <main+0x1a8>)
 8000b50:	f001 f951 	bl	8001df6 <HAL_GPIO_WritePin>

				do {} while (!(nrf24l01p_get_irq_flags() & (1 << NRF24L01P_IRQ_TX_DS)));
 8000b54:	f000 f985 	bl	8000e62 <nrf24l01p_get_irq_flags>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	f003 0320 	and.w	r3, r3, #32
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d0f8      	beq.n	8000b54 <main+0x184>
				nrf24l01p_clear_irq_flag(NRF24L01P_IRQ_TX_DS);
 8000b62:	2005      	movs	r0, #5
 8000b64:	f000 f96b 	bl	8000e3e <nrf24l01p_clear_irq_flag>
			}

		  }
		  last_time = HAL_GetTick();
 8000b68:	f000 fe98 	bl	800189c <HAL_GetTick>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <main+0x1b8>)
 8000b70:	6013      	str	r3, [r2, #0]
  {
 8000b72:	e76c      	b.n	8000a4e <main+0x7e>
 8000b74:	2000004c 	.word	0x2000004c
 8000b78:	40010c00 	.word	0x40010c00
 8000b7c:	08003f64 	.word	0x08003f64
 8000b80:	20000000 	.word	0x20000000
 8000b84:	000927c0 	.word	0x000927c0
 8000b88:	2000003c 	.word	0x2000003c
 8000b8c:	08003f70 	.word	0x08003f70
 8000b90:	08003f78 	.word	0x08003f78
 8000b94:	20000040 	.word	0x20000040

08000b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b090      	sub	sp, #64	; 0x40
 8000b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9e:	f107 0318 	add.w	r3, r7, #24
 8000ba2:	2228      	movs	r2, #40	; 0x28
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f003 f98a 	bl	8003ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000bc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bc8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bd8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bde:	f107 0318 	add.w	r3, r7, #24
 8000be2:	4618      	mov	r0, r3
 8000be4:	f002 f938 	bl	8002e58 <HAL_RCC_OscConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000bee:	f000 f915 	bl	8000e1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f002 fba3 	bl	8003358 <HAL_RCC_ClockConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c18:	f000 f900 	bl	8000e1c <Error_Handler>
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	3740      	adds	r7, #64	; 0x40
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c2a:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <MX_I2C1_Init+0x54>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c30:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <MX_I2C1_Init+0x58>)
 8000c32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c62:	f001 f8f9 	bl	8001e58 <HAL_I2C_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c6c:	f000 f8d6 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200000a4 	.word	0x200000a4
 8000c78:	40005400 	.word	0x40005400
 8000c7c:	000186a0 	.word	0x000186a0

08000c80 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000c86:	4a18      	ldr	r2, [pc, #96]	; (8000ce8 <MX_SPI2_Init+0x68>)
 8000c88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000c8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000cb4:	2218      	movs	r2, #24
 8000cb6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000cba:	2280      	movs	r2, #128	; 0x80
 8000cbc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000ccc:	220a      	movs	r2, #10
 8000cce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000cd2:	f002 fcc9 	bl	8003668 <HAL_SPI_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000cdc:	f000 f89e 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2000004c 	.word	0x2000004c
 8000ce8:	40003800 	.word	0x40003800

08000cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf2:	f107 0310 	add.w	r3, r7, #16
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d00:	4b42      	ldr	r3, [pc, #264]	; (8000e0c <MX_GPIO_Init+0x120>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a41      	ldr	r2, [pc, #260]	; (8000e0c <MX_GPIO_Init+0x120>)
 8000d06:	f043 0310 	orr.w	r3, r3, #16
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b3f      	ldr	r3, [pc, #252]	; (8000e0c <MX_GPIO_Init+0x120>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0310 	and.w	r3, r3, #16
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d18:	4b3c      	ldr	r3, [pc, #240]	; (8000e0c <MX_GPIO_Init+0x120>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a3b      	ldr	r2, [pc, #236]	; (8000e0c <MX_GPIO_Init+0x120>)
 8000d1e:	f043 0320 	orr.w	r3, r3, #32
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b39      	ldr	r3, [pc, #228]	; (8000e0c <MX_GPIO_Init+0x120>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0320 	and.w	r3, r3, #32
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	4b36      	ldr	r3, [pc, #216]	; (8000e0c <MX_GPIO_Init+0x120>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a35      	ldr	r2, [pc, #212]	; (8000e0c <MX_GPIO_Init+0x120>)
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b33      	ldr	r3, [pc, #204]	; (8000e0c <MX_GPIO_Init+0x120>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d48:	4b30      	ldr	r3, [pc, #192]	; (8000e0c <MX_GPIO_Init+0x120>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a2f      	ldr	r2, [pc, #188]	; (8000e0c <MX_GPIO_Init+0x120>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <MX_GPIO_Init+0x120>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d66:	482a      	ldr	r0, [pc, #168]	; (8000e10 <MX_GPIO_Init+0x124>)
 8000d68:	f001 f845 	bl	8001df6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|SPI2_nRF_CSn_Pin|HV_EN_Pin, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f241 0121 	movw	r1, #4129	; 0x1021
 8000d72:	4828      	ldr	r0, [pc, #160]	; (8000e14 <MX_GPIO_Init+0x128>)
 8000d74:	f001 f83f 	bl	8001df6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d7e:	4826      	ldr	r0, [pc, #152]	; (8000e18 <MX_GPIO_Init+0x12c>)
 8000d80:	f001 f839 	bl	8001df6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d8a:	4822      	ldr	r0, [pc, #136]	; (8000e14 <MX_GPIO_Init+0x128>)
 8000d8c:	f001 f833 	bl	8001df6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4619      	mov	r1, r3
 8000da8:	4819      	ldr	r0, [pc, #100]	; (8000e10 <MX_GPIO_Init+0x124>)
 8000daa:	f000 fe89 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : nRF_CE_Pin SPI2_nRF_CSn_Pin HV_EN_Pin PT6315_STB_Pin */
  GPIO_InitStruct.Pin = nRF_CE_Pin|SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 8000dae:	f241 1321 	movw	r3, #4385	; 0x1121
 8000db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4813      	ldr	r0, [pc, #76]	; (8000e14 <MX_GPIO_Init+0x128>)
 8000dc8:	f000 fe7a 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1_Pin PB2_Pin */
  GPIO_InitStruct.Pin = PB1_Pin|PB2_Pin;
 8000dcc:	2306      	movs	r3, #6
 8000dce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480d      	ldr	r0, [pc, #52]	; (8000e14 <MX_GPIO_Init+0x128>)
 8000de0:	f000 fe6e 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PU_Pin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000de4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000de8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 0310 	add.w	r3, r7, #16
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4806      	ldr	r0, [pc, #24]	; (8000e18 <MX_GPIO_Init+0x12c>)
 8000dfe:	f000 fe5f 	bl	8001ac0 <HAL_GPIO_Init>

}
 8000e02:	bf00      	nop
 8000e04:	3720      	adds	r7, #32
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40011000 	.word	0x40011000
 8000e14:	40010c00 	.word	0x40010c00
 8000e18:	40010800 	.word	0x40010800

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <Error_Handler+0x8>

08000e26 <nrf24l01p_get_clear_irq_flags>:
{
  nrf24l01p_write_reg(NRF24L01P_CONFIG, BIT_COND(nrf24l01p_read_reg(NRF24L01P_CONFIG), int_source, !irq_state));
}

uint8_t nrf24l01p_get_clear_irq_flags(void)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	af00      	add	r7, sp, #0
  enum { IRQ_FLAGS = BIT(NRF24L01P_IRQ_MAX_RT) | BIT(NRF24L01P_IRQ_TX_DS) | BIT(NRF24L01P_IRQ_RX_DR) };
  return nrf24l01p_write_reg(NRF24L01P_STATUS, IRQ_FLAGS) & IRQ_FLAGS;
 8000e2a:	2170      	movs	r1, #112	; 0x70
 8000e2c:	2007      	movs	r0, #7
 8000e2e:	f000 f9e6 	bl	80011fe <nrf24l01p_write_reg>
 8000e32:	4603      	mov	r3, r0
 8000e34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000e38:	b2db      	uxtb	r3, r3
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <nrf24l01p_clear_irq_flag>:

void nrf24l01p_clear_irq_flag(nrf24l01p_irq_source_t int_source)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_STATUS, BIT(int_source));
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	2007      	movs	r0, #7
 8000e56:	f000 f9d2 	bl	80011fe <nrf24l01p_write_reg>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <nrf24l01p_get_irq_flags>:
{
  return !(nrf24l01p_read_reg(NRF24L01P_CONFIG) & BIT(int_type));
}

uint8_t nrf24l01p_get_irq_flags(void)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	af00      	add	r7, sp, #0
  return nrf24l01p_nop() & (BIT(6)|BIT(5)|BIT(4));
 8000e66:	f000 f9a8 	bl	80011ba <nrf24l01p_nop>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000e70:	b2db      	uxtb	r3, r3
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <nrf24l01p_set_crc_mode>:

void nrf24l01p_set_crc_mode(nrf24l01p_crc_mode_t crc_mode)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_CONFIG, (nrf24l01p_read_reg(NRF24L01P_CONFIG) & ~(BIT(3)|BIT(2))) | ((uint8_t)crc_mode<<2u));
 8000e80:	2000      	movs	r0, #0
 8000e82:	f000 f9a3 	bl	80011cc <nrf24l01p_read_reg>
 8000e86:	4603      	mov	r3, r0
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	f023 030c 	bic.w	r3, r3, #12
 8000e8e:	b25a      	sxtb	r2, r3
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	4313      	orrs	r3, r2
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 f9ad 	bl	80011fe <nrf24l01p_write_reg>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <nrf24l01p_open_pipe>:

void nrf24l01p_open_pipe(nrf24l01p_address_t pipe_num, bool auto_ack)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	460a      	mov	r2, r1
 8000eb6:	71fb      	strb	r3, [r7, #7]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	71bb      	strb	r3, [r7, #6]
  switch(pipe_num)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	2b05      	cmp	r3, #5
 8000ec0:	dc02      	bgt.n	8000ec8 <nrf24l01p_open_pipe+0x1c>
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	da03      	bge.n	8000ece <nrf24l01p_open_pipe+0x22>
      else
        nrf24l01p_write_reg(NRF24L01P_EN_AA, 0);
      break;
      
    default:
      break;
 8000ec6:	e044      	b.n	8000f52 <nrf24l01p_open_pipe+0xa6>
  switch(pipe_num)
 8000ec8:	2bff      	cmp	r3, #255	; 0xff
 8000eca:	d031      	beq.n	8000f30 <nrf24l01p_open_pipe+0x84>
      break;
 8000ecc:	e041      	b.n	8000f52 <nrf24l01p_open_pipe+0xa6>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, nrf24l01p_read_reg(NRF24L01P_EN_RXADDR) | BIT(pipe_num));
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f000 f97c 	bl	80011cc <nrf24l01p_read_reg>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	b25a      	sxtb	r2, r3
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	2101      	movs	r1, #1
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	b25b      	sxtb	r3, r3
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	4619      	mov	r1, r3
 8000eea:	2002      	movs	r0, #2
 8000eec:	f000 f987 	bl	80011fe <nrf24l01p_write_reg>
      nrf24l01p_write_reg(NRF24L01P_EN_AA, BIT_COND(nrf24l01p_read_reg(NRF24L01P_EN_AA), pipe_num, auto_ack));
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f000 f96b 	bl	80011cc <nrf24l01p_read_reg>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	b25a      	sxtb	r2, r3
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2101      	movs	r1, #1
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	4013      	ands	r3, r2
 8000f0a:	b25a      	sxtb	r2, r3
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d005      	beq.n	8000f1e <nrf24l01p_open_pipe+0x72>
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2101      	movs	r1, #1
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	b25b      	sxtb	r3, r3
 8000f1c:	e000      	b.n	8000f20 <nrf24l01p_open_pipe+0x74>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	4313      	orrs	r3, r2
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	4619      	mov	r1, r3
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f000 f968 	bl	80011fe <nrf24l01p_write_reg>
      break;
 8000f2e:	e010      	b.n	8000f52 <nrf24l01p_open_pipe+0xa6>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, (uint8_t)~(BIT(7)|BIT(6)));
 8000f30:	213f      	movs	r1, #63	; 0x3f
 8000f32:	2002      	movs	r0, #2
 8000f34:	f000 f963 	bl	80011fe <nrf24l01p_write_reg>
      if(auto_ack)
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d004      	beq.n	8000f48 <nrf24l01p_open_pipe+0x9c>
        nrf24l01p_write_reg(NRF24L01P_EN_AA, (uint8_t)~(BIT(7)|BIT(6)));
 8000f3e:	213f      	movs	r1, #63	; 0x3f
 8000f40:	2001      	movs	r0, #1
 8000f42:	f000 f95c 	bl	80011fe <nrf24l01p_write_reg>
      break;
 8000f46:	e003      	b.n	8000f50 <nrf24l01p_open_pipe+0xa4>
        nrf24l01p_write_reg(NRF24L01P_EN_AA, 0);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f000 f957 	bl	80011fe <nrf24l01p_write_reg>
      break;
 8000f50:	bf00      	nop
  }
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <nrf24l01p_close_pipe>:

void nrf24l01p_close_pipe(nrf24l01p_address_t pipe_num)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	71fb      	strb	r3, [r7, #7]
  switch(pipe_num)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b05      	cmp	r3, #5
 8000f68:	dc02      	bgt.n	8000f70 <nrf24l01p_close_pipe+0x16>
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	da03      	bge.n	8000f76 <nrf24l01p_close_pipe+0x1c>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, 0);
      nrf24l01p_write_reg(NRF24L01P_EN_AA, 0);
      break;
      
    default:
      break;
 8000f6e:	e032      	b.n	8000fd6 <nrf24l01p_close_pipe+0x7c>
  switch(pipe_num)
 8000f70:	2bff      	cmp	r3, #255	; 0xff
 8000f72:	d027      	beq.n	8000fc4 <nrf24l01p_close_pipe+0x6a>
      break;
 8000f74:	e02f      	b.n	8000fd6 <nrf24l01p_close_pipe+0x7c>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, nrf24l01p_read_reg(NRF24L01P_EN_RXADDR) & ~BIT(pipe_num));
 8000f76:	2002      	movs	r0, #2
 8000f78:	f000 f928 	bl	80011cc <nrf24l01p_read_reg>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	b25a      	sxtb	r2, r3
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2101      	movs	r1, #1
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	4013      	ands	r3, r2
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	4619      	mov	r1, r3
 8000f96:	2002      	movs	r0, #2
 8000f98:	f000 f931 	bl	80011fe <nrf24l01p_write_reg>
      nrf24l01p_write_reg(NRF24L01P_EN_AA, nrf24l01p_read_reg(NRF24L01P_EN_AA) & ~BIT(pipe_num));
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f000 f915 	bl	80011cc <nrf24l01p_read_reg>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	b25a      	sxtb	r2, r3
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2101      	movs	r1, #1
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	b25b      	sxtb	r3, r3
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	4619      	mov	r1, r3
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f000 f91e 	bl	80011fe <nrf24l01p_write_reg>
      break;
 8000fc2:	e008      	b.n	8000fd6 <nrf24l01p_close_pipe+0x7c>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, 0);
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2002      	movs	r0, #2
 8000fc8:	f000 f919 	bl	80011fe <nrf24l01p_write_reg>
      nrf24l01p_write_reg(NRF24L01P_EN_AA, 0);
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f000 f915 	bl	80011fe <nrf24l01p_write_reg>
      break;
 8000fd4:	bf00      	nop
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <nrf24l01p_set_address>:

void nrf24l01p_set_address(nrf24l01p_address_t address, const uint8_t *addr)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	6039      	str	r1, [r7, #0]
 8000fe8:	71fb      	strb	r3, [r7, #7]
  switch(address)
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b06      	cmp	r3, #6
 8000fee:	d00a      	beq.n	8001006 <nrf24l01p_set_address+0x28>
 8000ff0:	2b06      	cmp	r3, #6
 8000ff2:	dc19      	bgt.n	8001028 <nrf24l01p_set_address+0x4a>
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	dc02      	bgt.n	8000ffe <nrf24l01p_set_address+0x20>
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	da04      	bge.n	8001006 <nrf24l01p_set_address+0x28>
    case NRF24L01P_PIPE5:
      nrf24l01p_write_reg(NRF24L01P_RX_ADDR_P0 + (uint8_t)address, *addr);
      break;

    default:
      break;
 8000ffc:	e014      	b.n	8001028 <nrf24l01p_set_address+0x4a>
 8000ffe:	3b02      	subs	r3, #2
  switch(address)
 8001000:	2b03      	cmp	r3, #3
 8001002:	d811      	bhi.n	8001028 <nrf24l01p_set_address+0x4a>
 8001004:	e006      	b.n	8001014 <nrf24l01p_set_address+0x36>
      nrf24l01p_write_multibyte_reg((uint8_t) address, addr, 0);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2200      	movs	r2, #0
 800100a:	6839      	ldr	r1, [r7, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f000 f993 	bl	8001338 <nrf24l01p_write_multibyte_reg>
      break;
 8001012:	e00a      	b.n	800102a <nrf24l01p_set_address+0x4c>
      nrf24l01p_write_reg(NRF24L01P_RX_ADDR_P0 + (uint8_t)address, *addr);
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	330a      	adds	r3, #10
 8001018:	b2da      	uxtb	r2, r3
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	4619      	mov	r1, r3
 8001020:	4610      	mov	r0, r2
 8001022:	f000 f8ec 	bl	80011fe <nrf24l01p_write_reg>
      break;
 8001026:	e000      	b.n	800102a <nrf24l01p_set_address+0x4c>
      break;
 8001028:	bf00      	nop
  }
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <nrf24l01p_set_address_width>:
{
  nrf24l01p_write_reg(NRF24L01P_SETUP_RETR, (((delay/250)-1)<<4) | retr);
}

void nrf24l01p_set_address_width(nrf24l01p_address_width_t address_width)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_SETUP_AW, (uint8_t)address_width - 2);
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	3b02      	subs	r3, #2
 8001040:	b2db      	uxtb	r3, r3
 8001042:	4619      	mov	r1, r3
 8001044:	2003      	movs	r0, #3
 8001046:	f000 f8da 	bl	80011fe <nrf24l01p_write_reg>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <nrf24l01p_set_rx_payload_width>:

void nrf24l01p_set_rx_payload_width(uint8_t pipe_num, uint8_t payload_width)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	460a      	mov	r2, r1
 800105c:	71fb      	strb	r3, [r7, #7]
 800105e:	4613      	mov	r3, r2
 8001060:	71bb      	strb	r3, [r7, #6]
  nrf24l01p_write_reg(NRF24L01P_RX_PW_P0 + pipe_num, payload_width);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	3311      	adds	r3, #17
 8001066:	b2db      	uxtb	r3, r3
 8001068:	79ba      	ldrb	r2, [r7, #6]
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f000 f8c6 	bl	80011fe <nrf24l01p_write_reg>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <nrf24l01p_get_address_width>:
{
  return (nrf24l01p_read_reg(NRF24L01P_OBSERVE_TX) & (BIT(7)|BIT(6)|BIT(5)|BIT(4))) >> 4;
}

uint8_t nrf24l01p_get_address_width(void)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	af00      	add	r7, sp, #0
  return (nrf24l01p_read_reg(NRF24L01P_SETUP_AW) + 2);
 800107e:	2003      	movs	r0, #3
 8001080:	f000 f8a4 	bl	80011cc <nrf24l01p_read_reg>
 8001084:	4603      	mov	r3, r0
 8001086:	3302      	adds	r3, #2
 8001088:	b2db      	uxtb	r3, r3
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}

0800108e <nrf24l01p_set_operation_mode>:
{
  return nrf24l01p_read_reg(NRF24L01P_RX_PW_P0 + pipe_num);
}

void nrf24l01p_set_operation_mode(nrf24l01p_operation_mode_t op_mode)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_CONFIG, BIT_COND(nrf24l01p_read_reg(NRF24L01P_CONFIG), NRF24L01P_CONFIG_PRIM_RX, op_mode == NRF24L01P_PRX));
 8001098:	2000      	movs	r0, #0
 800109a:	f000 f897 	bl	80011cc <nrf24l01p_read_reg>
 800109e:	4603      	mov	r3, r0
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	f023 0301 	bic.w	r3, r3, #1
 80010a6:	b25a      	sxtb	r2, r3
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	bf0c      	ite	eq
 80010ae:	2301      	moveq	r3, #1
 80010b0:	2300      	movne	r3, #0
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	4619      	mov	r1, r3
 80010be:	2000      	movs	r0, #0
 80010c0:	f000 f89d 	bl	80011fe <nrf24l01p_write_reg>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <nrf24l01p_set_power_mode>:

void nrf24l01p_set_power_mode(nrf24l01p_pwr_mode_t pwr_mode)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_CONFIG, BIT_COND(nrf24l01p_read_reg(NRF24L01P_CONFIG), NRF24L01P_CONFIG_PWR_UP, pwr_mode == NRF24L01P_PWR_UP));
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 f878 	bl	80011cc <nrf24l01p_read_reg>
 80010dc:	4603      	mov	r3, r0
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	f023 0302 	bic.w	r3, r3, #2
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	79fa      	ldrb	r2, [r7, #7]
 80010e8:	2a01      	cmp	r2, #1
 80010ea:	d101      	bne.n	80010f0 <nrf24l01p_set_power_mode+0x24>
 80010ec:	2202      	movs	r2, #2
 80010ee:	e000      	b.n	80010f2 <nrf24l01p_set_power_mode+0x26>
 80010f0:	2200      	movs	r2, #0
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4619      	mov	r1, r3
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 f87f 	bl	80011fe <nrf24l01p_write_reg>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(uint8_t channel)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_RF_CH, channel);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	4619      	mov	r1, r3
 8001116:	2005      	movs	r0, #5
 8001118:	f000 f871 	bl	80011fe <nrf24l01p_write_reg>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <nrf24l01p_rx_fifo_empty>:
{
  return (nrf24l01p_read_reg(NRF24L01P_RF_SETUP) & (1<<NRF24L01P_RF_SETUP_RF_DR)) >> NRF24L01P_RF_SETUP_RF_DR;
}

bool nrf24l01p_rx_fifo_empty(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  return nrf24l01p_get_rx_data_source() == 7;
 8001128:	f000 f82e 	bl	8001188 <nrf24l01p_get_rx_data_source>
 800112c:	4603      	mov	r3, r0
 800112e:	2b07      	cmp	r3, #7
 8001130:	bf0c      	ite	eq
 8001132:	2301      	moveq	r3, #1
 8001134:	2300      	movne	r3, #0
 8001136:	b2db      	uxtb	r3, r3
}
 8001138:	4618      	mov	r0, r3
 800113a:	bd80      	pop	{r7, pc}

0800113c <nrf24l01p_write_tx_payload>:
{
  return nrf24l01p_read_reg(NRF24L01P_CD) & 1;
}

void nrf24l01p_write_tx_payload(const uint8_t *tx_payload, uint8_t length)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	70fb      	strb	r3, [r7, #3]
  nrf24l01p_write_multibyte_reg(NRF24L01P_TX_PAYLOAD, tx_payload, length);
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	461a      	mov	r2, r3
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	2007      	movs	r0, #7
 8001150:	f000 f8f2 	bl	8001338 <nrf24l01p_write_multibyte_reg>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <nrf24l01p_read_rx_fifo_payload_width>:

  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
}

uint8_t nrf24l01p_read_rx_fifo_payload_width()
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
  uint8_t temp;
  
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 8001162:	2000      	movs	r0, #0
 8001164:	f7fe fff2 	bl	800014c <nrf24l01p_spi_ss>

  nrf24l01p_spi_rw(NRF24L01P_RD_RX_PAYLOAD_WIDTH);
 8001168:	2060      	movs	r0, #96	; 0x60
 800116a:	f7ff f819 	bl	80001a0 <nrf24l01p_spi_rw>
  temp = nrf24l01p_spi_rw(0);
 800116e:	2000      	movs	r0, #0
 8001170:	f7ff f816 	bl	80001a0 <nrf24l01p_spi_rw>
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 8001178:	2001      	movs	r0, #1
 800117a:	f7fe ffe7 	bl	800014c <nrf24l01p_spi_ss>

  return temp;
 800117e:	79fb      	ldrb	r3, [r7, #7]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <nrf24l01p_get_rx_data_source>:

  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
}

uint8_t nrf24l01p_get_rx_data_source(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  return ((nrf24l01p_nop() & (BIT(3)|BIT(2)|BIT(1))) >> 1);
 800118c:	f000 f815 	bl	80011ba <nrf24l01p_nop>
 8001190:	4603      	mov	r3, r0
 8001192:	105b      	asrs	r3, r3, #1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	b2db      	uxtb	r3, r3
}
 800119c:	4618      	mov	r0, r3
 800119e:	bd80      	pop	{r7, pc}

080011a0 <nrf24l01p_read_rx_payload>:

// Fixed: returns length==0 and pipe==7 means FIFO empty

uint16_t nrf24l01p_read_rx_payload(uint8_t *rx_payload)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  return nrf24l01p_read_multibyte_reg(NRF24L01P_RX_PAYLOAD, rx_payload);
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	2008      	movs	r0, #8
 80011ac:	f000 f867 	bl	800127e <nrf24l01p_read_multibyte_reg>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <nrf24l01p_nop>:
{
  nrf24l01p_write_reg(NRF24L01P_FLUSH_TX, 0);
}

uint8_t nrf24l01p_nop(void)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	af00      	add	r7, sp, #0
  return nrf24l01p_write_reg(NRF24L01P_NOP,0);
 80011be:	2100      	movs	r1, #0
 80011c0:	20ff      	movs	r0, #255	; 0xff
 80011c2:	f000 f81c 	bl	80011fe <nrf24l01p_write_reg>
 80011c6:	4603      	mov	r3, r0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	bd80      	pop	{r7, pc}

080011cc <nrf24l01p_read_reg>:
{
  return (nrf24l01p_lna_mode_t) ( (nrf24l01p_read_reg(NRF24L01P_RF_SETUP) & (1<<NRF24L01P_LNA_HCURR)) >> NRF24L01P_LNA_HCURR );
}

uint8_t nrf24l01p_read_reg(uint8_t reg)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
uint8_t temp;
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f7fe ffb8 	bl	800014c <nrf24l01p_spi_ss>
  nrf24l01p_spi_rw(reg);
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7fe ffde 	bl	80001a0 <nrf24l01p_spi_rw>
  temp = nrf24l01p_spi_rw(0);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7fe ffdb 	bl	80001a0 <nrf24l01p_spi_rw>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73fb      	strb	r3, [r7, #15]
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f7fe ffac 	bl	800014c <nrf24l01p_spi_ss>

  return temp;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <nrf24l01p_write_reg>:

uint8_t nrf24l01p_write_reg(uint8_t reg, uint8_t value)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	460a      	mov	r2, r1
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	4613      	mov	r3, r2
 800120c:	71bb      	strb	r3, [r7, #6]
  uint8_t retval;
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 800120e:	2000      	movs	r0, #0
 8001210:	f7fe ff9c 	bl	800014c <nrf24l01p_spi_ss>
  if(reg < NRF24L01P_NRF_WRITE_REG)   // i.e. this is a register access
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	2b1f      	cmp	r3, #31
 8001218:	d80c      	bhi.n	8001234 <nrf24l01p_write_reg+0x36>
  {
    retval = nrf24l01p_spi_rw(NRF24L01P_NRF_WRITE_REG + reg);
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	3320      	adds	r3, #32
 800121e:	b2db      	uxtb	r3, r3
 8001220:	4618      	mov	r0, r3
 8001222:	f7fe ffbd 	bl	80001a0 <nrf24l01p_spi_rw>
 8001226:	4603      	mov	r3, r0
 8001228:	73fb      	strb	r3, [r7, #15]
    nrf24l01p_spi_rw(value);
 800122a:	79bb      	ldrb	r3, [r7, #6]
 800122c:	4618      	mov	r0, r3
 800122e:	f7fe ffb7 	bl	80001a0 <nrf24l01p_spi_rw>
 8001232:	e01c      	b.n	800126e <nrf24l01p_write_reg+0x70>
  }
  else            // single byte cmd OR future command/register access
  {
    if(!(reg == NRF24L01P_FLUSH_TX) && !(reg == NRF24L01P_FLUSH_RX) && !(reg == NRF24L01P_REUSE_TX_PL) && !(reg == NRF24L01P_NOP))
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2be1      	cmp	r3, #225	; 0xe1
 8001238:	d013      	beq.n	8001262 <nrf24l01p_write_reg+0x64>
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2be2      	cmp	r3, #226	; 0xe2
 800123e:	d010      	beq.n	8001262 <nrf24l01p_write_reg+0x64>
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2be3      	cmp	r3, #227	; 0xe3
 8001244:	d00d      	beq.n	8001262 <nrf24l01p_write_reg+0x64>
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2bff      	cmp	r3, #255	; 0xff
 800124a:	d00a      	beq.n	8001262 <nrf24l01p_write_reg+0x64>
    {
      retval = nrf24l01p_spi_rw(reg);
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	4618      	mov	r0, r3
 8001250:	f7fe ffa6 	bl	80001a0 <nrf24l01p_spi_rw>
 8001254:	4603      	mov	r3, r0
 8001256:	73fb      	strb	r3, [r7, #15]
      nrf24l01p_spi_rw(value);
 8001258:	79bb      	ldrb	r3, [r7, #6]
 800125a:	4618      	mov	r0, r3
 800125c:	f7fe ffa0 	bl	80001a0 <nrf24l01p_spi_rw>
 8001260:	e005      	b.n	800126e <nrf24l01p_write_reg+0x70>
    }
    else          // single byte L01 command
    {
      retval = nrf24l01p_spi_rw(reg);
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	4618      	mov	r0, r3
 8001266:	f7fe ff9b 	bl	80001a0 <nrf24l01p_spi_rw>
 800126a:	4603      	mov	r3, r0
 800126c:	73fb      	strb	r3, [r7, #15]
    }
  }
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 800126e:	2001      	movs	r0, #1
 8001270:	f7fe ff6c 	bl	800014c <nrf24l01p_spi_ss>

  return retval;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <nrf24l01p_read_multibyte_reg>:

uint16_t nrf24l01p_read_multibyte_reg(uint8_t reg, uint8_t *pbuf)
{
 800127e:	b590      	push	{r4, r7, lr}
 8001280:	b085      	sub	sp, #20
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	6039      	str	r1, [r7, #0]
 8001288:	71fb      	strb	r3, [r7, #7]
uint8_t ctr, length;
  switch(reg)
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b08      	cmp	r3, #8
 800128e:	d018      	beq.n	80012c2 <nrf24l01p_read_multibyte_reg+0x44>
 8001290:	2b08      	cmp	r3, #8
 8001292:	dc2f      	bgt.n	80012f4 <nrf24l01p_read_multibyte_reg+0x76>
 8001294:	2b01      	cmp	r3, #1
 8001296:	dc02      	bgt.n	800129e <nrf24l01p_read_multibyte_reg+0x20>
 8001298:	2b00      	cmp	r3, #0
 800129a:	da02      	bge.n	80012a2 <nrf24l01p_read_multibyte_reg+0x24>
 800129c:	e02a      	b.n	80012f4 <nrf24l01p_read_multibyte_reg+0x76>
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d128      	bne.n	80012f4 <nrf24l01p_read_multibyte_reg+0x76>
  {
    case NRF24L01P_PIPE0:
    case NRF24L01P_PIPE1:
    case NRF24L01P_TX:
      length = ctr = nrf24l01p_get_address_width();
 80012a2:	f7ff feea 	bl	800107a <nrf24l01p_get_address_width>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	73bb      	strb	r3, [r7, #14]
      nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7fe ff4c 	bl	800014c <nrf24l01p_spi_ss>
      nrf24l01p_spi_rw(NRF24L01P_RX_ADDR_P0 + reg);
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	330a      	adds	r3, #10
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7fe ff70 	bl	80001a0 <nrf24l01p_spi_rw>
      break;
 80012c0:	e01d      	b.n	80012fe <nrf24l01p_read_multibyte_reg+0x80>
      
    case NRF24L01P_RX_PAYLOAD:
      if( (reg = nrf24l01p_get_rx_data_source()) < 7)
 80012c2:	f7ff ff61 	bl	8001188 <nrf24l01p_get_rx_data_source>
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b06      	cmp	r3, #6
 80012ce:	d80c      	bhi.n	80012ea <nrf24l01p_read_multibyte_reg+0x6c>
      {
        length = ctr = nrf24l01p_read_rx_fifo_payload_width();
 80012d0:	f7ff ff44 	bl	800115c <nrf24l01p_read_rx_fifo_payload_width>
 80012d4:	4603      	mov	r3, r0
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	73bb      	strb	r3, [r7, #14]

        nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 80012dc:	2000      	movs	r0, #0
 80012de:	f7fe ff35 	bl	800014c <nrf24l01p_spi_ss>
        nrf24l01p_spi_rw(NRF24L01P_RD_RX_PAYLOAD);
 80012e2:	2061      	movs	r0, #97	; 0x61
 80012e4:	f7fe ff5c 	bl	80001a0 <nrf24l01p_spi_rw>
      }
      else
      {
       ctr = length = 0;
      }
      break;
 80012e8:	e009      	b.n	80012fe <nrf24l01p_read_multibyte_reg+0x80>
       ctr = length = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	73bb      	strb	r3, [r7, #14]
 80012ee:	7bbb      	ldrb	r3, [r7, #14]
 80012f0:	73fb      	strb	r3, [r7, #15]
      break;
 80012f2:	e004      	b.n	80012fe <nrf24l01p_read_multibyte_reg+0x80>

    default:
      ctr = length = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	73bb      	strb	r3, [r7, #14]
 80012f8:	7bbb      	ldrb	r3, [r7, #14]
 80012fa:	73fb      	strb	r3, [r7, #15]
      break;
 80012fc:	bf00      	nop
  }

  while(ctr--)
 80012fe:	e007      	b.n	8001310 <nrf24l01p_read_multibyte_reg+0x92>
  {
    *pbuf++ = nrf24l01p_spi_rw(0);
 8001300:	683c      	ldr	r4, [r7, #0]
 8001302:	1c63      	adds	r3, r4, #1
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	2000      	movs	r0, #0
 8001308:	f7fe ff4a 	bl	80001a0 <nrf24l01p_spi_rw>
 800130c:	4603      	mov	r3, r0
 800130e:	7023      	strb	r3, [r4, #0]
  while(ctr--)
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	1e5a      	subs	r2, r3, #1
 8001314:	73fa      	strb	r2, [r7, #15]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f2      	bne.n	8001300 <nrf24l01p_read_multibyte_reg+0x82>
  }

  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 800131a:	2001      	movs	r0, #1
 800131c:	f7fe ff16 	bl	800014c <nrf24l01p_spi_ss>

  return (((uint16_t) reg << 8) | length);
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b21a      	sxth	r2, r3
 8001326:	7bbb      	ldrb	r3, [r7, #14]
 8001328:	b21b      	sxth	r3, r3
 800132a:	4313      	orrs	r3, r2
 800132c:	b21b      	sxth	r3, r3
 800132e:	b29b      	uxth	r3, r3
}
 8001330:	4618      	mov	r0, r3
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	bd90      	pop	{r4, r7, pc}

08001338 <nrf24l01p_write_multibyte_reg>:

void nrf24l01p_write_multibyte_reg(uint8_t reg, const uint8_t *pbuf, uint8_t length)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	4613      	mov	r3, r2
 8001346:	71bb      	strb	r3, [r7, #6]
  switch(reg)
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	2b07      	cmp	r3, #7
 800134c:	d016      	beq.n	800137c <nrf24l01p_write_multibyte_reg+0x44>
 800134e:	2b07      	cmp	r3, #7
 8001350:	dc1b      	bgt.n	800138a <nrf24l01p_write_multibyte_reg+0x52>
 8001352:	2b01      	cmp	r3, #1
 8001354:	dc02      	bgt.n	800135c <nrf24l01p_write_multibyte_reg+0x24>
 8001356:	2b00      	cmp	r3, #0
 8001358:	da02      	bge.n	8001360 <nrf24l01p_write_multibyte_reg+0x28>
    case NRF24L01P_TX_PAYLOAD:
      nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
      nrf24l01p_spi_rw(NRF24L01P_WR_TX_PAYLOAD);
      break;      
    default:
      break;
 800135a:	e016      	b.n	800138a <nrf24l01p_write_multibyte_reg+0x52>
  switch(reg)
 800135c:	2b06      	cmp	r3, #6
 800135e:	d114      	bne.n	800138a <nrf24l01p_write_multibyte_reg+0x52>
      length = nrf24l01p_get_address_width();
 8001360:	f7ff fe8b 	bl	800107a <nrf24l01p_get_address_width>
 8001364:	4603      	mov	r3, r0
 8001366:	71bb      	strb	r3, [r7, #6]
      nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 8001368:	2000      	movs	r0, #0
 800136a:	f7fe feef 	bl	800014c <nrf24l01p_spi_ss>
      nrf24l01p_spi_rw(NRF24L01P_NRF_WRITE_REG + NRF24L01P_RX_ADDR_P0 + reg);
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	332a      	adds	r3, #42	; 0x2a
 8001372:	b2db      	uxtb	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	f7fe ff13 	bl	80001a0 <nrf24l01p_spi_rw>
      break;
 800137a:	e007      	b.n	800138c <nrf24l01p_write_multibyte_reg+0x54>
      nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 800137c:	2000      	movs	r0, #0
 800137e:	f7fe fee5 	bl	800014c <nrf24l01p_spi_ss>
      nrf24l01p_spi_rw(NRF24L01P_WR_TX_PAYLOAD);
 8001382:	20a0      	movs	r0, #160	; 0xa0
 8001384:	f7fe ff0c 	bl	80001a0 <nrf24l01p_spi_rw>
      break;      
 8001388:	e000      	b.n	800138c <nrf24l01p_write_multibyte_reg+0x54>
      break;
 800138a:	bf00      	nop
  }

  while(length--)
 800138c:	e006      	b.n	800139c <nrf24l01p_write_multibyte_reg+0x64>
    nrf24l01p_spi_rw(*pbuf++);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	603a      	str	r2, [r7, #0]
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7fe ff02 	bl	80001a0 <nrf24l01p_spi_rw>
  while(length--)
 800139c:	79bb      	ldrb	r3, [r7, #6]
 800139e:	1e5a      	subs	r2, r3, #1
 80013a0:	71ba      	strb	r2, [r7, #6]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f3      	bne.n	800138e <nrf24l01p_write_multibyte_reg+0x56>

  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 80013a6:	2001      	movs	r0, #1
 80013a8:	f7fe fed0 	bl	800014c <nrf24l01p_spi_ss>
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ba:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_MspInit+0x5c>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	4a14      	ldr	r2, [pc, #80]	; (8001410 <HAL_MspInit+0x5c>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6193      	str	r3, [r2, #24]
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_MspInit+0x5c>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_MspInit+0x5c>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <HAL_MspInit+0x5c>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	61d3      	str	r3, [r2, #28]
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_MspInit+0x5c>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_MspInit+0x60>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_MspInit+0x60>)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	40021000 	.word	0x40021000
 8001414:	40010000 	.word	0x40010000

08001418 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a15      	ldr	r2, [pc, #84]	; (8001488 <HAL_I2C_MspInit+0x70>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d123      	bne.n	8001480 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <HAL_I2C_MspInit+0x74>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a13      	ldr	r2, [pc, #76]	; (800148c <HAL_I2C_MspInit+0x74>)
 800143e:	f043 0308 	orr.w	r3, r3, #8
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <HAL_I2C_MspInit+0x74>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001450:	23c0      	movs	r3, #192	; 0xc0
 8001452:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001454:	2312      	movs	r3, #18
 8001456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	4619      	mov	r1, r3
 8001462:	480b      	ldr	r0, [pc, #44]	; (8001490 <HAL_I2C_MspInit+0x78>)
 8001464:	f000 fb2c 	bl	8001ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <HAL_I2C_MspInit+0x74>)
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	4a07      	ldr	r2, [pc, #28]	; (800148c <HAL_I2C_MspInit+0x74>)
 800146e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001472:	61d3      	str	r3, [r2, #28]
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_I2C_MspInit+0x74>)
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001480:	bf00      	nop
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40005400 	.word	0x40005400
 800148c:	40021000 	.word	0x40021000
 8001490:	40010c00 	.word	0x40010c00

08001494 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a1c      	ldr	r2, [pc, #112]	; (8001520 <HAL_SPI_MspInit+0x8c>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d131      	bne.n	8001518 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <HAL_SPI_MspInit+0x90>)
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	4a1a      	ldr	r2, [pc, #104]	; (8001524 <HAL_SPI_MspInit+0x90>)
 80014ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014be:	61d3      	str	r3, [r2, #28]
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <HAL_SPI_MspInit+0x90>)
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <HAL_SPI_MspInit+0x90>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	4a14      	ldr	r2, [pc, #80]	; (8001524 <HAL_SPI_MspInit+0x90>)
 80014d2:	f043 0308 	orr.w	r3, r3, #8
 80014d6:	6193      	str	r3, [r2, #24]
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_SPI_MspInit+0x90>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80014e4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80014e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ee:	2303      	movs	r3, #3
 80014f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	4619      	mov	r1, r3
 80014f8:	480b      	ldr	r0, [pc, #44]	; (8001528 <HAL_SPI_MspInit+0x94>)
 80014fa:	f000 fae1 	bl	8001ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80014fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001502:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 0310 	add.w	r3, r7, #16
 8001510:	4619      	mov	r1, r3
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <HAL_SPI_MspInit+0x94>)
 8001514:	f000 fad4 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001518:	bf00      	nop
 800151a:	3720      	adds	r7, #32
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40003800 	.word	0x40003800
 8001524:	40021000 	.word	0x40021000
 8001528:	40010c00 	.word	0x40010c00

0800152c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <NMI_Handler+0x4>

08001532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <HardFault_Handler+0x4>

08001538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <MemManage_Handler+0x4>

0800153e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <UsageFault_Handler+0x4>

0800154a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr

08001556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001572:	f000 f981 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}

0800157a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
	...

08001588 <get_char>:
const uint8_t ALPHAS = (sizeof(vfd_alpha)/sizeof(vfd_alpha[0]));
const uint8_t ALPHAR = (sizeof(vfd_alpha_ru)/sizeof(vfd_alpha_ru[0]));
const uint8_t SPECIAL = (sizeof(vfd_special)/sizeof(vfd_special[0]));

uint16_t get_char(char input)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
	if ('0' <= input && input <= '9')
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b2f      	cmp	r3, #47	; 0x2f
 8001596:	d908      	bls.n	80015aa <get_char+0x22>
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	2b39      	cmp	r3, #57	; 0x39
 800159c:	d805      	bhi.n	80015aa <get_char+0x22>
		return vfd_digits[input - '0'];
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	3b30      	subs	r3, #48	; 0x30
 80015a2:	4a2a      	ldr	r2, [pc, #168]	; (800164c <get_char+0xc4>)
 80015a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015a8:	e04a      	b.n	8001640 <get_char+0xb8>
	if (0 <= input && input <= 9)
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2b09      	cmp	r3, #9
 80015ae:	d804      	bhi.n	80015ba <get_char+0x32>
		return vfd_digits[(uint8_t)input];
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	4a26      	ldr	r2, [pc, #152]	; (800164c <get_char+0xc4>)
 80015b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015b8:	e042      	b.n	8001640 <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	e00e      	b.n	80015de <get_char+0x56>
		if (vfd_special_char[i] == input)
 80015c0:	4a23      	ldr	r2, [pc, #140]	; (8001650 <get_char+0xc8>)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4413      	add	r3, r2
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	79fa      	ldrb	r2, [r7, #7]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d104      	bne.n	80015d8 <get_char+0x50>
			return vfd_special[i];
 80015ce:	4a21      	ldr	r2, [pc, #132]	; (8001654 <get_char+0xcc>)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015d6:	e033      	b.n	8001640 <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	3301      	adds	r3, #1
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2b19      	cmp	r3, #25
 80015e2:	d9ed      	bls.n	80015c0 <get_char+0x38>
	if ('a' <= input && input <= 'z')
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b60      	cmp	r3, #96	; 0x60
 80015e8:	d908      	bls.n	80015fc <get_char+0x74>
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	2b7a      	cmp	r3, #122	; 0x7a
 80015ee:	d805      	bhi.n	80015fc <get_char+0x74>
		return vfd_alpha[input - 'a'];
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	3b61      	subs	r3, #97	; 0x61
 80015f4:	4a18      	ldr	r2, [pc, #96]	; (8001658 <get_char+0xd0>)
 80015f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015fa:	e021      	b.n	8001640 <get_char+0xb8>
	if ('A' <= input && input <= 'Z')
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	2b40      	cmp	r3, #64	; 0x40
 8001600:	d908      	bls.n	8001614 <get_char+0x8c>
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	2b5a      	cmp	r3, #90	; 0x5a
 8001606:	d805      	bhi.n	8001614 <get_char+0x8c>
		return vfd_alpha[input - 'A'];
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	3b41      	subs	r3, #65	; 0x41
 800160c:	4a12      	ldr	r2, [pc, #72]	; (8001658 <get_char+0xd0>)
 800160e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001612:	e015      	b.n	8001640 <get_char+0xb8>
	if (192 <= input && input <= 223)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	2bbf      	cmp	r3, #191	; 0xbf
 8001618:	d908      	bls.n	800162c <get_char+0xa4>
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	2bdf      	cmp	r3, #223	; 0xdf
 800161e:	d805      	bhi.n	800162c <get_char+0xa4>
		return vfd_alpha_ru[input - 192];
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	3bc0      	subs	r3, #192	; 0xc0
 8001624:	4a0d      	ldr	r2, [pc, #52]	; (800165c <get_char+0xd4>)
 8001626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800162a:	e009      	b.n	8001640 <get_char+0xb8>
	if (224 <= input && input <= 255)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	2bdf      	cmp	r3, #223	; 0xdf
 8001630:	d905      	bls.n	800163e <get_char+0xb6>
		return vfd_alpha_ru[input - 224];
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	3be0      	subs	r3, #224	; 0xe0
 8001636:	4a09      	ldr	r2, [pc, #36]	; (800165c <get_char+0xd4>)
 8001638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800163c:	e000      	b.n	8001640 <get_char+0xb8>
	return 0;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	08003fa8 	.word	0x08003fa8
 8001650:	08004064 	.word	0x08004064
 8001654:	08004030 	.word	0x08004030
 8001658:	08003fbc 	.word	0x08003fbc
 800165c:	08003ff0 	.word	0x08003ff0

08001660 <str2vfd>:

void str2vfd(char * str)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	uint16_t buf;
	// erase letters only
	for (int i = 10; i > 0; i --)
 8001668:	230a      	movs	r3, #10
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	e028      	b.n	80016c0 <str2vfd+0x60>
	{
		 vfd.arr2[i][0] &= 1<<0;
 800166e:	493e      	ldr	r1, [pc, #248]	; (8001768 <str2vfd+0x108>)
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	440b      	add	r3, r1
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	b2d8      	uxtb	r0, r3
 8001682:	4939      	ldr	r1, [pc, #228]	; (8001768 <str2vfd+0x108>)
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4613      	mov	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	440b      	add	r3, r1
 800168e:	4602      	mov	r2, r0
 8001690:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] &= 1<<7;
 8001692:	4935      	ldr	r1, [pc, #212]	; (8001768 <str2vfd+0x108>)
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	4613      	mov	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	440b      	add	r3, r1
 800169e:	3301      	adds	r3, #1
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80016a6:	b2d8      	uxtb	r0, r3
 80016a8:	492f      	ldr	r1, [pc, #188]	; (8001768 <str2vfd+0x108>)
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4613      	mov	r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	3301      	adds	r3, #1
 80016b6:	4602      	mov	r2, r0
 80016b8:	701a      	strb	r2, [r3, #0]
	for (int i = 10; i > 0; i --)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	3b01      	subs	r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	dcd3      	bgt.n	800166e <str2vfd+0xe>
	}
	uint8_t i = 10;
 80016c6:	230a      	movs	r3, #10
 80016c8:	72fb      	strb	r3, [r7, #11]
	while (*str)
 80016ca:	e042      	b.n	8001752 <str2vfd+0xf2>
	{
		 buf = get_char(*(str++));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff57 	bl	8001588 <get_char>
 80016da:	4603      	mov	r3, r0
 80016dc:	813b      	strh	r3, [r7, #8]
		 vfd.arr2[i][0] |= buf & (~(1<<0));
 80016de:	7afa      	ldrb	r2, [r7, #11]
 80016e0:	4921      	ldr	r1, [pc, #132]	; (8001768 <str2vfd+0x108>)
 80016e2:	4613      	mov	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	440b      	add	r3, r1
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	b25a      	sxtb	r2, r3
 80016ee:	893b      	ldrh	r3, [r7, #8]
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	f023 0301 	bic.w	r3, r3, #1
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b25b      	sxtb	r3, r3
 80016fc:	7afa      	ldrb	r2, [r7, #11]
 80016fe:	b2d8      	uxtb	r0, r3
 8001700:	4919      	ldr	r1, [pc, #100]	; (8001768 <str2vfd+0x108>)
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	440b      	add	r3, r1
 800170a:	4602      	mov	r2, r0
 800170c:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] |= (buf>>8)&(~(1<<7));
 800170e:	7afa      	ldrb	r2, [r7, #11]
 8001710:	4915      	ldr	r1, [pc, #84]	; (8001768 <str2vfd+0x108>)
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	440b      	add	r3, r1
 800171a:	3301      	adds	r3, #1
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	b25a      	sxtb	r2, r3
 8001720:	893b      	ldrh	r3, [r7, #8]
 8001722:	0a1b      	lsrs	r3, r3, #8
 8001724:	b29b      	uxth	r3, r3
 8001726:	b25b      	sxtb	r3, r3
 8001728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800172c:	b25b      	sxtb	r3, r3
 800172e:	4313      	orrs	r3, r2
 8001730:	b25b      	sxtb	r3, r3
 8001732:	7afa      	ldrb	r2, [r7, #11]
 8001734:	b2d8      	uxtb	r0, r3
 8001736:	490c      	ldr	r1, [pc, #48]	; (8001768 <str2vfd+0x108>)
 8001738:	4613      	mov	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	440b      	add	r3, r1
 8001740:	3301      	adds	r3, #1
 8001742:	4602      	mov	r2, r0
 8001744:	701a      	strb	r2, [r3, #0]
		 if (!--i)
 8001746:	7afb      	ldrb	r3, [r7, #11]
 8001748:	3b01      	subs	r3, #1
 800174a:	72fb      	strb	r3, [r7, #11]
 800174c:	7afb      	ldrb	r3, [r7, #11]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d004      	beq.n	800175c <str2vfd+0xfc>
	while (*str)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1b8      	bne.n	80016cc <str2vfd+0x6c>
			 break;
	}
}
 800175a:	e000      	b.n	800175e <str2vfd+0xfe>
			 break;
 800175c:	bf00      	nop
}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000017c 	.word	0x2000017c

0800176c <clr_vfd>:
		}
	}
}

void clr_vfd(void)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	e007      	b.n	8001788 <clr_vfd+0x1c>
		  vfd.arr1[a] = 0;
 8001778:	4a08      	ldr	r2, [pc, #32]	; (800179c <clr_vfd+0x30>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3301      	adds	r3, #1
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b20      	cmp	r3, #32
 800178c:	d9f4      	bls.n	8001778 <clr_vfd+0xc>
}
 800178e:	bf00      	nop
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	2000017c 	.word	0x2000017c

080017a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a0:	480c      	ldr	r0, [pc, #48]	; (80017d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017a2:	490d      	ldr	r1, [pc, #52]	; (80017d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a4:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017b8:	4c0a      	ldr	r4, [pc, #40]	; (80017e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017c6:	f7ff fed8 	bl	800157a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ca:	f002 fb55 	bl	8003e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ce:	f7ff f8ff 	bl	80009d0 <main>
  bx lr
 80017d2:	4770      	bx	lr
  ldr r0, =_sdata
 80017d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80017dc:	08004088 	.word	0x08004088
  ldr r2, =_sbss
 80017e0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80017e4:	200001a4 	.word	0x200001a4

080017e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC1_2_IRQHandler>
	...

080017ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_Init+0x28>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_Init+0x28>)
 80017f6:	f043 0310 	orr.w	r3, r3, #16
 80017fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 f92b 	bl	8001a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001802:	200f      	movs	r0, #15
 8001804:	f000 f808 	bl	8001818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001808:	f7ff fdd4 	bl	80013b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40022000 	.word	0x40022000

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_InitTick+0x54>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x58>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f935 	bl	8001aa6 <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 f90b 	bl	8001a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <HAL_InitTick+0x5c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000008 	.word	0x20000008
 8001870:	20000010 	.word	0x20000010
 8001874:	2000000c 	.word	0x2000000c

08001878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_IncTick+0x1c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_IncTick+0x20>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a03      	ldr	r2, [pc, #12]	; (8001898 <HAL_IncTick+0x20>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	20000010 	.word	0x20000010
 8001898:	200001a0 	.word	0x200001a0

0800189c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b02      	ldr	r3, [pc, #8]	; (80018ac <HAL_GetTick+0x10>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	200001a0 	.word	0x200001a0

080018b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b8:	f7ff fff0 	bl	800189c <HAL_GetTick>
 80018bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c8:	d005      	beq.n	80018d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_Delay+0x44>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d6:	bf00      	nop
 80018d8:	f7ff ffe0 	bl	800189c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d8f7      	bhi.n	80018d8 <HAL_Delay+0x28>
  {
  }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000010 	.word	0x20000010

080018f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001914:	4013      	ands	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192a:	4a04      	ldr	r2, [pc, #16]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	60d3      	str	r3, [r2, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <__NVIC_GetPriorityGrouping+0x18>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	f003 0307 	and.w	r3, r3, #7
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db0a      	blt.n	8001986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	490c      	ldr	r1, [pc, #48]	; (80019a8 <__NVIC_SetPriority+0x4c>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	440b      	add	r3, r1
 8001980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001984:	e00a      	b.n	800199c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4908      	ldr	r1, [pc, #32]	; (80019ac <__NVIC_SetPriority+0x50>)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	3b04      	subs	r3, #4
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	440b      	add	r3, r1
 800199a:	761a      	strb	r2, [r3, #24]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000e100 	.word	0xe000e100
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f1c3 0307 	rsb	r3, r3, #7
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	bf28      	it	cs
 80019ce:	2304      	movcs	r3, #4
 80019d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3304      	adds	r3, #4
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d902      	bls.n	80019e0 <NVIC_EncodePriority+0x30>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3b03      	subs	r3, #3
 80019de:	e000      	b.n	80019e2 <NVIC_EncodePriority+0x32>
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	401a      	ands	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43d9      	mvns	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	4313      	orrs	r3, r2
         );
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	; 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a24:	d301      	bcc.n	8001a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00f      	b.n	8001a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <SysTick_Config+0x40>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a32:	210f      	movs	r1, #15
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f7ff ff90 	bl	800195c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SysTick_Config+0x40>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <SysTick_Config+0x40>)
 8001a44:	2207      	movs	r2, #7
 8001a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	e000e010 	.word	0xe000e010

08001a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff49 	bl	80018f8 <__NVIC_SetPriorityGrouping>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a80:	f7ff ff5e 	bl	8001940 <__NVIC_GetPriorityGrouping>
 8001a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f7ff ff90 	bl	80019b0 <NVIC_EncodePriority>
 8001a90:	4602      	mov	r2, r0
 8001a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff5f 	bl	800195c <__NVIC_SetPriority>
}
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ffb0 	bl	8001a14 <SysTick_Config>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b08b      	sub	sp, #44	; 0x2c
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad2:	e169      	b.n	8001da8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	f040 8158 	bne.w	8001da2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4a9a      	ldr	r2, [pc, #616]	; (8001d60 <HAL_GPIO_Init+0x2a0>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d05e      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001afc:	4a98      	ldr	r2, [pc, #608]	; (8001d60 <HAL_GPIO_Init+0x2a0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d875      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b02:	4a98      	ldr	r2, [pc, #608]	; (8001d64 <HAL_GPIO_Init+0x2a4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d058      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b08:	4a96      	ldr	r2, [pc, #600]	; (8001d64 <HAL_GPIO_Init+0x2a4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d86f      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b0e:	4a96      	ldr	r2, [pc, #600]	; (8001d68 <HAL_GPIO_Init+0x2a8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d052      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b14:	4a94      	ldr	r2, [pc, #592]	; (8001d68 <HAL_GPIO_Init+0x2a8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d869      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b1a:	4a94      	ldr	r2, [pc, #592]	; (8001d6c <HAL_GPIO_Init+0x2ac>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d04c      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b20:	4a92      	ldr	r2, [pc, #584]	; (8001d6c <HAL_GPIO_Init+0x2ac>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d863      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b26:	4a92      	ldr	r2, [pc, #584]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d046      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b2c:	4a90      	ldr	r2, [pc, #576]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d85d      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b32:	2b12      	cmp	r3, #18
 8001b34:	d82a      	bhi.n	8001b8c <HAL_GPIO_Init+0xcc>
 8001b36:	2b12      	cmp	r3, #18
 8001b38:	d859      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b3a:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <HAL_GPIO_Init+0x80>)
 8001b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b40:	08001bbb 	.word	0x08001bbb
 8001b44:	08001b95 	.word	0x08001b95
 8001b48:	08001ba7 	.word	0x08001ba7
 8001b4c:	08001be9 	.word	0x08001be9
 8001b50:	08001bef 	.word	0x08001bef
 8001b54:	08001bef 	.word	0x08001bef
 8001b58:	08001bef 	.word	0x08001bef
 8001b5c:	08001bef 	.word	0x08001bef
 8001b60:	08001bef 	.word	0x08001bef
 8001b64:	08001bef 	.word	0x08001bef
 8001b68:	08001bef 	.word	0x08001bef
 8001b6c:	08001bef 	.word	0x08001bef
 8001b70:	08001bef 	.word	0x08001bef
 8001b74:	08001bef 	.word	0x08001bef
 8001b78:	08001bef 	.word	0x08001bef
 8001b7c:	08001bef 	.word	0x08001bef
 8001b80:	08001bef 	.word	0x08001bef
 8001b84:	08001b9d 	.word	0x08001b9d
 8001b88:	08001bb1 	.word	0x08001bb1
 8001b8c:	4a79      	ldr	r2, [pc, #484]	; (8001d74 <HAL_GPIO_Init+0x2b4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b92:	e02c      	b.n	8001bee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	623b      	str	r3, [r7, #32]
          break;
 8001b9a:	e029      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	623b      	str	r3, [r7, #32]
          break;
 8001ba4:	e024      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	3308      	adds	r3, #8
 8001bac:	623b      	str	r3, [r7, #32]
          break;
 8001bae:	e01f      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	330c      	adds	r3, #12
 8001bb6:	623b      	str	r3, [r7, #32]
          break;
 8001bb8:	e01a      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d102      	bne.n	8001bc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	623b      	str	r3, [r7, #32]
          break;
 8001bc6:	e013      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d105      	bne.n	8001bdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bd0:	2308      	movs	r3, #8
 8001bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	611a      	str	r2, [r3, #16]
          break;
 8001bda:	e009      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	615a      	str	r2, [r3, #20]
          break;
 8001be6:	e003      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
          break;
 8001bec:	e000      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          break;
 8001bee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2bff      	cmp	r3, #255	; 0xff
 8001bf4:	d801      	bhi.n	8001bfa <HAL_GPIO_Init+0x13a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	e001      	b.n	8001bfe <HAL_GPIO_Init+0x13e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2bff      	cmp	r3, #255	; 0xff
 8001c04:	d802      	bhi.n	8001c0c <HAL_GPIO_Init+0x14c>
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	e002      	b.n	8001c12 <HAL_GPIO_Init+0x152>
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	3b08      	subs	r3, #8
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	210f      	movs	r1, #15
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	401a      	ands	r2, r3
 8001c24:	6a39      	ldr	r1, [r7, #32]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 80b1 	beq.w	8001da2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c40:	4b4d      	ldr	r3, [pc, #308]	; (8001d78 <HAL_GPIO_Init+0x2b8>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a4c      	ldr	r2, [pc, #304]	; (8001d78 <HAL_GPIO_Init+0x2b8>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <HAL_GPIO_Init+0x2b8>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c58:	4a48      	ldr	r2, [pc, #288]	; (8001d7c <HAL_GPIO_Init+0x2bc>)
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	3302      	adds	r3, #2
 8001c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a40      	ldr	r2, [pc, #256]	; (8001d80 <HAL_GPIO_Init+0x2c0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d013      	beq.n	8001cac <HAL_GPIO_Init+0x1ec>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a3f      	ldr	r2, [pc, #252]	; (8001d84 <HAL_GPIO_Init+0x2c4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00d      	beq.n	8001ca8 <HAL_GPIO_Init+0x1e8>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a3e      	ldr	r2, [pc, #248]	; (8001d88 <HAL_GPIO_Init+0x2c8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d007      	beq.n	8001ca4 <HAL_GPIO_Init+0x1e4>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a3d      	ldr	r2, [pc, #244]	; (8001d8c <HAL_GPIO_Init+0x2cc>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d101      	bne.n	8001ca0 <HAL_GPIO_Init+0x1e0>
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e006      	b.n	8001cae <HAL_GPIO_Init+0x1ee>
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	e004      	b.n	8001cae <HAL_GPIO_Init+0x1ee>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e002      	b.n	8001cae <HAL_GPIO_Init+0x1ee>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <HAL_GPIO_Init+0x1ee>
 8001cac:	2300      	movs	r3, #0
 8001cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb0:	f002 0203 	and.w	r2, r2, #3
 8001cb4:	0092      	lsls	r2, r2, #2
 8001cb6:	4093      	lsls	r3, r2
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cbe:	492f      	ldr	r1, [pc, #188]	; (8001d7c <HAL_GPIO_Init+0x2bc>)
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d006      	beq.n	8001ce6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	492c      	ldr	r1, [pc, #176]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]
 8001ce4:	e006      	b.n	8001cf4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ce6:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	4928      	ldr	r1, [pc, #160]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d00:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	4922      	ldr	r1, [pc, #136]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	491e      	ldr	r1, [pc, #120]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	4918      	ldr	r1, [pc, #96]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	608b      	str	r3, [r1, #8]
 8001d34:	e006      	b.n	8001d44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	4914      	ldr	r1, [pc, #80]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d021      	beq.n	8001d94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	490e      	ldr	r1, [pc, #56]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	60cb      	str	r3, [r1, #12]
 8001d5c:	e021      	b.n	8001da2 <HAL_GPIO_Init+0x2e2>
 8001d5e:	bf00      	nop
 8001d60:	10320000 	.word	0x10320000
 8001d64:	10310000 	.word	0x10310000
 8001d68:	10220000 	.word	0x10220000
 8001d6c:	10210000 	.word	0x10210000
 8001d70:	10120000 	.word	0x10120000
 8001d74:	10110000 	.word	0x10110000
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	40010800 	.word	0x40010800
 8001d84:	40010c00 	.word	0x40010c00
 8001d88:	40011000 	.word	0x40011000
 8001d8c:	40011400 	.word	0x40011400
 8001d90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_GPIO_Init+0x304>)
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	4909      	ldr	r1, [pc, #36]	; (8001dc4 <HAL_GPIO_Init+0x304>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	3301      	adds	r3, #1
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	fa22 f303 	lsr.w	r3, r2, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f47f ae8e 	bne.w	8001ad4 <HAL_GPIO_Init+0x14>
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	372c      	adds	r7, #44	; 0x2c
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	40010400 	.word	0x40010400

08001dc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	887b      	ldrh	r3, [r7, #2]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
 8001de4:	e001      	b.n	8001dea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001de6:	2300      	movs	r3, #0
 8001de8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr

08001df6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	807b      	strh	r3, [r7, #2]
 8001e02:	4613      	mov	r3, r2
 8001e04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e06:	787b      	ldrb	r3, [r7, #1]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e0c:	887a      	ldrh	r2, [r7, #2]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e12:	e003      	b.n	8001e1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e14:	887b      	ldrh	r3, [r7, #2]
 8001e16:	041a      	lsls	r2, r3, #16
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	611a      	str	r2, [r3, #16]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e38:	887a      	ldrh	r2, [r7, #2]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	041a      	lsls	r2, r3, #16
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	43d9      	mvns	r1, r3
 8001e44:	887b      	ldrh	r3, [r7, #2]
 8001e46:	400b      	ands	r3, r1
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	611a      	str	r2, [r3, #16]
}
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e12b      	b.n	80020c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d106      	bne.n	8001e84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff faca 	bl	8001418 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2224      	movs	r2, #36	; 0x24
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0201 	bic.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eaa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ebc:	f001 fba2 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8001ec0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4a81      	ldr	r2, [pc, #516]	; (80020cc <HAL_I2C_Init+0x274>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d807      	bhi.n	8001edc <HAL_I2C_Init+0x84>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4a80      	ldr	r2, [pc, #512]	; (80020d0 <HAL_I2C_Init+0x278>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	bf94      	ite	ls
 8001ed4:	2301      	movls	r3, #1
 8001ed6:	2300      	movhi	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	e006      	b.n	8001eea <HAL_I2C_Init+0x92>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4a7d      	ldr	r2, [pc, #500]	; (80020d4 <HAL_I2C_Init+0x27c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	bf94      	ite	ls
 8001ee4:	2301      	movls	r3, #1
 8001ee6:	2300      	movhi	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e0e7      	b.n	80020c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4a78      	ldr	r2, [pc, #480]	; (80020d8 <HAL_I2C_Init+0x280>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	0c9b      	lsrs	r3, r3, #18
 8001efc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	4a6a      	ldr	r2, [pc, #424]	; (80020cc <HAL_I2C_Init+0x274>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d802      	bhi.n	8001f2c <HAL_I2C_Init+0xd4>
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	e009      	b.n	8001f40 <HAL_I2C_Init+0xe8>
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f32:	fb02 f303 	mul.w	r3, r2, r3
 8001f36:	4a69      	ldr	r2, [pc, #420]	; (80020dc <HAL_I2C_Init+0x284>)
 8001f38:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3c:	099b      	lsrs	r3, r3, #6
 8001f3e:	3301      	adds	r3, #1
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	430b      	orrs	r3, r1
 8001f46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	495c      	ldr	r1, [pc, #368]	; (80020cc <HAL_I2C_Init+0x274>)
 8001f5c:	428b      	cmp	r3, r1
 8001f5e:	d819      	bhi.n	8001f94 <HAL_I2C_Init+0x13c>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1e59      	subs	r1, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f6e:	1c59      	adds	r1, r3, #1
 8001f70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f74:	400b      	ands	r3, r1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00a      	beq.n	8001f90 <HAL_I2C_Init+0x138>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1e59      	subs	r1, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f8e:	e051      	b.n	8002034 <HAL_I2C_Init+0x1dc>
 8001f90:	2304      	movs	r3, #4
 8001f92:	e04f      	b.n	8002034 <HAL_I2C_Init+0x1dc>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d111      	bne.n	8001fc0 <HAL_I2C_Init+0x168>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1e58      	subs	r0, r3, #1
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6859      	ldr	r1, [r3, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	440b      	add	r3, r1
 8001faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bf0c      	ite	eq
 8001fb8:	2301      	moveq	r3, #1
 8001fba:	2300      	movne	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	e012      	b.n	8001fe6 <HAL_I2C_Init+0x18e>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1e58      	subs	r0, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6859      	ldr	r1, [r3, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	0099      	lsls	r1, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bf0c      	ite	eq
 8001fe0:	2301      	moveq	r3, #1
 8001fe2:	2300      	movne	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_I2C_Init+0x196>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e022      	b.n	8002034 <HAL_I2C_Init+0x1dc>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10e      	bne.n	8002014 <HAL_I2C_Init+0x1bc>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1e58      	subs	r0, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6859      	ldr	r1, [r3, #4]
 8001ffe:	460b      	mov	r3, r1
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	440b      	add	r3, r1
 8002004:	fbb0 f3f3 	udiv	r3, r0, r3
 8002008:	3301      	adds	r3, #1
 800200a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800200e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002012:	e00f      	b.n	8002034 <HAL_I2C_Init+0x1dc>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1e58      	subs	r0, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6859      	ldr	r1, [r3, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	0099      	lsls	r1, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	fbb0 f3f3 	udiv	r3, r0, r3
 800202a:	3301      	adds	r3, #1
 800202c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002030:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	6809      	ldr	r1, [r1, #0]
 8002038:	4313      	orrs	r3, r2
 800203a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69da      	ldr	r2, [r3, #28]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002062:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6911      	ldr	r1, [r2, #16]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68d2      	ldr	r2, [r2, #12]
 800206e:	4311      	orrs	r1, r2
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	430b      	orrs	r3, r1
 8002076:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695a      	ldr	r2, [r3, #20]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0201 	orr.w	r2, r2, #1
 80020a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2220      	movs	r2, #32
 80020ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	000186a0 	.word	0x000186a0
 80020d0:	001e847f 	.word	0x001e847f
 80020d4:	003d08ff 	.word	0x003d08ff
 80020d8:	431bde83 	.word	0x431bde83
 80020dc:	10624dd3 	.word	0x10624dd3

080020e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	4608      	mov	r0, r1
 80020ea:	4611      	mov	r1, r2
 80020ec:	461a      	mov	r2, r3
 80020ee:	4603      	mov	r3, r0
 80020f0:	817b      	strh	r3, [r7, #10]
 80020f2:	460b      	mov	r3, r1
 80020f4:	813b      	strh	r3, [r7, #8]
 80020f6:	4613      	mov	r3, r2
 80020f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020fa:	f7ff fbcf 	bl	800189c <HAL_GetTick>
 80020fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b20      	cmp	r3, #32
 800210a:	f040 80d9 	bne.w	80022c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	2319      	movs	r3, #25
 8002114:	2201      	movs	r2, #1
 8002116:	496d      	ldr	r1, [pc, #436]	; (80022cc <HAL_I2C_Mem_Write+0x1ec>)
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 fcc1 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002124:	2302      	movs	r3, #2
 8002126:	e0cc      	b.n	80022c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_I2C_Mem_Write+0x56>
 8002132:	2302      	movs	r3, #2
 8002134:	e0c5      	b.n	80022c2 <HAL_I2C_Mem_Write+0x1e2>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b01      	cmp	r3, #1
 800214a:	d007      	beq.n	800215c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800216a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2221      	movs	r2, #33	; 0x21
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2240      	movs	r2, #64	; 0x40
 8002178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a3a      	ldr	r2, [r7, #32]
 8002186:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800218c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4a4d      	ldr	r2, [pc, #308]	; (80022d0 <HAL_I2C_Mem_Write+0x1f0>)
 800219c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800219e:	88f8      	ldrh	r0, [r7, #6]
 80021a0:	893a      	ldrh	r2, [r7, #8]
 80021a2:	8979      	ldrh	r1, [r7, #10]
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	9301      	str	r3, [sp, #4]
 80021a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	4603      	mov	r3, r0
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 faf8 	bl	80027a4 <I2C_RequestMemoryWrite>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d052      	beq.n	8002260 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e081      	b.n	80022c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 fd42 	bl	8002c4c <I2C_WaitOnTXEFlagUntilTimeout>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00d      	beq.n	80021ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d107      	bne.n	80021e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e06b      	b.n	80022c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	781a      	ldrb	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002210:	b29b      	uxth	r3, r3
 8002212:	3b01      	subs	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b04      	cmp	r3, #4
 8002226:	d11b      	bne.n	8002260 <HAL_I2C_Mem_Write+0x180>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222c:	2b00      	cmp	r3, #0
 800222e:	d017      	beq.n	8002260 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	781a      	ldrb	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002256:	b29b      	uxth	r3, r3
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1aa      	bne.n	80021be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 fd2e 	bl	8002cce <I2C_WaitOnBTFFlagUntilTimeout>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00d      	beq.n	8002294 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	2b04      	cmp	r3, #4
 800227e:	d107      	bne.n	8002290 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800228e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e016      	b.n	80022c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	e000      	b.n	80022c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80022c0:	2302      	movs	r3, #2
  }
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	00100002 	.word	0x00100002
 80022d0:	ffff0000 	.word	0xffff0000

080022d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08c      	sub	sp, #48	; 0x30
 80022d8:	af02      	add	r7, sp, #8
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	4608      	mov	r0, r1
 80022de:	4611      	mov	r1, r2
 80022e0:	461a      	mov	r2, r3
 80022e2:	4603      	mov	r3, r0
 80022e4:	817b      	strh	r3, [r7, #10]
 80022e6:	460b      	mov	r3, r1
 80022e8:	813b      	strh	r3, [r7, #8]
 80022ea:	4613      	mov	r3, r2
 80022ec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022f2:	f7ff fad3 	bl	800189c <HAL_GetTick>
 80022f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b20      	cmp	r3, #32
 8002302:	f040 8244 	bne.w	800278e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2319      	movs	r3, #25
 800230c:	2201      	movs	r2, #1
 800230e:	4982      	ldr	r1, [pc, #520]	; (8002518 <HAL_I2C_Mem_Read+0x244>)
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 fbc5 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800231c:	2302      	movs	r3, #2
 800231e:	e237      	b.n	8002790 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_I2C_Mem_Read+0x5a>
 800232a:	2302      	movs	r3, #2
 800232c:	e230      	b.n	8002790 <HAL_I2C_Mem_Read+0x4bc>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b01      	cmp	r3, #1
 8002342:	d007      	beq.n	8002354 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0201 	orr.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002362:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2222      	movs	r2, #34	; 0x22
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2240      	movs	r2, #64	; 0x40
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800237e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002384:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4a62      	ldr	r2, [pc, #392]	; (800251c <HAL_I2C_Mem_Read+0x248>)
 8002394:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002396:	88f8      	ldrh	r0, [r7, #6]
 8002398:	893a      	ldrh	r2, [r7, #8]
 800239a:	8979      	ldrh	r1, [r7, #10]
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	4603      	mov	r3, r0
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 fa92 	bl	80028d0 <I2C_RequestMemoryRead>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e1ec      	b.n	8002790 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d113      	bne.n	80023e6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	e1c0      	b.n	8002768 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d11e      	bne.n	800242c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023fe:	b672      	cpsid	i
}
 8002400:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	61bb      	str	r3, [r7, #24]
 8002416:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002426:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002428:	b662      	cpsie	i
}
 800242a:	e035      	b.n	8002498 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002430:	2b02      	cmp	r3, #2
 8002432:	d11e      	bne.n	8002472 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002442:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002444:	b672      	cpsid	i
}
 8002446:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800246c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800246e:	b662      	cpsie	i
}
 8002470:	e012      	b.n	8002498 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002480:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002498:	e166      	b.n	8002768 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249e:	2b03      	cmp	r3, #3
 80024a0:	f200 811f 	bhi.w	80026e2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d123      	bne.n	80024f4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 fc4d 	bl	8002d50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e167      	b.n	8002790 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691a      	ldr	r2, [r3, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024f2:	e139      	b.n	8002768 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d152      	bne.n	80025a2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002502:	2200      	movs	r2, #0
 8002504:	4906      	ldr	r1, [pc, #24]	; (8002520 <HAL_I2C_Mem_Read+0x24c>)
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 faca 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d008      	beq.n	8002524 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e13c      	b.n	8002790 <HAL_I2C_Mem_Read+0x4bc>
 8002516:	bf00      	nop
 8002518:	00100002 	.word	0x00100002
 800251c:	ffff0000 	.word	0xffff0000
 8002520:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002524:	b672      	cpsid	i
}
 8002526:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002536:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691a      	ldr	r2, [r3, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002560:	b29b      	uxth	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800256a:	b662      	cpsie	i
}
 800256c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025a0:	e0e2      	b.n	8002768 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a8:	2200      	movs	r2, #0
 80025aa:	497b      	ldr	r1, [pc, #492]	; (8002798 <HAL_I2C_Mem_Read+0x4c4>)
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 fa77 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0e9      	b.n	8002790 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025cc:	b672      	cpsid	i
}
 80025ce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002602:	4b66      	ldr	r3, [pc, #408]	; (800279c <HAL_I2C_Mem_Read+0x4c8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	08db      	lsrs	r3, r3, #3
 8002608:	4a65      	ldr	r2, [pc, #404]	; (80027a0 <HAL_I2C_Mem_Read+0x4cc>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	0a1a      	lsrs	r2, r3, #8
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	00da      	lsls	r2, r3, #3
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	3b01      	subs	r3, #1
 8002620:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d118      	bne.n	800265a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2220      	movs	r2, #32
 8002632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f043 0220 	orr.w	r2, r3, #32
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800264a:	b662      	cpsie	i
}
 800264c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e09a      	b.n	8002790 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b04      	cmp	r3, #4
 8002666:	d1d9      	bne.n	800261c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002676:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80026aa:	b662      	cpsie	i
}
 80026ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026e0:	e042      	b.n	8002768 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 fb32 	bl	8002d50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e04c      	b.n	8002790 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271e:	b29b      	uxth	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b04      	cmp	r3, #4
 8002734:	d118      	bne.n	8002768 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276c:	2b00      	cmp	r3, #0
 800276e:	f47f ae94 	bne.w	800249a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e000      	b.n	8002790 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800278e:	2302      	movs	r3, #2
  }
}
 8002790:	4618      	mov	r0, r3
 8002792:	3728      	adds	r7, #40	; 0x28
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	00010004 	.word	0x00010004
 800279c:	20000008 	.word	0x20000008
 80027a0:	14f8b589 	.word	0x14f8b589

080027a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	4608      	mov	r0, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	817b      	strh	r3, [r7, #10]
 80027b6:	460b      	mov	r3, r1
 80027b8:	813b      	strh	r3, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f960 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00d      	beq.n	8002802 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f4:	d103      	bne.n	80027fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e05f      	b.n	80028c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002802:	897b      	ldrh	r3, [r7, #10]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002810:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	6a3a      	ldr	r2, [r7, #32]
 8002816:	492d      	ldr	r1, [pc, #180]	; (80028cc <I2C_RequestMemoryWrite+0x128>)
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f998 	bl	8002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e04c      	b.n	80028c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800283e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002840:	6a39      	ldr	r1, [r7, #32]
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fa02 	bl	8002c4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00d      	beq.n	800286a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	2b04      	cmp	r3, #4
 8002854:	d107      	bne.n	8002866 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002864:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e02b      	b.n	80028c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d105      	bne.n	800287c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002870:	893b      	ldrh	r3, [r7, #8]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	611a      	str	r2, [r3, #16]
 800287a:	e021      	b.n	80028c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800287c:	893b      	ldrh	r3, [r7, #8]
 800287e:	0a1b      	lsrs	r3, r3, #8
 8002880:	b29b      	uxth	r3, r3
 8002882:	b2da      	uxtb	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800288a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288c:	6a39      	ldr	r1, [r7, #32]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f9dc 	bl	8002c4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00d      	beq.n	80028b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d107      	bne.n	80028b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e005      	b.n	80028c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028b6:	893b      	ldrh	r3, [r7, #8]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	00010002 	.word	0x00010002

080028d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	4608      	mov	r0, r1
 80028da:	4611      	mov	r1, r2
 80028dc:	461a      	mov	r2, r3
 80028de:	4603      	mov	r3, r0
 80028e0:	817b      	strh	r3, [r7, #10]
 80028e2:	460b      	mov	r3, r1
 80028e4:	813b      	strh	r3, [r7, #8]
 80028e6:	4613      	mov	r3, r2
 80028e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002908:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	2200      	movs	r2, #0
 8002912:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f8c2 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00d      	beq.n	800293e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002930:	d103      	bne.n	800293a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e0aa      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800293e:	897b      	ldrh	r3, [r7, #10]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800294c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	6a3a      	ldr	r2, [r7, #32]
 8002952:	4952      	ldr	r1, [pc, #328]	; (8002a9c <I2C_RequestMemoryRead+0x1cc>)
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f8fa 	bl	8002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e097      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800297a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297c:	6a39      	ldr	r1, [r7, #32]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f964 	bl	8002c4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00d      	beq.n	80029a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	2b04      	cmp	r3, #4
 8002990:	d107      	bne.n	80029a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e076      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d105      	bne.n	80029b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029ac:	893b      	ldrh	r3, [r7, #8]
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	611a      	str	r2, [r3, #16]
 80029b6:	e021      	b.n	80029fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029b8:	893b      	ldrh	r3, [r7, #8]
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	b29b      	uxth	r3, r3
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c8:	6a39      	ldr	r1, [r7, #32]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f93e 	bl	8002c4c <I2C_WaitOnTXEFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00d      	beq.n	80029f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d107      	bne.n	80029ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e050      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029f2:	893b      	ldrh	r3, [r7, #8]
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fe:	6a39      	ldr	r1, [r7, #32]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f923 	bl	8002c4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00d      	beq.n	8002a28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d107      	bne.n	8002a24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e035      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 f82b 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00d      	beq.n	8002a6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a5e:	d103      	bne.n	8002a68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e013      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a6c:	897b      	ldrh	r3, [r7, #10]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	6a3a      	ldr	r2, [r7, #32]
 8002a80:	4906      	ldr	r1, [pc, #24]	; (8002a9c <I2C_RequestMemoryRead+0x1cc>)
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f863 	bl	8002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	00010002 	.word	0x00010002

08002aa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	4613      	mov	r3, r2
 8002aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ab0:	e025      	b.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab8:	d021      	beq.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aba:	f7fe feef 	bl	800189c <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d302      	bcc.n	8002ad0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d116      	bne.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f043 0220 	orr.w	r2, r3, #32
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e023      	b.n	8002b46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d10d      	bne.n	8002b24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4013      	ands	r3, r2
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	bf0c      	ite	eq
 8002b1a:	2301      	moveq	r3, #1
 8002b1c:	2300      	movne	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	461a      	mov	r2, r3
 8002b22:	e00c      	b.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	bf0c      	ite	eq
 8002b36:	2301      	moveq	r3, #1
 8002b38:	2300      	movne	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d0b6      	beq.n	8002ab2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b084      	sub	sp, #16
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
 8002b5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b5c:	e051      	b.n	8002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6c:	d123      	bne.n	8002bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f043 0204 	orr.w	r2, r3, #4
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e046      	b.n	8002c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d021      	beq.n	8002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bbe:	f7fe fe6d 	bl	800189c <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d302      	bcc.n	8002bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d116      	bne.n	8002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f043 0220 	orr.w	r2, r3, #32
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e020      	b.n	8002c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	0c1b      	lsrs	r3, r3, #16
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d10c      	bne.n	8002c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	43da      	mvns	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4013      	ands	r3, r2
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	bf14      	ite	ne
 8002c1e:	2301      	movne	r3, #1
 8002c20:	2300      	moveq	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	e00b      	b.n	8002c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	43da      	mvns	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	4013      	ands	r3, r2
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d18d      	bne.n	8002b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c58:	e02d      	b.n	8002cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f8ce 	bl	8002dfc <I2C_IsAcknowledgeFailed>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e02d      	b.n	8002cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c70:	d021      	beq.n	8002cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c72:	f7fe fe13 	bl	800189c <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d302      	bcc.n	8002c88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d116      	bne.n	8002cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f043 0220 	orr.w	r2, r3, #32
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e007      	b.n	8002cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b80      	cmp	r3, #128	; 0x80
 8002cc2:	d1ca      	bne.n	8002c5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cda:	e02d      	b.n	8002d38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f88d 	bl	8002dfc <I2C_IsAcknowledgeFailed>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e02d      	b.n	8002d48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf2:	d021      	beq.n	8002d38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf4:	f7fe fdd2 	bl	800189c <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d302      	bcc.n	8002d0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d116      	bne.n	8002d38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f043 0220 	orr.w	r2, r3, #32
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e007      	b.n	8002d48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d1ca      	bne.n	8002cdc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d5c:	e042      	b.n	8002de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d119      	bne.n	8002da0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0210 	mvn.w	r2, #16
 8002d74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e029      	b.n	8002df4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da0:	f7fe fd7c 	bl	800189c <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d302      	bcc.n	8002db6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d116      	bne.n	8002de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	f043 0220 	orr.w	r2, r3, #32
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e007      	b.n	8002df4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dee:	2b40      	cmp	r3, #64	; 0x40
 8002df0:	d1b5      	bne.n	8002d5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e12:	d11b      	bne.n	8002e4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	f043 0204 	orr.w	r2, r3, #4
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e26c      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 8087 	beq.w	8002f86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e78:	4b92      	ldr	r3, [pc, #584]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 030c 	and.w	r3, r3, #12
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d00c      	beq.n	8002e9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e84:	4b8f      	ldr	r3, [pc, #572]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 030c 	and.w	r3, r3, #12
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d112      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x5e>
 8002e90:	4b8c      	ldr	r3, [pc, #560]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9c:	d10b      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e9e:	4b89      	ldr	r3, [pc, #548]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d06c      	beq.n	8002f84 <HAL_RCC_OscConfig+0x12c>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d168      	bne.n	8002f84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e246      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ebe:	d106      	bne.n	8002ece <HAL_RCC_OscConfig+0x76>
 8002ec0:	4b80      	ldr	r3, [pc, #512]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a7f      	ldr	r2, [pc, #508]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	e02e      	b.n	8002f2c <HAL_RCC_OscConfig+0xd4>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x98>
 8002ed6:	4b7b      	ldr	r3, [pc, #492]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a7a      	ldr	r2, [pc, #488]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	4b78      	ldr	r3, [pc, #480]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a77      	ldr	r2, [pc, #476]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e01d      	b.n	8002f2c <HAL_RCC_OscConfig+0xd4>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0xbc>
 8002efa:	4b72      	ldr	r3, [pc, #456]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a71      	ldr	r2, [pc, #452]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b6f      	ldr	r3, [pc, #444]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a6e      	ldr	r2, [pc, #440]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e00b      	b.n	8002f2c <HAL_RCC_OscConfig+0xd4>
 8002f14:	4b6b      	ldr	r3, [pc, #428]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a6a      	ldr	r2, [pc, #424]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b68      	ldr	r3, [pc, #416]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a67      	ldr	r2, [pc, #412]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d013      	beq.n	8002f5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fe fcb2 	bl	800189c <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fe fcae 	bl	800189c <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	; 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e1fa      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	4b5d      	ldr	r3, [pc, #372]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0xe4>
 8002f5a:	e014      	b.n	8002f86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fc9e 	bl	800189c <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fe fc9a 	bl	800189c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	; 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e1e6      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f76:	4b53      	ldr	r3, [pc, #332]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x10c>
 8002f82:	e000      	b.n	8002f86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d063      	beq.n	800305a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f92:	4b4c      	ldr	r3, [pc, #304]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f9e:	4b49      	ldr	r3, [pc, #292]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d11c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x18c>
 8002faa:	4b46      	ldr	r3, [pc, #280]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d116      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb6:	4b43      	ldr	r3, [pc, #268]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_RCC_OscConfig+0x176>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d001      	beq.n	8002fce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e1ba      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fce:	4b3d      	ldr	r3, [pc, #244]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4939      	ldr	r1, [pc, #228]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe2:	e03a      	b.n	800305a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d020      	beq.n	800302e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fec:	4b36      	ldr	r3, [pc, #216]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff2:	f7fe fc53 	bl	800189c <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffa:	f7fe fc4f 	bl	800189c <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e19b      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300c:	4b2d      	ldr	r3, [pc, #180]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003018:	4b2a      	ldr	r3, [pc, #168]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4927      	ldr	r1, [pc, #156]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]
 800302c:	e015      	b.n	800305a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302e:	4b26      	ldr	r3, [pc, #152]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7fe fc32 	bl	800189c <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303c:	f7fe fc2e 	bl	800189c <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e17a      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304e:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d03a      	beq.n	80030dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d019      	beq.n	80030a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800306e:	4b17      	ldr	r3, [pc, #92]	; (80030cc <HAL_RCC_OscConfig+0x274>)
 8003070:	2201      	movs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003074:	f7fe fc12 	bl	800189c <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800307c:	f7fe fc0e 	bl	800189c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e15a      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308e:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800309a:	2001      	movs	r0, #1
 800309c:	f000 fac6 	bl	800362c <RCC_Delay>
 80030a0:	e01c      	b.n	80030dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a2:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <HAL_RCC_OscConfig+0x274>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a8:	f7fe fbf8 	bl	800189c <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ae:	e00f      	b.n	80030d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b0:	f7fe fbf4 	bl	800189c <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d908      	bls.n	80030d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e140      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000
 80030c8:	42420000 	.word	0x42420000
 80030cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d0:	4b9e      	ldr	r3, [pc, #632]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1e9      	bne.n	80030b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80a6 	beq.w	8003236 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ea:	2300      	movs	r3, #0
 80030ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ee:	4b97      	ldr	r3, [pc, #604]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10d      	bne.n	8003116 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fa:	4b94      	ldr	r3, [pc, #592]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	4a93      	ldr	r2, [pc, #588]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003104:	61d3      	str	r3, [r2, #28]
 8003106:	4b91      	ldr	r3, [pc, #580]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003112:	2301      	movs	r3, #1
 8003114:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003116:	4b8e      	ldr	r3, [pc, #568]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d118      	bne.n	8003154 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003122:	4b8b      	ldr	r3, [pc, #556]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a8a      	ldr	r2, [pc, #552]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312e:	f7fe fbb5 	bl	800189c <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003136:	f7fe fbb1 	bl	800189c <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b64      	cmp	r3, #100	; 0x64
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e0fd      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	4b81      	ldr	r3, [pc, #516]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d106      	bne.n	800316a <HAL_RCC_OscConfig+0x312>
 800315c:	4b7b      	ldr	r3, [pc, #492]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	4a7a      	ldr	r2, [pc, #488]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6213      	str	r3, [r2, #32]
 8003168:	e02d      	b.n	80031c6 <HAL_RCC_OscConfig+0x36e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10c      	bne.n	800318c <HAL_RCC_OscConfig+0x334>
 8003172:	4b76      	ldr	r3, [pc, #472]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	4a75      	ldr	r2, [pc, #468]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003178:	f023 0301 	bic.w	r3, r3, #1
 800317c:	6213      	str	r3, [r2, #32]
 800317e:	4b73      	ldr	r3, [pc, #460]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	4a72      	ldr	r2, [pc, #456]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003184:	f023 0304 	bic.w	r3, r3, #4
 8003188:	6213      	str	r3, [r2, #32]
 800318a:	e01c      	b.n	80031c6 <HAL_RCC_OscConfig+0x36e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2b05      	cmp	r3, #5
 8003192:	d10c      	bne.n	80031ae <HAL_RCC_OscConfig+0x356>
 8003194:	4b6d      	ldr	r3, [pc, #436]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	4a6c      	ldr	r2, [pc, #432]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 800319a:	f043 0304 	orr.w	r3, r3, #4
 800319e:	6213      	str	r3, [r2, #32]
 80031a0:	4b6a      	ldr	r3, [pc, #424]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	4a69      	ldr	r2, [pc, #420]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	6213      	str	r3, [r2, #32]
 80031ac:	e00b      	b.n	80031c6 <HAL_RCC_OscConfig+0x36e>
 80031ae:	4b67      	ldr	r3, [pc, #412]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	4a66      	ldr	r2, [pc, #408]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	6213      	str	r3, [r2, #32]
 80031ba:	4b64      	ldr	r3, [pc, #400]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	4a63      	ldr	r2, [pc, #396]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80031c0:	f023 0304 	bic.w	r3, r3, #4
 80031c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d015      	beq.n	80031fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ce:	f7fe fb65 	bl	800189c <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d4:	e00a      	b.n	80031ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d6:	f7fe fb61 	bl	800189c <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e0ab      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ec:	4b57      	ldr	r3, [pc, #348]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0ee      	beq.n	80031d6 <HAL_RCC_OscConfig+0x37e>
 80031f8:	e014      	b.n	8003224 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fa:	f7fe fb4f 	bl	800189c <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003200:	e00a      	b.n	8003218 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003202:	f7fe fb4b 	bl	800189c <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003210:	4293      	cmp	r3, r2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e095      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003218:	4b4c      	ldr	r3, [pc, #304]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1ee      	bne.n	8003202 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003224:	7dfb      	ldrb	r3, [r7, #23]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d105      	bne.n	8003236 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800322a:	4b48      	ldr	r3, [pc, #288]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	4a47      	ldr	r2, [pc, #284]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003234:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 8081 	beq.w	8003342 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003240:	4b42      	ldr	r3, [pc, #264]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 030c 	and.w	r3, r3, #12
 8003248:	2b08      	cmp	r3, #8
 800324a:	d061      	beq.n	8003310 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d146      	bne.n	80032e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003254:	4b3f      	ldr	r3, [pc, #252]	; (8003354 <HAL_RCC_OscConfig+0x4fc>)
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325a:	f7fe fb1f 	bl	800189c <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003262:	f7fe fb1b 	bl	800189c <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e067      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003274:	4b35      	ldr	r3, [pc, #212]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f0      	bne.n	8003262 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003288:	d108      	bne.n	800329c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800328a:	4b30      	ldr	r3, [pc, #192]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	492d      	ldr	r1, [pc, #180]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003298:	4313      	orrs	r3, r2
 800329a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800329c:	4b2b      	ldr	r3, [pc, #172]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a19      	ldr	r1, [r3, #32]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	430b      	orrs	r3, r1
 80032ae:	4927      	ldr	r1, [pc, #156]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b4:	4b27      	ldr	r3, [pc, #156]	; (8003354 <HAL_RCC_OscConfig+0x4fc>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ba:	f7fe faef 	bl	800189c <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c2:	f7fe faeb 	bl	800189c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e037      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032d4:	4b1d      	ldr	r3, [pc, #116]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x46a>
 80032e0:	e02f      	b.n	8003342 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e2:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <HAL_RCC_OscConfig+0x4fc>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e8:	f7fe fad8 	bl	800189c <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f0:	f7fe fad4 	bl	800189c <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e020      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003302:	4b12      	ldr	r3, [pc, #72]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x498>
 800330e:	e018      	b.n	8003342 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e013      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	429a      	cmp	r2, r3
 800332e:	d106      	bne.n	800333e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333a:	429a      	cmp	r2, r3
 800333c:	d001      	beq.n	8003342 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40021000 	.word	0x40021000
 8003350:	40007000 	.word	0x40007000
 8003354:	42420060 	.word	0x42420060

08003358 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0d0      	b.n	800350e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800336c:	4b6a      	ldr	r3, [pc, #424]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d910      	bls.n	800339c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337a:	4b67      	ldr	r3, [pc, #412]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 0207 	bic.w	r2, r3, #7
 8003382:	4965      	ldr	r1, [pc, #404]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	4313      	orrs	r3, r2
 8003388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b63      	ldr	r3, [pc, #396]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0b8      	b.n	800350e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d020      	beq.n	80033ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b4:	4b59      	ldr	r3, [pc, #356]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	4a58      	ldr	r2, [pc, #352]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80033ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033cc:	4b53      	ldr	r3, [pc, #332]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	4a52      	ldr	r2, [pc, #328]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d8:	4b50      	ldr	r3, [pc, #320]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	494d      	ldr	r1, [pc, #308]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d040      	beq.n	8003478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	4b47      	ldr	r3, [pc, #284]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d115      	bne.n	8003436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e07f      	b.n	800350e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d107      	bne.n	8003426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003416:	4b41      	ldr	r3, [pc, #260]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d109      	bne.n	8003436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e073      	b.n	800350e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003426:	4b3d      	ldr	r3, [pc, #244]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e06b      	b.n	800350e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003436:	4b39      	ldr	r3, [pc, #228]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f023 0203 	bic.w	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	4936      	ldr	r1, [pc, #216]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003448:	f7fe fa28 	bl	800189c <HAL_GetTick>
 800344c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344e:	e00a      	b.n	8003466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003450:	f7fe fa24 	bl	800189c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	f241 3288 	movw	r2, #5000	; 0x1388
 800345e:	4293      	cmp	r3, r2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e053      	b.n	800350e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003466:	4b2d      	ldr	r3, [pc, #180]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 020c 	and.w	r2, r3, #12
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	429a      	cmp	r2, r3
 8003476:	d1eb      	bne.n	8003450 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003478:	4b27      	ldr	r3, [pc, #156]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d210      	bcs.n	80034a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003486:	4b24      	ldr	r3, [pc, #144]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 0207 	bic.w	r2, r3, #7
 800348e:	4922      	ldr	r1, [pc, #136]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	4313      	orrs	r3, r2
 8003494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003496:	4b20      	ldr	r3, [pc, #128]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e032      	b.n	800350e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4916      	ldr	r1, [pc, #88]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034d2:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	490e      	ldr	r1, [pc, #56]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034e6:	f000 f821 	bl	800352c <HAL_RCC_GetSysClockFreq>
 80034ea:	4602      	mov	r2, r0
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	490a      	ldr	r1, [pc, #40]	; (8003520 <HAL_RCC_ClockConfig+0x1c8>)
 80034f8:	5ccb      	ldrb	r3, [r1, r3]
 80034fa:	fa22 f303 	lsr.w	r3, r2, r3
 80034fe:	4a09      	ldr	r2, [pc, #36]	; (8003524 <HAL_RCC_ClockConfig+0x1cc>)
 8003500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003502:	4b09      	ldr	r3, [pc, #36]	; (8003528 <HAL_RCC_ClockConfig+0x1d0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe f986 	bl	8001818 <HAL_InitTick>

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40022000 	.word	0x40022000
 800351c:	40021000 	.word	0x40021000
 8003520:	08003f90 	.word	0x08003f90
 8003524:	20000008 	.word	0x20000008
 8003528:	2000000c 	.word	0x2000000c

0800352c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800352c:	b490      	push	{r4, r7}
 800352e:	b08a      	sub	sp, #40	; 0x28
 8003530:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003532:	4b2a      	ldr	r3, [pc, #168]	; (80035dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003534:	1d3c      	adds	r4, r7, #4
 8003536:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800353c:	f240 2301 	movw	r3, #513	; 0x201
 8003540:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	2300      	movs	r3, #0
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	2300      	movs	r3, #0
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003556:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f003 030c 	and.w	r3, r3, #12
 8003562:	2b04      	cmp	r3, #4
 8003564:	d002      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x40>
 8003566:	2b08      	cmp	r3, #8
 8003568:	d003      	beq.n	8003572 <HAL_RCC_GetSysClockFreq+0x46>
 800356a:	e02d      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800356c:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800356e:	623b      	str	r3, [r7, #32]
      break;
 8003570:	e02d      	b.n	80035ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	0c9b      	lsrs	r3, r3, #18
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800357e:	4413      	add	r3, r2
 8003580:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003584:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d013      	beq.n	80035b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003590:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	0c5b      	lsrs	r3, r3, #17
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800359e:	4413      	add	r3, r2
 80035a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	4a0e      	ldr	r2, [pc, #56]	; (80035e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035aa:	fb02 f203 	mul.w	r2, r2, r3
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
 80035b6:	e004      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	4a0b      	ldr	r2, [pc, #44]	; (80035e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035bc:	fb02 f303 	mul.w	r3, r2, r3
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	623b      	str	r3, [r7, #32]
      break;
 80035c6:	e002      	b.n	80035ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <HAL_RCC_GetSysClockFreq+0xc0>)
 80035ca:	623b      	str	r3, [r7, #32]
      break;
 80035cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ce:	6a3b      	ldr	r3, [r7, #32]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3728      	adds	r7, #40	; 0x28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc90      	pop	{r4, r7}
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	08003f80 	.word	0x08003f80
 80035e0:	40021000 	.word	0x40021000
 80035e4:	00f42400 	.word	0x00f42400
 80035e8:	003d0900 	.word	0x003d0900
 80035ec:	007a1200 	.word	0x007a1200

080035f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f4:	4b02      	ldr	r3, [pc, #8]	; (8003600 <HAL_RCC_GetHCLKFreq+0x10>)
 80035f6:	681b      	ldr	r3, [r3, #0]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr
 8003600:	20000008 	.word	0x20000008

08003604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003608:	f7ff fff2 	bl	80035f0 <HAL_RCC_GetHCLKFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	0a1b      	lsrs	r3, r3, #8
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4903      	ldr	r1, [pc, #12]	; (8003628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000
 8003628:	08003fa0 	.word	0x08003fa0

0800362c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003634:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <RCC_Delay+0x34>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a0a      	ldr	r2, [pc, #40]	; (8003664 <RCC_Delay+0x38>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	0a5b      	lsrs	r3, r3, #9
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	fb02 f303 	mul.w	r3, r2, r3
 8003646:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003648:	bf00      	nop
  }
  while (Delay --);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1e5a      	subs	r2, r3, #1
 800364e:	60fa      	str	r2, [r7, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f9      	bne.n	8003648 <RCC_Delay+0x1c>
}
 8003654:	bf00      	nop
 8003656:	bf00      	nop
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr
 8003660:	20000008 	.word	0x20000008
 8003664:	10624dd3 	.word	0x10624dd3

08003668 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e076      	b.n	8003768 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	2b00      	cmp	r3, #0
 8003680:	d108      	bne.n	8003694 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800368a:	d009      	beq.n	80036a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	61da      	str	r2, [r3, #28]
 8003692:	e005      	b.n	80036a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fd feea 	bl	8001494 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036e8:	431a      	orrs	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003724:	ea42 0103 	orr.w	r1, r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	0c1a      	lsrs	r2, r3, #16
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f002 0204 	and.w	r2, r2, #4
 8003746:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	69da      	ldr	r2, [r3, #28]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003756:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	4613      	mov	r3, r2
 800377e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_SPI_Transmit+0x22>
 800378e:	2302      	movs	r3, #2
 8003790:	e126      	b.n	80039e0 <HAL_SPI_Transmit+0x270>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800379a:	f7fe f87f 	bl	800189c <HAL_GetTick>
 800379e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037a0:	88fb      	ldrh	r3, [r7, #6]
 80037a2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d002      	beq.n	80037b6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037b0:	2302      	movs	r3, #2
 80037b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037b4:	e10b      	b.n	80039ce <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <HAL_SPI_Transmit+0x52>
 80037bc:	88fb      	ldrh	r3, [r7, #6]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d102      	bne.n	80037c8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037c6:	e102      	b.n	80039ce <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2203      	movs	r2, #3
 80037cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	88fa      	ldrh	r2, [r7, #6]
 80037e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	88fa      	ldrh	r2, [r7, #6]
 80037e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800380e:	d10f      	bne.n	8003830 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800382e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383a:	2b40      	cmp	r3, #64	; 0x40
 800383c:	d007      	beq.n	800384e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800384c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003856:	d14b      	bne.n	80038f0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <HAL_SPI_Transmit+0xf6>
 8003860:	8afb      	ldrh	r3, [r7, #22]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d13e      	bne.n	80038e4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	881a      	ldrh	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	1c9a      	adds	r2, r3, #2
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800388a:	e02b      	b.n	80038e4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b02      	cmp	r3, #2
 8003898:	d112      	bne.n	80038c0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	881a      	ldrh	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	1c9a      	adds	r2, r3, #2
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80038be:	e011      	b.n	80038e4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038c0:	f7fd ffec 	bl	800189c <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d803      	bhi.n	80038d8 <HAL_SPI_Transmit+0x168>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d6:	d102      	bne.n	80038de <HAL_SPI_Transmit+0x16e>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d102      	bne.n	80038e4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038e2:	e074      	b.n	80039ce <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1ce      	bne.n	800388c <HAL_SPI_Transmit+0x11c>
 80038ee:	e04c      	b.n	800398a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_SPI_Transmit+0x18e>
 80038f8:	8afb      	ldrh	r3, [r7, #22]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d140      	bne.n	8003980 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	330c      	adds	r3, #12
 8003908:	7812      	ldrb	r2, [r2, #0]
 800390a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003924:	e02c      	b.n	8003980 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b02      	cmp	r3, #2
 8003932:	d113      	bne.n	800395c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	330c      	adds	r3, #12
 800393e:	7812      	ldrb	r2, [r2, #0]
 8003940:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	86da      	strh	r2, [r3, #54]	; 0x36
 800395a:	e011      	b.n	8003980 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800395c:	f7fd ff9e 	bl	800189c <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d803      	bhi.n	8003974 <HAL_SPI_Transmit+0x204>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003972:	d102      	bne.n	800397a <HAL_SPI_Transmit+0x20a>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d102      	bne.n	8003980 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800397e:	e026      	b.n	80039ce <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1cd      	bne.n	8003926 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	6839      	ldr	r1, [r7, #0]
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fa54 	bl	8003e3c <SPI_EndRxTxTransaction>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2220      	movs	r2, #32
 800399e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039a8:	2300      	movs	r3, #0
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	77fb      	strb	r3, [r7, #31]
 80039ca:	e000      	b.n	80039ce <HAL_SPI_Transmit+0x25e>
  }

error:
 80039cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039de:	7ffb      	ldrb	r3, [r7, #31]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3720      	adds	r7, #32
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08c      	sub	sp, #48	; 0x30
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039f6:	2301      	movs	r3, #1
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d101      	bne.n	8003a0e <HAL_SPI_TransmitReceive+0x26>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e18a      	b.n	8003d24 <HAL_SPI_TransmitReceive+0x33c>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a16:	f7fd ff41 	bl	800189c <HAL_GetTick>
 8003a1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a2c:	887b      	ldrh	r3, [r7, #2]
 8003a2e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d00f      	beq.n	8003a58 <HAL_SPI_TransmitReceive+0x70>
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a3e:	d107      	bne.n	8003a50 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d103      	bne.n	8003a50 <HAL_SPI_TransmitReceive+0x68>
 8003a48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d003      	beq.n	8003a58 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a50:	2302      	movs	r3, #2
 8003a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a56:	e15b      	b.n	8003d10 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_SPI_TransmitReceive+0x82>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <HAL_SPI_TransmitReceive+0x82>
 8003a64:	887b      	ldrh	r3, [r7, #2]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d103      	bne.n	8003a72 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a70:	e14e      	b.n	8003d10 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d003      	beq.n	8003a86 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2205      	movs	r2, #5
 8003a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	887a      	ldrh	r2, [r7, #2]
 8003a96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	887a      	ldrh	r2, [r7, #2]
 8003a9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	887a      	ldrh	r2, [r7, #2]
 8003aa8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	887a      	ldrh	r2, [r7, #2]
 8003aae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac6:	2b40      	cmp	r3, #64	; 0x40
 8003ac8:	d007      	beq.n	8003ada <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ad8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae2:	d178      	bne.n	8003bd6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <HAL_SPI_TransmitReceive+0x10a>
 8003aec:	8b7b      	ldrh	r3, [r7, #26]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d166      	bne.n	8003bc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	881a      	ldrh	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	1c9a      	adds	r2, r3, #2
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b16:	e053      	b.n	8003bc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d11b      	bne.n	8003b5e <HAL_SPI_TransmitReceive+0x176>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d016      	beq.n	8003b5e <HAL_SPI_TransmitReceive+0x176>
 8003b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d113      	bne.n	8003b5e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	881a      	ldrh	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	1c9a      	adds	r2, r3, #2
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d119      	bne.n	8003ba0 <HAL_SPI_TransmitReceive+0x1b8>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d014      	beq.n	8003ba0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	b292      	uxth	r2, r2
 8003b82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	1c9a      	adds	r2, r3, #2
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ba0:	f7fd fe7c 	bl	800189c <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d807      	bhi.n	8003bc0 <HAL_SPI_TransmitReceive+0x1d8>
 8003bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb6:	d003      	beq.n	8003bc0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bbe:	e0a7      	b.n	8003d10 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1a6      	bne.n	8003b18 <HAL_SPI_TransmitReceive+0x130>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1a1      	bne.n	8003b18 <HAL_SPI_TransmitReceive+0x130>
 8003bd4:	e07c      	b.n	8003cd0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_SPI_TransmitReceive+0x1fc>
 8003bde:	8b7b      	ldrh	r3, [r7, #26]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d16b      	bne.n	8003cbc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	330c      	adds	r3, #12
 8003bee:	7812      	ldrb	r2, [r2, #0]
 8003bf0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c0a:	e057      	b.n	8003cbc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d11c      	bne.n	8003c54 <HAL_SPI_TransmitReceive+0x26c>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d017      	beq.n	8003c54 <HAL_SPI_TransmitReceive+0x26c>
 8003c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d114      	bne.n	8003c54 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	330c      	adds	r3, #12
 8003c34:	7812      	ldrb	r2, [r2, #0]
 8003c36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d119      	bne.n	8003c96 <HAL_SPI_TransmitReceive+0x2ae>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d014      	beq.n	8003c96 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c92:	2301      	movs	r3, #1
 8003c94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c96:	f7fd fe01 	bl	800189c <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d803      	bhi.n	8003cae <HAL_SPI_TransmitReceive+0x2c6>
 8003ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cac:	d102      	bne.n	8003cb4 <HAL_SPI_TransmitReceive+0x2cc>
 8003cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d103      	bne.n	8003cbc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cba:	e029      	b.n	8003d10 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1a2      	bne.n	8003c0c <HAL_SPI_TransmitReceive+0x224>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d19d      	bne.n	8003c0c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 f8b1 	bl	8003e3c <SPI_EndRxTxTransaction>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d006      	beq.n	8003cee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003cec:	e010      	b.n	8003d10 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10b      	bne.n	8003d0e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	e000      	b.n	8003d10 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3730      	adds	r7, #48	; 0x30
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d3c:	f7fd fdae 	bl	800189c <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	4413      	add	r3, r2
 8003d4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d4c:	f7fd fda6 	bl	800189c <HAL_GetTick>
 8003d50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d52:	4b39      	ldr	r3, [pc, #228]	; (8003e38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	015b      	lsls	r3, r3, #5
 8003d58:	0d1b      	lsrs	r3, r3, #20
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	fb02 f303 	mul.w	r3, r2, r3
 8003d60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d62:	e054      	b.n	8003e0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6a:	d050      	beq.n	8003e0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d6c:	f7fd fd96 	bl	800189c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d902      	bls.n	8003d82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d13d      	bne.n	8003dfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d9a:	d111      	bne.n	8003dc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da4:	d004      	beq.n	8003db0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dae:	d107      	bne.n	8003dc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc8:	d10f      	bne.n	8003dea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003de8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e017      	b.n	8003e2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	4013      	ands	r3, r2
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	bf0c      	ite	eq
 8003e1e:	2301      	moveq	r3, #1
 8003e20:	2300      	movne	r3, #0
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	461a      	mov	r2, r3
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d19b      	bne.n	8003d64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	20000008 	.word	0x20000008

08003e3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	2180      	movs	r1, #128	; 0x80
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f7ff ff6a 	bl	8003d2c <SPI_WaitFlagStateUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d007      	beq.n	8003e6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e62:	f043 0220 	orr.w	r2, r3, #32
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e000      	b.n	8003e70 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <__libc_init_array>:
 8003e78:	b570      	push	{r4, r5, r6, lr}
 8003e7a:	2600      	movs	r6, #0
 8003e7c:	4d0c      	ldr	r5, [pc, #48]	; (8003eb0 <__libc_init_array+0x38>)
 8003e7e:	4c0d      	ldr	r4, [pc, #52]	; (8003eb4 <__libc_init_array+0x3c>)
 8003e80:	1b64      	subs	r4, r4, r5
 8003e82:	10a4      	asrs	r4, r4, #2
 8003e84:	42a6      	cmp	r6, r4
 8003e86:	d109      	bne.n	8003e9c <__libc_init_array+0x24>
 8003e88:	f000 f822 	bl	8003ed0 <_init>
 8003e8c:	2600      	movs	r6, #0
 8003e8e:	4d0a      	ldr	r5, [pc, #40]	; (8003eb8 <__libc_init_array+0x40>)
 8003e90:	4c0a      	ldr	r4, [pc, #40]	; (8003ebc <__libc_init_array+0x44>)
 8003e92:	1b64      	subs	r4, r4, r5
 8003e94:	10a4      	asrs	r4, r4, #2
 8003e96:	42a6      	cmp	r6, r4
 8003e98:	d105      	bne.n	8003ea6 <__libc_init_array+0x2e>
 8003e9a:	bd70      	pop	{r4, r5, r6, pc}
 8003e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea0:	4798      	blx	r3
 8003ea2:	3601      	adds	r6, #1
 8003ea4:	e7ee      	b.n	8003e84 <__libc_init_array+0xc>
 8003ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eaa:	4798      	blx	r3
 8003eac:	3601      	adds	r6, #1
 8003eae:	e7f2      	b.n	8003e96 <__libc_init_array+0x1e>
 8003eb0:	08004080 	.word	0x08004080
 8003eb4:	08004080 	.word	0x08004080
 8003eb8:	08004080 	.word	0x08004080
 8003ebc:	08004084 	.word	0x08004084

08003ec0 <memset>:
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	4402      	add	r2, r0
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d100      	bne.n	8003eca <memset+0xa>
 8003ec8:	4770      	bx	lr
 8003eca:	f803 1b01 	strb.w	r1, [r3], #1
 8003ece:	e7f9      	b.n	8003ec4 <memset+0x4>

08003ed0 <_init>:
 8003ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed2:	bf00      	nop
 8003ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ed6:	bc08      	pop	{r3}
 8003ed8:	469e      	mov	lr, r3
 8003eda:	4770      	bx	lr

08003edc <_fini>:
 8003edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ede:	bf00      	nop
 8003ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee2:	bc08      	pop	{r3}
 8003ee4:	469e      	mov	lr, r3
 8003ee6:	4770      	bx	lr
