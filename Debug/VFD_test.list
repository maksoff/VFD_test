
VFD_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003704  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08003810  08003810  00013810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003998  08003998  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003998  08003998  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003998  08003998  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800399c  0800399c  0001399c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000000c  080039ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  080039ac  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000966b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e2  00000000  00000000  000296a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  0002af88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  0002bab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164c4  00000000  00000000  0002c548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6d3  00000000  00000000  00042a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008115c  00000000  00000000  0004e0df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf23b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d24  00000000  00000000  000cf290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080037f8 	.word	0x080037f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080037f8 	.word	0x080037f8

0800014c <set_spi_VFD>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void set_spi_VFD(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
//	return;
//	__HAL_SPI_DISABLE(&hspi2);
	hspi2.Instance->CR1 |= SPI_CR1_LSBFIRST;
 8000150:	4b05      	ldr	r3, [pc, #20]	; (8000168 <set_spi_VFD+0x1c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	681a      	ldr	r2, [r3, #0]
 8000156:	4b04      	ldr	r3, [pc, #16]	; (8000168 <set_spi_VFD+0x1c>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800015e:	601a      	str	r2, [r3, #0]
//	__HAL_SPI_ENABLE(&hspi2);
}
 8000160:	bf00      	nop
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	20000034 	.word	0x20000034

0800016c <set_spi_nRF>:

void set_spi_nRF(void)
{
 800016c:	b480      	push	{r7}
 800016e:	af00      	add	r7, sp, #0
//	return;
//	__HAL_SPI_DISABLE(&hspi2);
	hspi2.Instance->CR1 &= ~(SPI_CR1_LSBFIRST);
 8000170:	4b05      	ldr	r3, [pc, #20]	; (8000188 <set_spi_nRF+0x1c>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	681a      	ldr	r2, [r3, #0]
 8000176:	4b04      	ldr	r3, [pc, #16]	; (8000188 <set_spi_nRF+0x1c>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800017e:	601a      	str	r2, [r3, #0]
//	__HAL_SPI_ENABLE(&hspi2);
}
 8000180:	bf00      	nop
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000034 	.word	0x20000034

0800018c <nrf24l01p_spi_ss>:

void nrf24l01p_spi_ss(nrf24l01p_spi_ss_level_t level)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	4603      	mov	r3, r0
 8000194:	71fb      	strb	r3, [r7, #7]
	if (!level)
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	2b00      	cmp	r3, #0
 800019a:	d101      	bne.n	80001a0 <nrf24l01p_spi_ss+0x14>
		set_spi_nRF();
 800019c:	f7ff ffe6 	bl	800016c <set_spi_nRF>
	HAL_GPIO_WritePin(SPI2_nRF_CSn_GPIO_Port, SPI2_nRF_CSn_Pin, level);
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	461a      	mov	r2, r3
 80001a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <nrf24l01p_spi_ss+0x34>)
 80001aa:	f001 fab8 	bl	800171e <HAL_GPIO_WritePin>
	if (level)
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <nrf24l01p_spi_ss+0x2c>
		set_spi_VFD();
 80001b4:	f7ff ffca 	bl	800014c <set_spi_VFD>
}
 80001b8:	bf00      	nop
 80001ba:	3708      	adds	r7, #8
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	40010c00 	.word	0x40010c00

080001c4 <nrf24l01p_spi_rw>:

uint8_t nrf24l01p_spi_rw(uint8_t value)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b086      	sub	sp, #24
 80001c8:	af02      	add	r7, sp, #8
 80001ca:	4603      	mov	r3, r0
 80001cc:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	HAL_SPI_TransmitReceive(&hspi2, &value, &data, 1, 100);
 80001ce:	f107 020f 	add.w	r2, r7, #15
 80001d2:	1df9      	adds	r1, r7, #7
 80001d4:	2364      	movs	r3, #100	; 0x64
 80001d6:	9300      	str	r3, [sp, #0]
 80001d8:	2301      	movs	r3, #1
 80001da:	4804      	ldr	r0, [pc, #16]	; (80001ec <nrf24l01p_spi_rw+0x28>)
 80001dc:	f003 f898 	bl	8003310 <HAL_SPI_TransmitReceive>
	return data;
 80001e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	3710      	adds	r7, #16
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	20000034 	.word	0x20000034

080001f0 <vfd_update>:

void vfd_update(void) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
	uint8_t data = 0b11000000; // command 3, set address to 0
 80001f6:	23c0      	movs	r3, #192	; 0xc0
 80001f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80001fa:	2200      	movs	r2, #0
 80001fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000200:	480d      	ldr	r0, [pc, #52]	; (8000238 <vfd_update+0x48>)
 8000202:	f001 fa8c 	bl	800171e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000206:	1df9      	adds	r1, r7, #7
 8000208:	f04f 33ff 	mov.w	r3, #4294967295
 800020c:	2201      	movs	r2, #1
 800020e:	480b      	ldr	r0, [pc, #44]	; (800023c <vfd_update+0x4c>)
 8000210:	f002 ff42 	bl	8003098 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000214:	f04f 33ff 	mov.w	r3, #4294967295
 8000218:	2221      	movs	r2, #33	; 0x21
 800021a:	4909      	ldr	r1, [pc, #36]	; (8000240 <vfd_update+0x50>)
 800021c:	4807      	ldr	r0, [pc, #28]	; (800023c <vfd_update+0x4c>)
 800021e:	f002 ff3b 	bl	8003098 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000222:	2201      	movs	r2, #1
 8000224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000228:	4803      	ldr	r0, [pc, #12]	; (8000238 <vfd_update+0x48>)
 800022a:	f001 fa78 	bl	800171e <HAL_GPIO_WritePin>
}
 800022e:	bf00      	nop
 8000230:	3708      	adds	r7, #8
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40010c00 	.word	0x40010c00
 800023c:	20000034 	.word	0x20000034
 8000240:	20000164 	.word	0x20000164

08000244 <do_microrl>:

void do_microrl(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
	return;
 8000248:	bf00      	nop
}
 800024a:	46bd      	mov	sp, r7
 800024c:	bc80      	pop	{r7}
 800024e:	4770      	bx	lr

08000250 <do_vfd_init>:


void do_vfd_init(void)
{
 8000250:	b5b0      	push	{r4, r5, r7, lr}
 8000252:	b094      	sub	sp, #80	; 0x50
 8000254:	af00      	add	r7, sp, #0
#define FULL_DEMO (0)
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1); // put CS high
 8000256:	2201      	movs	r2, #1
 8000258:	f44f 7180 	mov.w	r1, #256	; 0x100
 800025c:	48ca      	ldr	r0, [pc, #808]	; (8000588 <do_vfd_init+0x338>)
 800025e:	f001 fa5e 	bl	800171e <HAL_GPIO_WritePin>

	HAL_Delay(10);
 8000262:	200a      	movs	r0, #10
 8000264:	f000 ffb8 	bl	80011d8 <HAL_Delay>
	HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 8000268:	2201      	movs	r2, #1
 800026a:	2120      	movs	r1, #32
 800026c:	48c6      	ldr	r0, [pc, #792]	; (8000588 <do_vfd_init+0x338>)
 800026e:	f001 fa56 	bl	800171e <HAL_GPIO_WritePin>

	for (int i = 0; i < sizeof(vfd.arr1); i++) {
 8000272:	2300      	movs	r3, #0
 8000274:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000276:	e007      	b.n	8000288 <do_vfd_init+0x38>
		vfd.arr1[i] = 0xFF;
 8000278:	4ac4      	ldr	r2, [pc, #784]	; (800058c <do_vfd_init+0x33c>)
 800027a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800027c:	4413      	add	r3, r2
 800027e:	22ff      	movs	r2, #255	; 0xff
 8000280:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(vfd.arr1); i++) {
 8000282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000284:	3301      	adds	r3, #1
 8000286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800028a:	2b20      	cmp	r3, #32
 800028c:	d9f4      	bls.n	8000278 <do_vfd_init+0x28>
	}
	uint8_t data;

	data = 0b01000001; // command 2, write to LED port
 800028e:	2341      	movs	r3, #65	; 0x41
 8000290:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000294:	2200      	movs	r2, #0
 8000296:	f44f 7180 	mov.w	r1, #256	; 0x100
 800029a:	48bb      	ldr	r0, [pc, #748]	; (8000588 <do_vfd_init+0x338>)
 800029c:	f001 fa3f 	bl	800171e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80002a0:	f107 0133 	add.w	r1, r7, #51	; 0x33
 80002a4:	f04f 33ff 	mov.w	r3, #4294967295
 80002a8:	2201      	movs	r2, #1
 80002aa:	48b9      	ldr	r0, [pc, #740]	; (8000590 <do_vfd_init+0x340>)
 80002ac:	f002 fef4 	bl	8003098 <HAL_SPI_Transmit>
	HAL_Delay(10);
 80002b0:	200a      	movs	r0, #10
 80002b2:	f000 ff91 	bl	80011d8 <HAL_Delay>

	data = 0b1111; // disable LEDs
 80002b6:	230f      	movs	r3, #15
 80002b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80002bc:	f107 0133 	add.w	r1, r7, #51	; 0x33
 80002c0:	f04f 33ff 	mov.w	r3, #4294967295
 80002c4:	2201      	movs	r2, #1
 80002c6:	48b2      	ldr	r0, [pc, #712]	; (8000590 <do_vfd_init+0x340>)
 80002c8:	f002 fee6 	bl	8003098 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80002cc:	2201      	movs	r2, #1
 80002ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002d2:	48ad      	ldr	r0, [pc, #692]	; (8000588 <do_vfd_init+0x338>)
 80002d4:	f001 fa23 	bl	800171e <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80002d8:	200a      	movs	r0, #10
 80002da:	f000 ff7d 	bl	80011d8 <HAL_Delay>

	//write twice, some strange problem with SPI init

	data = 0b01000001; // command 2, write to LED port
 80002de:	2341      	movs	r3, #65	; 0x41
 80002e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80002e4:	2200      	movs	r2, #0
 80002e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ea:	48a7      	ldr	r0, [pc, #668]	; (8000588 <do_vfd_init+0x338>)
 80002ec:	f001 fa17 	bl	800171e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80002f0:	f107 0133 	add.w	r1, r7, #51	; 0x33
 80002f4:	f04f 33ff 	mov.w	r3, #4294967295
 80002f8:	2201      	movs	r2, #1
 80002fa:	48a5      	ldr	r0, [pc, #660]	; (8000590 <do_vfd_init+0x340>)
 80002fc:	f002 fecc 	bl	8003098 <HAL_SPI_Transmit>
	HAL_Delay(10);
 8000300:	200a      	movs	r0, #10
 8000302:	f000 ff69 	bl	80011d8 <HAL_Delay>

	data = 0b1111; // disable LEDs
 8000306:	230f      	movs	r3, #15
 8000308:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800030c:	f107 0133 	add.w	r1, r7, #51	; 0x33
 8000310:	f04f 33ff 	mov.w	r3, #4294967295
 8000314:	2201      	movs	r2, #1
 8000316:	489e      	ldr	r0, [pc, #632]	; (8000590 <do_vfd_init+0x340>)
 8000318:	f002 febe 	bl	8003098 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800031c:	2201      	movs	r2, #1
 800031e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000322:	4899      	ldr	r0, [pc, #612]	; (8000588 <do_vfd_init+0x338>)
 8000324:	f001 f9fb 	bl	800171e <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000328:	200a      	movs	r0, #10
 800032a:	f000 ff55 	bl	80011d8 <HAL_Delay>

	data = 0b01000000; // command 2, write to Display port
 800032e:	2340      	movs	r3, #64	; 0x40
 8000330:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 7180 	mov.w	r1, #256	; 0x100
 800033a:	4893      	ldr	r0, [pc, #588]	; (8000588 <do_vfd_init+0x338>)
 800033c:	f001 f9ef 	bl	800171e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000340:	f107 0133 	add.w	r1, r7, #51	; 0x33
 8000344:	f04f 33ff 	mov.w	r3, #4294967295
 8000348:	2201      	movs	r2, #1
 800034a:	4891      	ldr	r0, [pc, #580]	; (8000590 <do_vfd_init+0x340>)
 800034c:	f002 fea4 	bl	8003098 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000350:	2201      	movs	r2, #1
 8000352:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000356:	488c      	ldr	r0, [pc, #560]	; (8000588 <do_vfd_init+0x338>)
 8000358:	f001 f9e1 	bl	800171e <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800035c:	200a      	movs	r0, #10
 800035e:	f000 ff3b 	bl	80011d8 <HAL_Delay>
	vfd_update();
 8000362:	f7ff ff45 	bl	80001f0 <vfd_update>
	HAL_Delay(10);
 8000366:	200a      	movs	r0, #10
 8000368:	f000 ff36 	bl	80011d8 <HAL_Delay>
	// init display, 11 digits 17 segments
	data = 0b00000111; // command 1, 11 digits 17 segments
 800036c:	2307      	movs	r3, #7
 800036e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000372:	2200      	movs	r2, #0
 8000374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000378:	4883      	ldr	r0, [pc, #524]	; (8000588 <do_vfd_init+0x338>)
 800037a:	f001 f9d0 	bl	800171e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800037e:	f107 0133 	add.w	r1, r7, #51	; 0x33
 8000382:	f04f 33ff 	mov.w	r3, #4294967295
 8000386:	2201      	movs	r2, #1
 8000388:	4881      	ldr	r0, [pc, #516]	; (8000590 <do_vfd_init+0x340>)
 800038a:	f002 fe85 	bl	8003098 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800038e:	2201      	movs	r2, #1
 8000390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000394:	487c      	ldr	r0, [pc, #496]	; (8000588 <do_vfd_init+0x338>)
 8000396:	f001 f9c2 	bl	800171e <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800039a:	200a      	movs	r0, #10
 800039c:	f000 ff1c 	bl	80011d8 <HAL_Delay>
	data = 0b10000000; // command 4
 80003a0:	2380      	movs	r3, #128	; 0x80
 80003a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	data |= 1 << 3; // enable/disable display
 80003a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80003aa:	f043 0308 	orr.w	r3, r3, #8
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	data |= 0b111; // set brightness
 80003b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80003b8:	f043 0307 	orr.w	r3, r3, #7
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80003c2:	2200      	movs	r2, #0
 80003c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003c8:	486f      	ldr	r0, [pc, #444]	; (8000588 <do_vfd_init+0x338>)
 80003ca:	f001 f9a8 	bl	800171e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80003ce:	f107 0133 	add.w	r1, r7, #51	; 0x33
 80003d2:	f04f 33ff 	mov.w	r3, #4294967295
 80003d6:	2201      	movs	r2, #1
 80003d8:	486d      	ldr	r0, [pc, #436]	; (8000590 <do_vfd_init+0x340>)
 80003da:	f002 fe5d 	bl	8003098 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80003de:	2201      	movs	r2, #1
 80003e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e4:	4868      	ldr	r0, [pc, #416]	; (8000588 <do_vfd_init+0x338>)
 80003e6:	f001 f99a 	bl	800171e <HAL_GPIO_WritePin>
		do_microrl();
	}


	//erase everything... just in case
	clr_vfd();
 80003ea:	f000 fe53 	bl	8001094 <clr_vfd>

	data = 0b10000000; // command 4
 80003ee:	2380      	movs	r3, #128	; 0x80
 80003f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	data |= 1 << 3; // enable/disable display
 80003f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80003f8:	f043 0308 	orr.w	r3, r3, #8
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	data |= 0b111; // set max brightness
 8000402:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000406:	f043 0307 	orr.w	r3, r3, #7
 800040a:	b2db      	uxtb	r3, r3
 800040c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000410:	2200      	movs	r2, #0
 8000412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000416:	485c      	ldr	r0, [pc, #368]	; (8000588 <do_vfd_init+0x338>)
 8000418:	f001 f981 	bl	800171e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800041c:	f107 0133 	add.w	r1, r7, #51	; 0x33
 8000420:	f04f 33ff 	mov.w	r3, #4294967295
 8000424:	2201      	movs	r2, #1
 8000426:	485a      	ldr	r0, [pc, #360]	; (8000590 <do_vfd_init+0x340>)
 8000428:	f002 fe36 	bl	8003098 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800042c:	2201      	movs	r2, #1
 800042e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000432:	4855      	ldr	r0, [pc, #340]	; (8000588 <do_vfd_init+0x338>)
 8000434:	f001 f973 	bl	800171e <HAL_GPIO_WritePin>

	// fill everything
	for (int j = 1; j < 15; j++) {
 8000438:	2301      	movs	r3, #1
 800043a:	64bb      	str	r3, [r7, #72]	; 0x48
 800043c:	e03b      	b.n	80004b6 <do_vfd_init+0x266>
		uint32_t temp = 1 << j;
 800043e:	2201      	movs	r2, #1
 8000440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000442:	fa02 f303 	lsl.w	r3, r2, r3
 8000446:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i = 1; i < 11; i++) {
 8000448:	2301      	movs	r3, #1
 800044a:	647b      	str	r3, [r7, #68]	; 0x44
 800044c:	e026      	b.n	800049c <do_vfd_init+0x24c>
			for (int b = 0; b < 3; b++) {
 800044e:	2300      	movs	r3, #0
 8000450:	643b      	str	r3, [r7, #64]	; 0x40
 8000452:	e01d      	b.n	8000490 <do_vfd_init+0x240>
				vfd.arr2[i][b] |= (temp >> (b << 3)) & 0xFF;
 8000454:	494d      	ldr	r1, [pc, #308]	; (800058c <do_vfd_init+0x33c>)
 8000456:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000458:	4613      	mov	r3, r2
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	4413      	add	r3, r2
 800045e:	18ca      	adds	r2, r1, r3
 8000460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000462:	4413      	add	r3, r2
 8000464:	781a      	ldrb	r2, [r3, #0]
 8000466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000468:	00db      	lsls	r3, r3, #3
 800046a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	b2db      	uxtb	r3, r3
 8000472:	4313      	orrs	r3, r2
 8000474:	b2d8      	uxtb	r0, r3
 8000476:	4945      	ldr	r1, [pc, #276]	; (800058c <do_vfd_init+0x33c>)
 8000478:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800047a:	4613      	mov	r3, r2
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	4413      	add	r3, r2
 8000480:	18ca      	adds	r2, r1, r3
 8000482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000484:	4413      	add	r3, r2
 8000486:	4602      	mov	r2, r0
 8000488:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++) {
 800048a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800048c:	3301      	adds	r3, #1
 800048e:	643b      	str	r3, [r7, #64]	; 0x40
 8000490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000492:	2b02      	cmp	r3, #2
 8000494:	ddde      	ble.n	8000454 <do_vfd_init+0x204>
		for (int i = 1; i < 11; i++) {
 8000496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000498:	3301      	adds	r3, #1
 800049a:	647b      	str	r3, [r7, #68]	; 0x44
 800049c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800049e:	2b0a      	cmp	r3, #10
 80004a0:	ddd5      	ble.n	800044e <do_vfd_init+0x1fe>
			}
		}
		vfd_update();
 80004a2:	f7ff fea5 	bl	80001f0 <vfd_update>
		HAL_Delay(100);
 80004a6:	2064      	movs	r0, #100	; 0x64
 80004a8:	f000 fe96 	bl	80011d8 <HAL_Delay>
		do_microrl();
 80004ac:	f7ff feca 	bl	8000244 <do_microrl>
	for (int j = 1; j < 15; j++) {
 80004b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80004b2:	3301      	adds	r3, #1
 80004b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80004b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80004b8:	2b0e      	cmp	r3, #14
 80004ba:	ddc0      	ble.n	800043e <do_vfd_init+0x1ee>
	}

	const uint8_t arr[][2] = {
 80004bc:	4b35      	ldr	r3, [pc, #212]	; (8000594 <do_vfd_init+0x344>)
 80004be:	463c      	mov	r4, r7
 80004c0:	461d      	mov	r5, r3
 80004c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ce:	682b      	ldr	r3, [r5, #0]
 80004d0:	8023      	strh	r3, [r4, #0]
			{ 9, 16 },
			{ 10, 16 },
			{ 10, 15 },
	};

	for (int j = 0; j < sizeof(arr) / 2; j++) {
 80004d2:	2300      	movs	r3, #0
 80004d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80004d6:	e047      	b.n	8000568 <do_vfd_init+0x318>
		for (int b = 0; b < 3; b++)
 80004d8:	2300      	movs	r3, #0
 80004da:	63bb      	str	r3, [r7, #56]	; 0x38
 80004dc:	e037      	b.n	800054e <do_vfd_init+0x2fe>
			vfd.arr2[arr[j][0]][b] |= ((1 << arr[j][1]) >> (b << 3)) & 0xFF;
 80004de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80004e6:	4413      	add	r3, r2
 80004e8:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 80004ec:	4619      	mov	r1, r3
 80004ee:	4a27      	ldr	r2, [pc, #156]	; (800058c <do_vfd_init+0x33c>)
 80004f0:	460b      	mov	r3, r1
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	440b      	add	r3, r1
 80004f6:	441a      	add	r2, r3
 80004f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80004fa:	4413      	add	r3, r2
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	b25a      	sxtb	r2, r3
 8000500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000508:	440b      	add	r3, r1
 800050a:	f813 3c4f 	ldrb.w	r3, [r3, #-79]
 800050e:	4619      	mov	r1, r3
 8000510:	2301      	movs	r3, #1
 8000512:	fa03 f101 	lsl.w	r1, r3, r1
 8000516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000518:	00db      	lsls	r3, r3, #3
 800051a:	fa41 f303 	asr.w	r3, r1, r3
 800051e:	b25b      	sxtb	r3, r3
 8000520:	4313      	orrs	r3, r2
 8000522:	b25a      	sxtb	r2, r3
 8000524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800052c:	440b      	add	r3, r1
 800052e:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8000532:	4619      	mov	r1, r3
 8000534:	b2d0      	uxtb	r0, r2
 8000536:	4a15      	ldr	r2, [pc, #84]	; (800058c <do_vfd_init+0x33c>)
 8000538:	460b      	mov	r3, r1
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	440b      	add	r3, r1
 800053e:	441a      	add	r2, r3
 8000540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000542:	4413      	add	r3, r2
 8000544:	4602      	mov	r2, r0
 8000546:	701a      	strb	r2, [r3, #0]
		for (int b = 0; b < 3; b++)
 8000548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800054a:	3301      	adds	r3, #1
 800054c:	63bb      	str	r3, [r7, #56]	; 0x38
 800054e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000550:	2b02      	cmp	r3, #2
 8000552:	ddc4      	ble.n	80004de <do_vfd_init+0x28e>
		vfd_update();
 8000554:	f7ff fe4c 	bl	80001f0 <vfd_update>
		HAL_Delay(50);
 8000558:	2032      	movs	r0, #50	; 0x32
 800055a:	f000 fe3d 	bl	80011d8 <HAL_Delay>
		do_microrl();
 800055e:	f7ff fe71 	bl	8000244 <do_microrl>
	for (int j = 0; j < sizeof(arr) / 2; j++) {
 8000562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000564:	3301      	adds	r3, #1
 8000566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800056a:	2b18      	cmp	r3, #24
 800056c:	d9b4      	bls.n	80004d8 <do_vfd_init+0x288>
	}

	HAL_Delay(300);
 800056e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000572:	f000 fe31 	bl	80011d8 <HAL_Delay>

	str2vfd("TEST BOARD");
 8000576:	4808      	ldr	r0, [pc, #32]	; (8000598 <do_vfd_init+0x348>)
 8000578:	f000 fd06 	bl	8000f88 <str2vfd>

	vfd_update();
 800057c:	f7ff fe38 	bl	80001f0 <vfd_update>
}
 8000580:	bf00      	nop
 8000582:	3750      	adds	r7, #80	; 0x50
 8000584:	46bd      	mov	sp, r7
 8000586:	bdb0      	pop	{r4, r5, r7, pc}
 8000588:	40010c00 	.word	0x40010c00
 800058c:	20000164 	.word	0x20000164
 8000590:	20000034 	.word	0x20000034
 8000594:	0800381c 	.word	0x0800381c
 8000598:	08003810 	.word	0x08003810

0800059c <vfd_leds>:

void vfd_leds(uint8_t leds)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0b01000001; // command 2, write to LED port
 80005a6:	2341      	movs	r3, #65	; 0x41
 80005a8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b0:	4811      	ldr	r0, [pc, #68]	; (80005f8 <vfd_leds+0x5c>)
 80005b2:	f001 f8b4 	bl	800171e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80005b6:	f107 010f 	add.w	r1, r7, #15
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	2201      	movs	r2, #1
 80005c0:	480e      	ldr	r0, [pc, #56]	; (80005fc <vfd_leds+0x60>)
 80005c2:	f002 fd69 	bl	8003098 <HAL_SPI_Transmit>

	data = (~leds)&0b1111;
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	43db      	mvns	r3, r3
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	f003 030f 	and.w	r3, r3, #15
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80005d4:	f107 010f 	add.w	r1, r7, #15
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	2201      	movs	r2, #1
 80005de:	4807      	ldr	r0, [pc, #28]	; (80005fc <vfd_leds+0x60>)
 80005e0:	f002 fd5a 	bl	8003098 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ea:	4803      	ldr	r0, [pc, #12]	; (80005f8 <vfd_leds+0x5c>)
 80005ec:	f001 f897 	bl	800171e <HAL_GPIO_WritePin>
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40010c00 	.word	0x40010c00
 80005fc:	20000034 	.word	0x20000034

08000600 <do_leds>:

void do_leds(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	static uint8_t tick_counter = 0;
	if (HAL_GetTick() - last_time < 500)
 8000606:	f000 fddd 	bl	80011c4 <HAL_GetTick>
 800060a:	4602      	mov	r2, r0
 800060c:	4b2e      	ldr	r3, [pc, #184]	; (80006c8 <do_leds+0xc8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000616:	d353      	bcc.n	80006c0 <do_leds+0xc0>
		return;
	last_time = HAL_GetTick();
 8000618:	f000 fdd4 	bl	80011c4 <HAL_GetTick>
 800061c:	4603      	mov	r3, r0
 800061e:	4a2a      	ldr	r2, [pc, #168]	; (80006c8 <do_leds+0xc8>)
 8000620:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000626:	4829      	ldr	r0, [pc, #164]	; (80006cc <do_leds+0xcc>)
 8000628:	f001 f891 	bl	800174e <HAL_GPIO_TogglePin>
	bool PB1 = HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin);
 800062c:	2102      	movs	r1, #2
 800062e:	4828      	ldr	r0, [pc, #160]	; (80006d0 <do_leds+0xd0>)
 8000630:	f001 f85e 	bl	80016f0 <HAL_GPIO_ReadPin>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	bf14      	ite	ne
 800063a:	2301      	movne	r3, #1
 800063c:	2300      	moveq	r3, #0
 800063e:	71fb      	strb	r3, [r7, #7]
	bool PB2 = HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin);
 8000640:	2104      	movs	r1, #4
 8000642:	4823      	ldr	r0, [pc, #140]	; (80006d0 <do_leds+0xd0>)
 8000644:	f001 f854 	bl	80016f0 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	bf14      	ite	ne
 800064e:	2301      	movne	r3, #1
 8000650:	2300      	moveq	r3, #0
 8000652:	71bb      	strb	r3, [r7, #6]
	if (PB1 || PB2)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d102      	bne.n	8000660 <do_leds+0x60>
 800065a:	79bb      	ldrb	r3, [r7, #6]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d02b      	beq.n	80006b8 <do_leds+0xb8>
	{
		vfd_leds((1<<((tick_counter >> 1)&0b11)));
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <do_leds+0xd4>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	085b      	lsrs	r3, r3, #1
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f003 0303 	and.w	r3, r3, #3
 800066c:	2201      	movs	r2, #1
 800066e:	fa02 f303 	lsl.w	r3, r2, r3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ff91 	bl	800059c <vfd_leds>
		if (PB1)
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d00d      	beq.n	800069c <do_leds+0x9c>
		{
			tick_counter++;
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <do_leds+0xd4>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	b2da      	uxtb	r2, r3
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <do_leds+0xd4>)
 800068a:	701a      	strb	r2, [r3, #0]
			clr_vfd();
 800068c:	f000 fd02 	bl	8001094 <clr_vfd>
			str2vfd("PB1 OKAY");
 8000690:	4811      	ldr	r0, [pc, #68]	; (80006d8 <do_leds+0xd8>)
 8000692:	f000 fc79 	bl	8000f88 <str2vfd>
			vfd_update();
 8000696:	f7ff fdab 	bl	80001f0 <vfd_update>
		if (PB1)
 800069a:	e012      	b.n	80006c2 <do_leds+0xc2>
		}
		else
		{
			tick_counter--;
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <do_leds+0xd4>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	3b01      	subs	r3, #1
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <do_leds+0xd4>)
 80006a6:	701a      	strb	r2, [r3, #0]
			clr_vfd();
 80006a8:	f000 fcf4 	bl	8001094 <clr_vfd>
			str2vfd("PB2 OKAY");
 80006ac:	480b      	ldr	r0, [pc, #44]	; (80006dc <do_leds+0xdc>)
 80006ae:	f000 fc6b 	bl	8000f88 <str2vfd>
			vfd_update();
 80006b2:	f7ff fd9d 	bl	80001f0 <vfd_update>
		if (PB1)
 80006b6:	e004      	b.n	80006c2 <do_leds+0xc2>
		}
	}
	else
	{
		vfd_leds(0);
 80006b8:	2000      	movs	r0, #0
 80006ba:	f7ff ff6f 	bl	800059c <vfd_leds>
 80006be:	e000      	b.n	80006c2 <do_leds+0xc2>
		return;
 80006c0:	bf00      	nop
	}
}
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000028 	.word	0x20000028
 80006cc:	40011000 	.word	0x40011000
 80006d0:	40010c00 	.word	0x40010c00
 80006d4:	2000002c 	.word	0x2000002c
 80006d8:	08003850 	.word	0x08003850
 80006dc:	0800385c 	.word	0x0800385c

080006e0 <read.6177>:

void do_fram_test(void)
{
	bool read(void)
	{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af04      	add	r7, sp, #16
 80006e6:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t temp;
		HAL_I2C_Mem_Read(&hi2c1, 0b10100000, 0x42, 1, &temp, 1, 10);
 80006ea:	230a      	movs	r3, #10
 80006ec:	9302      	str	r3, [sp, #8]
 80006ee:	2301      	movs	r3, #1
 80006f0:	9301      	str	r3, [sp, #4]
 80006f2:	f107 030f 	add.w	r3, r7, #15
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	2301      	movs	r3, #1
 80006fa:	2242      	movs	r2, #66	; 0x42
 80006fc:	21a0      	movs	r1, #160	; 0xa0
 80006fe:	480f      	ldr	r0, [pc, #60]	; (800073c <read.6177+0x5c>)
 8000700:	f001 fa7c 	bl	8001bfc <HAL_I2C_Mem_Read>
		if (temp != 0x42)
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	2b42      	cmp	r3, #66	; 0x42
 8000708:	d001      	beq.n	800070e <read.6177+0x2e>
			return false;
 800070a:	2300      	movs	r3, #0
 800070c:	e012      	b.n	8000734 <read.6177+0x54>
		HAL_I2C_Mem_Read(&hi2c1, 0b10100010, 0x5A, 1, &temp, 1, 10);
 800070e:	230a      	movs	r3, #10
 8000710:	9302      	str	r3, [sp, #8]
 8000712:	2301      	movs	r3, #1
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	f107 030f 	add.w	r3, r7, #15
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	2301      	movs	r3, #1
 800071e:	225a      	movs	r2, #90	; 0x5a
 8000720:	21a2      	movs	r1, #162	; 0xa2
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <read.6177+0x5c>)
 8000724:	f001 fa6a 	bl	8001bfc <HAL_I2C_Mem_Read>
		if (temp != 0xA5)
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	2ba5      	cmp	r3, #165	; 0xa5
 800072c:	d001      	beq.n	8000732 <read.6177+0x52>
			return false;
 800072e:	2300      	movs	r3, #0
 8000730:	e000      	b.n	8000734 <read.6177+0x54>
		return true;
 8000732:	2301      	movs	r3, #1
	}
 8000734:	4618      	mov	r0, r3
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000008c 	.word	0x2000008c

08000740 <do_fram_test>:
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b0c6      	sub	sp, #280	; 0x118
 8000744:	af04      	add	r7, sp, #16
void do_fram_test(void)
 8000746:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800074a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		HAL_I2C_Mem_Write(&hi2c1, 0b10100000, 0x42, 1, &temp, 1, 10);
		temp = 0xA5;
		HAL_I2C_Mem_Write(&hi2c1, 0b10100010, 0x5A, 1, &temp, 1, 10);
	}
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 200)
 800074e:	f000 fd39 	bl	80011c4 <HAL_GetTick>
 8000752:	4602      	mov	r2, r0
 8000754:	4b5e      	ldr	r3, [pc, #376]	; (80008d0 <do_fram_test+0x190>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	2bc7      	cmp	r3, #199	; 0xc7
 800075c:	f240 80b3 	bls.w	80008c6 <do_fram_test+0x186>
		return;
	bool PB1 = HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin);
 8000760:	2102      	movs	r1, #2
 8000762:	485c      	ldr	r0, [pc, #368]	; (80008d4 <do_fram_test+0x194>)
 8000764:	f000 ffc4 	bl	80016f0 <HAL_GPIO_ReadPin>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	bf14      	ite	ne
 800076e:	2301      	movne	r3, #1
 8000770:	2300      	moveq	r3, #0
 8000772:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	bool PB2 = HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin);
 8000776:	2104      	movs	r1, #4
 8000778:	4856      	ldr	r0, [pc, #344]	; (80008d4 <do_fram_test+0x194>)
 800077a:	f000 ffb9 	bl	80016f0 <HAL_GPIO_ReadPin>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	bf14      	ite	ne
 8000784:	2301      	movne	r3, #1
 8000786:	2300      	moveq	r3, #0
 8000788:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	if (PB1 && PB2)
 800078c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000790:	2b00      	cmp	r3, #0
 8000792:	f000 8092 	beq.w	80008ba <do_fram_test+0x17a>
 8000796:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800079a:	2b00      	cmp	r3, #0
 800079c:	f000 808d 	beq.w	80008ba <do_fram_test+0x17a>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0); // turn led on
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a6:	484c      	ldr	r0, [pc, #304]	; (80008d8 <do_fram_test+0x198>)
 80007a8:	f000 ffb9 	bl	800171e <HAL_GPIO_WritePin>
		vfd_leds(0b1111);
 80007ac:	200f      	movs	r0, #15
 80007ae:	f7ff fef5 	bl	800059c <vfd_leds>
		HAL_Delay(500);
 80007b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007b6:	f000 fd0f 	bl	80011d8 <HAL_Delay>
		if (read())
 80007ba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80007be:	469c      	mov	ip, r3
 80007c0:	f7ff ff8e 	bl	80006e0 <read.6177>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d00a      	beq.n	80007e0 <do_fram_test+0xa0>
		{
			vfd_leds(0b0100);
 80007ca:	2004      	movs	r0, #4
 80007cc:	f7ff fee6 	bl	800059c <vfd_leds>
			clr_vfd();
 80007d0:	f000 fc60 	bl	8001094 <clr_vfd>
			str2vfd("FRAM FOUND");
 80007d4:	4841      	ldr	r0, [pc, #260]	; (80008dc <do_fram_test+0x19c>)
 80007d6:	f000 fbd7 	bl	8000f88 <str2vfd>
			vfd_update();
 80007da:	f7ff fd09 	bl	80001f0 <vfd_update>
 80007de:	e028      	b.n	8000832 <do_fram_test+0xf2>
		}
		else
		{
			vfd_leds(0b0001);
 80007e0:	2001      	movs	r0, #1
 80007e2:	f7ff fedb 	bl	800059c <vfd_leds>
			write();
 80007e6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80007ea:	469c      	mov	ip, r3
 80007ec:	f000 f87e 	bl	80008ec <write.6181>
			HAL_Delay(500);
 80007f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f4:	f000 fcf0 	bl	80011d8 <HAL_Delay>
			if (read())
 80007f8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80007fc:	469c      	mov	ip, r3
 80007fe:	f7ff ff6f 	bl	80006e0 <read.6177>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d00a      	beq.n	800081e <do_fram_test+0xde>
			{
				vfd_leds(0b0011);
 8000808:	2003      	movs	r0, #3
 800080a:	f7ff fec7 	bl	800059c <vfd_leds>
				clr_vfd();
 800080e:	f000 fc41 	bl	8001094 <clr_vfd>
				str2vfd("FRAM OKAY");
 8000812:	4833      	ldr	r0, [pc, #204]	; (80008e0 <do_fram_test+0x1a0>)
 8000814:	f000 fbb8 	bl	8000f88 <str2vfd>
				vfd_update();
 8000818:	f7ff fcea 	bl	80001f0 <vfd_update>
 800081c:	e009      	b.n	8000832 <do_fram_test+0xf2>
			}
			else
			{
				vfd_leds(0b1000);
 800081e:	2008      	movs	r0, #8
 8000820:	f7ff febc 	bl	800059c <vfd_leds>
				clr_vfd();
 8000824:	f000 fc36 	bl	8001094 <clr_vfd>
				str2vfd("NO FRAM!");
 8000828:	482e      	ldr	r0, [pc, #184]	; (80008e4 <do_fram_test+0x1a4>)
 800082a:	f000 fbad 	bl	8000f88 <str2vfd>
				vfd_update();
 800082e:	f7ff fcdf 	bl	80001f0 <vfd_update>
			}
		}

		while(HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin));
 8000832:	bf00      	nop
 8000834:	2102      	movs	r1, #2
 8000836:	4827      	ldr	r0, [pc, #156]	; (80008d4 <do_fram_test+0x194>)
 8000838:	f000 ff5a 	bl	80016f0 <HAL_GPIO_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1f8      	bne.n	8000834 <do_fram_test+0xf4>
		if (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin))
 8000842:	2104      	movs	r1, #4
 8000844:	4823      	ldr	r0, [pc, #140]	; (80008d4 <do_fram_test+0x194>)
 8000846:	f000 ff53 	bl	80016f0 <HAL_GPIO_ReadPin>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d034      	beq.n	80008ba <do_fram_test+0x17a>
		{
			// PB2 still pressed, erase RAM
			vfd_leds(0b1001);
 8000850:	2009      	movs	r0, #9
 8000852:	f7ff fea3 	bl	800059c <vfd_leds>
			uint8_t zero[256] = {0};
 8000856:	463b      	mov	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	3304      	adds	r3, #4
 800085e:	22fc      	movs	r2, #252	; 0xfc
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f002 ffc0 	bl	80037e8 <memset>
			//first half
			HAL_I2C_Mem_Write(&hi2c1, 0b10100000, 0, 1, zero, sizeof(zero), 200);
 8000868:	23c8      	movs	r3, #200	; 0xc8
 800086a:	9302      	str	r3, [sp, #8]
 800086c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000870:	9301      	str	r3, [sp, #4]
 8000872:	463b      	mov	r3, r7
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2301      	movs	r3, #1
 8000878:	2200      	movs	r2, #0
 800087a:	21a0      	movs	r1, #160	; 0xa0
 800087c:	481a      	ldr	r0, [pc, #104]	; (80008e8 <do_fram_test+0x1a8>)
 800087e:	f001 f8c3 	bl	8001a08 <HAL_I2C_Mem_Write>
			//second half
			HAL_I2C_Mem_Write(&hi2c1, 0b10100010, 0, 1, zero, sizeof(zero), 200);
 8000882:	23c8      	movs	r3, #200	; 0xc8
 8000884:	9302      	str	r3, [sp, #8]
 8000886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800088a:	9301      	str	r3, [sp, #4]
 800088c:	463b      	mov	r3, r7
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2301      	movs	r3, #1
 8000892:	2200      	movs	r2, #0
 8000894:	21a2      	movs	r1, #162	; 0xa2
 8000896:	4814      	ldr	r0, [pc, #80]	; (80008e8 <do_fram_test+0x1a8>)
 8000898:	f001 f8b6 	bl	8001a08 <HAL_I2C_Mem_Write>
			HAL_Delay(500);
 800089c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008a0:	f000 fc9a 	bl	80011d8 <HAL_Delay>
			vfd_leds(0b1010);
 80008a4:	200a      	movs	r0, #10
 80008a6:	f7ff fe79 	bl	800059c <vfd_leds>
			while (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin));
 80008aa:	bf00      	nop
 80008ac:	2104      	movs	r1, #4
 80008ae:	4809      	ldr	r0, [pc, #36]	; (80008d4 <do_fram_test+0x194>)
 80008b0:	f000 ff1e 	bl	80016f0 <HAL_GPIO_ReadPin>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1f8      	bne.n	80008ac <do_fram_test+0x16c>
		}
	}
	last_time = HAL_GetTick();
 80008ba:	f000 fc83 	bl	80011c4 <HAL_GetTick>
 80008be:	4603      	mov	r3, r0
 80008c0:	4a03      	ldr	r2, [pc, #12]	; (80008d0 <do_fram_test+0x190>)
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	e000      	b.n	80008c8 <do_fram_test+0x188>
		return;
 80008c6:	bf00      	nop
}
 80008c8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000030 	.word	0x20000030
 80008d4:	40010c00 	.word	0x40010c00
 80008d8:	40011000 	.word	0x40011000
 80008dc:	08003868 	.word	0x08003868
 80008e0:	08003874 	.word	0x08003874
 80008e4:	08003880 	.word	0x08003880
 80008e8:	2000008c 	.word	0x2000008c

080008ec <write.6181>:
	{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af04      	add	r7, sp, #16
 80008f2:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t temp = 0x42;
 80008f6:	2342      	movs	r3, #66	; 0x42
 80008f8:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, 0b10100000, 0x42, 1, &temp, 1, 10);
 80008fa:	230a      	movs	r3, #10
 80008fc:	9302      	str	r3, [sp, #8]
 80008fe:	2301      	movs	r3, #1
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	f107 030f 	add.w	r3, r7, #15
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	2301      	movs	r3, #1
 800090a:	2242      	movs	r2, #66	; 0x42
 800090c:	21a0      	movs	r1, #160	; 0xa0
 800090e:	480b      	ldr	r0, [pc, #44]	; (800093c <write.6181+0x50>)
 8000910:	f001 f87a 	bl	8001a08 <HAL_I2C_Mem_Write>
		temp = 0xA5;
 8000914:	23a5      	movs	r3, #165	; 0xa5
 8000916:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, 0b10100010, 0x5A, 1, &temp, 1, 10);
 8000918:	230a      	movs	r3, #10
 800091a:	9302      	str	r3, [sp, #8]
 800091c:	2301      	movs	r3, #1
 800091e:	9301      	str	r3, [sp, #4]
 8000920:	f107 030f 	add.w	r3, r7, #15
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	2301      	movs	r3, #1
 8000928:	225a      	movs	r2, #90	; 0x5a
 800092a:	21a2      	movs	r1, #162	; 0xa2
 800092c:	4803      	ldr	r0, [pc, #12]	; (800093c <write.6181+0x50>)
 800092e:	f001 f86b 	bl	8001a08 <HAL_I2C_Mem_Write>
	}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000008c 	.word	0x2000008c

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000946:	f000 fbe5 	bl	8001114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094a:	f000 f837 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094e:	f000 f8df 	bl	8000b10 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000952:	f000 f8a7 	bl	8000aa4 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000956:	f000 f877 	bl	8000a48 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_SPI_ENABLE(&hspi2);
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <main+0x70>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <main+0x70>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000968:	601a      	str	r2, [r3, #0]

  uint8_t test;
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 800096a:	2001      	movs	r0, #1
 800096c:	f7ff fc0e 	bl	800018c <nrf24l01p_spi_ss>

  do_vfd_init();
 8000970:	f7ff fc6e 	bl	8000250 <do_vfd_init>
  test = nrf24l01p_nop();
 8000974:	f000 f969 	bl	8000c4a <nrf24l01p_nop>
 8000978:	4603      	mov	r3, r0
 800097a:	71fb      	strb	r3, [r7, #7]
  if (test == 0b1110)
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	2b0e      	cmp	r3, #14
 8000980:	d104      	bne.n	800098c <main+0x4c>
  {
	  str2vfd("NRF24L01+");
 8000982:	480c      	ldr	r0, [pc, #48]	; (80009b4 <main+0x74>)
 8000984:	f000 fb00 	bl	8000f88 <str2vfd>
	  vfd_update();
 8000988:	f7ff fc32 	bl	80001f0 <vfd_update>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  do_leds();
 800098c:	f7ff fe38 	bl	8000600 <do_leds>
	  do_fram_test();
 8000990:	f7ff fed6 	bl	8000740 <do_fram_test>

	  if (HAL_GetTick() > 60000)
 8000994:	f000 fc16 	bl	80011c4 <HAL_GetTick>
 8000998:	4603      	mov	r3, r0
 800099a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800099e:	4293      	cmp	r3, r2
 80009a0:	d9f4      	bls.n	800098c <main+0x4c>
		  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2120      	movs	r1, #32
 80009a6:	4804      	ldr	r0, [pc, #16]	; (80009b8 <main+0x78>)
 80009a8:	f000 feb9 	bl	800171e <HAL_GPIO_WritePin>
	  do_leds();
 80009ac:	e7ee      	b.n	800098c <main+0x4c>
 80009ae:	bf00      	nop
 80009b0:	20000034 	.word	0x20000034
 80009b4:	0800388c 	.word	0x0800388c
 80009b8:	40010c00 	.word	0x40010c00

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b090      	sub	sp, #64	; 0x40
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0318 	add.w	r3, r7, #24
 80009c6:	2228      	movs	r2, #40	; 0x28
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 ff0c 	bl	80037e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009de:	2301      	movs	r3, #1
 80009e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80009e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ee:	2301      	movs	r3, #1
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f2:	2302      	movs	r3, #2
 80009f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009fc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a00:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a02:	f107 0318 	add.w	r3, r7, #24
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 feba 	bl	8002780 <HAL_RCC_OscConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000a12:	f000 f915 	bl	8000c40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a16:	230f      	movs	r3, #15
 8000a18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2102      	movs	r1, #2
 8000a30:	4618      	mov	r0, r3
 8000a32:	f002 f925 	bl	8002c80 <HAL_RCC_ClockConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a3c:	f000 f900 	bl	8000c40 <Error_Handler>
  }
}
 8000a40:	bf00      	nop
 8000a42:	3740      	adds	r7, #64	; 0x40
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a4e:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <MX_I2C1_Init+0x54>)
 8000a50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a54:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <MX_I2C1_Init+0x58>)
 8000a56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a86:	f000 fe7b 	bl	8001780 <HAL_I2C_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a90:	f000 f8d6 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2000008c 	.word	0x2000008c
 8000a9c:	40005400 	.word	0x40005400
 8000aa0:	000186a0 	.word	0x000186a0

08000aa4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_SPI2_Init+0x64>)
 8000aaa:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <MX_SPI2_Init+0x68>)
 8000aac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000aae:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MX_SPI2_Init+0x64>)
 8000ab0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_SPI2_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_SPI2_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_SPI2_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_SPI2_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_SPI2_Init+0x64>)
 8000ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_SPI2_Init+0x64>)
 8000ad8:	2218      	movs	r2, #24
 8000ada:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <MX_SPI2_Init+0x64>)
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_SPI2_Init+0x64>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <MX_SPI2_Init+0x64>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_SPI2_Init+0x64>)
 8000af0:	220a      	movs	r2, #10
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_SPI2_Init+0x64>)
 8000af6:	f002 fa4b 	bl	8002f90 <HAL_SPI_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b00:	f000 f89e 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000034 	.word	0x20000034
 8000b0c:	40003800 	.word	0x40003800

08000b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	f107 0310 	add.w	r3, r7, #16
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b24:	4b42      	ldr	r3, [pc, #264]	; (8000c30 <MX_GPIO_Init+0x120>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	4a41      	ldr	r2, [pc, #260]	; (8000c30 <MX_GPIO_Init+0x120>)
 8000b2a:	f043 0310 	orr.w	r3, r3, #16
 8000b2e:	6193      	str	r3, [r2, #24]
 8000b30:	4b3f      	ldr	r3, [pc, #252]	; (8000c30 <MX_GPIO_Init+0x120>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f003 0310 	and.w	r3, r3, #16
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3c:	4b3c      	ldr	r3, [pc, #240]	; (8000c30 <MX_GPIO_Init+0x120>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a3b      	ldr	r2, [pc, #236]	; (8000c30 <MX_GPIO_Init+0x120>)
 8000b42:	f043 0320 	orr.w	r3, r3, #32
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b39      	ldr	r3, [pc, #228]	; (8000c30 <MX_GPIO_Init+0x120>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0320 	and.w	r3, r3, #32
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b54:	4b36      	ldr	r3, [pc, #216]	; (8000c30 <MX_GPIO_Init+0x120>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a35      	ldr	r2, [pc, #212]	; (8000c30 <MX_GPIO_Init+0x120>)
 8000b5a:	f043 0308 	orr.w	r3, r3, #8
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b33      	ldr	r3, [pc, #204]	; (8000c30 <MX_GPIO_Init+0x120>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0308 	and.w	r3, r3, #8
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <MX_GPIO_Init+0x120>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a2f      	ldr	r2, [pc, #188]	; (8000c30 <MX_GPIO_Init+0x120>)
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <MX_GPIO_Init+0x120>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b8a:	482a      	ldr	r0, [pc, #168]	; (8000c34 <MX_GPIO_Init+0x124>)
 8000b8c:	f000 fdc7 	bl	800171e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|SPI2_nRF_CSn_Pin|HV_EN_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f241 0121 	movw	r1, #4129	; 0x1021
 8000b96:	4828      	ldr	r0, [pc, #160]	; (8000c38 <MX_GPIO_Init+0x128>)
 8000b98:	f000 fdc1 	bl	800171e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ba2:	4826      	ldr	r0, [pc, #152]	; (8000c3c <MX_GPIO_Init+0x12c>)
 8000ba4:	f000 fdbb 	bl	800171e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bae:	4822      	ldr	r0, [pc, #136]	; (8000c38 <MX_GPIO_Init+0x128>)
 8000bb0:	f000 fdb5 	bl	800171e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4819      	ldr	r0, [pc, #100]	; (8000c34 <MX_GPIO_Init+0x124>)
 8000bce:	f000 fc0b 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : nRF_CE_Pin SPI2_nRF_CSn_Pin HV_EN_Pin PT6315_STB_Pin */
  GPIO_InitStruct.Pin = nRF_CE_Pin|SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 8000bd2:	f241 1321 	movw	r3, #4385	; 0x1121
 8000bd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2302      	movs	r3, #2
 8000be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	4619      	mov	r1, r3
 8000bea:	4813      	ldr	r0, [pc, #76]	; (8000c38 <MX_GPIO_Init+0x128>)
 8000bec:	f000 fbfc 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1_Pin PB2_Pin */
  GPIO_InitStruct.Pin = PB1_Pin|PB2_Pin;
 8000bf0:	2306      	movs	r3, #6
 8000bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	4619      	mov	r1, r3
 8000c02:	480d      	ldr	r0, [pc, #52]	; (8000c38 <MX_GPIO_Init+0x128>)
 8000c04:	f000 fbf0 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PU_Pin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000c08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0310 	add.w	r3, r7, #16
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4806      	ldr	r0, [pc, #24]	; (8000c3c <MX_GPIO_Init+0x12c>)
 8000c22:	f000 fbe1 	bl	80013e8 <HAL_GPIO_Init>

}
 8000c26:	bf00      	nop
 8000c28:	3720      	adds	r7, #32
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40011000 	.word	0x40011000
 8000c38:	40010c00 	.word	0x40010c00
 8000c3c:	40010800 	.word	0x40010800

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <Error_Handler+0x8>

08000c4a <nrf24l01p_nop>:
{
  nrf24l01p_write_reg(NRF24L01P_FLUSH_TX, 0);
}

uint8_t nrf24l01p_nop(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0
  return nrf24l01p_write_reg(NRF24L01P_NOP,0);
 8000c4e:	2100      	movs	r1, #0
 8000c50:	20ff      	movs	r0, #255	; 0xff
 8000c52:	f000 f803 	bl	8000c5c <nrf24l01p_write_reg>
 8000c56:	4603      	mov	r3, r0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <nrf24l01p_write_reg>:

  return temp;
}

uint8_t nrf24l01p_write_reg(uint8_t reg, uint8_t value)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	460a      	mov	r2, r1
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	71bb      	strb	r3, [r7, #6]
  uint8_t retval;
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff fa8d 	bl	800018c <nrf24l01p_spi_ss>
  if(reg < NRF24L01P_NRF_WRITE_REG)   // i.e. this is a register access
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2b1f      	cmp	r3, #31
 8000c76:	d80c      	bhi.n	8000c92 <nrf24l01p_write_reg+0x36>
  {
    retval = nrf24l01p_spi_rw(NRF24L01P_NRF_WRITE_REG + reg);
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	3320      	adds	r3, #32
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff faa0 	bl	80001c4 <nrf24l01p_spi_rw>
 8000c84:	4603      	mov	r3, r0
 8000c86:	73fb      	strb	r3, [r7, #15]
    nrf24l01p_spi_rw(value);
 8000c88:	79bb      	ldrb	r3, [r7, #6]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fa9a 	bl	80001c4 <nrf24l01p_spi_rw>
 8000c90:	e01c      	b.n	8000ccc <nrf24l01p_write_reg+0x70>
  }
  else            // single byte cmd OR future command/register access
  {
    if(!(reg == NRF24L01P_FLUSH_TX) && !(reg == NRF24L01P_FLUSH_RX) && !(reg == NRF24L01P_REUSE_TX_PL) && !(reg == NRF24L01P_NOP))
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2be1      	cmp	r3, #225	; 0xe1
 8000c96:	d013      	beq.n	8000cc0 <nrf24l01p_write_reg+0x64>
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	2be2      	cmp	r3, #226	; 0xe2
 8000c9c:	d010      	beq.n	8000cc0 <nrf24l01p_write_reg+0x64>
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2be3      	cmp	r3, #227	; 0xe3
 8000ca2:	d00d      	beq.n	8000cc0 <nrf24l01p_write_reg+0x64>
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	2bff      	cmp	r3, #255	; 0xff
 8000ca8:	d00a      	beq.n	8000cc0 <nrf24l01p_write_reg+0x64>
    {
      retval = nrf24l01p_spi_rw(reg);
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fa89 	bl	80001c4 <nrf24l01p_spi_rw>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	73fb      	strb	r3, [r7, #15]
      nrf24l01p_spi_rw(value);
 8000cb6:	79bb      	ldrb	r3, [r7, #6]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fa83 	bl	80001c4 <nrf24l01p_spi_rw>
 8000cbe:	e005      	b.n	8000ccc <nrf24l01p_write_reg+0x70>
    }
    else          // single byte L01 command
    {
      retval = nrf24l01p_spi_rw(reg);
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fa7e 	bl	80001c4 <nrf24l01p_spi_rw>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	73fb      	strb	r3, [r7, #15]
    }
  }
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f7ff fa5d 	bl	800018c <nrf24l01p_spi_ss>

  return retval;
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <HAL_MspInit+0x5c>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <HAL_MspInit+0x5c>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6193      	str	r3, [r2, #24]
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_MspInit+0x5c>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <HAL_MspInit+0x5c>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <HAL_MspInit+0x5c>)
 8000d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d04:	61d3      	str	r3, [r2, #28]
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <HAL_MspInit+0x5c>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_MspInit+0x60>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_MspInit+0x60>)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40010000 	.word	0x40010000

08000d40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a15      	ldr	r2, [pc, #84]	; (8000db0 <HAL_I2C_MspInit+0x70>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d123      	bne.n	8000da8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <HAL_I2C_MspInit+0x74>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <HAL_I2C_MspInit+0x74>)
 8000d66:	f043 0308 	orr.w	r3, r3, #8
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_I2C_MspInit+0x74>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0308 	and.w	r3, r3, #8
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d78:	23c0      	movs	r3, #192	; 0xc0
 8000d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7c:	2312      	movs	r3, #18
 8000d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480b      	ldr	r0, [pc, #44]	; (8000db8 <HAL_I2C_MspInit+0x78>)
 8000d8c:	f000 fb2c 	bl	80013e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_I2C_MspInit+0x74>)
 8000d92:	69db      	ldr	r3, [r3, #28]
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_I2C_MspInit+0x74>)
 8000d96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d9a:	61d3      	str	r3, [r2, #28]
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <HAL_I2C_MspInit+0x74>)
 8000d9e:	69db      	ldr	r3, [r3, #28]
 8000da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000da8:	bf00      	nop
 8000daa:	3720      	adds	r7, #32
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40005400 	.word	0x40005400
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010c00 	.word	0x40010c00

08000dbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <HAL_SPI_MspInit+0x8c>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d131      	bne.n	8000e40 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <HAL_SPI_MspInit+0x90>)
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	4a1a      	ldr	r2, [pc, #104]	; (8000e4c <HAL_SPI_MspInit+0x90>)
 8000de2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de6:	61d3      	str	r3, [r2, #28]
 8000de8:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <HAL_SPI_MspInit+0x90>)
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df4:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_SPI_MspInit+0x90>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <HAL_SPI_MspInit+0x90>)
 8000dfa:	f043 0308 	orr.w	r3, r3, #8
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_SPI_MspInit+0x90>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 0308 	and.w	r3, r3, #8
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000e0c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000e10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480b      	ldr	r0, [pc, #44]	; (8000e50 <HAL_SPI_MspInit+0x94>)
 8000e22:	f000 fae1 	bl	80013e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <HAL_SPI_MspInit+0x94>)
 8000e3c:	f000 fad4 	bl	80013e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e40:	bf00      	nop
 8000e42:	3720      	adds	r7, #32
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40003800 	.word	0x40003800
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40010c00 	.word	0x40010c00

08000e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <NMI_Handler+0x4>

08000e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <MemManage_Handler+0x4>

08000e66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr

08000e7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9a:	f000 f981 	bl	80011a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
	...

08000eb0 <get_char>:
const uint8_t ALPHAS = (sizeof(vfd_alpha)/sizeof(vfd_alpha[0]));
const uint8_t ALPHAR = (sizeof(vfd_alpha_ru)/sizeof(vfd_alpha_ru[0]));
const uint8_t SPECIAL = (sizeof(vfd_special)/sizeof(vfd_special[0]));

uint16_t get_char(char input)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
	if ('0' <= input && input <= '9')
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b2f      	cmp	r3, #47	; 0x2f
 8000ebe:	d908      	bls.n	8000ed2 <get_char+0x22>
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	2b39      	cmp	r3, #57	; 0x39
 8000ec4:	d805      	bhi.n	8000ed2 <get_char+0x22>
		return vfd_digits[input - '0'];
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	3b30      	subs	r3, #48	; 0x30
 8000eca:	4a2a      	ldr	r2, [pc, #168]	; (8000f74 <get_char+0xc4>)
 8000ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ed0:	e04a      	b.n	8000f68 <get_char+0xb8>
	if (0 <= input && input <= 9)
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b09      	cmp	r3, #9
 8000ed6:	d804      	bhi.n	8000ee2 <get_char+0x32>
		return vfd_digits[(uint8_t)input];
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	4a26      	ldr	r2, [pc, #152]	; (8000f74 <get_char+0xc4>)
 8000edc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ee0:	e042      	b.n	8000f68 <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	e00e      	b.n	8000f06 <get_char+0x56>
		if (vfd_special_char[i] == input)
 8000ee8:	4a23      	ldr	r2, [pc, #140]	; (8000f78 <get_char+0xc8>)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4413      	add	r3, r2
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	79fa      	ldrb	r2, [r7, #7]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d104      	bne.n	8000f00 <get_char+0x50>
			return vfd_special[i];
 8000ef6:	4a21      	ldr	r2, [pc, #132]	; (8000f7c <get_char+0xcc>)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000efe:	e033      	b.n	8000f68 <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	3301      	adds	r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2b19      	cmp	r3, #25
 8000f0a:	d9ed      	bls.n	8000ee8 <get_char+0x38>
	if ('a' <= input && input <= 'z')
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b60      	cmp	r3, #96	; 0x60
 8000f10:	d908      	bls.n	8000f24 <get_char+0x74>
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b7a      	cmp	r3, #122	; 0x7a
 8000f16:	d805      	bhi.n	8000f24 <get_char+0x74>
		return vfd_alpha[input - 'a'];
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	3b61      	subs	r3, #97	; 0x61
 8000f1c:	4a18      	ldr	r2, [pc, #96]	; (8000f80 <get_char+0xd0>)
 8000f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f22:	e021      	b.n	8000f68 <get_char+0xb8>
	if ('A' <= input && input <= 'Z')
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b40      	cmp	r3, #64	; 0x40
 8000f28:	d908      	bls.n	8000f3c <get_char+0x8c>
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	2b5a      	cmp	r3, #90	; 0x5a
 8000f2e:	d805      	bhi.n	8000f3c <get_char+0x8c>
		return vfd_alpha[input - 'A'];
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	3b41      	subs	r3, #65	; 0x41
 8000f34:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <get_char+0xd0>)
 8000f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f3a:	e015      	b.n	8000f68 <get_char+0xb8>
	if (192 <= input && input <= 223)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	2bbf      	cmp	r3, #191	; 0xbf
 8000f40:	d908      	bls.n	8000f54 <get_char+0xa4>
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2bdf      	cmp	r3, #223	; 0xdf
 8000f46:	d805      	bhi.n	8000f54 <get_char+0xa4>
		return vfd_alpha_ru[input - 192];
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	3bc0      	subs	r3, #192	; 0xc0
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <get_char+0xd4>)
 8000f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f52:	e009      	b.n	8000f68 <get_char+0xb8>
	if (224 <= input && input <= 255)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	2bdf      	cmp	r3, #223	; 0xdf
 8000f58:	d905      	bls.n	8000f66 <get_char+0xb6>
		return vfd_alpha_ru[input - 224];
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	3be0      	subs	r3, #224	; 0xe0
 8000f5e:	4a09      	ldr	r2, [pc, #36]	; (8000f84 <get_char+0xd4>)
 8000f60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f64:	e000      	b.n	8000f68 <get_char+0xb8>
	return 0;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	080038c0 	.word	0x080038c0
 8000f78:	0800397c 	.word	0x0800397c
 8000f7c:	08003948 	.word	0x08003948
 8000f80:	080038d4 	.word	0x080038d4
 8000f84:	08003908 	.word	0x08003908

08000f88 <str2vfd>:

void str2vfd(char * str)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	uint16_t buf;
	// erase letters only
	for (int i = 10; i > 0; i --)
 8000f90:	230a      	movs	r3, #10
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	e028      	b.n	8000fe8 <str2vfd+0x60>
	{
		 vfd.arr2[i][0] &= 1<<0;
 8000f96:	493e      	ldr	r1, [pc, #248]	; (8001090 <str2vfd+0x108>)
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	b2d8      	uxtb	r0, r3
 8000faa:	4939      	ldr	r1, [pc, #228]	; (8001090 <str2vfd+0x108>)
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] &= 1<<7;
 8000fba:	4935      	ldr	r1, [pc, #212]	; (8001090 <str2vfd+0x108>)
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000fce:	b2d8      	uxtb	r0, r3
 8000fd0:	492f      	ldr	r1, [pc, #188]	; (8001090 <str2vfd+0x108>)
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	3301      	adds	r3, #1
 8000fde:	4602      	mov	r2, r0
 8000fe0:	701a      	strb	r2, [r3, #0]
	for (int i = 10; i > 0; i --)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	dcd3      	bgt.n	8000f96 <str2vfd+0xe>
	}
	uint8_t i = 10;
 8000fee:	230a      	movs	r3, #10
 8000ff0:	72fb      	strb	r3, [r7, #11]
	while (*str)
 8000ff2:	e042      	b.n	800107a <str2vfd+0xf2>
	{
		 buf = get_char(*(str++));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff57 	bl	8000eb0 <get_char>
 8001002:	4603      	mov	r3, r0
 8001004:	813b      	strh	r3, [r7, #8]
		 vfd.arr2[i][0] |= buf & (~(1<<0));
 8001006:	7afa      	ldrb	r2, [r7, #11]
 8001008:	4921      	ldr	r1, [pc, #132]	; (8001090 <str2vfd+0x108>)
 800100a:	4613      	mov	r3, r2
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	4413      	add	r3, r2
 8001010:	440b      	add	r3, r1
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b25a      	sxtb	r2, r3
 8001016:	893b      	ldrh	r3, [r7, #8]
 8001018:	b25b      	sxtb	r3, r3
 800101a:	f023 0301 	bic.w	r3, r3, #1
 800101e:	b25b      	sxtb	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b25b      	sxtb	r3, r3
 8001024:	7afa      	ldrb	r2, [r7, #11]
 8001026:	b2d8      	uxtb	r0, r3
 8001028:	4919      	ldr	r1, [pc, #100]	; (8001090 <str2vfd+0x108>)
 800102a:	4613      	mov	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4413      	add	r3, r2
 8001030:	440b      	add	r3, r1
 8001032:	4602      	mov	r2, r0
 8001034:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] |= (buf>>8)&(~(1<<7));
 8001036:	7afa      	ldrb	r2, [r7, #11]
 8001038:	4915      	ldr	r1, [pc, #84]	; (8001090 <str2vfd+0x108>)
 800103a:	4613      	mov	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	440b      	add	r3, r1
 8001042:	3301      	adds	r3, #1
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b25a      	sxtb	r2, r3
 8001048:	893b      	ldrh	r3, [r7, #8]
 800104a:	0a1b      	lsrs	r3, r3, #8
 800104c:	b29b      	uxth	r3, r3
 800104e:	b25b      	sxtb	r3, r3
 8001050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001054:	b25b      	sxtb	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b25b      	sxtb	r3, r3
 800105a:	7afa      	ldrb	r2, [r7, #11]
 800105c:	b2d8      	uxtb	r0, r3
 800105e:	490c      	ldr	r1, [pc, #48]	; (8001090 <str2vfd+0x108>)
 8001060:	4613      	mov	r3, r2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4413      	add	r3, r2
 8001066:	440b      	add	r3, r1
 8001068:	3301      	adds	r3, #1
 800106a:	4602      	mov	r2, r0
 800106c:	701a      	strb	r2, [r3, #0]
		 if (!--i)
 800106e:	7afb      	ldrb	r3, [r7, #11]
 8001070:	3b01      	subs	r3, #1
 8001072:	72fb      	strb	r3, [r7, #11]
 8001074:	7afb      	ldrb	r3, [r7, #11]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d004      	beq.n	8001084 <str2vfd+0xfc>
	while (*str)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1b8      	bne.n	8000ff4 <str2vfd+0x6c>
			 break;
	}
}
 8001082:	e000      	b.n	8001086 <str2vfd+0xfe>
			 break;
 8001084:	bf00      	nop
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000164 	.word	0x20000164

08001094 <clr_vfd>:
		}
	}
}

void clr_vfd(void)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	e007      	b.n	80010b0 <clr_vfd+0x1c>
		  vfd.arr1[a] = 0;
 80010a0:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <clr_vfd+0x30>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3301      	adds	r3, #1
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b20      	cmp	r3, #32
 80010b4:	d9f4      	bls.n	80010a0 <clr_vfd+0xc>
}
 80010b6:	bf00      	nop
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000164 	.word	0x20000164

080010c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ca:	490d      	ldr	r1, [pc, #52]	; (8001100 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010cc:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010e0:	4c0a      	ldr	r4, [pc, #40]	; (800110c <LoopFillZerobss+0x22>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010ee:	f7ff fed8 	bl	8000ea2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f2:	f002 fb55 	bl	80037a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010f6:	f7ff fc23 	bl	8000940 <main>
  bx lr
 80010fa:	4770      	bx	lr
  ldr r0, =_sdata
 80010fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001100:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001104:	080039a0 	.word	0x080039a0
  ldr r2, =_sbss
 8001108:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800110c:	2000018c 	.word	0x2000018c

08001110 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <ADC1_2_IRQHandler>
	...

08001114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_Init+0x28>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <HAL_Init+0x28>)
 800111e:	f043 0310 	orr.w	r3, r3, #16
 8001122:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 f92b 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112a:	200f      	movs	r0, #15
 800112c:	f000 f808 	bl	8001140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001130:	f7ff fdd4 	bl	8000cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40022000 	.word	0x40022000

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x54>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x58>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	fbb3 f3f1 	udiv	r3, r3, r1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f935 	bl	80013ce <HAL_SYSTICK_Config>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e00e      	b.n	800118c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b0f      	cmp	r3, #15
 8001172:	d80a      	bhi.n	800118a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f000 f90b 	bl	8001396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001180:	4a06      	ldr	r2, [pc, #24]	; (800119c <HAL_InitTick+0x5c>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000000 	.word	0x20000000
 8001198:	20000008 	.word	0x20000008
 800119c:	20000004 	.word	0x20000004

080011a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_IncTick+0x1c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HAL_IncTick+0x20>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a03      	ldr	r2, [pc, #12]	; (80011c0 <HAL_IncTick+0x20>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000188 	.word	0x20000188

080011c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b02      	ldr	r3, [pc, #8]	; (80011d4 <HAL_GetTick+0x10>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	20000188 	.word	0x20000188

080011d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff fff0 	bl	80011c4 <HAL_GetTick>
 80011e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f0:	d005      	beq.n	80011fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <HAL_Delay+0x44>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011fe:	bf00      	nop
 8001200:	f7ff ffe0 	bl	80011c4 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	429a      	cmp	r2, r3
 800120e:	d8f7      	bhi.n	8001200 <HAL_Delay+0x28>
  {
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008

08001220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800123c:	4013      	ands	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001252:	4a04      	ldr	r2, [pc, #16]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	60d3      	str	r3, [r2, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	; (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	; (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800134c:	d301      	bcc.n	8001352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <SysTick_Config+0x40>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	210f      	movs	r1, #15
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f7ff ff90 	bl	8001284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <SysTick_Config+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <SysTick_Config+0x40>)
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	e000e010 	.word	0xe000e010

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff49 	bl	8001220 <__NVIC_SetPriorityGrouping>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a8:	f7ff ff5e 	bl	8001268 <__NVIC_GetPriorityGrouping>
 80013ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f7ff ff90 	bl	80012d8 <NVIC_EncodePriority>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff5f 	bl	8001284 <__NVIC_SetPriority>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ffb0 	bl	800133c <SysTick_Config>
 80013dc:	4603      	mov	r3, r0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b08b      	sub	sp, #44	; 0x2c
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fa:	e169      	b.n	80016d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013fc:	2201      	movs	r2, #1
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	69fa      	ldr	r2, [r7, #28]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	429a      	cmp	r2, r3
 8001416:	f040 8158 	bne.w	80016ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4a9a      	ldr	r2, [pc, #616]	; (8001688 <HAL_GPIO_Init+0x2a0>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d05e      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
 8001424:	4a98      	ldr	r2, [pc, #608]	; (8001688 <HAL_GPIO_Init+0x2a0>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d875      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 800142a:	4a98      	ldr	r2, [pc, #608]	; (800168c <HAL_GPIO_Init+0x2a4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d058      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
 8001430:	4a96      	ldr	r2, [pc, #600]	; (800168c <HAL_GPIO_Init+0x2a4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d86f      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 8001436:	4a96      	ldr	r2, [pc, #600]	; (8001690 <HAL_GPIO_Init+0x2a8>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d052      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
 800143c:	4a94      	ldr	r2, [pc, #592]	; (8001690 <HAL_GPIO_Init+0x2a8>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d869      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 8001442:	4a94      	ldr	r2, [pc, #592]	; (8001694 <HAL_GPIO_Init+0x2ac>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d04c      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
 8001448:	4a92      	ldr	r2, [pc, #584]	; (8001694 <HAL_GPIO_Init+0x2ac>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d863      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 800144e:	4a92      	ldr	r2, [pc, #584]	; (8001698 <HAL_GPIO_Init+0x2b0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d046      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
 8001454:	4a90      	ldr	r2, [pc, #576]	; (8001698 <HAL_GPIO_Init+0x2b0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d85d      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 800145a:	2b12      	cmp	r3, #18
 800145c:	d82a      	bhi.n	80014b4 <HAL_GPIO_Init+0xcc>
 800145e:	2b12      	cmp	r3, #18
 8001460:	d859      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 8001462:	a201      	add	r2, pc, #4	; (adr r2, 8001468 <HAL_GPIO_Init+0x80>)
 8001464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001468:	080014e3 	.word	0x080014e3
 800146c:	080014bd 	.word	0x080014bd
 8001470:	080014cf 	.word	0x080014cf
 8001474:	08001511 	.word	0x08001511
 8001478:	08001517 	.word	0x08001517
 800147c:	08001517 	.word	0x08001517
 8001480:	08001517 	.word	0x08001517
 8001484:	08001517 	.word	0x08001517
 8001488:	08001517 	.word	0x08001517
 800148c:	08001517 	.word	0x08001517
 8001490:	08001517 	.word	0x08001517
 8001494:	08001517 	.word	0x08001517
 8001498:	08001517 	.word	0x08001517
 800149c:	08001517 	.word	0x08001517
 80014a0:	08001517 	.word	0x08001517
 80014a4:	08001517 	.word	0x08001517
 80014a8:	08001517 	.word	0x08001517
 80014ac:	080014c5 	.word	0x080014c5
 80014b0:	080014d9 	.word	0x080014d9
 80014b4:	4a79      	ldr	r2, [pc, #484]	; (800169c <HAL_GPIO_Init+0x2b4>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d013      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ba:	e02c      	b.n	8001516 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	623b      	str	r3, [r7, #32]
          break;
 80014c2:	e029      	b.n	8001518 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	3304      	adds	r3, #4
 80014ca:	623b      	str	r3, [r7, #32]
          break;
 80014cc:	e024      	b.n	8001518 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	3308      	adds	r3, #8
 80014d4:	623b      	str	r3, [r7, #32]
          break;
 80014d6:	e01f      	b.n	8001518 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	330c      	adds	r3, #12
 80014de:	623b      	str	r3, [r7, #32]
          break;
 80014e0:	e01a      	b.n	8001518 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d102      	bne.n	80014f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ea:	2304      	movs	r3, #4
 80014ec:	623b      	str	r3, [r7, #32]
          break;
 80014ee:	e013      	b.n	8001518 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d105      	bne.n	8001504 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f8:	2308      	movs	r3, #8
 80014fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	611a      	str	r2, [r3, #16]
          break;
 8001502:	e009      	b.n	8001518 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001504:	2308      	movs	r3, #8
 8001506:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	615a      	str	r2, [r3, #20]
          break;
 800150e:	e003      	b.n	8001518 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
          break;
 8001514:	e000      	b.n	8001518 <HAL_GPIO_Init+0x130>
          break;
 8001516:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	2bff      	cmp	r3, #255	; 0xff
 800151c:	d801      	bhi.n	8001522 <HAL_GPIO_Init+0x13a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	e001      	b.n	8001526 <HAL_GPIO_Init+0x13e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3304      	adds	r3, #4
 8001526:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	2bff      	cmp	r3, #255	; 0xff
 800152c:	d802      	bhi.n	8001534 <HAL_GPIO_Init+0x14c>
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	e002      	b.n	800153a <HAL_GPIO_Init+0x152>
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	3b08      	subs	r3, #8
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	210f      	movs	r1, #15
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	fa01 f303 	lsl.w	r3, r1, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	401a      	ands	r2, r3
 800154c:	6a39      	ldr	r1, [r7, #32]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	431a      	orrs	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 80b1 	beq.w	80016ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001568:	4b4d      	ldr	r3, [pc, #308]	; (80016a0 <HAL_GPIO_Init+0x2b8>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a4c      	ldr	r2, [pc, #304]	; (80016a0 <HAL_GPIO_Init+0x2b8>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <HAL_GPIO_Init+0x2b8>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001580:	4a48      	ldr	r2, [pc, #288]	; (80016a4 <HAL_GPIO_Init+0x2bc>)
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	3302      	adds	r3, #2
 8001588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	220f      	movs	r2, #15
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4013      	ands	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a40      	ldr	r2, [pc, #256]	; (80016a8 <HAL_GPIO_Init+0x2c0>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d013      	beq.n	80015d4 <HAL_GPIO_Init+0x1ec>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a3f      	ldr	r2, [pc, #252]	; (80016ac <HAL_GPIO_Init+0x2c4>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d00d      	beq.n	80015d0 <HAL_GPIO_Init+0x1e8>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a3e      	ldr	r2, [pc, #248]	; (80016b0 <HAL_GPIO_Init+0x2c8>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d007      	beq.n	80015cc <HAL_GPIO_Init+0x1e4>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a3d      	ldr	r2, [pc, #244]	; (80016b4 <HAL_GPIO_Init+0x2cc>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d101      	bne.n	80015c8 <HAL_GPIO_Init+0x1e0>
 80015c4:	2303      	movs	r3, #3
 80015c6:	e006      	b.n	80015d6 <HAL_GPIO_Init+0x1ee>
 80015c8:	2304      	movs	r3, #4
 80015ca:	e004      	b.n	80015d6 <HAL_GPIO_Init+0x1ee>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e002      	b.n	80015d6 <HAL_GPIO_Init+0x1ee>
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <HAL_GPIO_Init+0x1ee>
 80015d4:	2300      	movs	r3, #0
 80015d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d8:	f002 0203 	and.w	r2, r2, #3
 80015dc:	0092      	lsls	r2, r2, #2
 80015de:	4093      	lsls	r3, r2
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015e6:	492f      	ldr	r1, [pc, #188]	; (80016a4 <HAL_GPIO_Init+0x2bc>)
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	3302      	adds	r3, #2
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001600:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	492c      	ldr	r1, [pc, #176]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	600b      	str	r3, [r1, #0]
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800160e:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	43db      	mvns	r3, r3
 8001616:	4928      	ldr	r1, [pc, #160]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001618:	4013      	ands	r3, r2
 800161a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d006      	beq.n	8001636 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001628:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	4922      	ldr	r1, [pc, #136]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
 8001634:	e006      	b.n	8001644 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	43db      	mvns	r3, r3
 800163e:	491e      	ldr	r1, [pc, #120]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001640:	4013      	ands	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d006      	beq.n	800165e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	4918      	ldr	r1, [pc, #96]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	608b      	str	r3, [r1, #8]
 800165c:	e006      	b.n	800166c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800165e:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	43db      	mvns	r3, r3
 8001666:	4914      	ldr	r1, [pc, #80]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001668:	4013      	ands	r3, r2
 800166a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d021      	beq.n	80016bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	490e      	ldr	r1, [pc, #56]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	60cb      	str	r3, [r1, #12]
 8001684:	e021      	b.n	80016ca <HAL_GPIO_Init+0x2e2>
 8001686:	bf00      	nop
 8001688:	10320000 	.word	0x10320000
 800168c:	10310000 	.word	0x10310000
 8001690:	10220000 	.word	0x10220000
 8001694:	10210000 	.word	0x10210000
 8001698:	10120000 	.word	0x10120000
 800169c:	10110000 	.word	0x10110000
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010000 	.word	0x40010000
 80016a8:	40010800 	.word	0x40010800
 80016ac:	40010c00 	.word	0x40010c00
 80016b0:	40011000 	.word	0x40011000
 80016b4:	40011400 	.word	0x40011400
 80016b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_GPIO_Init+0x304>)
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	4909      	ldr	r1, [pc, #36]	; (80016ec <HAL_GPIO_Init+0x304>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	3301      	adds	r3, #1
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	fa22 f303 	lsr.w	r3, r2, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f47f ae8e 	bne.w	80013fc <HAL_GPIO_Init+0x14>
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	372c      	adds	r7, #44	; 0x2c
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	40010400 	.word	0x40010400

080016f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	887b      	ldrh	r3, [r7, #2]
 8001702:	4013      	ands	r3, r2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d002      	beq.n	800170e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	e001      	b.n	8001712 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001712:	7bfb      	ldrb	r3, [r7, #15]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	460b      	mov	r3, r1
 8001728:	807b      	strh	r3, [r7, #2]
 800172a:	4613      	mov	r3, r2
 800172c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800172e:	787b      	ldrb	r3, [r7, #1]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001734:	887a      	ldrh	r2, [r7, #2]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800173a:	e003      	b.n	8001744 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800173c:	887b      	ldrh	r3, [r7, #2]
 800173e:	041a      	lsls	r2, r3, #16
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	611a      	str	r2, [r3, #16]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800174e:	b480      	push	{r7}
 8001750:	b085      	sub	sp, #20
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001760:	887a      	ldrh	r2, [r7, #2]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4013      	ands	r3, r2
 8001766:	041a      	lsls	r2, r3, #16
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	43d9      	mvns	r1, r3
 800176c:	887b      	ldrh	r3, [r7, #2]
 800176e:	400b      	ands	r3, r1
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	611a      	str	r2, [r3, #16]
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e12b      	b.n	80019ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d106      	bne.n	80017ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff faca 	bl	8000d40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2224      	movs	r2, #36	; 0x24
 80017b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0201 	bic.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017e4:	f001 fba2 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 80017e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4a81      	ldr	r2, [pc, #516]	; (80019f4 <HAL_I2C_Init+0x274>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d807      	bhi.n	8001804 <HAL_I2C_Init+0x84>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4a80      	ldr	r2, [pc, #512]	; (80019f8 <HAL_I2C_Init+0x278>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	bf94      	ite	ls
 80017fc:	2301      	movls	r3, #1
 80017fe:	2300      	movhi	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	e006      	b.n	8001812 <HAL_I2C_Init+0x92>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4a7d      	ldr	r2, [pc, #500]	; (80019fc <HAL_I2C_Init+0x27c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	bf94      	ite	ls
 800180c:	2301      	movls	r3, #1
 800180e:	2300      	movhi	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e0e7      	b.n	80019ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	4a78      	ldr	r2, [pc, #480]	; (8001a00 <HAL_I2C_Init+0x280>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	0c9b      	lsrs	r3, r3, #18
 8001824:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4a6a      	ldr	r2, [pc, #424]	; (80019f4 <HAL_I2C_Init+0x274>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d802      	bhi.n	8001854 <HAL_I2C_Init+0xd4>
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	3301      	adds	r3, #1
 8001852:	e009      	b.n	8001868 <HAL_I2C_Init+0xe8>
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800185a:	fb02 f303 	mul.w	r3, r2, r3
 800185e:	4a69      	ldr	r2, [pc, #420]	; (8001a04 <HAL_I2C_Init+0x284>)
 8001860:	fba2 2303 	umull	r2, r3, r2, r3
 8001864:	099b      	lsrs	r3, r3, #6
 8001866:	3301      	adds	r3, #1
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	430b      	orrs	r3, r1
 800186e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800187a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	495c      	ldr	r1, [pc, #368]	; (80019f4 <HAL_I2C_Init+0x274>)
 8001884:	428b      	cmp	r3, r1
 8001886:	d819      	bhi.n	80018bc <HAL_I2C_Init+0x13c>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	1e59      	subs	r1, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fbb1 f3f3 	udiv	r3, r1, r3
 8001896:	1c59      	adds	r1, r3, #1
 8001898:	f640 73fc 	movw	r3, #4092	; 0xffc
 800189c:	400b      	ands	r3, r1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00a      	beq.n	80018b8 <HAL_I2C_Init+0x138>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	1e59      	subs	r1, r3, #1
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80018b0:	3301      	adds	r3, #1
 80018b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b6:	e051      	b.n	800195c <HAL_I2C_Init+0x1dc>
 80018b8:	2304      	movs	r3, #4
 80018ba:	e04f      	b.n	800195c <HAL_I2C_Init+0x1dc>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d111      	bne.n	80018e8 <HAL_I2C_Init+0x168>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	1e58      	subs	r0, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6859      	ldr	r1, [r3, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	440b      	add	r3, r1
 80018d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018d6:	3301      	adds	r3, #1
 80018d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf0c      	ite	eq
 80018e0:	2301      	moveq	r3, #1
 80018e2:	2300      	movne	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	e012      	b.n	800190e <HAL_I2C_Init+0x18e>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	1e58      	subs	r0, r3, #1
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6859      	ldr	r1, [r3, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	0099      	lsls	r1, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80018fe:	3301      	adds	r3, #1
 8001900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001904:	2b00      	cmp	r3, #0
 8001906:	bf0c      	ite	eq
 8001908:	2301      	moveq	r3, #1
 800190a:	2300      	movne	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_I2C_Init+0x196>
 8001912:	2301      	movs	r3, #1
 8001914:	e022      	b.n	800195c <HAL_I2C_Init+0x1dc>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10e      	bne.n	800193c <HAL_I2C_Init+0x1bc>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	1e58      	subs	r0, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6859      	ldr	r1, [r3, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	440b      	add	r3, r1
 800192c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001930:	3301      	adds	r3, #1
 8001932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800193a:	e00f      	b.n	800195c <HAL_I2C_Init+0x1dc>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	1e58      	subs	r0, r3, #1
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6859      	ldr	r1, [r3, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	0099      	lsls	r1, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001952:	3301      	adds	r3, #1
 8001954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001958:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	6809      	ldr	r1, [r1, #0]
 8001960:	4313      	orrs	r3, r2
 8001962:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69da      	ldr	r2, [r3, #28]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800198a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6911      	ldr	r1, [r2, #16]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68d2      	ldr	r2, [r2, #12]
 8001996:	4311      	orrs	r1, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	430b      	orrs	r3, r1
 800199e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0201 	orr.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2220      	movs	r2, #32
 80019d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	000186a0 	.word	0x000186a0
 80019f8:	001e847f 	.word	0x001e847f
 80019fc:	003d08ff 	.word	0x003d08ff
 8001a00:	431bde83 	.word	0x431bde83
 8001a04:	10624dd3 	.word	0x10624dd3

08001a08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af02      	add	r7, sp, #8
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	4608      	mov	r0, r1
 8001a12:	4611      	mov	r1, r2
 8001a14:	461a      	mov	r2, r3
 8001a16:	4603      	mov	r3, r0
 8001a18:	817b      	strh	r3, [r7, #10]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	813b      	strh	r3, [r7, #8]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a22:	f7ff fbcf 	bl	80011c4 <HAL_GetTick>
 8001a26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b20      	cmp	r3, #32
 8001a32:	f040 80d9 	bne.w	8001be8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2319      	movs	r3, #25
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	496d      	ldr	r1, [pc, #436]	; (8001bf4 <HAL_I2C_Mem_Write+0x1ec>)
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f000 fcc1 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e0cc      	b.n	8001bea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <HAL_I2C_Mem_Write+0x56>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e0c5      	b.n	8001bea <HAL_I2C_Mem_Write+0x1e2>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d007      	beq.n	8001a84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0201 	orr.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2221      	movs	r2, #33	; 0x21
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2240      	movs	r2, #64	; 0x40
 8001aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6a3a      	ldr	r2, [r7, #32]
 8001aae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4a4d      	ldr	r2, [pc, #308]	; (8001bf8 <HAL_I2C_Mem_Write+0x1f0>)
 8001ac4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ac6:	88f8      	ldrh	r0, [r7, #6]
 8001ac8:	893a      	ldrh	r2, [r7, #8]
 8001aca:	8979      	ldrh	r1, [r7, #10]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 faf8 	bl	80020cc <I2C_RequestMemoryWrite>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d052      	beq.n	8001b88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e081      	b.n	8001bea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 fd42 	bl	8002574 <I2C_WaitOnTXEFlagUntilTimeout>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00d      	beq.n	8001b12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d107      	bne.n	8001b0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e06b      	b.n	8001bea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	781a      	ldrb	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d11b      	bne.n	8001b88 <HAL_I2C_Mem_Write+0x180>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d017      	beq.n	8001b88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	781a      	ldrb	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	3b01      	subs	r3, #1
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1aa      	bne.n	8001ae6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 fd2e 	bl	80025f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00d      	beq.n	8001bbc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d107      	bne.n	8001bb8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bb6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e016      	b.n	8001bea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	e000      	b.n	8001bea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001be8:	2302      	movs	r3, #2
  }
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	00100002 	.word	0x00100002
 8001bf8:	ffff0000 	.word	0xffff0000

08001bfc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08c      	sub	sp, #48	; 0x30
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	4608      	mov	r0, r1
 8001c06:	4611      	mov	r1, r2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	817b      	strh	r3, [r7, #10]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	813b      	strh	r3, [r7, #8]
 8001c12:	4613      	mov	r3, r2
 8001c14:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c1a:	f7ff fad3 	bl	80011c4 <HAL_GetTick>
 8001c1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b20      	cmp	r3, #32
 8001c2a:	f040 8244 	bne.w	80020b6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2319      	movs	r3, #25
 8001c34:	2201      	movs	r2, #1
 8001c36:	4982      	ldr	r1, [pc, #520]	; (8001e40 <HAL_I2C_Mem_Read+0x244>)
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 fbc5 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001c44:	2302      	movs	r3, #2
 8001c46:	e237      	b.n	80020b8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_I2C_Mem_Read+0x5a>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e230      	b.n	80020b8 <HAL_I2C_Mem_Read+0x4bc>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d007      	beq.n	8001c7c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2222      	movs	r2, #34	; 0x22
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2240      	movs	r2, #64	; 0x40
 8001c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ca6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001cac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4a62      	ldr	r2, [pc, #392]	; (8001e44 <HAL_I2C_Mem_Read+0x248>)
 8001cbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cbe:	88f8      	ldrh	r0, [r7, #6]
 8001cc0:	893a      	ldrh	r2, [r7, #8]
 8001cc2:	8979      	ldrh	r1, [r7, #10]
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	4603      	mov	r3, r0
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 fa92 	bl	80021f8 <I2C_RequestMemoryRead>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e1ec      	b.n	80020b8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d113      	bne.n	8001d0e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	e1c0      	b.n	8002090 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d11e      	bne.n	8001d54 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d26:	b672      	cpsid	i
}
 8001d28:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	61bb      	str	r3, [r7, #24]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d50:	b662      	cpsie	i
}
 8001d52:	e035      	b.n	8001dc0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d11e      	bne.n	8001d9a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d6c:	b672      	cpsid	i
}
 8001d6e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d96:	b662      	cpsie	i
}
 8001d98:	e012      	b.n	8001dc0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001da8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001dc0:	e166      	b.n	8002090 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	f200 811f 	bhi.w	800200a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d123      	bne.n	8001e1c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 fc4d 	bl	8002678 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e167      	b.n	80020b8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e04:	3b01      	subs	r3, #1
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	3b01      	subs	r3, #1
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e1a:	e139      	b.n	8002090 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d152      	bne.n	8001eca <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	4906      	ldr	r1, [pc, #24]	; (8001e48 <HAL_I2C_Mem_Read+0x24c>)
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 faca 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d008      	beq.n	8001e4c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e13c      	b.n	80020b8 <HAL_I2C_Mem_Read+0x4bc>
 8001e3e:	bf00      	nop
 8001e40:	00100002 	.word	0x00100002
 8001e44:	ffff0000 	.word	0xffff0000
 8001e48:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001e4c:	b672      	cpsid	i
}
 8001e4e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691a      	ldr	r2, [r3, #16]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e92:	b662      	cpsie	i
}
 8001e94:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ec8:	e0e2      	b.n	8002090 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	497b      	ldr	r1, [pc, #492]	; (80020c0 <HAL_I2C_Mem_Read+0x4c4>)
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 fa77 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0e9      	b.n	80020b8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ef2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef4:	b672      	cpsid	i
}
 8001ef6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	3b01      	subs	r3, #1
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f2a:	4b66      	ldr	r3, [pc, #408]	; (80020c4 <HAL_I2C_Mem_Read+0x4c8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	08db      	lsrs	r3, r3, #3
 8001f30:	4a65      	ldr	r2, [pc, #404]	; (80020c8 <HAL_I2C_Mem_Read+0x4cc>)
 8001f32:	fba2 2303 	umull	r2, r3, r2, r3
 8001f36:	0a1a      	lsrs	r2, r3, #8
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00da      	lsls	r2, r3, #3
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d118      	bne.n	8001f82 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f043 0220 	orr.w	r2, r3, #32
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001f72:	b662      	cpsie	i
}
 8001f74:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e09a      	b.n	80020b8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d1d9      	bne.n	8001f44 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001fd2:	b662      	cpsie	i
}
 8001fd4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	1c5a      	adds	r2, r3, #1
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002008:	e042      	b.n	8002090 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800200a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 fb32 	bl	8002678 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e04c      	b.n	80020b8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203a:	3b01      	subs	r3, #1
 800203c:	b29a      	uxth	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002046:	b29b      	uxth	r3, r3
 8002048:	3b01      	subs	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	2b04      	cmp	r3, #4
 800205c:	d118      	bne.n	8002090 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207a:	3b01      	subs	r3, #1
 800207c:	b29a      	uxth	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002086:	b29b      	uxth	r3, r3
 8002088:	3b01      	subs	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002094:	2b00      	cmp	r3, #0
 8002096:	f47f ae94 	bne.w	8001dc2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e000      	b.n	80020b8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80020b6:	2302      	movs	r3, #2
  }
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3728      	adds	r7, #40	; 0x28
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	00010004 	.word	0x00010004
 80020c4:	20000000 	.word	0x20000000
 80020c8:	14f8b589 	.word	0x14f8b589

080020cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	4608      	mov	r0, r1
 80020d6:	4611      	mov	r1, r2
 80020d8:	461a      	mov	r2, r3
 80020da:	4603      	mov	r3, r0
 80020dc:	817b      	strh	r3, [r7, #10]
 80020de:	460b      	mov	r3, r1
 80020e0:	813b      	strh	r3, [r7, #8]
 80020e2:	4613      	mov	r3, r2
 80020e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f960 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00d      	beq.n	800212a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800211c:	d103      	bne.n	8002126 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002124:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e05f      	b.n	80021ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800212a:	897b      	ldrh	r3, [r7, #10]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002138:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	6a3a      	ldr	r2, [r7, #32]
 800213e:	492d      	ldr	r1, [pc, #180]	; (80021f4 <I2C_RequestMemoryWrite+0x128>)
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 f998 	bl	8002476 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e04c      	b.n	80021ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002168:	6a39      	ldr	r1, [r7, #32]
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 fa02 	bl	8002574 <I2C_WaitOnTXEFlagUntilTimeout>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00d      	beq.n	8002192 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2b04      	cmp	r3, #4
 800217c:	d107      	bne.n	800218e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e02b      	b.n	80021ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d105      	bne.n	80021a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002198:	893b      	ldrh	r3, [r7, #8]
 800219a:	b2da      	uxtb	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	611a      	str	r2, [r3, #16]
 80021a2:	e021      	b.n	80021e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021a4:	893b      	ldrh	r3, [r7, #8]
 80021a6:	0a1b      	lsrs	r3, r3, #8
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b4:	6a39      	ldr	r1, [r7, #32]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f9dc 	bl	8002574 <I2C_WaitOnTXEFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00d      	beq.n	80021de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d107      	bne.n	80021da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e005      	b.n	80021ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021de:	893b      	ldrh	r3, [r7, #8]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	00010002 	.word	0x00010002

080021f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	4608      	mov	r0, r1
 8002202:	4611      	mov	r1, r2
 8002204:	461a      	mov	r2, r3
 8002206:	4603      	mov	r3, r0
 8002208:	817b      	strh	r3, [r7, #10]
 800220a:	460b      	mov	r3, r1
 800220c:	813b      	strh	r3, [r7, #8]
 800220e:	4613      	mov	r3, r2
 8002210:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002220:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002230:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	2200      	movs	r2, #0
 800223a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f8c2 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00d      	beq.n	8002266 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002258:	d103      	bne.n	8002262 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002260:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e0aa      	b.n	80023bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002266:	897b      	ldrh	r3, [r7, #10]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	461a      	mov	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002274:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	6a3a      	ldr	r2, [r7, #32]
 800227a:	4952      	ldr	r1, [pc, #328]	; (80023c4 <I2C_RequestMemoryRead+0x1cc>)
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f8fa 	bl	8002476 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e097      	b.n	80023bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a4:	6a39      	ldr	r1, [r7, #32]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f964 	bl	8002574 <I2C_WaitOnTXEFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00d      	beq.n	80022ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d107      	bne.n	80022ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e076      	b.n	80023bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022ce:	88fb      	ldrh	r3, [r7, #6]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d105      	bne.n	80022e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022d4:	893b      	ldrh	r3, [r7, #8]
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	611a      	str	r2, [r3, #16]
 80022de:	e021      	b.n	8002324 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022e0:	893b      	ldrh	r3, [r7, #8]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f0:	6a39      	ldr	r1, [r7, #32]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f93e 	bl	8002574 <I2C_WaitOnTXEFlagUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00d      	beq.n	800231a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	2b04      	cmp	r3, #4
 8002304:	d107      	bne.n	8002316 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002314:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e050      	b.n	80023bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800231a:	893b      	ldrh	r3, [r7, #8]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002326:	6a39      	ldr	r1, [r7, #32]
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 f923 	bl	8002574 <I2C_WaitOnTXEFlagUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00d      	beq.n	8002350 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	2b04      	cmp	r3, #4
 800233a:	d107      	bne.n	800234c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800234a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e035      	b.n	80023bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800235e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	2200      	movs	r2, #0
 8002368:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 f82b 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00d      	beq.n	8002394 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002386:	d103      	bne.n	8002390 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800238e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e013      	b.n	80023bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002394:	897b      	ldrh	r3, [r7, #10]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	b2da      	uxtb	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	6a3a      	ldr	r2, [r7, #32]
 80023a8:	4906      	ldr	r1, [pc, #24]	; (80023c4 <I2C_RequestMemoryRead+0x1cc>)
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 f863 	bl	8002476 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	00010002 	.word	0x00010002

080023c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	4613      	mov	r3, r2
 80023d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d8:	e025      	b.n	8002426 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d021      	beq.n	8002426 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e2:	f7fe feef 	bl	80011c4 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d302      	bcc.n	80023f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d116      	bne.n	8002426 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f043 0220 	orr.w	r2, r3, #32
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e023      	b.n	800246e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	0c1b      	lsrs	r3, r3, #16
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d10d      	bne.n	800244c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	43da      	mvns	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4013      	ands	r3, r2
 800243c:	b29b      	uxth	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	bf0c      	ite	eq
 8002442:	2301      	moveq	r3, #1
 8002444:	2300      	movne	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	e00c      	b.n	8002466 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	43da      	mvns	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4013      	ands	r3, r2
 8002458:	b29b      	uxth	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	bf0c      	ite	eq
 800245e:	2301      	moveq	r3, #1
 8002460:	2300      	movne	r3, #0
 8002462:	b2db      	uxtb	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	429a      	cmp	r2, r3
 800246a:	d0b6      	beq.n	80023da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002484:	e051      	b.n	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002494:	d123      	bne.n	80024de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f043 0204 	orr.w	r2, r3, #4
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e046      	b.n	800256c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d021      	beq.n	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e6:	f7fe fe6d 	bl	80011c4 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d302      	bcc.n	80024fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d116      	bne.n	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f043 0220 	orr.w	r2, r3, #32
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e020      	b.n	800256c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	0c1b      	lsrs	r3, r3, #16
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b01      	cmp	r3, #1
 8002532:	d10c      	bne.n	800254e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	43da      	mvns	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	4013      	ands	r3, r2
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	bf14      	ite	ne
 8002546:	2301      	movne	r3, #1
 8002548:	2300      	moveq	r3, #0
 800254a:	b2db      	uxtb	r3, r3
 800254c:	e00b      	b.n	8002566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	43da      	mvns	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	4013      	ands	r3, r2
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf14      	ite	ne
 8002560:	2301      	movne	r3, #1
 8002562:	2300      	moveq	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d18d      	bne.n	8002486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002580:	e02d      	b.n	80025de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f8ce 	bl	8002724 <I2C_IsAcknowledgeFailed>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e02d      	b.n	80025ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002598:	d021      	beq.n	80025de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800259a:	f7fe fe13 	bl	80011c4 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d302      	bcc.n	80025b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d116      	bne.n	80025de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f043 0220 	orr.w	r2, r3, #32
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e007      	b.n	80025ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e8:	2b80      	cmp	r3, #128	; 0x80
 80025ea:	d1ca      	bne.n	8002582 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b084      	sub	sp, #16
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002602:	e02d      	b.n	8002660 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 f88d 	bl	8002724 <I2C_IsAcknowledgeFailed>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e02d      	b.n	8002670 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261a:	d021      	beq.n	8002660 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800261c:	f7fe fdd2 	bl	80011c4 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	429a      	cmp	r2, r3
 800262a:	d302      	bcc.n	8002632 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d116      	bne.n	8002660 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f043 0220 	orr.w	r2, r3, #32
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e007      	b.n	8002670 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b04      	cmp	r3, #4
 800266c:	d1ca      	bne.n	8002604 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002684:	e042      	b.n	800270c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b10      	cmp	r3, #16
 8002692:	d119      	bne.n	80026c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0210 	mvn.w	r2, #16
 800269c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2220      	movs	r2, #32
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e029      	b.n	800271c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c8:	f7fe fd7c 	bl	80011c4 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d302      	bcc.n	80026de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d116      	bne.n	800270c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	f043 0220 	orr.w	r2, r3, #32
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e007      	b.n	800271c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002716:	2b40      	cmp	r3, #64	; 0x40
 8002718:	d1b5      	bne.n	8002686 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273a:	d11b      	bne.n	8002774 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002744:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	f043 0204 	orr.w	r2, r3, #4
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e26c      	b.n	8002c6c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 8087 	beq.w	80028ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a0:	4b92      	ldr	r3, [pc, #584]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 030c 	and.w	r3, r3, #12
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d00c      	beq.n	80027c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027ac:	4b8f      	ldr	r3, [pc, #572]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 030c 	and.w	r3, r3, #12
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d112      	bne.n	80027de <HAL_RCC_OscConfig+0x5e>
 80027b8:	4b8c      	ldr	r3, [pc, #560]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c4:	d10b      	bne.n	80027de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c6:	4b89      	ldr	r3, [pc, #548]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d06c      	beq.n	80028ac <HAL_RCC_OscConfig+0x12c>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d168      	bne.n	80028ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e246      	b.n	8002c6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x76>
 80027e8:	4b80      	ldr	r3, [pc, #512]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a7f      	ldr	r2, [pc, #508]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80027ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	e02e      	b.n	8002854 <HAL_RCC_OscConfig+0xd4>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10c      	bne.n	8002818 <HAL_RCC_OscConfig+0x98>
 80027fe:	4b7b      	ldr	r3, [pc, #492]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a7a      	ldr	r2, [pc, #488]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	4b78      	ldr	r3, [pc, #480]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a77      	ldr	r2, [pc, #476]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002810:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	e01d      	b.n	8002854 <HAL_RCC_OscConfig+0xd4>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0xbc>
 8002822:	4b72      	ldr	r3, [pc, #456]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a71      	ldr	r2, [pc, #452]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	4b6f      	ldr	r3, [pc, #444]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a6e      	ldr	r2, [pc, #440]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	e00b      	b.n	8002854 <HAL_RCC_OscConfig+0xd4>
 800283c:	4b6b      	ldr	r3, [pc, #428]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a6a      	ldr	r2, [pc, #424]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	4b68      	ldr	r3, [pc, #416]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a67      	ldr	r2, [pc, #412]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 800284e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002852:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d013      	beq.n	8002884 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7fe fcb2 	bl	80011c4 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002864:	f7fe fcae 	bl	80011c4 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	; 0x64
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e1fa      	b.n	8002c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	4b5d      	ldr	r3, [pc, #372]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0xe4>
 8002882:	e014      	b.n	80028ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7fe fc9e 	bl	80011c4 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800288c:	f7fe fc9a 	bl	80011c4 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b64      	cmp	r3, #100	; 0x64
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e1e6      	b.n	8002c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289e:	4b53      	ldr	r3, [pc, #332]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x10c>
 80028aa:	e000      	b.n	80028ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d063      	beq.n	8002982 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ba:	4b4c      	ldr	r3, [pc, #304]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028c6:	4b49      	ldr	r3, [pc, #292]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d11c      	bne.n	800290c <HAL_RCC_OscConfig+0x18c>
 80028d2:	4b46      	ldr	r3, [pc, #280]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d116      	bne.n	800290c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028de:	4b43      	ldr	r3, [pc, #268]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_RCC_OscConfig+0x176>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d001      	beq.n	80028f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e1ba      	b.n	8002c6c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f6:	4b3d      	ldr	r3, [pc, #244]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4939      	ldr	r1, [pc, #228]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290a:	e03a      	b.n	8002982 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d020      	beq.n	8002956 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002914:	4b36      	ldr	r3, [pc, #216]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291a:	f7fe fc53 	bl	80011c4 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002922:	f7fe fc4f 	bl	80011c4 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e19b      	b.n	8002c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002934:	4b2d      	ldr	r3, [pc, #180]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002940:	4b2a      	ldr	r3, [pc, #168]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4927      	ldr	r1, [pc, #156]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002950:	4313      	orrs	r3, r2
 8002952:	600b      	str	r3, [r1, #0]
 8002954:	e015      	b.n	8002982 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002956:	4b26      	ldr	r3, [pc, #152]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7fe fc32 	bl	80011c4 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002964:	f7fe fc2e 	bl	80011c4 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e17a      	b.n	8002c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002976:	4b1d      	ldr	r3, [pc, #116]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d03a      	beq.n	8002a04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d019      	beq.n	80029ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002996:	4b17      	ldr	r3, [pc, #92]	; (80029f4 <HAL_RCC_OscConfig+0x274>)
 8002998:	2201      	movs	r2, #1
 800299a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299c:	f7fe fc12 	bl	80011c4 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a4:	f7fe fc0e 	bl	80011c4 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e15a      	b.n	8002c6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b6:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029c2:	2001      	movs	r0, #1
 80029c4:	f000 fac6 	bl	8002f54 <RCC_Delay>
 80029c8:	e01c      	b.n	8002a04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <HAL_RCC_OscConfig+0x274>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d0:	f7fe fbf8 	bl	80011c4 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d6:	e00f      	b.n	80029f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d8:	f7fe fbf4 	bl	80011c4 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d908      	bls.n	80029f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e140      	b.n	8002c6c <HAL_RCC_OscConfig+0x4ec>
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000
 80029f0:	42420000 	.word	0x42420000
 80029f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f8:	4b9e      	ldr	r3, [pc, #632]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1e9      	bne.n	80029d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80a6 	beq.w	8002b5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a12:	2300      	movs	r3, #0
 8002a14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a16:	4b97      	ldr	r3, [pc, #604]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10d      	bne.n	8002a3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a22:	4b94      	ldr	r3, [pc, #592]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	4a93      	ldr	r2, [pc, #588]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	61d3      	str	r3, [r2, #28]
 8002a2e:	4b91      	ldr	r3, [pc, #580]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3e:	4b8e      	ldr	r3, [pc, #568]	; (8002c78 <HAL_RCC_OscConfig+0x4f8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d118      	bne.n	8002a7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a4a:	4b8b      	ldr	r3, [pc, #556]	; (8002c78 <HAL_RCC_OscConfig+0x4f8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a8a      	ldr	r2, [pc, #552]	; (8002c78 <HAL_RCC_OscConfig+0x4f8>)
 8002a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a56:	f7fe fbb5 	bl	80011c4 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5e:	f7fe fbb1 	bl	80011c4 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b64      	cmp	r3, #100	; 0x64
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e0fd      	b.n	8002c6c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	4b81      	ldr	r3, [pc, #516]	; (8002c78 <HAL_RCC_OscConfig+0x4f8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x312>
 8002a84:	4b7b      	ldr	r3, [pc, #492]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	4a7a      	ldr	r2, [pc, #488]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6213      	str	r3, [r2, #32]
 8002a90:	e02d      	b.n	8002aee <HAL_RCC_OscConfig+0x36e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x334>
 8002a9a:	4b76      	ldr	r3, [pc, #472]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	4a75      	ldr	r2, [pc, #468]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	f023 0301 	bic.w	r3, r3, #1
 8002aa4:	6213      	str	r3, [r2, #32]
 8002aa6:	4b73      	ldr	r3, [pc, #460]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	4a72      	ldr	r2, [pc, #456]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002aac:	f023 0304 	bic.w	r3, r3, #4
 8002ab0:	6213      	str	r3, [r2, #32]
 8002ab2:	e01c      	b.n	8002aee <HAL_RCC_OscConfig+0x36e>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d10c      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x356>
 8002abc:	4b6d      	ldr	r3, [pc, #436]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	4a6c      	ldr	r2, [pc, #432]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002ac2:	f043 0304 	orr.w	r3, r3, #4
 8002ac6:	6213      	str	r3, [r2, #32]
 8002ac8:	4b6a      	ldr	r3, [pc, #424]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4a69      	ldr	r2, [pc, #420]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6213      	str	r3, [r2, #32]
 8002ad4:	e00b      	b.n	8002aee <HAL_RCC_OscConfig+0x36e>
 8002ad6:	4b67      	ldr	r3, [pc, #412]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	4a66      	ldr	r2, [pc, #408]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002adc:	f023 0301 	bic.w	r3, r3, #1
 8002ae0:	6213      	str	r3, [r2, #32]
 8002ae2:	4b64      	ldr	r3, [pc, #400]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	4a63      	ldr	r2, [pc, #396]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002ae8:	f023 0304 	bic.w	r3, r3, #4
 8002aec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d015      	beq.n	8002b22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af6:	f7fe fb65 	bl	80011c4 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afc:	e00a      	b.n	8002b14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afe:	f7fe fb61 	bl	80011c4 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e0ab      	b.n	8002c6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b14:	4b57      	ldr	r3, [pc, #348]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0ee      	beq.n	8002afe <HAL_RCC_OscConfig+0x37e>
 8002b20:	e014      	b.n	8002b4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b22:	f7fe fb4f 	bl	80011c4 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b28:	e00a      	b.n	8002b40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2a:	f7fe fb4b 	bl	80011c4 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e095      	b.n	8002c6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b40:	4b4c      	ldr	r3, [pc, #304]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1ee      	bne.n	8002b2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d105      	bne.n	8002b5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b52:	4b48      	ldr	r3, [pc, #288]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	4a47      	ldr	r2, [pc, #284]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 8081 	beq.w	8002c6a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b68:	4b42      	ldr	r3, [pc, #264]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d061      	beq.n	8002c38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d146      	bne.n	8002c0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7c:	4b3f      	ldr	r3, [pc, #252]	; (8002c7c <HAL_RCC_OscConfig+0x4fc>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b82:	f7fe fb1f 	bl	80011c4 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8a:	f7fe fb1b 	bl	80011c4 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e067      	b.n	8002c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b9c:	4b35      	ldr	r3, [pc, #212]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f0      	bne.n	8002b8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb0:	d108      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bb2:	4b30      	ldr	r3, [pc, #192]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	492d      	ldr	r1, [pc, #180]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc4:	4b2b      	ldr	r3, [pc, #172]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a19      	ldr	r1, [r3, #32]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	4927      	ldr	r1, [pc, #156]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bdc:	4b27      	ldr	r3, [pc, #156]	; (8002c7c <HAL_RCC_OscConfig+0x4fc>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be2:	f7fe faef 	bl	80011c4 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bea:	f7fe faeb 	bl	80011c4 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e037      	b.n	8002c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x46a>
 8002c08:	e02f      	b.n	8002c6a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0a:	4b1c      	ldr	r3, [pc, #112]	; (8002c7c <HAL_RCC_OscConfig+0x4fc>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7fe fad8 	bl	80011c4 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c18:	f7fe fad4 	bl	80011c4 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e020      	b.n	8002c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2a:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x498>
 8002c36:	e018      	b.n	8002c6a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e013      	b.n	8002c6c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c44:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_RCC_OscConfig+0x4f4>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d106      	bne.n	8002c66 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d001      	beq.n	8002c6a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40007000 	.word	0x40007000
 8002c7c:	42420060 	.word	0x42420060

08002c80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0d0      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c94:	4b6a      	ldr	r3, [pc, #424]	; (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d910      	bls.n	8002cc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca2:	4b67      	ldr	r3, [pc, #412]	; (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 0207 	bic.w	r2, r3, #7
 8002caa:	4965      	ldr	r1, [pc, #404]	; (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b63      	ldr	r3, [pc, #396]	; (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0b8      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d020      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cdc:	4b59      	ldr	r3, [pc, #356]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4a58      	ldr	r2, [pc, #352]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ce6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf4:	4b53      	ldr	r3, [pc, #332]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4a52      	ldr	r2, [pc, #328]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d00:	4b50      	ldr	r3, [pc, #320]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	494d      	ldr	r1, [pc, #308]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d040      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d107      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	4b47      	ldr	r3, [pc, #284]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d115      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e07f      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d107      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3e:	4b41      	ldr	r3, [pc, #260]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d109      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e073      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4e:	4b3d      	ldr	r3, [pc, #244]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e06b      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d5e:	4b39      	ldr	r3, [pc, #228]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f023 0203 	bic.w	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	4936      	ldr	r1, [pc, #216]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d70:	f7fe fa28 	bl	80011c4 <HAL_GetTick>
 8002d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d76:	e00a      	b.n	8002d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d78:	f7fe fa24 	bl	80011c4 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e053      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8e:	4b2d      	ldr	r3, [pc, #180]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 020c 	and.w	r2, r3, #12
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d1eb      	bne.n	8002d78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002da0:	4b27      	ldr	r3, [pc, #156]	; (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d210      	bcs.n	8002dd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dae:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 0207 	bic.w	r2, r3, #7
 8002db6:	4922      	ldr	r1, [pc, #136]	; (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbe:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e032      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ddc:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4916      	ldr	r1, [pc, #88]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dfa:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	490e      	ldr	r1, [pc, #56]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e0e:	f000 f821 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8002e12:	4602      	mov	r2, r0
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	490a      	ldr	r1, [pc, #40]	; (8002e48 <HAL_RCC_ClockConfig+0x1c8>)
 8002e20:	5ccb      	ldrb	r3, [r1, r3]
 8002e22:	fa22 f303 	lsr.w	r3, r2, r3
 8002e26:	4a09      	ldr	r2, [pc, #36]	; (8002e4c <HAL_RCC_ClockConfig+0x1cc>)
 8002e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e2a:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <HAL_RCC_ClockConfig+0x1d0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe f986 	bl	8001140 <HAL_InitTick>

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40022000 	.word	0x40022000
 8002e44:	40021000 	.word	0x40021000
 8002e48:	080038a8 	.word	0x080038a8
 8002e4c:	20000000 	.word	0x20000000
 8002e50:	20000004 	.word	0x20000004

08002e54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e54:	b490      	push	{r4, r7}
 8002e56:	b08a      	sub	sp, #40	; 0x28
 8002e58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e5a:	4b2a      	ldr	r3, [pc, #168]	; (8002f04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e5c:	1d3c      	adds	r4, r7, #4
 8002e5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e64:	f240 2301 	movw	r3, #513	; 0x201
 8002e68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	2300      	movs	r3, #0
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e7e:	4b22      	ldr	r3, [pc, #136]	; (8002f08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d002      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0x40>
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d003      	beq.n	8002e9a <HAL_RCC_GetSysClockFreq+0x46>
 8002e92:	e02d      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e94:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e96:	623b      	str	r3, [r7, #32]
      break;
 8002e98:	e02d      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	0c9b      	lsrs	r3, r3, #18
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002eac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d013      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002eb8:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	0c5b      	lsrs	r3, r3, #17
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ecc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	4a0e      	ldr	r2, [pc, #56]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ed2:	fb02 f203 	mul.w	r2, r2, r3
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ede:	e004      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	4a0b      	ldr	r2, [pc, #44]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ee4:	fb02 f303 	mul.w	r3, r2, r3
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	623b      	str	r3, [r7, #32]
      break;
 8002eee:	e002      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ef0:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ef2:	623b      	str	r3, [r7, #32]
      break;
 8002ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3728      	adds	r7, #40	; 0x28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc90      	pop	{r4, r7}
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	08003898 	.word	0x08003898
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	00f42400 	.word	0x00f42400
 8002f10:	003d0900 	.word	0x003d0900
 8002f14:	007a1200 	.word	0x007a1200

08002f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f1c:	4b02      	ldr	r3, [pc, #8]	; (8002f28 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	20000000 	.word	0x20000000

08002f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f30:	f7ff fff2 	bl	8002f18 <HAL_RCC_GetHCLKFreq>
 8002f34:	4602      	mov	r2, r0
 8002f36:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	0a1b      	lsrs	r3, r3, #8
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	4903      	ldr	r1, [pc, #12]	; (8002f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f42:	5ccb      	ldrb	r3, [r1, r3]
 8002f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	080038b8 	.word	0x080038b8

08002f54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <RCC_Delay+0x34>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <RCC_Delay+0x38>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	0a5b      	lsrs	r3, r3, #9
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	fb02 f303 	mul.w	r3, r2, r3
 8002f6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f70:	bf00      	nop
  }
  while (Delay --);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1e5a      	subs	r2, r3, #1
 8002f76:	60fa      	str	r2, [r7, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f9      	bne.n	8002f70 <RCC_Delay+0x1c>
}
 8002f7c:	bf00      	nop
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr
 8002f88:	20000000 	.word	0x20000000
 8002f8c:	10624dd3 	.word	0x10624dd3

08002f90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e076      	b.n	8003090 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d108      	bne.n	8002fbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fb2:	d009      	beq.n	8002fc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	61da      	str	r2, [r3, #28]
 8002fba:	e005      	b.n	8002fc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d106      	bne.n	8002fe8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fd feea 	bl	8000dbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ffe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304c:	ea42 0103 	orr.w	r1, r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	0c1a      	lsrs	r2, r3, #16
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f002 0204 	and.w	r2, r2, #4
 800306e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	69da      	ldr	r2, [r3, #28]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800307e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	4613      	mov	r3, r2
 80030a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_SPI_Transmit+0x22>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e126      	b.n	8003308 <HAL_SPI_Transmit+0x270>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030c2:	f7fe f87f 	bl	80011c4 <HAL_GetTick>
 80030c6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d002      	beq.n	80030de <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80030d8:	2302      	movs	r3, #2
 80030da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030dc:	e10b      	b.n	80032f6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HAL_SPI_Transmit+0x52>
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d102      	bne.n	80030f0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030ee:	e102      	b.n	80032f6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2203      	movs	r2, #3
 80030f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	88fa      	ldrh	r2, [r7, #6]
 8003108:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	88fa      	ldrh	r2, [r7, #6]
 800310e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003136:	d10f      	bne.n	8003158 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003146:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003156:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003162:	2b40      	cmp	r3, #64	; 0x40
 8003164:	d007      	beq.n	8003176 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003174:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800317e:	d14b      	bne.n	8003218 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <HAL_SPI_Transmit+0xf6>
 8003188:	8afb      	ldrh	r3, [r7, #22]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d13e      	bne.n	800320c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	881a      	ldrh	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	1c9a      	adds	r2, r3, #2
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031b2:	e02b      	b.n	800320c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d112      	bne.n	80031e8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	881a      	ldrh	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	1c9a      	adds	r2, r3, #2
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80031e6:	e011      	b.n	800320c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031e8:	f7fd ffec 	bl	80011c4 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d803      	bhi.n	8003200 <HAL_SPI_Transmit+0x168>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fe:	d102      	bne.n	8003206 <HAL_SPI_Transmit+0x16e>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d102      	bne.n	800320c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	77fb      	strb	r3, [r7, #31]
          goto error;
 800320a:	e074      	b.n	80032f6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1ce      	bne.n	80031b4 <HAL_SPI_Transmit+0x11c>
 8003216:	e04c      	b.n	80032b2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <HAL_SPI_Transmit+0x18e>
 8003220:	8afb      	ldrh	r3, [r7, #22]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d140      	bne.n	80032a8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	330c      	adds	r3, #12
 8003230:	7812      	ldrb	r2, [r2, #0]
 8003232:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800324c:	e02c      	b.n	80032a8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b02      	cmp	r3, #2
 800325a:	d113      	bne.n	8003284 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	330c      	adds	r3, #12
 8003266:	7812      	ldrb	r2, [r2, #0]
 8003268:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	86da      	strh	r2, [r3, #54]	; 0x36
 8003282:	e011      	b.n	80032a8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003284:	f7fd ff9e 	bl	80011c4 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d803      	bhi.n	800329c <HAL_SPI_Transmit+0x204>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329a:	d102      	bne.n	80032a2 <HAL_SPI_Transmit+0x20a>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032a6:	e026      	b.n	80032f6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1cd      	bne.n	800324e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	6839      	ldr	r1, [r7, #0]
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 fa54 	bl	8003764 <SPI_EndRxTxTransaction>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2220      	movs	r2, #32
 80032c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10a      	bne.n	80032e6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032d0:	2300      	movs	r3, #0
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	77fb      	strb	r3, [r7, #31]
 80032f2:	e000      	b.n	80032f6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80032f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003306:	7ffb      	ldrb	r3, [r7, #31]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08c      	sub	sp, #48	; 0x30
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800331e:	2301      	movs	r3, #1
 8003320:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_SPI_TransmitReceive+0x26>
 8003332:	2302      	movs	r3, #2
 8003334:	e18a      	b.n	800364c <HAL_SPI_TransmitReceive+0x33c>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800333e:	f7fd ff41 	bl	80011c4 <HAL_GetTick>
 8003342:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800334a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003354:	887b      	ldrh	r3, [r7, #2]
 8003356:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003358:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800335c:	2b01      	cmp	r3, #1
 800335e:	d00f      	beq.n	8003380 <HAL_SPI_TransmitReceive+0x70>
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003366:	d107      	bne.n	8003378 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d103      	bne.n	8003378 <HAL_SPI_TransmitReceive+0x68>
 8003370:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003374:	2b04      	cmp	r3, #4
 8003376:	d003      	beq.n	8003380 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003378:	2302      	movs	r3, #2
 800337a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800337e:	e15b      	b.n	8003638 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d005      	beq.n	8003392 <HAL_SPI_TransmitReceive+0x82>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <HAL_SPI_TransmitReceive+0x82>
 800338c:	887b      	ldrh	r3, [r7, #2]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d103      	bne.n	800339a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003398:	e14e      	b.n	8003638 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d003      	beq.n	80033ae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2205      	movs	r2, #5
 80033aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	887a      	ldrh	r2, [r7, #2]
 80033be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	887a      	ldrh	r2, [r7, #2]
 80033c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	887a      	ldrh	r2, [r7, #2]
 80033d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	887a      	ldrh	r2, [r7, #2]
 80033d6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ee:	2b40      	cmp	r3, #64	; 0x40
 80033f0:	d007      	beq.n	8003402 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003400:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800340a:	d178      	bne.n	80034fe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <HAL_SPI_TransmitReceive+0x10a>
 8003414:	8b7b      	ldrh	r3, [r7, #26]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d166      	bne.n	80034e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	881a      	ldrh	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	1c9a      	adds	r2, r3, #2
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800343e:	e053      	b.n	80034e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b02      	cmp	r3, #2
 800344c:	d11b      	bne.n	8003486 <HAL_SPI_TransmitReceive+0x176>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003452:	b29b      	uxth	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d016      	beq.n	8003486 <HAL_SPI_TransmitReceive+0x176>
 8003458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345a:	2b01      	cmp	r3, #1
 800345c:	d113      	bne.n	8003486 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	881a      	ldrh	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	1c9a      	adds	r2, r3, #2
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d119      	bne.n	80034c8 <HAL_SPI_TransmitReceive+0x1b8>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d014      	beq.n	80034c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	b292      	uxth	r2, r2
 80034aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	1c9a      	adds	r2, r3, #2
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034c4:	2301      	movs	r3, #1
 80034c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034c8:	f7fd fe7c 	bl	80011c4 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d807      	bhi.n	80034e8 <HAL_SPI_TransmitReceive+0x1d8>
 80034d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034de:	d003      	beq.n	80034e8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034e6:	e0a7      	b.n	8003638 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1a6      	bne.n	8003440 <HAL_SPI_TransmitReceive+0x130>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1a1      	bne.n	8003440 <HAL_SPI_TransmitReceive+0x130>
 80034fc:	e07c      	b.n	80035f8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_SPI_TransmitReceive+0x1fc>
 8003506:	8b7b      	ldrh	r3, [r7, #26]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d16b      	bne.n	80035e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	330c      	adds	r3, #12
 8003516:	7812      	ldrb	r2, [r2, #0]
 8003518:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003532:	e057      	b.n	80035e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b02      	cmp	r3, #2
 8003540:	d11c      	bne.n	800357c <HAL_SPI_TransmitReceive+0x26c>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d017      	beq.n	800357c <HAL_SPI_TransmitReceive+0x26c>
 800354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354e:	2b01      	cmp	r3, #1
 8003550:	d114      	bne.n	800357c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	330c      	adds	r3, #12
 800355c:	7812      	ldrb	r2, [r2, #0]
 800355e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d119      	bne.n	80035be <HAL_SPI_TransmitReceive+0x2ae>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d014      	beq.n	80035be <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035ba:	2301      	movs	r3, #1
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035be:	f7fd fe01 	bl	80011c4 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d803      	bhi.n	80035d6 <HAL_SPI_TransmitReceive+0x2c6>
 80035ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d102      	bne.n	80035dc <HAL_SPI_TransmitReceive+0x2cc>
 80035d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d103      	bne.n	80035e4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80035e2:	e029      	b.n	8003638 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1a2      	bne.n	8003534 <HAL_SPI_TransmitReceive+0x224>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d19d      	bne.n	8003534 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f8b1 	bl	8003764 <SPI_EndRxTxTransaction>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d006      	beq.n	8003616 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003614:	e010      	b.n	8003638 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10b      	bne.n	8003636 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	e000      	b.n	8003638 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003636:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003648:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800364c:	4618      	mov	r0, r3
 800364e:	3730      	adds	r7, #48	; 0x30
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	4613      	mov	r3, r2
 8003662:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003664:	f7fd fdae 	bl	80011c4 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	4413      	add	r3, r2
 8003672:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003674:	f7fd fda6 	bl	80011c4 <HAL_GetTick>
 8003678:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800367a:	4b39      	ldr	r3, [pc, #228]	; (8003760 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	015b      	lsls	r3, r3, #5
 8003680:	0d1b      	lsrs	r3, r3, #20
 8003682:	69fa      	ldr	r2, [r7, #28]
 8003684:	fb02 f303 	mul.w	r3, r2, r3
 8003688:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800368a:	e054      	b.n	8003736 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003692:	d050      	beq.n	8003736 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003694:	f7fd fd96 	bl	80011c4 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d902      	bls.n	80036aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d13d      	bne.n	8003726 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036c2:	d111      	bne.n	80036e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036cc:	d004      	beq.n	80036d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d6:	d107      	bne.n	80036e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f0:	d10f      	bne.n	8003712 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003710:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e017      	b.n	8003756 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	3b01      	subs	r3, #1
 8003734:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4013      	ands	r3, r2
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	429a      	cmp	r2, r3
 8003744:	bf0c      	ite	eq
 8003746:	2301      	moveq	r3, #1
 8003748:	2300      	movne	r3, #0
 800374a:	b2db      	uxtb	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	429a      	cmp	r2, r3
 8003752:	d19b      	bne.n	800368c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3720      	adds	r7, #32
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20000000 	.word	0x20000000

08003764 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af02      	add	r7, sp, #8
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2200      	movs	r2, #0
 8003778:	2180      	movs	r1, #128	; 0x80
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f7ff ff6a 	bl	8003654 <SPI_WaitFlagStateUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378a:	f043 0220 	orr.w	r2, r3, #32
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e000      	b.n	8003798 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <__libc_init_array>:
 80037a0:	b570      	push	{r4, r5, r6, lr}
 80037a2:	2600      	movs	r6, #0
 80037a4:	4d0c      	ldr	r5, [pc, #48]	; (80037d8 <__libc_init_array+0x38>)
 80037a6:	4c0d      	ldr	r4, [pc, #52]	; (80037dc <__libc_init_array+0x3c>)
 80037a8:	1b64      	subs	r4, r4, r5
 80037aa:	10a4      	asrs	r4, r4, #2
 80037ac:	42a6      	cmp	r6, r4
 80037ae:	d109      	bne.n	80037c4 <__libc_init_array+0x24>
 80037b0:	f000 f822 	bl	80037f8 <_init>
 80037b4:	2600      	movs	r6, #0
 80037b6:	4d0a      	ldr	r5, [pc, #40]	; (80037e0 <__libc_init_array+0x40>)
 80037b8:	4c0a      	ldr	r4, [pc, #40]	; (80037e4 <__libc_init_array+0x44>)
 80037ba:	1b64      	subs	r4, r4, r5
 80037bc:	10a4      	asrs	r4, r4, #2
 80037be:	42a6      	cmp	r6, r4
 80037c0:	d105      	bne.n	80037ce <__libc_init_array+0x2e>
 80037c2:	bd70      	pop	{r4, r5, r6, pc}
 80037c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037c8:	4798      	blx	r3
 80037ca:	3601      	adds	r6, #1
 80037cc:	e7ee      	b.n	80037ac <__libc_init_array+0xc>
 80037ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d2:	4798      	blx	r3
 80037d4:	3601      	adds	r6, #1
 80037d6:	e7f2      	b.n	80037be <__libc_init_array+0x1e>
 80037d8:	08003998 	.word	0x08003998
 80037dc:	08003998 	.word	0x08003998
 80037e0:	08003998 	.word	0x08003998
 80037e4:	0800399c 	.word	0x0800399c

080037e8 <memset>:
 80037e8:	4603      	mov	r3, r0
 80037ea:	4402      	add	r2, r0
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d100      	bne.n	80037f2 <memset+0xa>
 80037f0:	4770      	bx	lr
 80037f2:	f803 1b01 	strb.w	r1, [r3], #1
 80037f6:	e7f9      	b.n	80037ec <memset+0x4>

080037f8 <_init>:
 80037f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fa:	bf00      	nop
 80037fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fe:	bc08      	pop	{r3}
 8003800:	469e      	mov	lr, r3
 8003802:	4770      	bx	lr

08003804 <_fini>:
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003806:	bf00      	nop
 8003808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380a:	bc08      	pop	{r3}
 800380c:	469e      	mov	lr, r3
 800380e:	4770      	bx	lr
