
VFD_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d054  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a8  0800d160  0800d160  0001d160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d908  0800d908  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d908  0800d908  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d908  0800d908  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d908  0800d908  0001d908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d90c  0800d90c  0001d90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800d910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015c4  200001f4  0800db04  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017b8  0800db04  000217b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000207e9  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045da  00000000  00000000  00040a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001930  00000000  00000000  00044fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b8  00000000  00000000  00046910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c5a5  00000000  00000000  000480c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d315  00000000  00000000  0006466d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000943db  00000000  00000000  00081982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00115d5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cc4  00000000  00000000  00115db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f4 	.word	0x200001f4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d148 	.word	0x0800d148

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f8 	.word	0x200001f8
 8000148:	0800d148 	.word	0x0800d148

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <fifo_push>:
buff_t fifo_buffer[BUFF_SIZE];
uint32_t head_index = 0;
uint32_t tail_index = 0;

bool fifo_push(buff_t data)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	if (fifo_length() >= BUFF_SIZE - 1)
 800017a:	f000 f859 	bl	8000230 <fifo_length>
 800017e:	4603      	mov	r3, r0
 8000180:	2bfe      	cmp	r3, #254	; 0xfe
 8000182:	d901      	bls.n	8000188 <fifo_push+0x18>
		return 1; // too much data!
 8000184:	2301      	movs	r3, #1
 8000186:	e012      	b.n	80001ae <fifo_push+0x3e>
	if (++tail_index == BUFF_SIZE)
 8000188:	4b0b      	ldr	r3, [pc, #44]	; (80001b8 <fifo_push+0x48>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	3301      	adds	r3, #1
 800018e:	4a0a      	ldr	r2, [pc, #40]	; (80001b8 <fifo_push+0x48>)
 8000190:	6013      	str	r3, [r2, #0]
 8000192:	4b09      	ldr	r3, [pc, #36]	; (80001b8 <fifo_push+0x48>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800019a:	d102      	bne.n	80001a2 <fifo_push+0x32>
		tail_index = 0;
 800019c:	4b06      	ldr	r3, [pc, #24]	; (80001b8 <fifo_push+0x48>)
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
	fifo_buffer[tail_index] = data;
 80001a2:	4b05      	ldr	r3, [pc, #20]	; (80001b8 <fifo_push+0x48>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	4905      	ldr	r1, [pc, #20]	; (80001bc <fifo_push+0x4c>)
 80001a8:	79fa      	ldrb	r2, [r7, #7]
 80001aa:	54ca      	strb	r2, [r1, r3]
	return 0;
 80001ac:	2300      	movs	r3, #0
}
 80001ae:	4618      	mov	r0, r3
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	20000214 	.word	0x20000214
 80001bc:	20000504 	.word	0x20000504

080001c0 <fifo_pop>:

buff_t fifo_pop(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
	if (fifo_is_empty())
 80001c4:	f000 f820 	bl	8000208 <fifo_is_empty>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d004      	beq.n	80001d8 <fifo_pop+0x18>
		return fifo_buffer[head_index]; // buffer is empty, return the last value
 80001ce:	4b0c      	ldr	r3, [pc, #48]	; (8000200 <fifo_pop+0x40>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a0c      	ldr	r2, [pc, #48]	; (8000204 <fifo_pop+0x44>)
 80001d4:	5cd3      	ldrb	r3, [r2, r3]
 80001d6:	e010      	b.n	80001fa <fifo_pop+0x3a>
	if (++head_index == BUFF_SIZE)
 80001d8:	4b09      	ldr	r3, [pc, #36]	; (8000200 <fifo_pop+0x40>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	3301      	adds	r3, #1
 80001de:	4a08      	ldr	r2, [pc, #32]	; (8000200 <fifo_pop+0x40>)
 80001e0:	6013      	str	r3, [r2, #0]
 80001e2:	4b07      	ldr	r3, [pc, #28]	; (8000200 <fifo_pop+0x40>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001ea:	d102      	bne.n	80001f2 <fifo_pop+0x32>
		head_index = 0;
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <fifo_pop+0x40>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
	return fifo_buffer[head_index];
 80001f2:	4b03      	ldr	r3, [pc, #12]	; (8000200 <fifo_pop+0x40>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a03      	ldr	r2, [pc, #12]	; (8000204 <fifo_pop+0x44>)
 80001f8:	5cd3      	ldrb	r3, [r2, r3]
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	20000210 	.word	0x20000210
 8000204:	20000504 	.word	0x20000504

08000208 <fifo_is_empty>:

bool fifo_is_empty(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	return head_index == tail_index;
 800020c:	4b06      	ldr	r3, [pc, #24]	; (8000228 <fifo_is_empty+0x20>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <fifo_is_empty+0x24>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	429a      	cmp	r2, r3
 8000216:	bf0c      	ite	eq
 8000218:	2301      	moveq	r3, #1
 800021a:	2300      	movne	r3, #0
 800021c:	b2db      	uxtb	r3, r3
}
 800021e:	4618      	mov	r0, r3
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	20000210 	.word	0x20000210
 800022c:	20000214 	.word	0x20000214

08000230 <fifo_length>:

uint32_t fifo_length(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	if (tail_index >= head_index)
 8000234:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <fifo_length+0x34>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <fifo_length+0x38>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	429a      	cmp	r2, r3
 800023e:	d305      	bcc.n	800024c <fifo_length+0x1c>
		return tail_index - head_index;
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <fifo_length+0x34>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b08      	ldr	r3, [pc, #32]	; (8000268 <fifo_length+0x38>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	1ad3      	subs	r3, r2, r3
 800024a:	e006      	b.n	800025a <fifo_length+0x2a>
	else
		return tail_index + BUFF_SIZE - head_index;
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <fifo_length+0x34>)
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	4b05      	ldr	r3, [pc, #20]	; (8000268 <fifo_length+0x38>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	1ad3      	subs	r3, r2, r3
 8000256:	f503 7380 	add.w	r3, r3, #256	; 0x100
}
 800025a:	4618      	mov	r0, r3
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	20000214 	.word	0x20000214
 8000268:	20000210 	.word	0x20000210

0800026c <active>:

uint32_t last_active_time;
bool active_berserk = false;

void active(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	last_active_time = HAL_GetTick();
 8000270:	f003 fce2 	bl	8003c38 <HAL_GetTick>
 8000274:	4603      	mov	r3, r0
 8000276:	4a02      	ldr	r2, [pc, #8]	; (8000280 <active+0x14>)
 8000278:	6013      	str	r3, [r2, #0]
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	200006b0 	.word	0x200006b0

08000284 <delay_us>:
#define PB1 (HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin))
#define PB2 (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin))

// delays for us count
void delay_us(uint16_t us)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 800028e:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <delay_us+0x30>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2200      	movs	r2, #0
 8000294:	625a      	str	r2, [r3, #36]	; 0x24
	while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000296:	bf00      	nop
 8000298:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <delay_us+0x30>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800029e:	b29b      	uxth	r3, r3
 80002a0:	88fa      	ldrh	r2, [r7, #6]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d8f8      	bhi.n	8000298 <delay_us+0x14>
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	200006d8 	.word	0x200006d8

080002b8 <delay>:

void delay(uint32_t delay)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 80002c0:	6878      	ldr	r0, [r7, #4]
 80002c2:	f003 fcc3 	bl	8003c4c <HAL_Delay>
}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}

080002ce <nrf_init_tx>:

void nrf_init_tx(uint8_t *address)
{
 80002ce:	b580      	push	{r7, lr}
 80002d0:	b082      	sub	sp, #8
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
    nrf24l01p_get_clear_irq_flags();
 80002d6:	f002 fd4b 	bl	8002d70 <nrf24l01p_get_clear_irq_flags>
    nrf24l01p_close_pipe(NRF24L01P_ALL);
 80002da:	20ff      	movs	r0, #255	; 0xff
 80002dc:	f002 fde2 	bl	8002ea4 <nrf24l01p_close_pipe>
    nrf24l01p_open_pipe(NRF24L01P_TX, true);
 80002e0:	2101      	movs	r1, #1
 80002e2:	2006      	movs	r0, #6
 80002e4:	f002 fd87 	bl	8002df6 <nrf24l01p_open_pipe>

    nrf24l01p_set_datarate(NRF24L01P_250KBPS);
 80002e8:	2002      	movs	r0, #2
 80002ea:	f002 fee0 	bl	80030ae <nrf24l01p_set_datarate>

    nrf24l01p_set_auto_retr(NRF_RETRANSMITS, NRF_RETRANSMIT_DELAY);
 80002ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80002f2:	2005      	movs	r0, #5
 80002f4:	f002 fe42 	bl	8002f7c <nrf24l01p_set_auto_retr>
    nrf24l01p_open_pipe(NRF24L01P_PIPE0, true);
 80002f8:	2101      	movs	r1, #1
 80002fa:	2000      	movs	r0, #0
 80002fc:	f002 fd7b 	bl	8002df6 <nrf24l01p_open_pipe>
    nrf24l01p_set_address(NRF24L01P_PIPE0, address);
 8000300:	6879      	ldr	r1, [r7, #4]
 8000302:	2000      	movs	r0, #0
 8000304:	f002 fe10 	bl	8002f28 <nrf24l01p_set_address>

    nrf24l01p_set_crc_mode(NRF24L01P_CRC_16BIT);
 8000308:	2003      	movs	r0, #3
 800030a:	f002 fd59 	bl	8002dc0 <nrf24l01p_set_crc_mode>
    nrf24l01p_set_address_width(NRF24L01P_AW_5BYTES);
 800030e:	2005      	movs	r0, #5
 8000310:	f002 fe54 	bl	8002fbc <nrf24l01p_set_address_width>
    nrf24l01p_set_address(NRF24L01P_TX, address);
 8000314:	6879      	ldr	r1, [r7, #4]
 8000316:	2006      	movs	r0, #6
 8000318:	f002 fe06 	bl	8002f28 <nrf24l01p_set_address>
    nrf24l01p_set_operation_mode(NRF24L01P_PTX);
 800031c:	2000      	movs	r0, #0
 800031e:	f002 fe7b 	bl	8003018 <nrf24l01p_set_operation_mode>
    nrf24l01p_set_rf_channel(NRF_CHANNEL);
 8000322:	206f      	movs	r0, #111	; 0x6f
 8000324:	f002 feb5 	bl	8003092 <nrf24l01p_set_rf_channel>

    nrf24l01p_set_power_mode(NRF24L01P_PWR_UP);
 8000328:	2001      	movs	r0, #1
 800032a:	f002 fe94 	bl	8003056 <nrf24l01p_set_power_mode>
    delay(NRF_POWER_UP_DELAY);
 800032e:	2002      	movs	r0, #2
 8000330:	f7ff ffc2 	bl	80002b8 <delay>
}
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <nrf_init_rx>:

void nrf_init_rx(uint8_t *address)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
    nrf24l01p_get_clear_irq_flags();
 8000344:	f002 fd14 	bl	8002d70 <nrf24l01p_get_clear_irq_flags>
    nrf24l01p_close_pipe(NRF24L01P_ALL);
 8000348:	20ff      	movs	r0, #255	; 0xff
 800034a:	f002 fdab 	bl	8002ea4 <nrf24l01p_close_pipe>
    nrf24l01p_open_pipe(NRF24L01P_PIPE0, true);
 800034e:	2101      	movs	r1, #1
 8000350:	2000      	movs	r0, #0
 8000352:	f002 fd50 	bl	8002df6 <nrf24l01p_open_pipe>

    nrf24l01p_set_datarate(NRF24L01P_250KBPS);
 8000356:	2002      	movs	r0, #2
 8000358:	f002 fea9 	bl	80030ae <nrf24l01p_set_datarate>

    nrf24l01p_set_crc_mode(NRF24L01P_CRC_16BIT);
 800035c:	2003      	movs	r0, #3
 800035e:	f002 fd2f 	bl	8002dc0 <nrf24l01p_set_crc_mode>
    nrf24l01p_set_address_width(NRF24L01P_AW_5BYTES);
 8000362:	2005      	movs	r0, #5
 8000364:	f002 fe2a 	bl	8002fbc <nrf24l01p_set_address_width>
    nrf24l01p_set_address(NRF24L01P_PIPE0, address);
 8000368:	6879      	ldr	r1, [r7, #4]
 800036a:	2000      	movs	r0, #0
 800036c:	f002 fddc 	bl	8002f28 <nrf24l01p_set_address>
    nrf24l01p_set_operation_mode(NRF24L01P_PRX);
 8000370:	2001      	movs	r0, #1
 8000372:	f002 fe51 	bl	8003018 <nrf24l01p_set_operation_mode>
    nrf24l01p_set_rx_payload_width(NRF24L01P_PIPE0, NRF_PAYLOAD_LENGTH);
 8000376:	2120      	movs	r1, #32
 8000378:	2000      	movs	r0, #0
 800037a:	f002 fe2f 	bl	8002fdc <nrf24l01p_set_rx_payload_width>
    nrf24l01p_set_rf_channel(NRF_CHANNEL);
 800037e:	206f      	movs	r0, #111	; 0x6f
 8000380:	f002 fe87 	bl	8003092 <nrf24l01p_set_rf_channel>

    nrf24l01p_set_power_mode(NRF24L01P_PWR_UP);
 8000384:	2001      	movs	r0, #1
 8000386:	f002 fe66 	bl	8003056 <nrf24l01p_set_power_mode>
    delay(NRF_POWER_UP_DELAY);
 800038a:	2002      	movs	r0, #2
 800038c:	f7ff ff94 	bl	80002b8 <delay>
}
 8000390:	bf00      	nop
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}

08000398 <nrf24l01p_spi_ss>:

void nrf24l01p_spi_ss(nrf24l01p_spi_ss_level_t level)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	71fb      	strb	r3, [r7, #7]
	// we will transmit data to nRF, MSB FIRST
	if (!level)
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d107      	bne.n	80003b8 <nrf24l01p_spi_ss+0x20>
		hspi2.Instance->CR1 &= ~(SPI_CR1_LSBFIRST);
 80003a8:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <nrf24l01p_spi_ss+0x4c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <nrf24l01p_spi_ss+0x4c>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80003b6:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(SPI2_nRF_CSn_GPIO_Port, SPI2_nRF_CSn_Pin, level);
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	461a      	mov	r2, r3
 80003bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003c0:	4809      	ldr	r0, [pc, #36]	; (80003e8 <nrf24l01p_spi_ss+0x50>)
 80003c2:	f003 ff10 	bl	80041e6 <HAL_GPIO_WritePin>
	// we will transmit data to VFD, LSB FIRST
	if (level)
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d007      	beq.n	80003dc <nrf24l01p_spi_ss+0x44>
		hspi2.Instance->CR1 |= SPI_CR1_LSBFIRST;
 80003cc:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <nrf24l01p_spi_ss+0x4c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <nrf24l01p_spi_ss+0x4c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80003da:	601a      	str	r2, [r3, #0]
}
 80003dc:	bf00      	nop
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000604 	.word	0x20000604
 80003e8:	40010c00 	.word	0x40010c00

080003ec <nrf24l01p_spi_rw>:

uint8_t nrf24l01p_spi_rw(uint8_t value)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b086      	sub	sp, #24
 80003f0:	af02      	add	r7, sp, #8
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	HAL_SPI_TransmitReceive(&hspi2, &value, &data, 1, 100);
 80003f6:	f107 020f 	add.w	r2, r7, #15
 80003fa:	1df9      	adds	r1, r7, #7
 80003fc:	2364      	movs	r3, #100	; 0x64
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	2301      	movs	r3, #1
 8000402:	4804      	ldr	r0, [pc, #16]	; (8000414 <nrf24l01p_spi_rw+0x28>)
 8000404:	f007 fa64 	bl	80078d0 <HAL_SPI_TransmitReceive>
	return data;
 8000408:	7bfb      	ldrb	r3, [r7, #15]
}
 800040a:	4618      	mov	r0, r3
 800040c:	3710      	adds	r7, #16
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000604 	.word	0x20000604

08000418 <vfd_spi_cs>:


void vfd_spi_cs(vfd_cs_t cs)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, cs);
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	461a      	mov	r2, r3
 8000426:	f44f 7180 	mov.w	r1, #256	; 0x100
 800042a:	4803      	ldr	r0, [pc, #12]	; (8000438 <vfd_spi_cs+0x20>)
 800042c:	f003 fedb 	bl	80041e6 <HAL_GPIO_WritePin>
}
 8000430:	bf00      	nop
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	40010c00 	.word	0x40010c00

0800043c <vfd_spi_tx>:

void vfd_spi_tx(uint8_t *pData, uint16_t Size)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi2, pData, Size, 100);
 8000448:	887a      	ldrh	r2, [r7, #2]
 800044a:	2364      	movs	r3, #100	; 0x64
 800044c:	6879      	ldr	r1, [r7, #4]
 800044e:	4803      	ldr	r0, [pc, #12]	; (800045c <vfd_spi_tx+0x20>)
 8000450:	f007 f902 	bl	8007658 <HAL_SPI_Transmit>
}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000604 	.word	0x20000604

08000460 <do_vfd_init>:

void do_vfd_init(void)
{
 8000460:	b5b0      	push	{r4, r5, r7, lr}
 8000462:	b090      	sub	sp, #64	; 0x40
 8000464:	af00      	add	r7, sp, #0
#define FULL_DEMO (0)
	vfd_spi_cs(VFD_CS_HIGH);
 8000466:	2001      	movs	r0, #1
 8000468:	f7ff ffd6 	bl	8000418 <vfd_spi_cs>
	HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 800046c:	2201      	movs	r2, #1
 800046e:	2120      	movs	r1, #32
 8000470:	4853      	ldr	r0, [pc, #332]	; (80005c0 <do_vfd_init+0x160>)
 8000472:	f003 feb8 	bl	80041e6 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000476:	200a      	movs	r0, #10
 8000478:	f003 fbe8 	bl	8003c4c <HAL_Delay>

	vfd_init(); // init display, 11 digits 17 segments
 800047c:	f003 fb20 	bl	8003ac0 <vfd_init>
	vfd_leds(0); // disable leds
 8000480:	2000      	movs	r0, #0
 8000482:	f003 faf9 	bl	8003a78 <vfd_leds>

	for (int i = 0; i < sizeof(vfd.arr1); i++) {
 8000486:	2300      	movs	r3, #0
 8000488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800048a:	e007      	b.n	800049c <do_vfd_init+0x3c>
		vfd.arr1[i] = 0xFF;
 800048c:	4a4d      	ldr	r2, [pc, #308]	; (80005c4 <do_vfd_init+0x164>)
 800048e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000490:	4413      	add	r3, r2
 8000492:	22ff      	movs	r2, #255	; 0xff
 8000494:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(vfd.arr1); i++) {
 8000496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000498:	3301      	adds	r3, #1
 800049a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800049c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800049e:	2b20      	cmp	r3, #32
 80004a0:	d9f4      	bls.n	800048c <do_vfd_init+0x2c>
	}

	vfd_update();
 80004a2:	f003 fac1 	bl	8003a28 <vfd_update>
	vfd_control(true, 0b111);
 80004a6:	2107      	movs	r1, #7
 80004a8:	2001      	movs	r0, #1
 80004aa:	f003 fb1d 	bl	8003ae8 <vfd_control>
		HAL_Delay(500);
		do_microrl();
	}

	//erase everything... just in case
	vfd_clear_buf();
 80004ae:	f003 faa1 	bl	80039f4 <vfd_clear_buf>

	// fill everything
	for (int j = 1; j < 15; j++) {
 80004b2:	2301      	movs	r3, #1
 80004b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80004b6:	e03b      	b.n	8000530 <do_vfd_init+0xd0>
		uint32_t temp = 1 << j;
 80004b8:	2201      	movs	r2, #1
 80004ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80004bc:	fa02 f303 	lsl.w	r3, r2, r3
 80004c0:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i = 1; i < 11; i++) {
 80004c2:	2301      	movs	r3, #1
 80004c4:	637b      	str	r3, [r7, #52]	; 0x34
 80004c6:	e026      	b.n	8000516 <do_vfd_init+0xb6>
			for (int b = 0; b < 3; b++) {
 80004c8:	2300      	movs	r3, #0
 80004ca:	633b      	str	r3, [r7, #48]	; 0x30
 80004cc:	e01d      	b.n	800050a <do_vfd_init+0xaa>
				vfd.arr2[i][b] |= (temp >> (b << 3)) & 0xFF;
 80004ce:	493d      	ldr	r1, [pc, #244]	; (80005c4 <do_vfd_init+0x164>)
 80004d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80004d2:	4613      	mov	r3, r2
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	4413      	add	r3, r2
 80004d8:	18ca      	adds	r2, r1, r3
 80004da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004dc:	4413      	add	r3, r2
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004e2:	00db      	lsls	r3, r3, #3
 80004e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80004e6:	fa21 f303 	lsr.w	r3, r1, r3
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	4313      	orrs	r3, r2
 80004ee:	b2d8      	uxtb	r0, r3
 80004f0:	4934      	ldr	r1, [pc, #208]	; (80005c4 <do_vfd_init+0x164>)
 80004f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80004f4:	4613      	mov	r3, r2
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	4413      	add	r3, r2
 80004fa:	18ca      	adds	r2, r1, r3
 80004fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004fe:	4413      	add	r3, r2
 8000500:	4602      	mov	r2, r0
 8000502:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++) {
 8000504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000506:	3301      	adds	r3, #1
 8000508:	633b      	str	r3, [r7, #48]	; 0x30
 800050a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800050c:	2b02      	cmp	r3, #2
 800050e:	ddde      	ble.n	80004ce <do_vfd_init+0x6e>
		for (int i = 1; i < 11; i++) {
 8000510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000512:	3301      	adds	r3, #1
 8000514:	637b      	str	r3, [r7, #52]	; 0x34
 8000516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000518:	2b0a      	cmp	r3, #10
 800051a:	ddd5      	ble.n	80004c8 <do_vfd_init+0x68>
			}
		}
		vfd_update();
 800051c:	f003 fa84 	bl	8003a28 <vfd_update>
		HAL_Delay(100);
 8000520:	2064      	movs	r0, #100	; 0x64
 8000522:	f003 fb93 	bl	8003c4c <HAL_Delay>
		do_microrl();
 8000526:	f000 fbb5 	bl	8000c94 <do_microrl>
	for (int j = 1; j < 15; j++) {
 800052a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800052c:	3301      	adds	r3, #1
 800052e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000532:	2b0e      	cmp	r3, #14
 8000534:	ddc0      	ble.n	80004b8 <do_vfd_init+0x58>
	}

	const uint32_t arr[] = {
 8000536:	4b24      	ldr	r3, [pc, #144]	; (80005c8 <do_vfd_init+0x168>)
 8000538:	1d3c      	adds	r4, r7, #4
 800053a:	461d      	mov	r5, r3
 800053c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000540:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000544:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			VFD_SYM_BRACKET_LEFT,
			VFD_SYM_SMALL_ARROW_RIGHT,
			VFD_SYM_DCC,
	};

	for (int j = 0; j < sizeof(arr)/sizeof(arr[0]); j++) {
 8000548:	2300      	movs	r3, #0
 800054a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800054c:	e013      	b.n	8000576 <do_vfd_init+0x116>
		vfd_set_symbols(arr[j]);
 800054e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000556:	4413      	add	r3, r2
 8000558:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800055c:	4618      	mov	r0, r3
 800055e:	f003 f997 	bl	8003890 <vfd_set_symbols>
		vfd_update();
 8000562:	f003 fa61 	bl	8003a28 <vfd_update>
		HAL_Delay(50);
 8000566:	2032      	movs	r0, #50	; 0x32
 8000568:	f003 fb70 	bl	8003c4c <HAL_Delay>
		do_microrl();
 800056c:	f000 fb92 	bl	8000c94 <do_microrl>
	for (int j = 0; j < sizeof(arr)/sizeof(arr[0]); j++) {
 8000570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000572:	3301      	adds	r3, #1
 8000574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000578:	2b07      	cmp	r3, #7
 800057a:	d9e8      	bls.n	800054e <do_vfd_init+0xee>
	}

	for (int j = 0; j < 17; j++) {
 800057c:	2300      	movs	r3, #0
 800057e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000580:	e010      	b.n	80005a4 <do_vfd_init+0x144>
		vfd_set_symbols(1<<j);
 8000582:	2201      	movs	r2, #1
 8000584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000586:	fa02 f303 	lsl.w	r3, r2, r3
 800058a:	4618      	mov	r0, r3
 800058c:	f003 f980 	bl	8003890 <vfd_set_symbols>
		vfd_update();
 8000590:	f003 fa4a 	bl	8003a28 <vfd_update>
		HAL_Delay(50);
 8000594:	2032      	movs	r0, #50	; 0x32
 8000596:	f003 fb59 	bl	8003c4c <HAL_Delay>
		do_microrl();
 800059a:	f000 fb7b 	bl	8000c94 <do_microrl>
	for (int j = 0; j < 17; j++) {
 800059e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005a0:	3301      	adds	r3, #1
 80005a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80005a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005a6:	2b10      	cmp	r3, #16
 80005a8:	ddeb      	ble.n	8000582 <do_vfd_init+0x122>
	}

	vfd_clear_buf();
 80005aa:	f003 fa23 	bl	80039f4 <vfd_clear_buf>
	HAL_Delay(500);
 80005ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b2:	f003 fb4b 	bl	8003c4c <HAL_Delay>
}
 80005b6:	bf00      	nop
 80005b8:	3740      	adds	r7, #64	; 0x40
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bdb0      	pop	{r4, r5, r7, pc}
 80005be:	bf00      	nop
 80005c0:	40010c00 	.word	0x40010c00
 80005c4:	200006b4 	.word	0x200006b4
 80005c8:	0800d160 	.word	0x0800d160

080005cc <do_led>:

void do_led(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 500)
 80005d0:	f003 fb32 	bl	8003c38 <HAL_GetTick>
 80005d4:	4602      	mov	r2, r0
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <do_led+0x30>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005e0:	d30a      	bcc.n	80005f8 <do_led+0x2c>
		return;
	last_time = HAL_GetTick();
 80005e2:	f003 fb29 	bl	8003c38 <HAL_GetTick>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <do_led+0x30>)
 80005ea:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <do_led+0x34>)
 80005f2:	f003 fe10 	bl	8004216 <HAL_GPIO_TogglePin>
 80005f6:	e000      	b.n	80005fa <do_led+0x2e>
		return;
 80005f8:	bf00      	nop
}
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	2000021c 	.word	0x2000021c
 8000600:	40011000 	.word	0x40011000

08000604 <read.9168>:

void do_fram_test(void)
{
	bool read(void)
	{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af04      	add	r7, sp, #16
 800060a:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t temp;
		HAL_I2C_Mem_Read(&hi2c1, 0b10100000, 0x42, 1, &temp, 1, 10);
 800060e:	230a      	movs	r3, #10
 8000610:	9302      	str	r3, [sp, #8]
 8000612:	2301      	movs	r3, #1
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	f107 030f 	add.w	r3, r7, #15
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2301      	movs	r3, #1
 800061e:	2242      	movs	r2, #66	; 0x42
 8000620:	21a0      	movs	r1, #160	; 0xa0
 8000622:	480f      	ldr	r0, [pc, #60]	; (8000660 <read.9168+0x5c>)
 8000624:	f004 f84e 	bl	80046c4 <HAL_I2C_Mem_Read>
		if (temp != 0x42)
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	2b42      	cmp	r3, #66	; 0x42
 800062c:	d001      	beq.n	8000632 <read.9168+0x2e>
			return false;
 800062e:	2300      	movs	r3, #0
 8000630:	e012      	b.n	8000658 <read.9168+0x54>
		HAL_I2C_Mem_Read(&hi2c1, 0b10100010, 0x5A, 1, &temp, 1, 10);
 8000632:	230a      	movs	r3, #10
 8000634:	9302      	str	r3, [sp, #8]
 8000636:	2301      	movs	r3, #1
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	f107 030f 	add.w	r3, r7, #15
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2301      	movs	r3, #1
 8000642:	225a      	movs	r2, #90	; 0x5a
 8000644:	21a2      	movs	r1, #162	; 0xa2
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <read.9168+0x5c>)
 8000648:	f004 f83c 	bl	80046c4 <HAL_I2C_Mem_Read>
		if (temp != 0xA5)
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	2ba5      	cmp	r3, #165	; 0xa5
 8000650:	d001      	beq.n	8000656 <read.9168+0x52>
			return false;
 8000652:	2300      	movs	r3, #0
 8000654:	e000      	b.n	8000658 <read.9168+0x54>
		return true;
 8000656:	2301      	movs	r3, #1
	}
 8000658:	4618      	mov	r0, r3
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	2000065c 	.word	0x2000065c

08000664 <do_fram_test>:
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0c6      	sub	sp, #280	; 0x118
 8000668:	af04      	add	r7, sp, #16
void do_fram_test(void)
 800066a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800066e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		HAL_I2C_Mem_Write(&hi2c1, 0b10100000, 0x42, 1, &temp, 1, 10);
		temp = 0xA5;
		HAL_I2C_Mem_Write(&hi2c1, 0b10100010, 0x5A, 1, &temp, 1, 10);
	}
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 200)
 8000672:	f003 fae1 	bl	8003c38 <HAL_GetTick>
 8000676:	4602      	mov	r2, r0
 8000678:	4b63      	ldr	r3, [pc, #396]	; (8000808 <do_fram_test+0x1a4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	2bc7      	cmp	r3, #199	; 0xc7
 8000680:	f240 80bd 	bls.w	80007fe <do_fram_test+0x19a>
		return;
	if (PB1 && PB2)
 8000684:	2102      	movs	r1, #2
 8000686:	4861      	ldr	r0, [pc, #388]	; (800080c <do_fram_test+0x1a8>)
 8000688:	f003 fd96 	bl	80041b8 <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	f000 80af 	beq.w	80007f2 <do_fram_test+0x18e>
 8000694:	2104      	movs	r1, #4
 8000696:	485d      	ldr	r0, [pc, #372]	; (800080c <do_fram_test+0x1a8>)
 8000698:	f003 fd8e 	bl	80041b8 <HAL_GPIO_ReadPin>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	f000 80a7 	beq.w	80007f2 <do_fram_test+0x18e>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0); // turn led on
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	4859      	ldr	r0, [pc, #356]	; (8000810 <do_fram_test+0x1ac>)
 80006ac:	f003 fd9b 	bl	80041e6 <HAL_GPIO_WritePin>
		vfd_put_string("FRAM TEST");
 80006b0:	4858      	ldr	r0, [pc, #352]	; (8000814 <do_fram_test+0x1b0>)
 80006b2:	f003 f867 	bl	8003784 <vfd_put_string>
		vfd_update();
 80006b6:	f003 f9b7 	bl	8003a28 <vfd_update>
		for (int i = 0; i < 3; i++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80006c0:	e012      	b.n	80006e8 <do_fram_test+0x84>
		{
			vfd_leds(~(1<<i));
 80006c2:	2201      	movs	r2, #1
 80006c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80006c8:	fa02 f303 	lsl.w	r3, r2, r3
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	43db      	mvns	r3, r3
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 f9d0 	bl	8003a78 <vfd_leds>
			HAL_Delay(250);
 80006d8:	20fa      	movs	r0, #250	; 0xfa
 80006da:	f003 fab7 	bl	8003c4c <HAL_Delay>
		for (int i = 0; i < 3; i++)
 80006de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80006e2:	3301      	adds	r3, #1
 80006e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80006e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80006ec:	2b02      	cmp	r3, #2
 80006ee:	dde8      	ble.n	80006c2 <do_fram_test+0x5e>
		}
		vfd_leds(0b1111);
 80006f0:	200f      	movs	r0, #15
 80006f2:	f003 f9c1 	bl	8003a78 <vfd_leds>
		HAL_Delay(500);
 80006f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006fa:	f003 faa7 	bl	8003c4c <HAL_Delay>
		if (read())
 80006fe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000702:	469c      	mov	ip, r3
 8000704:	f7ff ff7e 	bl	8000604 <read.9168>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d008      	beq.n	8000720 <do_fram_test+0xbc>
		{
			vfd_leds(0b0100);
 800070e:	2004      	movs	r0, #4
 8000710:	f003 f9b2 	bl	8003a78 <vfd_leds>
			vfd_put_string("FRAM FOUND");
 8000714:	4840      	ldr	r0, [pc, #256]	; (8000818 <do_fram_test+0x1b4>)
 8000716:	f003 f835 	bl	8003784 <vfd_put_string>
			vfd_update();
 800071a:	f003 f985 	bl	8003a28 <vfd_update>
 800071e:	e024      	b.n	800076a <do_fram_test+0x106>
		}
		else
		{
			vfd_leds(0b0001);
 8000720:	2001      	movs	r0, #1
 8000722:	f003 f9a9 	bl	8003a78 <vfd_leds>
			write();
 8000726:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800072a:	469c      	mov	ip, r3
 800072c:	f000 f87c 	bl	8000828 <write.9172>
			HAL_Delay(500);
 8000730:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000734:	f003 fa8a 	bl	8003c4c <HAL_Delay>
			if (read())
 8000738:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800073c:	469c      	mov	ip, r3
 800073e:	f7ff ff61 	bl	8000604 <read.9168>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d008      	beq.n	800075a <do_fram_test+0xf6>
			{
				vfd_leds(0b0011);
 8000748:	2003      	movs	r0, #3
 800074a:	f003 f995 	bl	8003a78 <vfd_leds>
				vfd_put_string("FRAM OKAY");
 800074e:	4833      	ldr	r0, [pc, #204]	; (800081c <do_fram_test+0x1b8>)
 8000750:	f003 f818 	bl	8003784 <vfd_put_string>
				vfd_update();
 8000754:	f003 f968 	bl	8003a28 <vfd_update>
 8000758:	e007      	b.n	800076a <do_fram_test+0x106>
			}
			else
			{
				vfd_leds(0b1000);
 800075a:	2008      	movs	r0, #8
 800075c:	f003 f98c 	bl	8003a78 <vfd_leds>
				vfd_put_string("NO FRAM!");
 8000760:	482f      	ldr	r0, [pc, #188]	; (8000820 <do_fram_test+0x1bc>)
 8000762:	f003 f80f 	bl	8003784 <vfd_put_string>
				vfd_update();
 8000766:	f003 f95f 	bl	8003a28 <vfd_update>
			}
		}

		while(PB1);
 800076a:	bf00      	nop
 800076c:	2102      	movs	r1, #2
 800076e:	4827      	ldr	r0, [pc, #156]	; (800080c <do_fram_test+0x1a8>)
 8000770:	f003 fd22 	bl	80041b8 <HAL_GPIO_ReadPin>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1f8      	bne.n	800076c <do_fram_test+0x108>
		if (PB2)
 800077a:	2104      	movs	r1, #4
 800077c:	4823      	ldr	r0, [pc, #140]	; (800080c <do_fram_test+0x1a8>)
 800077e:	f003 fd1b 	bl	80041b8 <HAL_GPIO_ReadPin>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d034      	beq.n	80007f2 <do_fram_test+0x18e>
		{
			// PB2 still pressed, erase RAM
			vfd_leds(0b1001);
 8000788:	2009      	movs	r0, #9
 800078a:	f003 f975 	bl	8003a78 <vfd_leds>
			uint8_t zero[256] = {0};
 800078e:	463b      	mov	r3, r7
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	3304      	adds	r3, #4
 8000796:	22fc      	movs	r2, #252	; 0xfc
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f00c f890 	bl	800c8c0 <memset>
			//first half
			HAL_I2C_Mem_Write(&hi2c1, 0b10100000, 0, 1, zero, sizeof(zero), 200);
 80007a0:	23c8      	movs	r3, #200	; 0xc8
 80007a2:	9302      	str	r3, [sp, #8]
 80007a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	463b      	mov	r3, r7
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2301      	movs	r3, #1
 80007b0:	2200      	movs	r2, #0
 80007b2:	21a0      	movs	r1, #160	; 0xa0
 80007b4:	481b      	ldr	r0, [pc, #108]	; (8000824 <do_fram_test+0x1c0>)
 80007b6:	f003 fe8b 	bl	80044d0 <HAL_I2C_Mem_Write>
			//second half
			HAL_I2C_Mem_Write(&hi2c1, 0b10100010, 0, 1, zero, sizeof(zero), 200);
 80007ba:	23c8      	movs	r3, #200	; 0xc8
 80007bc:	9302      	str	r3, [sp, #8]
 80007be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c2:	9301      	str	r3, [sp, #4]
 80007c4:	463b      	mov	r3, r7
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	2301      	movs	r3, #1
 80007ca:	2200      	movs	r2, #0
 80007cc:	21a2      	movs	r1, #162	; 0xa2
 80007ce:	4815      	ldr	r0, [pc, #84]	; (8000824 <do_fram_test+0x1c0>)
 80007d0:	f003 fe7e 	bl	80044d0 <HAL_I2C_Mem_Write>
			HAL_Delay(500);
 80007d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007d8:	f003 fa38 	bl	8003c4c <HAL_Delay>
			vfd_leds(0b1010);
 80007dc:	200a      	movs	r0, #10
 80007de:	f003 f94b 	bl	8003a78 <vfd_leds>
			while (PB2);
 80007e2:	bf00      	nop
 80007e4:	2104      	movs	r1, #4
 80007e6:	4809      	ldr	r0, [pc, #36]	; (800080c <do_fram_test+0x1a8>)
 80007e8:	f003 fce6 	bl	80041b8 <HAL_GPIO_ReadPin>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d1f8      	bne.n	80007e4 <do_fram_test+0x180>
		}
	}
	last_time = HAL_GetTick();
 80007f2:	f003 fa21 	bl	8003c38 <HAL_GetTick>
 80007f6:	4603      	mov	r3, r0
 80007f8:	4a03      	ldr	r2, [pc, #12]	; (8000808 <do_fram_test+0x1a4>)
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	e000      	b.n	8000800 <do_fram_test+0x19c>
		return;
 80007fe:	bf00      	nop
}
 8000800:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000220 	.word	0x20000220
 800080c:	40010c00 	.word	0x40010c00
 8000810:	40011000 	.word	0x40011000
 8000814:	0800d180 	.word	0x0800d180
 8000818:	0800d18c 	.word	0x0800d18c
 800081c:	0800d198 	.word	0x0800d198
 8000820:	0800d1a4 	.word	0x0800d1a4
 8000824:	2000065c 	.word	0x2000065c

08000828 <write.9172>:
	{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af04      	add	r7, sp, #16
 800082e:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t temp = 0x42;
 8000832:	2342      	movs	r3, #66	; 0x42
 8000834:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, 0b10100000, 0x42, 1, &temp, 1, 10);
 8000836:	230a      	movs	r3, #10
 8000838:	9302      	str	r3, [sp, #8]
 800083a:	2301      	movs	r3, #1
 800083c:	9301      	str	r3, [sp, #4]
 800083e:	f107 030f 	add.w	r3, r7, #15
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2301      	movs	r3, #1
 8000846:	2242      	movs	r2, #66	; 0x42
 8000848:	21a0      	movs	r1, #160	; 0xa0
 800084a:	480b      	ldr	r0, [pc, #44]	; (8000878 <write.9172+0x50>)
 800084c:	f003 fe40 	bl	80044d0 <HAL_I2C_Mem_Write>
		temp = 0xA5;
 8000850:	23a5      	movs	r3, #165	; 0xa5
 8000852:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, 0b10100010, 0x5A, 1, &temp, 1, 10);
 8000854:	230a      	movs	r3, #10
 8000856:	9302      	str	r3, [sp, #8]
 8000858:	2301      	movs	r3, #1
 800085a:	9301      	str	r3, [sp, #4]
 800085c:	f107 030f 	add.w	r3, r7, #15
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2301      	movs	r3, #1
 8000864:	225a      	movs	r2, #90	; 0x5a
 8000866:	21a2      	movs	r1, #162	; 0xa2
 8000868:	4803      	ldr	r0, [pc, #12]	; (8000878 <write.9172+0x50>)
 800086a:	f003 fe31 	bl	80044d0 <HAL_I2C_Mem_Write>
	}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2000065c 	.word	0x2000065c

0800087c <do_buttons_and_nrf>:

#define BIT(index) ((uint8_t)1 << (uint8_t)(index))
#define BIT_COND(data,index,condition) (((uint8_t)(data) & ~BIT(index)) | ((condition) ? BIT(index) : (uint8_t)0))
bool do_buttons_and_nrf(void)
{
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b097      	sub	sp, #92	; 0x5c
 8000880:	af02      	add	r7, sp, #8
	static bool set_rx = true;
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < (set_rx?290:270))
 8000882:	f003 f9d9 	bl	8003c38 <HAL_GetTick>
 8000886:	4602      	mov	r2, r0
 8000888:	4bc0      	ldr	r3, [pc, #768]	; (8000b8c <do_buttons_and_nrf+0x310>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	4ac0      	ldr	r2, [pc, #768]	; (8000b90 <do_buttons_and_nrf+0x314>)
 8000890:	7812      	ldrb	r2, [r2, #0]
 8000892:	2a00      	cmp	r2, #0
 8000894:	d002      	beq.n	800089c <do_buttons_and_nrf+0x20>
 8000896:	f44f 7291 	mov.w	r2, #290	; 0x122
 800089a:	e001      	b.n	80008a0 <do_buttons_and_nrf+0x24>
 800089c:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d901      	bls.n	80008a8 <do_buttons_and_nrf+0x2c>
		return false;
 80008a4:	2300      	movs	r3, #0
 80008a6:	e1e2      	b.n	8000c6e <do_buttons_and_nrf+0x3f2>
	last_time = HAL_GetTick();
 80008a8:	f003 f9c6 	bl	8003c38 <HAL_GetTick>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4ab7      	ldr	r2, [pc, #732]	; (8000b8c <do_buttons_and_nrf+0x310>)
 80008b0:	6013      	str	r3, [r2, #0]

	static uint32_t good = 0, total = 0;

	if (PB1 ^ PB2)
 80008b2:	2102      	movs	r1, #2
 80008b4:	48b7      	ldr	r0, [pc, #732]	; (8000b94 <do_buttons_and_nrf+0x318>)
 80008b6:	f003 fc7f 	bl	80041b8 <HAL_GPIO_ReadPin>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461c      	mov	r4, r3
 80008be:	2104      	movs	r1, #4
 80008c0:	48b4      	ldr	r0, [pc, #720]	; (8000b94 <do_buttons_and_nrf+0x318>)
 80008c2:	f003 fc79 	bl	80041b8 <HAL_GPIO_ReadPin>
 80008c6:	4603      	mov	r3, r0
 80008c8:	429c      	cmp	r4, r3
 80008ca:	f000 8182 	beq.w	8000bd2 <do_buttons_and_nrf+0x356>
	{
		// we need to transmit
		set_rx = true;
 80008ce:	4bb0      	ldr	r3, [pc, #704]	; (8000b90 <do_buttons_and_nrf+0x314>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2101      	movs	r1, #1
 80008d8:	48ae      	ldr	r0, [pc, #696]	; (8000b94 <do_buttons_and_nrf+0x318>)
 80008da:	f003 fc84 	bl	80041e6 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80008de:	200a      	movs	r0, #10
 80008e0:	f003 f9b4 	bl	8003c4c <HAL_Delay>
		nrf_init_tx(address);
 80008e4:	48ac      	ldr	r0, [pc, #688]	; (8000b98 <do_buttons_and_nrf+0x31c>)
 80008e6:	f7ff fcf2 	bl	80002ce <nrf_init_tx>

		static uint8_t payload[NRF_PAYLOAD_LENGTH];
		memset(payload, 0x44, sizeof(payload));
 80008ea:	2220      	movs	r2, #32
 80008ec:	2144      	movs	r1, #68	; 0x44
 80008ee:	48ab      	ldr	r0, [pc, #684]	; (8000b9c <do_buttons_and_nrf+0x320>)
 80008f0:	f00b ffe6 	bl	800c8c0 <memset>
		if (PB1)
 80008f4:	2102      	movs	r1, #2
 80008f6:	48a7      	ldr	r0, [pc, #668]	; (8000b94 <do_buttons_and_nrf+0x318>)
 80008f8:	f003 fc5e 	bl	80041b8 <HAL_GPIO_ReadPin>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <do_buttons_and_nrf+0x8e>
			payload[0] = 1;
 8000902:	4ba6      	ldr	r3, [pc, #664]	; (8000b9c <do_buttons_and_nrf+0x320>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	e00c      	b.n	8000924 <do_buttons_and_nrf+0xa8>
		else if (PB2)
 800090a:	2104      	movs	r1, #4
 800090c:	48a1      	ldr	r0, [pc, #644]	; (8000b94 <do_buttons_and_nrf+0x318>)
 800090e:	f003 fc53 	bl	80041b8 <HAL_GPIO_ReadPin>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d003      	beq.n	8000920 <do_buttons_and_nrf+0xa4>
			payload[0] = 2;
 8000918:	4ba0      	ldr	r3, [pc, #640]	; (8000b9c <do_buttons_and_nrf+0x320>)
 800091a:	2202      	movs	r2, #2
 800091c:	701a      	strb	r2, [r3, #0]
 800091e:	e001      	b.n	8000924 <do_buttons_and_nrf+0xa8>
		else
			return false;
 8000920:	2300      	movs	r3, #0
 8000922:	e1a4      	b.n	8000c6e <do_buttons_and_nrf+0x3f2>
		nrf24l01p_write_tx_payload(payload, sizeof(payload));
 8000924:	2120      	movs	r1, #32
 8000926:	489d      	ldr	r0, [pc, #628]	; (8000b9c <do_buttons_and_nrf+0x320>)
 8000928:	f002 fc14 	bl	8003154 <nrf24l01p_write_tx_payload>

		HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 1);
 800092c:	2201      	movs	r2, #1
 800092e:	2101      	movs	r1, #1
 8000930:	4898      	ldr	r0, [pc, #608]	; (8000b94 <do_buttons_and_nrf+0x318>)
 8000932:	f003 fc58 	bl	80041e6 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000936:	2001      	movs	r0, #1
 8000938:	f003 f988 	bl	8003c4c <HAL_Delay>
		HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2101      	movs	r1, #1
 8000940:	4894      	ldr	r0, [pc, #592]	; (8000b94 <do_buttons_and_nrf+0x318>)
 8000942:	f003 fc50 	bl	80041e6 <HAL_GPIO_WritePin>

		if (payload[0] == 1)
 8000946:	4b95      	ldr	r3, [pc, #596]	; (8000b9c <do_buttons_and_nrf+0x320>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d103      	bne.n	8000956 <do_buttons_and_nrf+0xda>
		{
			vfd_leds(0b0001);
 800094e:	2001      	movs	r0, #1
 8000950:	f003 f892 	bl	8003a78 <vfd_leds>
 8000954:	e002      	b.n	800095c <do_buttons_and_nrf+0xe0>
		}
		else
		{
			vfd_leds(0b0010);
 8000956:	2002      	movs	r0, #2
 8000958:	f003 f88e 	bl	8003a78 <vfd_leds>
		}
		vfd_update();
 800095c:	f003 f864 	bl	8003a28 <vfd_update>

		uint32_t timeout_cnt = HAL_GetTick();
 8000960:	f003 f96a 	bl	8003c38 <HAL_GetTick>
 8000964:	64f8      	str	r0, [r7, #76]	; 0x4c

		total++;
 8000966:	4b8e      	ldr	r3, [pc, #568]	; (8000ba0 <do_buttons_and_nrf+0x324>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	3301      	adds	r3, #1
 800096c:	4a8c      	ldr	r2, [pc, #560]	; (8000ba0 <do_buttons_and_nrf+0x324>)
 800096e:	6013      	str	r3, [r2, #0]

		do {
			if (nrf24l01p_get_irq_flags() & (1 << NRF24L01P_IRQ_TX_DS))
 8000970:	f002 fa1c 	bl	8002dac <nrf24l01p_get_irq_flags>
 8000974:	4603      	mov	r3, r0
 8000976:	f003 0320 	and.w	r3, r3, #32
 800097a:	2b00      	cmp	r3, #0
 800097c:	d02e      	beq.n	80009dc <do_buttons_and_nrf+0x160>
			{
				//successfully transmitted
				good++;
 800097e:	4b89      	ldr	r3, [pc, #548]	; (8000ba4 <do_buttons_and_nrf+0x328>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	3301      	adds	r3, #1
 8000984:	4a87      	ldr	r2, [pc, #540]	; (8000ba4 <do_buttons_and_nrf+0x328>)
 8000986:	6013      	str	r3, [r2, #0]
				if (total >= 10)
 8000988:	4b85      	ldr	r3, [pc, #532]	; (8000ba0 <do_buttons_and_nrf+0x324>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b09      	cmp	r3, #9
 800098e:	d914      	bls.n	80009ba <do_buttons_and_nrf+0x13e>
				{
					char t_buf[11];
					snprintf(t_buf, 11, "-%ld+%ld", total-good, good);
 8000990:	4b83      	ldr	r3, [pc, #524]	; (8000ba0 <do_buttons_and_nrf+0x324>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b83      	ldr	r3, [pc, #524]	; (8000ba4 <do_buttons_and_nrf+0x328>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	1ad2      	subs	r2, r2, r3
 800099a:	4b82      	ldr	r3, [pc, #520]	; (8000ba4 <do_buttons_and_nrf+0x328>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	4613      	mov	r3, r2
 80009a6:	4a80      	ldr	r2, [pc, #512]	; (8000ba8 <do_buttons_and_nrf+0x32c>)
 80009a8:	210b      	movs	r1, #11
 80009aa:	f00b ff91 	bl	800c8d0 <sniprintf>
					vfd_put_string(t_buf);
 80009ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 fee6 	bl	8003784 <vfd_put_string>
 80009b8:	e00a      	b.n	80009d0 <do_buttons_and_nrf+0x154>
				} else if (payload[0] == 1)
 80009ba:	4b78      	ldr	r3, [pc, #480]	; (8000b9c <do_buttons_and_nrf+0x320>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d103      	bne.n	80009ca <do_buttons_and_nrf+0x14e>
					vfd_put_string("PB1 TX");
 80009c2:	487a      	ldr	r0, [pc, #488]	; (8000bac <do_buttons_and_nrf+0x330>)
 80009c4:	f002 fede 	bl	8003784 <vfd_put_string>
 80009c8:	e002      	b.n	80009d0 <do_buttons_and_nrf+0x154>
				else
					vfd_put_string("PB2 TX");
 80009ca:	4879      	ldr	r0, [pc, #484]	; (8000bb0 <do_buttons_and_nrf+0x334>)
 80009cc:	f002 feda 	bl	8003784 <vfd_put_string>
				vfd_update();
 80009d0:	f003 f82a 	bl	8003a28 <vfd_update>
				nrf24l01p_clear_irq_flag(NRF24L01P_IRQ_TX_DS);
 80009d4:	2005      	movs	r0, #5
 80009d6:	f002 f9d7 	bl	8002d88 <nrf24l01p_clear_irq_flag>
				break;
 80009da:	e0f8      	b.n	8000bce <do_buttons_and_nrf+0x352>
			}
			if (nrf24l01p_get_irq_flags() & (1 << NRF24L01P_IRQ_MAX_RT))
 80009dc:	f002 f9e6 	bl	8002dac <nrf24l01p_get_irq_flags>
 80009e0:	4603      	mov	r3, r0
 80009e2:	f003 0310 	and.w	r3, r3, #16
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f000 8097 	beq.w	8000b1a <do_buttons_and_nrf+0x29e>
			{
				// not send
				vfd_set_symbols(VFD_SYM_ARROW_LEFT);
 80009ec:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80009f0:	f002 ff4e 	bl	8003890 <vfd_set_symbols>
				vfd_leds(0b1000);
 80009f4:	2008      	movs	r0, #8
 80009f6:	f003 f83f 	bl	8003a78 <vfd_leds>
				if (total >= 10)
 80009fa:	4b69      	ldr	r3, [pc, #420]	; (8000ba0 <do_buttons_and_nrf+0x324>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b09      	cmp	r3, #9
 8000a00:	d914      	bls.n	8000a2c <do_buttons_and_nrf+0x1b0>
				{
					char t_buf[11];
					snprintf(t_buf, 11, "-%ld+%ld", total-good, good);
 8000a02:	4b67      	ldr	r3, [pc, #412]	; (8000ba0 <do_buttons_and_nrf+0x324>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	4b67      	ldr	r3, [pc, #412]	; (8000ba4 <do_buttons_and_nrf+0x328>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	1ad2      	subs	r2, r2, r3
 8000a0c:	4b65      	ldr	r3, [pc, #404]	; (8000ba4 <do_buttons_and_nrf+0x328>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	4613      	mov	r3, r2
 8000a18:	4a63      	ldr	r2, [pc, #396]	; (8000ba8 <do_buttons_and_nrf+0x32c>)
 8000a1a:	210b      	movs	r1, #11
 8000a1c:	f00b ff58 	bl	800c8d0 <sniprintf>
					vfd_put_string(t_buf);
 8000a20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a24:	4618      	mov	r0, r3
 8000a26:	f002 fead 	bl	8003784 <vfd_put_string>
 8000a2a:	e00a      	b.n	8000a42 <do_buttons_and_nrf+0x1c6>
				} else if (payload[0] == 1)
 8000a2c:	4b5b      	ldr	r3, [pc, #364]	; (8000b9c <do_buttons_and_nrf+0x320>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d103      	bne.n	8000a3c <do_buttons_and_nrf+0x1c0>
					vfd_put_string("PB1 MAX RT");
 8000a34:	485f      	ldr	r0, [pc, #380]	; (8000bb4 <do_buttons_and_nrf+0x338>)
 8000a36:	f002 fea5 	bl	8003784 <vfd_put_string>
 8000a3a:	e002      	b.n	8000a42 <do_buttons_and_nrf+0x1c6>
				else
					vfd_put_string("PB2 MAX RT");
 8000a3c:	485e      	ldr	r0, [pc, #376]	; (8000bb8 <do_buttons_and_nrf+0x33c>)
 8000a3e:	f002 fea1 	bl	8003784 <vfd_put_string>
				vfd_update();
 8000a42:	f002 fff1 	bl	8003a28 <vfd_update>
				nrf24l01p_clear_irq_flag(NRF24L01P_IRQ_MAX_RT);
 8000a46:	2004      	movs	r0, #4
 8000a48:	f002 f99e 	bl	8002d88 <nrf24l01p_clear_irq_flag>
				nrf24l01p_flush_tx();
 8000a4c:	f002 fbc1 	bl	80031d2 <nrf24l01p_flush_tx>

				uint32_t but_hold = HAL_GetTick();
 8000a50:	f003 f8f2 	bl	8003c38 <HAL_GetTick>
 8000a54:	64b8      	str	r0, [r7, #72]	; 0x48
				while(active_berserk && (PB1 || PB2))
 8000a56:	e04d      	b.n	8000af4 <do_buttons_and_nrf+0x278>
				{
					if (HAL_GetTick() - but_hold > 2000)
 8000a58:	f003 f8ee 	bl	8003c38 <HAL_GetTick>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a66:	d945      	bls.n	8000af4 <do_buttons_and_nrf+0x278>
					{
						vfd_put_string("BERSERK");
 8000a68:	4854      	ldr	r0, [pc, #336]	; (8000bbc <do_buttons_and_nrf+0x340>)
 8000a6a:	f002 fe8b 	bl	8003784 <vfd_put_string>
						vfd_update();
 8000a6e:	f002 ffdb 	bl	8003a28 <vfd_update>
						nrf24l01p_set_operation_mode(NRF24L01P_PTX);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f002 fad0 	bl	8003018 <nrf24l01p_set_operation_mode>

						nrf24l01p_set_rf_channel(NRF_CHANNEL);
 8000a78:	206f      	movs	r0, #111	; 0x6f
 8000a7a:	f002 fb0a 	bl	8003092 <nrf24l01p_set_rf_channel>
						nrf24l01p_set_power_mode(NRF24L01P_PWR_UP);
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f002 fae9 	bl	8003056 <nrf24l01p_set_power_mode>
						nrf24l01p_set_pll_mode(NRF24L01P_PLL_LOCK);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f002 fbb5 	bl	80031f4 <nrf24l01p_set_pll_mode>
						nrf24l01p_write_reg(NRF24L01P_RF_SETUP,
								BIT_COND(nrf24l01p_read_reg(NRF24L01P_RF_SETUP),
 8000a8a:	2006      	movs	r0, #6
 8000a8c:	f002 fbd0 	bl	8003230 <nrf24l01p_read_reg>
 8000a90:	4603      	mov	r3, r0
						nrf24l01p_write_reg(NRF24L01P_RF_SETUP,
 8000a92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	4619      	mov	r1, r3
 8000a9a:	2006      	movs	r0, #6
 8000a9c:	f002 fbe1 	bl	8003262 <nrf24l01p_write_reg>
										NRF24L01P_RF_SETUP_CONT_WAVE, 1));
						delay(NRF_POWER_UP_DELAY);
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f7ff fc09 	bl	80002b8 <delay>
						HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 1);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	483a      	ldr	r0, [pc, #232]	; (8000b94 <do_buttons_and_nrf+0x318>)
 8000aac:	f003 fb9b 	bl	80041e6 <HAL_GPIO_WritePin>
						while(PB1||PB2);
 8000ab0:	bf00      	nop
 8000ab2:	2102      	movs	r1, #2
 8000ab4:	4837      	ldr	r0, [pc, #220]	; (8000b94 <do_buttons_and_nrf+0x318>)
 8000ab6:	f003 fb7f 	bl	80041b8 <HAL_GPIO_ReadPin>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d1f8      	bne.n	8000ab2 <do_buttons_and_nrf+0x236>
 8000ac0:	2104      	movs	r1, #4
 8000ac2:	4834      	ldr	r0, [pc, #208]	; (8000b94 <do_buttons_and_nrf+0x318>)
 8000ac4:	f003 fb78 	bl	80041b8 <HAL_GPIO_ReadPin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1f1      	bne.n	8000ab2 <do_buttons_and_nrf+0x236>
						nrf24l01p_write_reg(NRF24L01P_RF_SETUP,
								BIT_COND(nrf24l01p_read_reg(NRF24L01P_RF_SETUP),
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f002 fbae 	bl	8003230 <nrf24l01p_read_reg>
 8000ad4:	4603      	mov	r3, r0
						nrf24l01p_write_reg(NRF24L01P_RF_SETUP,
 8000ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	4619      	mov	r1, r3
 8000ade:	2006      	movs	r0, #6
 8000ae0:	f002 fbbf 	bl	8003262 <nrf24l01p_write_reg>
										NRF24L01P_RF_SETUP_CONT_WAVE, 0));
						nrf24l01p_set_pll_mode(NRF24L01P_PLL_UNLOCK);
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f002 fb85 	bl	80031f4 <nrf24l01p_set_pll_mode>
						HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2101      	movs	r1, #1
 8000aee:	4829      	ldr	r0, [pc, #164]	; (8000b94 <do_buttons_and_nrf+0x318>)
 8000af0:	f003 fb79 	bl	80041e6 <HAL_GPIO_WritePin>
				while(active_berserk && (PB1 || PB2))
 8000af4:	4b32      	ldr	r3, [pc, #200]	; (8000bc0 <do_buttons_and_nrf+0x344>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d067      	beq.n	8000bcc <do_buttons_and_nrf+0x350>
 8000afc:	2102      	movs	r1, #2
 8000afe:	4825      	ldr	r0, [pc, #148]	; (8000b94 <do_buttons_and_nrf+0x318>)
 8000b00:	f003 fb5a 	bl	80041b8 <HAL_GPIO_ReadPin>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1a6      	bne.n	8000a58 <do_buttons_and_nrf+0x1dc>
 8000b0a:	2104      	movs	r1, #4
 8000b0c:	4821      	ldr	r0, [pc, #132]	; (8000b94 <do_buttons_and_nrf+0x318>)
 8000b0e:	f003 fb53 	bl	80041b8 <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d19f      	bne.n	8000a58 <do_buttons_and_nrf+0x1dc>
					}
				}
				break;
 8000b18:	e058      	b.n	8000bcc <do_buttons_and_nrf+0x350>
			}
			if (HAL_GetTick() - timeout_cnt > 200)
 8000b1a:	f003 f88d 	bl	8003c38 <HAL_GetTick>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	2bc8      	cmp	r3, #200	; 0xc8
 8000b26:	f67f af23 	bls.w	8000970 <do_buttons_and_nrf+0xf4>
			{
				// timeout error
				vfd_set_symbols(VFD_SYM_ARROW_RIGHT);
 8000b2a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b2e:	f002 feaf 	bl	8003890 <vfd_set_symbols>
				vfd_leds(0b1011);
 8000b32:	200b      	movs	r0, #11
 8000b34:	f002 ffa0 	bl	8003a78 <vfd_leds>
				if (total >= 10)
 8000b38:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <do_buttons_and_nrf+0x324>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b09      	cmp	r3, #9
 8000b3e:	d914      	bls.n	8000b6a <do_buttons_and_nrf+0x2ee>
				{
					char t_buf[11];
					snprintf(t_buf, 11, "-%ld+%ld", total-good, good);
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <do_buttons_and_nrf+0x324>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <do_buttons_and_nrf+0x328>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	1ad2      	subs	r2, r2, r3
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <do_buttons_and_nrf+0x328>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	4613      	mov	r3, r2
 8000b56:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <do_buttons_and_nrf+0x32c>)
 8000b58:	210b      	movs	r1, #11
 8000b5a:	f00b feb9 	bl	800c8d0 <sniprintf>
					vfd_put_string(t_buf);
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 fe0e 	bl	8003784 <vfd_put_string>
 8000b68:	e00a      	b.n	8000b80 <do_buttons_and_nrf+0x304>
				} else if (payload[0] == 1)
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <do_buttons_and_nrf+0x320>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d103      	bne.n	8000b7a <do_buttons_and_nrf+0x2fe>
					vfd_put_string("PB1 T/OUT");
 8000b72:	4814      	ldr	r0, [pc, #80]	; (8000bc4 <do_buttons_and_nrf+0x348>)
 8000b74:	f002 fe06 	bl	8003784 <vfd_put_string>
 8000b78:	e002      	b.n	8000b80 <do_buttons_and_nrf+0x304>
				else
					vfd_put_string("PB2 T/OUT");
 8000b7a:	4813      	ldr	r0, [pc, #76]	; (8000bc8 <do_buttons_and_nrf+0x34c>)
 8000b7c:	f002 fe02 	bl	8003784 <vfd_put_string>
				vfd_update();
 8000b80:	f002 ff52 	bl	8003a28 <vfd_update>
				nrf24l01p_flush_tx();
 8000b84:	f002 fb25 	bl	80031d2 <nrf24l01p_flush_tx>
				//while(PB1||PB2);
				break;
 8000b88:	e021      	b.n	8000bce <do_buttons_and_nrf+0x352>
 8000b8a:	bf00      	nop
 8000b8c:	20000224 	.word	0x20000224
 8000b90:	20000005 	.word	0x20000005
 8000b94:	40010c00 	.word	0x40010c00
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000228 	.word	0x20000228
 8000ba0:	20000248 	.word	0x20000248
 8000ba4:	2000024c 	.word	0x2000024c
 8000ba8:	0800d1b0 	.word	0x0800d1b0
 8000bac:	0800d1bc 	.word	0x0800d1bc
 8000bb0:	0800d1c4 	.word	0x0800d1c4
 8000bb4:	0800d1cc 	.word	0x0800d1cc
 8000bb8:	0800d1d8 	.word	0x0800d1d8
 8000bbc:	0800d1e4 	.word	0x0800d1e4
 8000bc0:	20000218 	.word	0x20000218
 8000bc4:	0800d1ec 	.word	0x0800d1ec
 8000bc8:	0800d1f8 	.word	0x0800d1f8
				break;
 8000bcc:	bf00      	nop
			}

		} while (1);
		return true; // we where active
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e04d      	b.n	8000c6e <do_buttons_and_nrf+0x3f2>
	}
	else
	{
		// we need to receive
		good = 0;
 8000bd2:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <do_buttons_and_nrf+0x3fc>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
		total = 0;
 8000bd8:	4b28      	ldr	r3, [pc, #160]	; (8000c7c <do_buttons_and_nrf+0x400>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]

		if (set_rx)
 8000bde:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <do_buttons_and_nrf+0x404>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d00a      	beq.n	8000bfc <do_buttons_and_nrf+0x380>
		{
			set_rx = false;
 8000be6:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <do_buttons_and_nrf+0x404>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
			nrf_init_rx(address);
 8000bec:	4825      	ldr	r0, [pc, #148]	; (8000c84 <do_buttons_and_nrf+0x408>)
 8000bee:	f7ff fba5 	bl	800033c <nrf_init_rx>
			HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 1);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	4824      	ldr	r0, [pc, #144]	; (8000c88 <do_buttons_and_nrf+0x40c>)
 8000bf8:	f003 faf5 	bl	80041e6 <HAL_GPIO_WritePin>
		}

		if (nrf24l01p_get_irq_flags() & (1 << NRF24L01P_IRQ_RX_DR))
 8000bfc:	f002 f8d6 	bl	8002dac <nrf24l01p_get_irq_flags>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d030      	beq.n	8000c6c <do_buttons_and_nrf+0x3f0>
		{
			nrf24l01p_clear_irq_flag(NRF24L01P_IRQ_RX_DR);
 8000c0a:	2006      	movs	r0, #6
 8000c0c:	f002 f8bc 	bl	8002d88 <nrf24l01p_clear_irq_flag>

			uint8_t payload[NRF_PAYLOAD_LENGTH];

			while (!nrf24l01p_rx_fifo_empty())
 8000c10:	e003      	b.n	8000c1a <do_buttons_and_nrf+0x39e>
				nrf24l01p_read_rx_payload(payload);
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	4618      	mov	r0, r3
 8000c16:	f002 facf 	bl	80031b8 <nrf24l01p_read_rx_payload>
			while (!nrf24l01p_rx_fifo_empty())
 8000c1a:	f002 fa80 	bl	800311e <nrf24l01p_rx_fifo_empty>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f083 0301 	eor.w	r3, r3, #1
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1f3      	bne.n	8000c12 <do_buttons_and_nrf+0x396>

			if (payload[0] == 1)
 8000c2a:	793b      	ldrb	r3, [r7, #4]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d10c      	bne.n	8000c4a <do_buttons_and_nrf+0x3ce>
			{
				vfd_leds(0b0101);
 8000c30:	2005      	movs	r0, #5
 8000c32:	f002 ff21 	bl	8003a78 <vfd_leds>
				vfd_put_string("* RX PB1 *");
 8000c36:	4815      	ldr	r0, [pc, #84]	; (8000c8c <do_buttons_and_nrf+0x410>)
 8000c38:	f002 fda4 	bl	8003784 <vfd_put_string>
				vfd_set_symbols(VFD_SYM_ARROW_LEFT);
 8000c3c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000c40:	f002 fe26 	bl	8003890 <vfd_set_symbols>
				vfd_update();
 8000c44:	f002 fef0 	bl	8003a28 <vfd_update>
 8000c48:	e00e      	b.n	8000c68 <do_buttons_and_nrf+0x3ec>
			}
			else if (payload[0] == 2)
 8000c4a:	793b      	ldrb	r3, [r7, #4]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d10b      	bne.n	8000c68 <do_buttons_and_nrf+0x3ec>
			{
				vfd_leds(0b0110);
 8000c50:	2006      	movs	r0, #6
 8000c52:	f002 ff11 	bl	8003a78 <vfd_leds>
				vfd_put_string("* RX PB2 *");
 8000c56:	480e      	ldr	r0, [pc, #56]	; (8000c90 <do_buttons_and_nrf+0x414>)
 8000c58:	f002 fd94 	bl	8003784 <vfd_put_string>
				vfd_set_symbols(VFD_SYM_ARROW_RIGHT);
 8000c5c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c60:	f002 fe16 	bl	8003890 <vfd_set_symbols>
				vfd_update();
 8000c64:	f002 fee0 	bl	8003a28 <vfd_update>
			}
			return true; // we have something received
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e000      	b.n	8000c6e <do_buttons_and_nrf+0x3f2>
		}
		else
		{
			// no buttons pressed and nothing received
			return false;
 8000c6c:	2300      	movs	r3, #0
		}
	}
	return false;
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3754      	adds	r7, #84	; 0x54
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd90      	pop	{r4, r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000024c 	.word	0x2000024c
 8000c7c:	20000248 	.word	0x20000248
 8000c80:	20000005 	.word	0x20000005
 8000c84:	20000000 	.word	0x20000000
 8000c88:	40010c00 	.word	0x40010c00
 8000c8c:	0800d204 	.word	0x0800d204
 8000c90:	0800d210 	.word	0x0800d210

08000c94 <do_microrl>:

void do_microrl(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
	while (!fifo_is_empty())
 8000c9a:	e007      	b.n	8000cac <do_microrl+0x18>
	{
		uint8_t buf = fifo_pop();
 8000c9c:	f7ff fa90 	bl	80001c0 <fifo_pop>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	71fb      	strb	r3, [r7, #7]
		microrl_print_char(buf);
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 fc82 	bl	80025b0 <microrl_print_char>
	while (!fifo_is_empty())
 8000cac:	f7ff faac 	bl	8000208 <fifo_is_empty>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	f083 0301 	eor.w	r3, r3, #1
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1ef      	bne.n	8000c9c <do_microrl+0x8>
	}
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <sigint>:

void sigint(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
	print (ENDL);
 8000cce:	4815      	ldr	r0, [pc, #84]	; (8000d24 <sigint+0x5c>)
 8000cd0:	f001 fc80 	bl	80025d4 <print>
	print ("^C catched!");
 8000cd4:	4814      	ldr	r0, [pc, #80]	; (8000d28 <sigint+0x60>)
 8000cd6:	f001 fc7d 	bl	80025d4 <print>
	do_nrf_scan(-1);
 8000cda:	f04f 30ff 	mov.w	r0, #4294967295
 8000cde:	f000 f827 	bl	8000d30 <do_nrf_scan>
	active();
 8000ce2:	f7ff fac3 	bl	800026c <active>
	vfd_put_string("CTRL + C");
 8000ce6:	4811      	ldr	r0, [pc, #68]	; (8000d2c <sigint+0x64>)
 8000ce8:	f002 fd4c 	bl	8003784 <vfd_put_string>
	vfd_set_symbols(VFD_SYM_DCC);
 8000cec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000cf0:	f002 fdce 	bl	8003890 <vfd_set_symbols>
	vfd_update();
 8000cf4:	f002 fe98 	bl	8003a28 <vfd_update>
	vfd_update();
 8000cf8:	f002 fe96 	bl	8003a28 <vfd_update>

	// emulate ENTER input to print the promptexecute
	char * p = ENDL;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <sigint+0x5c>)
 8000cfe:	607b      	str	r3, [r7, #4]
	while(*p) fifo_push(*(p++));
 8000d00:	e006      	b.n	8000d10 <sigint+0x48>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	1c5a      	adds	r2, r3, #1
 8000d06:	607a      	str	r2, [r7, #4]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fa30 	bl	8000170 <fifo_push>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1f4      	bne.n	8000d02 <sigint+0x3a>
}
 8000d18:	bf00      	nop
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	0800d21c 	.word	0x0800d21c
 8000d28:	0800d220 	.word	0x0800d220
 8000d2c:	0800d22c 	.word	0x0800d22c

08000d30 <do_nrf_scan>:


bool do_nrf_scan(int8_t command)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0a6      	sub	sp, #152	; 0x98
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
	static bool active = false;
	static uint8_t arr[NRF24L01P_CHANNELS_COUNT] = {0};

	if (command == -1)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d42:	d117      	bne.n	8000d74 <do_nrf_scan+0x44>
	{
		active = false;
 8000d44:	4b7d      	ldr	r3, [pc, #500]	; (8000f3c <do_nrf_scan+0x20c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
		print(ENDL);
 8000d4a:	487d      	ldr	r0, [pc, #500]	; (8000f40 <do_nrf_scan+0x210>)
 8000d4c:	f001 fc42 	bl	80025d4 <print>
		print("O000000000000000111111111111111122222222222222223333333333333333");
 8000d50:	487c      	ldr	r0, [pc, #496]	; (8000f44 <do_nrf_scan+0x214>)
 8000d52:	f001 fc3f 	bl	80025d4 <print>
		print("44444444444444445555555555555555666666666666666677777777777777");
 8000d56:	487c      	ldr	r0, [pc, #496]	; (8000f48 <do_nrf_scan+0x218>)
 8000d58:	f001 fc3c 	bl	80025d4 <print>
		print(ENDL);
 8000d5c:	4878      	ldr	r0, [pc, #480]	; (8000f40 <do_nrf_scan+0x210>)
 8000d5e:	f001 fc39 	bl	80025d4 <print>
		print("O123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef");
 8000d62:	487a      	ldr	r0, [pc, #488]	; (8000f4c <do_nrf_scan+0x21c>)
 8000d64:	f001 fc36 	bl	80025d4 <print>
		print("0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcd");
 8000d68:	4879      	ldr	r0, [pc, #484]	; (8000f50 <do_nrf_scan+0x220>)
 8000d6a:	f001 fc33 	bl	80025d4 <print>
		print(ENDL);
 8000d6e:	4874      	ldr	r0, [pc, #464]	; (8000f40 <do_nrf_scan+0x210>)
 8000d70:	f001 fc30 	bl	80025d4 <print>
	}
	if (command == 1)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d11b      	bne.n	8000db4 <do_nrf_scan+0x84>
	{
		memset(arr, 0, NRF24L01P_CHANNELS_COUNT);
 8000d7c:	227e      	movs	r2, #126	; 0x7e
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4874      	ldr	r0, [pc, #464]	; (8000f54 <do_nrf_scan+0x224>)
 8000d82:	f00b fd9d 	bl	800c8c0 <memset>
		print("O000000000000000111111111111111122222222222222223333333333333333");
 8000d86:	486f      	ldr	r0, [pc, #444]	; (8000f44 <do_nrf_scan+0x214>)
 8000d88:	f001 fc24 	bl	80025d4 <print>
		print("44444444444444445555555555555555666666666666666677777777777777");
 8000d8c:	486e      	ldr	r0, [pc, #440]	; (8000f48 <do_nrf_scan+0x218>)
 8000d8e:	f001 fc21 	bl	80025d4 <print>
		print(ENDL);
 8000d92:	486b      	ldr	r0, [pc, #428]	; (8000f40 <do_nrf_scan+0x210>)
 8000d94:	f001 fc1e 	bl	80025d4 <print>
		print("O123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef");
 8000d98:	486c      	ldr	r0, [pc, #432]	; (8000f4c <do_nrf_scan+0x21c>)
 8000d9a:	f001 fc1b 	bl	80025d4 <print>
		print("0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcd");
 8000d9e:	486c      	ldr	r0, [pc, #432]	; (8000f50 <do_nrf_scan+0x220>)
 8000da0:	f001 fc18 	bl	80025d4 <print>
		print(ENDL);
 8000da4:	4866      	ldr	r0, [pc, #408]	; (8000f40 <do_nrf_scan+0x210>)
 8000da6:	f001 fc15 	bl	80025d4 <print>
		active = true;
 8000daa:	4b64      	ldr	r3, [pc, #400]	; (8000f3c <do_nrf_scan+0x20c>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
		return false;
 8000db0:	2300      	movs	r3, #0
 8000db2:	e0be      	b.n	8000f32 <do_nrf_scan+0x202>
	}
	if (!active)
 8000db4:	4b61      	ldr	r3, [pc, #388]	; (8000f3c <do_nrf_scan+0x20c>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	f083 0301 	eor.w	r3, r3, #1
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <do_nrf_scan+0x96>
		return false;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e0b5      	b.n	8000f32 <do_nrf_scan+0x202>

	HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin,0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2101      	movs	r1, #1
 8000dca:	4863      	ldr	r0, [pc, #396]	; (8000f58 <do_nrf_scan+0x228>)
 8000dcc:	f003 fa0b 	bl	80041e6 <HAL_GPIO_WritePin>
	nrf24l01p_get_clear_irq_flags();
 8000dd0:	f001 ffce 	bl	8002d70 <nrf24l01p_get_clear_irq_flags>
    nrf24l01p_close_pipe(NRF24L01P_ALL);
 8000dd4:	20ff      	movs	r0, #255	; 0xff
 8000dd6:	f002 f865 	bl	8002ea4 <nrf24l01p_close_pipe>
    nrf24l01p_open_pipe(NRF24L01P_PIPE0, false);
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f002 f80a 	bl	8002df6 <nrf24l01p_open_pipe>
    uint8_t add[] = {0x05, 0xA5, 0x55, 0xA5, 0x50};
 8000de2:	4a5e      	ldr	r2, [pc, #376]	; (8000f5c <do_nrf_scan+0x22c>)
 8000de4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000de8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dec:	6018      	str	r0, [r3, #0]
 8000dee:	3304      	adds	r3, #4
 8000df0:	7019      	strb	r1, [r3, #0]
    nrf24l01p_set_address(NRF24L01P_PIPE0, add);
 8000df2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000df6:	4619      	mov	r1, r3
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f002 f895 	bl	8002f28 <nrf24l01p_set_address>
    nrf24l01p_set_operation_mode(NRF24L01P_PRX);
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f002 f90a 	bl	8003018 <nrf24l01p_set_operation_mode>
    nrf24l01p_set_rx_payload_width(NRF24L01P_PIPE0, NRF_PAYLOAD_LENGTH);
 8000e04:	2120      	movs	r1, #32
 8000e06:	2000      	movs	r0, #0
 8000e08:	f002 f8e8 	bl	8002fdc <nrf24l01p_set_rx_payload_width>
    nrf24l01p_set_power_mode(NRF24L01P_PWR_UP);
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f002 f922 	bl	8003056 <nrf24l01p_set_power_mode>
    delay(NRF_POWER_UP_DELAY);
 8000e12:	2002      	movs	r0, #2
 8000e14:	f7ff fa50 	bl	80002b8 <delay>

	for (int i = 0; i < NRF24L01P_CHANNELS_COUNT; i++)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000e1e:	e031      	b.n	8000e84 <do_nrf_scan+0x154>
	{
	    nrf24l01p_set_rf_channel(i);
 8000e20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f002 f933 	bl	8003092 <nrf24l01p_set_rf_channel>
		HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin,1);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2101      	movs	r1, #1
 8000e30:	4849      	ldr	r0, [pc, #292]	; (8000f58 <do_nrf_scan+0x228>)
 8000e32:	f003 f9d8 	bl	80041e6 <HAL_GPIO_WritePin>
		delay_us(5000);
 8000e36:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e3a:	f7ff fa23 	bl	8000284 <delay_us>
		HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin,0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2101      	movs	r1, #1
 8000e42:	4845      	ldr	r0, [pc, #276]	; (8000f58 <do_nrf_scan+0x228>)
 8000e44:	f003 f9cf 	bl	80041e6 <HAL_GPIO_WritePin>
		if (nrf24l01p_get_carrier_detect())
 8000e48:	f002 f975 	bl	8003136 <nrf24l01p_get_carrier_detect>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d013      	beq.n	8000e7a <do_nrf_scan+0x14a>
			if (arr[i] < 0xff)
 8000e52:	4a40      	ldr	r2, [pc, #256]	; (8000f54 <do_nrf_scan+0x224>)
 8000e54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e58:	4413      	add	r3, r2
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2bff      	cmp	r3, #255	; 0xff
 8000e5e:	d00c      	beq.n	8000e7a <do_nrf_scan+0x14a>
				arr[i]++;
 8000e60:	4a3c      	ldr	r2, [pc, #240]	; (8000f54 <do_nrf_scan+0x224>)
 8000e62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e66:	4413      	add	r3, r2
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	b2d9      	uxtb	r1, r3
 8000e6e:	4a39      	ldr	r2, [pc, #228]	; (8000f54 <do_nrf_scan+0x224>)
 8000e70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e74:	4413      	add	r3, r2
 8000e76:	460a      	mov	r2, r1
 8000e78:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NRF24L01P_CHANNELS_COUNT; i++)
 8000e7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e7e:	3301      	adds	r3, #1
 8000e80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000e84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e88:	2b7d      	cmp	r3, #125	; 0x7d
 8000e8a:	ddc9      	ble.n	8000e20 <do_nrf_scan+0xf0>
	}
	uint8_t packet[NRF24L01P_CHANNELS_COUNT + 1] = {0};
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	227b      	movs	r2, #123	; 0x7b
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f00b fd11 	bl	800c8c0 <memset>
	for (int i = 0; i < NRF24L01P_CHANNELS_COUNT; i++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000ea4:	e038      	b.n	8000f18 <do_nrf_scan+0x1e8>
	{
		if (arr[i] >=0xa0)
 8000ea6:	4a2b      	ldr	r2, [pc, #172]	; (8000f54 <do_nrf_scan+0x224>)
 8000ea8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000eac:	4413      	add	r3, r2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b9f      	cmp	r3, #159	; 0x9f
 8000eb2:	d910      	bls.n	8000ed6 <do_nrf_scan+0x1a6>
			packet[i] = ((arr[i]>>4)&0xF) + 'A' - 0xa;
 8000eb4:	4a27      	ldr	r2, [pc, #156]	; (8000f54 <do_nrf_scan+0x224>)
 8000eb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000eba:	4413      	add	r3, r2
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	091b      	lsrs	r3, r3, #4
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	3337      	adds	r3, #55	; 0x37
 8000ec4:	b2d9      	uxtb	r1, r3
 8000ec6:	f107 0208 	add.w	r2, r7, #8
 8000eca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ece:	4413      	add	r3, r2
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	701a      	strb	r2, [r3, #0]
 8000ed4:	e01b      	b.n	8000f0e <do_nrf_scan+0x1de>
		else
			packet[i] = (arr[i] < 0xf?arr[i]:0xf) + ((arr[i] < 10)?'0':('a' - 0xa));
 8000ed6:	4a1f      	ldr	r2, [pc, #124]	; (8000f54 <do_nrf_scan+0x224>)
 8000ed8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000edc:	4413      	add	r3, r2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	bf28      	it	cs
 8000ee4:	230f      	movcs	r3, #15
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	491a      	ldr	r1, [pc, #104]	; (8000f54 <do_nrf_scan+0x224>)
 8000eea:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000eee:	440a      	add	r2, r1
 8000ef0:	7812      	ldrb	r2, [r2, #0]
 8000ef2:	2a09      	cmp	r2, #9
 8000ef4:	d801      	bhi.n	8000efa <do_nrf_scan+0x1ca>
 8000ef6:	2230      	movs	r2, #48	; 0x30
 8000ef8:	e000      	b.n	8000efc <do_nrf_scan+0x1cc>
 8000efa:	2257      	movs	r2, #87	; 0x57
 8000efc:	4413      	add	r3, r2
 8000efe:	b2d9      	uxtb	r1, r3
 8000f00:	f107 0208 	add.w	r2, r7, #8
 8000f04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f08:	4413      	add	r3, r2
 8000f0a:	460a      	mov	r2, r1
 8000f0c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NRF24L01P_CHANNELS_COUNT; i++)
 8000f0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f12:	3301      	adds	r3, #1
 8000f14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000f18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f1c:	2b7d      	cmp	r3, #125	; 0x7d
 8000f1e:	ddc2      	ble.n	8000ea6 <do_nrf_scan+0x176>
	}
	print((char *)packet);
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	4618      	mov	r0, r3
 8000f26:	f001 fb55 	bl	80025d4 <print>
	print(ENDL);
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <do_nrf_scan+0x210>)
 8000f2c:	f001 fb52 	bl	80025d4 <print>
	return true;
 8000f30:	2301      	movs	r3, #1
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3798      	adds	r7, #152	; 0x98
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000250 	.word	0x20000250
 8000f40:	0800d21c 	.word	0x0800d21c
 8000f44:	0800d238 	.word	0x0800d238
 8000f48:	0800d27c 	.word	0x0800d27c
 8000f4c:	0800d2bc 	.word	0x0800d2bc
 8000f50:	0800d300 	.word	0x0800d300
 8000f54:	20000254 	.word	0x20000254
 8000f58:	40010c00 	.word	0x40010c00
 8000f5c:	0800d340 	.word	0x0800d340

08000f60 <nrf_scan>:

int nrf_scan (int argc, const char * const * argv)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
	vfd_put_string("NRF SCAN");
 8000f6a:	4807      	ldr	r0, [pc, #28]	; (8000f88 <nrf_scan+0x28>)
 8000f6c:	f002 fc0a 	bl	8003784 <vfd_put_string>
	do_nrf_scan(1);
 8000f70:	2001      	movs	r0, #1
 8000f72:	f7ff fedd 	bl	8000d30 <do_nrf_scan>
	vfd_update();
 8000f76:	f002 fd57 	bl	8003a28 <vfd_update>
	active();
 8000f7a:	f7ff f977 	bl	800026c <active>
	return 0;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	0800d348 	.word	0x0800d348

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f92:	f002 fdf9 	bl	8003b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f96:	f000 f8cf 	bl	8001138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9a:	f000 f9e7 	bl	800136c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000f9e:	f000 f955 	bl	800124c <MX_SPI2_Init>
  MX_I2C1_Init();
 8000fa2:	f000 f925 	bl	80011f0 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000fa6:	f00a ff8b 	bl	800bec0 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000faa:	f000 f985 	bl	80012b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_SPI_ENABLE(&hspi2);
 8000fae:	4b58      	ldr	r3, [pc, #352]	; (8001110 <main+0x184>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b56      	ldr	r3, [pc, #344]	; (8001110 <main+0x184>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fbc:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim1);
 8000fbe:	4855      	ldr	r0, [pc, #340]	; (8001114 <main+0x188>)
 8000fc0:	f006 ff1e 	bl	8007e00 <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, 1);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fca:	4853      	ldr	r0, [pc, #332]	; (8001118 <main+0x18c>)
 8000fcc:	f003 f90b 	bl	80041e6 <HAL_GPIO_WritePin>
  init_microrl(); // we are ready for microrl!
 8000fd0:	f001 fe24 	bl	8002c1c <init_microrl>

  uint8_t test;
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f7ff f9df 	bl	8000398 <nrf24l01p_spi_ss>

  if (PB1 || PB2)
 8000fda:	2102      	movs	r1, #2
 8000fdc:	484f      	ldr	r0, [pc, #316]	; (800111c <main+0x190>)
 8000fde:	f003 f8eb 	bl	80041b8 <HAL_GPIO_ReadPin>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d106      	bne.n	8000ff6 <main+0x6a>
 8000fe8:	2104      	movs	r1, #4
 8000fea:	484c      	ldr	r0, [pc, #304]	; (800111c <main+0x190>)
 8000fec:	f003 f8e4 	bl	80041b8 <HAL_GPIO_ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <main+0x72>
	  active_berserk = true;
 8000ff6:	4b4a      	ldr	r3, [pc, #296]	; (8001120 <main+0x194>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
 8000ffc:	e005      	b.n	800100a <main+0x7e>
  else
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001004:	4847      	ldr	r0, [pc, #284]	; (8001124 <main+0x198>)
 8001006:	f003 f8ee 	bl	80041e6 <HAL_GPIO_WritePin>

  do_vfd_init();
 800100a:	f7ff fa29 	bl	8000460 <do_vfd_init>

  test = nrf24l01p_nop();
 800100e:	f002 f8e8 	bl	80031e2 <nrf24l01p_nop>
 8001012:	4603      	mov	r3, r0
 8001014:	73fb      	strb	r3, [r7, #15]
  if ((test&0b1110) == 0b1110)
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	f003 030e 	and.w	r3, r3, #14
 800101c:	2b0e      	cmp	r3, #14
 800101e:	d107      	bne.n	8001030 <main+0xa4>
  {
	  vfd_put_string("NRF24L01+");
 8001020:	4841      	ldr	r0, [pc, #260]	; (8001128 <main+0x19c>)
 8001022:	f002 fbaf 	bl	8003784 <vfd_put_string>
	  vfd_set_symbols(VFD_SYM_DOLBY);
 8001026:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800102a:	f002 fc31 	bl	8003890 <vfd_set_symbols>
 800102e:	e002      	b.n	8001036 <main+0xaa>
  }
  else
  {
	  vfd_put_string("VFD FV651G");
 8001030:	483e      	ldr	r0, [pc, #248]	; (800112c <main+0x1a0>)
 8001032:	f002 fba7 	bl	8003784 <vfd_put_string>
  }
  vfd_update();
 8001036:	f002 fcf7 	bl	8003a28 <vfd_update>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  last_active_time = HAL_GetTick();
 800103a:	f002 fdfd 	bl	8003c38 <HAL_GetTick>
 800103e:	4603      	mov	r3, r0
 8001040:	4a3b      	ldr	r2, [pc, #236]	; (8001130 <main+0x1a4>)
 8001042:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  do_led();
 8001044:	f7ff fac2 	bl	80005cc <do_led>
	  do_fram_test();
 8001048:	f7ff fb0c 	bl	8000664 <do_fram_test>
	  do_microrl();
 800104c:	f7ff fe22 	bl	8000c94 <do_microrl>
	  if (do_nrf_scan(0))
 8001050:	2000      	movs	r0, #0
 8001052:	f7ff fe6d 	bl	8000d30 <do_nrf_scan>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d109      	bne.n	8001070 <main+0xe4>
	  {
		  // last_active_time = HAL_GetTick();
		  // disable display for long tests
	  }
	  else if (do_buttons_and_nrf())
 800105c:	f7ff fc0e 	bl	800087c <do_buttons_and_nrf>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d004      	beq.n	8001070 <main+0xe4>
	  {
		  last_active_time = HAL_GetTick();
 8001066:	f002 fde7 	bl	8003c38 <HAL_GetTick>
 800106a:	4603      	mov	r3, r0
 800106c:	4a30      	ldr	r2, [pc, #192]	; (8001130 <main+0x1a4>)
 800106e:	6013      	str	r3, [r2, #0]
	  }

	  // disable if inactive

	  if (HAL_GetTick() - last_active_time > 1000)
 8001070:	f002 fde2 	bl	8003c38 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <main+0x1a4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001080:	d908      	bls.n	8001094 <main+0x108>
	  {
		  vfd_leds(0);
 8001082:	2000      	movs	r0, #0
 8001084:	f002 fcf8 	bl	8003a78 <vfd_leds>
		  vfd_clr_symbols(~VFD_SYM_DOLBY);
 8001088:	f46f 4080 	mvn.w	r0, #16384	; 0x4000
 800108c:	f002 fc58 	bl	8003940 <vfd_clr_symbols>
		  vfd_update();
 8001090:	f002 fcca 	bl	8003a28 <vfd_update>
	  }

	  if (HAL_GetTick() - last_active_time > 10000)
 8001094:	f002 fdd0 	bl	8003c38 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <main+0x1a4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d905      	bls.n	80010b4 <main+0x128>
		  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2120      	movs	r1, #32
 80010ac:	481b      	ldr	r0, [pc, #108]	; (800111c <main+0x190>)
 80010ae:	f003 f89a 	bl	80041e6 <HAL_GPIO_WritePin>
 80010b2:	e7c7      	b.n	8001044 <main+0xb8>
	  else
	  {
		  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2120      	movs	r1, #32
 80010b8:	4818      	ldr	r0, [pc, #96]	; (800111c <main+0x190>)
 80010ba:	f003 f894 	bl	80041e6 <HAL_GPIO_WritePin>
		  if (HAL_GetTick() - last_active_time > 3000)
 80010be:	f002 fdbb 	bl	8003c38 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <main+0x1a4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d9b8      	bls.n	8001044 <main+0xb8>
		  {
			  char buf [11];
			  memset(buf, '\0', sizeof(buf));
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	220b      	movs	r2, #11
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f00b fbf1 	bl	800c8c0 <memset>
			  memset(buf, '_', 10-((HAL_GetTick() - last_active_time)/1000));
 80010de:	f002 fdab 	bl	8003c38 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <main+0x1a4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	4a12      	ldr	r2, [pc, #72]	; (8001134 <main+0x1a8>)
 80010ec:	fba2 2303 	umull	r2, r3, r2, r3
 80010f0:	099b      	lsrs	r3, r3, #6
 80010f2:	f1c3 020a 	rsb	r2, r3, #10
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	215f      	movs	r1, #95	; 0x5f
 80010fa:	4618      	mov	r0, r3
 80010fc:	f00b fbe0 	bl	800c8c0 <memset>
			  vfd_put_string(buf);
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	4618      	mov	r0, r3
 8001104:	f002 fb3e 	bl	8003784 <vfd_put_string>
			  vfd_update();
 8001108:	f002 fc8e 	bl	8003a28 <vfd_update>
	  do_led();
 800110c:	e79a      	b.n	8001044 <main+0xb8>
 800110e:	bf00      	nop
 8001110:	20000604 	.word	0x20000604
 8001114:	200006d8 	.word	0x200006d8
 8001118:	40010800 	.word	0x40010800
 800111c:	40010c00 	.word	0x40010c00
 8001120:	20000218 	.word	0x20000218
 8001124:	40011000 	.word	0x40011000
 8001128:	0800d354 	.word	0x0800d354
 800112c:	0800d360 	.word	0x0800d360
 8001130:	200006b0 	.word	0x200006b0
 8001134:	10624dd3 	.word	0x10624dd3

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b094      	sub	sp, #80	; 0x50
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001142:	2228      	movs	r2, #40	; 0x28
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f00b fbba 	bl	800c8c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001168:	2301      	movs	r3, #1
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800116c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001172:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001178:	2301      	movs	r3, #1
 800117a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117c:	2302      	movs	r3, #2
 800117e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001180:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001184:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001186:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800118a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001190:	4618      	mov	r0, r3
 8001192:	f005 fd1f 	bl	8006bd4 <HAL_RCC_OscConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800119c:	f000 f97e 	bl	800149c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a0:	230f      	movs	r3, #15
 80011a2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a4:	2302      	movs	r3, #2
 80011a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	2102      	movs	r1, #2
 80011bc:	4618      	mov	r0, r3
 80011be:	f005 ff89 	bl	80070d4 <HAL_RCC_ClockConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011c8:	f000 f968 	bl	800149c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011cc:	2310      	movs	r3, #16
 80011ce:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	4618      	mov	r0, r3
 80011d8:	f006 f904 	bl	80073e4 <HAL_RCCEx_PeriphCLKConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011e2:	f000 f95b 	bl	800149c <Error_Handler>
  }
}
 80011e6:	bf00      	nop
 80011e8:	3750      	adds	r7, #80	; 0x50
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_I2C1_Init+0x50>)
 80011f6:	4a13      	ldr	r2, [pc, #76]	; (8001244 <MX_I2C1_Init+0x54>)
 80011f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_I2C1_Init+0x50>)
 80011fc:	4a12      	ldr	r2, [pc, #72]	; (8001248 <MX_I2C1_Init+0x58>)
 80011fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_I2C1_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_I2C1_Init+0x50>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_I2C1_Init+0x50>)
 800120e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001212:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001214:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <MX_I2C1_Init+0x50>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_I2C1_Init+0x50>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800122c:	4804      	ldr	r0, [pc, #16]	; (8001240 <MX_I2C1_Init+0x50>)
 800122e:	f003 f80b 	bl	8004248 <HAL_I2C_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001238:	f000 f930 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2000065c 	.word	0x2000065c
 8001244:	40005400 	.word	0x40005400
 8001248:	000186a0 	.word	0x000186a0

0800124c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_SPI2_Init+0x64>)
 8001252:	4a18      	ldr	r2, [pc, #96]	; (80012b4 <MX_SPI2_Init+0x68>)
 8001254:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <MX_SPI2_Init+0x64>)
 8001258:	f44f 7282 	mov.w	r2, #260	; 0x104
 800125c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_SPI2_Init+0x64>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_SPI2_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_SPI2_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_SPI2_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_SPI2_Init+0x64>)
 8001278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800127c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_SPI2_Init+0x64>)
 8001280:	2218      	movs	r2, #24
 8001282:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <MX_SPI2_Init+0x64>)
 8001286:	2280      	movs	r2, #128	; 0x80
 8001288:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_SPI2_Init+0x64>)
 800128c:	2200      	movs	r2, #0
 800128e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <MX_SPI2_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_SPI2_Init+0x64>)
 8001298:	220a      	movs	r2, #10
 800129a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800129c:	4804      	ldr	r0, [pc, #16]	; (80012b0 <MX_SPI2_Init+0x64>)
 800129e:	f006 f957 	bl	8007550 <HAL_SPI_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80012a8:	f000 f8f8 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000604 	.word	0x20000604
 80012b4:	40003800 	.word	0x40003800

080012b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012cc:	463b      	mov	r3, r7
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012d4:	4b22      	ldr	r3, [pc, #136]	; (8001360 <MX_TIM1_Init+0xa8>)
 80012d6:	4a23      	ldr	r2, [pc, #140]	; (8001364 <MX_TIM1_Init+0xac>)
 80012d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = HAL_RCC_GetSysClockFreq()/1000000-1;
 80012da:	f005 ffe5 	bl	80072a8 <HAL_RCC_GetSysClockFreq>
 80012de:	4603      	mov	r3, r0
 80012e0:	4a21      	ldr	r2, [pc, #132]	; (8001368 <MX_TIM1_Init+0xb0>)
 80012e2:	fba2 2303 	umull	r2, r3, r2, r3
 80012e6:	0c9b      	lsrs	r3, r3, #18
 80012e8:	3b01      	subs	r3, #1
 80012ea:	4a1d      	ldr	r2, [pc, #116]	; (8001360 <MX_TIM1_Init+0xa8>)
 80012ec:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <MX_TIM1_Init+0xa8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <MX_TIM1_Init+0xa8>)
 80012f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <MX_TIM1_Init+0xa8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <MX_TIM1_Init+0xa8>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <MX_TIM1_Init+0xa8>)
 800130a:	2280      	movs	r2, #128	; 0x80
 800130c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800130e:	4814      	ldr	r0, [pc, #80]	; (8001360 <MX_TIM1_Init+0xa8>)
 8001310:	f006 fd26 	bl	8007d60 <HAL_TIM_Base_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800131a:	f000 f8bf 	bl	800149c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001322:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	4619      	mov	r1, r3
 800132a:	480d      	ldr	r0, [pc, #52]	; (8001360 <MX_TIM1_Init+0xa8>)
 800132c:	f006 fdb2 	bl	8007e94 <HAL_TIM_ConfigClockSource>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001336:	f000 f8b1 	bl	800149c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001342:	463b      	mov	r3, r7
 8001344:	4619      	mov	r1, r3
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <MX_TIM1_Init+0xa8>)
 8001348:	f006 ff60 	bl	800820c <HAL_TIMEx_MasterConfigSynchronization>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001352:	f000 f8a3 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200006d8 	.word	0x200006d8
 8001364:	40012c00 	.word	0x40012c00
 8001368:	431bde83 	.word	0x431bde83

0800136c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001380:	4b42      	ldr	r3, [pc, #264]	; (800148c <MX_GPIO_Init+0x120>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a41      	ldr	r2, [pc, #260]	; (800148c <MX_GPIO_Init+0x120>)
 8001386:	f043 0310 	orr.w	r3, r3, #16
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b3f      	ldr	r3, [pc, #252]	; (800148c <MX_GPIO_Init+0x120>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0310 	and.w	r3, r3, #16
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001398:	4b3c      	ldr	r3, [pc, #240]	; (800148c <MX_GPIO_Init+0x120>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a3b      	ldr	r2, [pc, #236]	; (800148c <MX_GPIO_Init+0x120>)
 800139e:	f043 0320 	orr.w	r3, r3, #32
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b39      	ldr	r3, [pc, #228]	; (800148c <MX_GPIO_Init+0x120>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0320 	and.w	r3, r3, #32
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b0:	4b36      	ldr	r3, [pc, #216]	; (800148c <MX_GPIO_Init+0x120>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a35      	ldr	r2, [pc, #212]	; (800148c <MX_GPIO_Init+0x120>)
 80013b6:	f043 0308 	orr.w	r3, r3, #8
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b33      	ldr	r3, [pc, #204]	; (800148c <MX_GPIO_Init+0x120>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b30      	ldr	r3, [pc, #192]	; (800148c <MX_GPIO_Init+0x120>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a2f      	ldr	r2, [pc, #188]	; (800148c <MX_GPIO_Init+0x120>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b2d      	ldr	r3, [pc, #180]	; (800148c <MX_GPIO_Init+0x120>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e6:	482a      	ldr	r0, [pc, #168]	; (8001490 <MX_GPIO_Init+0x124>)
 80013e8:	f002 fefd 	bl	80041e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|SPI2_nRF_CSn_Pin|HV_EN_Pin, GPIO_PIN_RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	f241 0121 	movw	r1, #4129	; 0x1021
 80013f2:	4828      	ldr	r0, [pc, #160]	; (8001494 <MX_GPIO_Init+0x128>)
 80013f4:	f002 fef7 	bl	80041e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013fe:	4826      	ldr	r0, [pc, #152]	; (8001498 <MX_GPIO_Init+0x12c>)
 8001400:	f002 fef1 	bl	80041e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, GPIO_PIN_SET);
 8001404:	2201      	movs	r2, #1
 8001406:	f44f 7180 	mov.w	r1, #256	; 0x100
 800140a:	4822      	ldr	r0, [pc, #136]	; (8001494 <MX_GPIO_Init+0x128>)
 800140c:	f002 feeb 	bl	80041e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001416:	2301      	movs	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2302      	movs	r3, #2
 8001420:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	4619      	mov	r1, r3
 8001428:	4819      	ldr	r0, [pc, #100]	; (8001490 <MX_GPIO_Init+0x124>)
 800142a:	f002 fd41 	bl	8003eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : nRF_CE_Pin SPI2_nRF_CSn_Pin HV_EN_Pin PT6315_STB_Pin */
  GPIO_InitStruct.Pin = nRF_CE_Pin|SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 800142e:	f241 1321 	movw	r3, #4385	; 0x1121
 8001432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001434:	2301      	movs	r3, #1
 8001436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2302      	movs	r3, #2
 800143e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	4619      	mov	r1, r3
 8001446:	4813      	ldr	r0, [pc, #76]	; (8001494 <MX_GPIO_Init+0x128>)
 8001448:	f002 fd32 	bl	8003eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1_Pin PB2_Pin */
  GPIO_InitStruct.Pin = PB1_Pin|PB2_Pin;
 800144c:	2306      	movs	r3, #6
 800144e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	4619      	mov	r1, r3
 800145e:	480d      	ldr	r0, [pc, #52]	; (8001494 <MX_GPIO_Init+0x128>)
 8001460:	f002 fd26 	bl	8003eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PU_Pin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8001464:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	2301      	movs	r3, #1
 800146c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2302      	movs	r3, #2
 8001474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	4619      	mov	r1, r3
 800147c:	4806      	ldr	r0, [pc, #24]	; (8001498 <MX_GPIO_Init+0x12c>)
 800147e:	f002 fd17 	bl	8003eb0 <HAL_GPIO_Init>

}
 8001482:	bf00      	nop
 8001484:	3720      	adds	r7, #32
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000
 8001490:	40011000 	.word	0x40011000
 8001494:	40010c00 	.word	0x40010c00
 8001498:	40010800 	.word	0x40010800

0800149c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a0:	b672      	cpsid	i
}
 80014a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <Error_Handler+0x8>

080014a6 <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b085      	sub	sp, #20
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	5c8a      	ldrb	r2, [r1, r2]
 80014ba:	4413      	add	r3, r2
 80014bc:	3301      	adds	r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b3f      	cmp	r3, #63	; 0x3f
 80014c4:	dd02      	ble.n	80014cc <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3b40      	subs	r3, #64	; 0x40
 80014ca:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	5cd3      	ldrb	r3, [r2, r3]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <hist_is_space_for_new+0x1a>
		return true;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e01e      	b.n	8001534 <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	429a      	cmp	r2, r3
 8001500:	db0c      	blt.n	800151c <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4413      	add	r3, r2
 8001510:	3b01      	subs	r3, #1
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	da0c      	bge.n	8001532 <hist_is_space_for_new+0x56>
			return true;
 8001518:	2301      	movs	r3, #1
 800151a:	e00b      	b.n	8001534 <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	3b01      	subs	r3, #1
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	da01      	bge.n	8001532 <hist_is_space_for_new+0x56>
			return true;
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <hist_is_space_for_new+0x58>
	}
	return false;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr

0800153e <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b3e      	cmp	r3, #62	; 0x3e
 800154e:	dc61      	bgt.n	8001614 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8001550:	e002      	b.n	8001558 <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f7ff ffa7 	bl	80014a6 <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f7ff ffbe 	bl	80014dc <hist_is_space_for_new>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f5      	beq.n	8001552 <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	5cd3      	ldrb	r3, [r2, r3]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d105      	bne.n	800157e <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	b2d1      	uxtb	r1, r2
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	429a      	cmp	r2, r3
 800158a:	da0a      	bge.n	80015a2 <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	3301      	adds	r3, #1
 8001594:	4413      	add	r3, r2
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	4618      	mov	r0, r3
 800159c:	f00b f968 	bl	800c870 <memcpy>
 80015a0:	e018      	b.n	80015d4 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80015aa:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	3301      	adds	r3, #1
 80015b4:	4413      	add	r3, r2
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f00b f958 	bl	800c870 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	18d1      	adds	r1, r2, r3
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	461a      	mov	r2, r3
 80015d0:	f00b f94e 	bl	800c870 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	b2d1      	uxtb	r1, r2
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4413      	add	r3, r2
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	2b3f      	cmp	r3, #63	; 0x3f
 80015f4:	dd05      	ble.n	8001602 <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	2100      	movs	r1, #0
 800160a:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	649a      	str	r2, [r3, #72]	; 0x48
 8001612:	e000      	b.n	8001616 <hist_save_line+0xd8>
		return;
 8001614:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	; 0x30
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 8001632:	e010      	b.n	8001656 <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001638:	4413      	add	r3, r2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	3301      	adds	r3, #1
 800163e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001640:	4413      	add	r3, r2
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8001644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001646:	2b3f      	cmp	r3, #63	; 0x3f
 8001648:	dd02      	ble.n	8001650 <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 800164a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164c:	3b40      	subs	r3, #64	; 0x40
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8001650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001652:	3301      	adds	r3, #1
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165a:	4413      	add	r3, r2
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1e8      	bne.n	8001634 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d176      	bne.n	8001756 <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800166e:	429a      	cmp	r2, r3
 8001670:	f2c0 80d6 	blt.w	8001820 <hist_restore_line+0x204>
			int header = pThis->begin;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 800167e:	e010      	b.n	80016a2 <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	4413      	add	r3, r2
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	3301      	adds	r3, #1
 800168a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800168c:	4413      	add	r3, r2
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	2b3f      	cmp	r3, #63	; 0x3f
 8001694:	dd02      	ble.n	800169c <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	3b40      	subs	r3, #64	; 0x40
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	3301      	adds	r3, #1
 80016a0:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	4413      	add	r3, r2
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d007      	beq.n	80016be <hist_restore_line+0xa2>
 80016ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	1e5a      	subs	r2, r3, #1
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d1e0      	bne.n	8001680 <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	4413      	add	r3, r2
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 80aa 	beq.w	8001820 <hist_restore_line+0x204>
					pThis->cur++;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	4413      	add	r3, r2
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	4413      	add	r3, r2
 80016e4:	2b3f      	cmp	r3, #63	; 0x3f
 80016e6:	dc11      	bgt.n	800170c <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 80016e8:	2265      	movs	r2, #101	; 0x65
 80016ea:	2100      	movs	r1, #0
 80016ec:	68b8      	ldr	r0, [r7, #8]
 80016ee:	f00b f8e7 	bl	800c8c0 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	3301      	adds	r3, #1
 80016f8:	18d1      	adds	r1, r2, r3
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	4413      	add	r3, r2
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	68b8      	ldr	r0, [r7, #8]
 8001706:	f00b f8b3 	bl	800c870 <memcpy>
 800170a:	e01f      	b.n	800174c <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001712:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 8001714:	2265      	movs	r2, #101	; 0x65
 8001716:	2100      	movs	r1, #0
 8001718:	68b8      	ldr	r0, [r7, #8]
 800171a:	f00b f8d1 	bl	800c8c0 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	3301      	adds	r3, #1
 8001724:	4413      	add	r3, r2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4619      	mov	r1, r3
 800172a:	68b8      	ldr	r0, [r7, #8]
 800172c:	f00b f8a0 	bl	800c870 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	18d0      	adds	r0, r2, r3
 8001736:	68f9      	ldr	r1, [r7, #12]
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	4413      	add	r3, r2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	461a      	mov	r2, r3
 8001748:	f00b f892 	bl	800c870 <memcpy>
				}
				return pThis->ring_buf[header];
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	4413      	add	r3, r2
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	e066      	b.n	8001824 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800175a:	2b00      	cmp	r3, #0
 800175c:	dd5e      	ble.n	800181c <hist_restore_line+0x200>
				pThis->cur--;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001762:	1e5a      	subs	r2, r3, #1
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	61fb      	str	r3, [r7, #28]
			int j = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8001772:	e010      	b.n	8001796 <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	4413      	add	r3, r2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	4413      	add	r3, r2
 8001782:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	2b3f      	cmp	r3, #63	; 0x3f
 8001788:	dd02      	ble.n	8001790 <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3b40      	subs	r3, #64	; 0x40
 800178e:	61fb      	str	r3, [r7, #28]
				j++;
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	3301      	adds	r3, #1
 8001794:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	4413      	add	r3, r2
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d006      	beq.n	80017b0 <hist_restore_line+0x194>
 80017a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	1ad2      	subs	r2, r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d1e1      	bne.n	8001774 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	4413      	add	r3, r2
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	4413      	add	r3, r2
 80017be:	2b3f      	cmp	r3, #63	; 0x3f
 80017c0:	dc0c      	bgt.n	80017dc <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	3301      	adds	r3, #1
 80017c8:	18d1      	adds	r1, r2, r3
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	4413      	add	r3, r2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	68b8      	ldr	r0, [r7, #8]
 80017d6:	f00b f84b 	bl	800c870 <memcpy>
 80017da:	e01a      	b.n	8001812 <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80017e2:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3301      	adds	r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	4619      	mov	r1, r3
 80017f0:	68b8      	ldr	r0, [r7, #8]
 80017f2:	f00b f83d 	bl	800c870 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	18d0      	adds	r0, r2, r3
 80017fc:	68f9      	ldr	r1, [r7, #12]
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	4413      	add	r3, r2
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	461a      	mov	r2, r3
 800180e:	f00b f82f 	bl	800c870 <memcpy>
			}
			return pThis->ring_buf[header];
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	4413      	add	r3, r2
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	e003      	b.n	8001824 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 800181c:	2300      	movs	r3, #0
 800181e:	e001      	b.n	8001824 <hist_restore_line+0x208>
		}
	}
	return -1;
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001824:	4618      	mov	r0, r3
 8001826:	3730      	adds	r7, #48	; 0x30
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 800182c:	b480      	push	{r7}
 800182e:	b087      	sub	sp, #28
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
	int i = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
	int ind = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8001840:	e002      	b.n	8001848 <split+0x1c>
			ind++;
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	3301      	adds	r3, #1
 8001846:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4413      	add	r3, r2
 800184e:	3354      	adds	r3, #84	; 0x54
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d103      	bne.n	800185e <split+0x32>
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	429a      	cmp	r2, r3
 800185c:	dbf1      	blt.n	8001842 <split+0x16>
		}
		if (!(ind < limit)) return i;
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	429a      	cmp	r2, r3
 8001864:	db01      	blt.n	800186a <split+0x3e>
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	e024      	b.n	80018b4 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	1c58      	adds	r0, r3, #1
 8001876:	6178      	str	r0, [r7, #20]
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	4403      	add	r3, r0
 800187e:	440a      	add	r2, r1
 8001880:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	2b09      	cmp	r3, #9
 8001886:	dd05      	ble.n	8001894 <split+0x68>
			return -1;
 8001888:	f04f 33ff 	mov.w	r3, #4294967295
 800188c:	e012      	b.n	80018b4 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	3301      	adds	r3, #1
 8001892:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4413      	add	r3, r2
 800189a:	3354      	adds	r3, #84	; 0x54
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <split+0x7e>
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	dbf1      	blt.n	800188e <split+0x62>
		}
		if (!(ind < limit)) return i;
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	dbca      	blt.n	8001848 <split+0x1c>
 80018b2:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	371c      	adds	r7, #28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018d0:	4610      	mov	r0, r2
 80018d2:	4798      	blx	r3
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80018ea:	4803      	ldr	r0, [pc, #12]	; (80018f8 <terminal_backspace+0x1c>)
 80018ec:	4798      	blx	r3
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	0800d37c 	.word	0x0800d37c

080018fc <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800190a:	4803      	ldr	r0, [pc, #12]	; (8001918 <terminal_newline+0x1c>)
 800190c:	4798      	blx	r3
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	0800d384 	.word	0x0800d384

0800191c <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	2300      	movs	r3, #0
 800192c:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001938:	d235      	bcs.n	80019a6 <u16bit_to_str+0x8a>
		while (nmb > 0) {
 800193a:	e01a      	b.n	8001972 <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <u16bit_to_str+0x9c>)
 8001940:	fba3 2301 	umull	r2, r3, r3, r1
 8001944:	08da      	lsrs	r2, r3, #3
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	1aca      	subs	r2, r1, r3
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	1c59      	adds	r1, r3, #1
 8001956:	6179      	str	r1, [r7, #20]
 8001958:	3230      	adds	r2, #48	; 0x30
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	f107 0118 	add.w	r1, r7, #24
 8001960:	440b      	add	r3, r1
 8001962:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a13      	ldr	r2, [pc, #76]	; (80019b8 <u16bit_to_str+0x9c>)
 800196a:	fba2 2303 	umull	r2, r3, r2, r3
 800196e:	08db      	lsrs	r3, r3, #3
 8001970:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1e1      	bne.n	800193c <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	e00f      	b.n	800199e <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	1e5a      	subs	r2, r3, #1
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	1c59      	adds	r1, r3, #1
 800198a:	6039      	str	r1, [r7, #0]
 800198c:	f107 0118 	add.w	r1, r7, #24
 8001990:	440a      	add	r2, r1
 8001992:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001996:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	3301      	adds	r3, #1
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	dbeb      	blt.n	800197e <u16bit_to_str+0x62>
	}
	*buf = '\0';
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
	return buf;
 80019ac:	683b      	ldr	r3, [r7, #0]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	371c      	adds	r7, #28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	cccccccd 	.word	0xcccccccd

080019bc <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	f107 0310 	add.w	r3, r7, #16
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 80019d6:	f107 030c 	add.w	r3, r7, #12
 80019da:	4a1d      	ldr	r2, [pc, #116]	; (8001a50 <terminal_move_cursor+0x94>)
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	4611      	mov	r1, r2
 80019e0:	8019      	strh	r1, [r3, #0]
 80019e2:	3302      	adds	r3, #2
 80019e4:	0c12      	lsrs	r2, r2, #16
 80019e6:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	dd0f      	ble.n	8001a0e <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	f107 030c 	add.w	r3, r7, #12
 80019f4:	3302      	adds	r3, #2
 80019f6:	4619      	mov	r1, r3
 80019f8:	4610      	mov	r0, r2
 80019fa:	f7ff ff8f 	bl	800191c <u16bit_to_str>
 80019fe:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	4914      	ldr	r1, [pc, #80]	; (8001a54 <terminal_move_cursor+0x98>)
 8001a04:	461a      	mov	r2, r3
 8001a06:	460b      	mov	r3, r1
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	8013      	strh	r3, [r2, #0]
 8001a0c:	e013      	b.n	8001a36 <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	da18      	bge.n	8001a46 <terminal_move_cursor+0x8a>
		endstr = u16bit_to_str (-(offset), str+2);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	425b      	negs	r3, r3
 8001a18:	461a      	mov	r2, r3
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	3302      	adds	r3, #2
 8001a20:	4619      	mov	r1, r3
 8001a22:	4610      	mov	r0, r2
 8001a24:	f7ff ff7a 	bl	800191c <u16bit_to_str>
 8001a28:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	490a      	ldr	r1, [pc, #40]	; (8001a58 <terminal_move_cursor+0x9c>)
 8001a2e:	461a      	mov	r2, r3
 8001a30:	460b      	mov	r3, r1
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001a3c:	f107 020c 	add.w	r2, r7, #12
 8001a40:	4610      	mov	r0, r2
 8001a42:	4798      	blx	r3
 8001a44:	e000      	b.n	8001a48 <terminal_move_cursor+0x8c>
		return;
 8001a46:	bf00      	nop
}
 8001a48:	3720      	adds	r7, #32
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	0800d388 	.word	0x0800d388
 8001a54:	0800d38c 	.word	0x0800d38c
 8001a58:	0800d390 	.word	0x0800d390

08001a5c <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <terminal_reset_cursor+0x64>)
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	8019      	strh	r1, [r3, #0]
 8001a70:	3302      	adds	r3, #2
 8001a72:	0c12      	lsrs	r2, r2, #16
 8001a74:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	206d      	movs	r0, #109	; 0x6d
 8001a80:	f7ff ff4c 	bl	800191c <u16bit_to_str>
 8001a84:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <terminal_reset_cursor+0x68>)
 8001a8a:	6810      	ldr	r0, [r2, #0]
 8001a8c:	6018      	str	r0, [r3, #0]
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3303      	adds	r3, #3
 8001a92:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 8001a94:	69f9      	ldr	r1, [r7, #28]
 8001a96:	2006      	movs	r0, #6
 8001a98:	f7ff ff40 	bl	800191c <u16bit_to_str>
 8001a9c:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	4909      	ldr	r1, [pc, #36]	; (8001ac8 <terminal_reset_cursor+0x6c>)
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001ab0:	f107 020c 	add.w	r2, r7, #12
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4798      	blx	r3
}
 8001ab8:	bf00      	nop
 8001aba:	3720      	adds	r7, #32
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	0800d388 	.word	0x0800d388
 8001ac4:	0800d394 	.word	0x0800d394
 8001ac8:	0800d38c 	.word	0x0800d38c

08001acc <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001ade:	4816      	ldr	r0, [pc, #88]	; (8001b38 <terminal_print_line+0x6c>)
 8001ae0:	4798      	blx	r3

	char nch [] = {0,0};
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	e014      	b.n	8001b16 <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	4413      	add	r3, r2
 8001af2:	3354      	adds	r3, #84	; 0x54
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 8001af8:	7c3b      	ldrb	r3, [r7, #16]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <terminal_print_line+0x36>
			nch[0] = ' ';
 8001afe:	2320      	movs	r3, #32
 8001b00:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001b08:	f107 0210 	add.w	r2, r7, #16
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3301      	adds	r3, #1
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	dbe4      	blt.n	8001aec <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f7ff ff9a 	bl	8001a5c <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f7ff ff46 	bl	80019bc <terminal_move_cursor>
}
 8001b30:	bf00      	nop
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	0800d398 	.word	0x0800d398

08001b3c <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3354      	adds	r3, #84	; 0x54
 8001b4a:	2265      	movs	r2, #101	; 0x65
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00a feb6 	bl	800c8c0 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3304      	adds	r3, #4
 8001b58:	2240      	movs	r2, #64	; 0x40
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f00a feaf 	bl	800c8c0 <memset>
	pThis->ring_hist.begin = 0;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	pThis->execute = NULL;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pThis->get_completion = NULL;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
	pThis->prompt_str = prompt_default;
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <microrl_init+0x78>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000008 	.word	0x20000008

08001bb8 <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	1d18      	adds	r0, r3, #4
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3354      	adds	r3, #84	; 0x54
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	4619      	mov	r1, r3
 8001c22:	f7ff fcfb 	bl	800161c <hist_restore_line>
 8001c26:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	db1a      	blt.n	8001c64 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	3354      	adds	r3, #84	; 0x54
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		terminal_reset_cursor (pThis);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ff04 	bl	8001a5c <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ff34 	bl	8001acc <terminal_print_line>
	}
}
 8001c64:	bf00      	nop
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	2b5b      	cmp	r3, #91	; 0x5b
 8001c7c:	d104      	bne.n	8001c88 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
		return 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	e07b      	b.n	8001d80 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d14f      	bne.n	8001d30 <escape_process+0xc4>
		if (ch == 'A') {
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	2b41      	cmp	r3, #65	; 0x41
 8001c94:	d105      	bne.n	8001ca2 <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 8001c96:	2100      	movs	r1, #0
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ffb7 	bl	8001c0c <hist_search>
#endif
			return 1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e06e      	b.n	8001d80 <escape_process+0x114>
		} else if (ch == 'B') {
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	2b42      	cmp	r3, #66	; 0x42
 8001ca6:	d105      	bne.n	8001cb4 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 8001ca8:	2101      	movs	r1, #1
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ffae 	bl	8001c0c <hist_search>
#endif
			return 1;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e065      	b.n	8001d80 <escape_process+0x114>
		} else if (ch == 'C') {
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	2b43      	cmp	r3, #67	; 0x43
 8001cb8:	d114      	bne.n	8001ce4 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	da0a      	bge.n	8001ce0 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 8001cca:	2101      	movs	r1, #1
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff fe75 	bl	80019bc <terminal_move_cursor>
				pThis->cursor++;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e04d      	b.n	8001d80 <escape_process+0x114>
		} else if (ch == 'D') {
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	2b44      	cmp	r3, #68	; 0x44
 8001ce8:	d112      	bne.n	8001d10 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	dd0b      	ble.n	8001d0c <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 8001cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff fe5f 	bl	80019bc <terminal_move_cursor>
				pThis->cursor--;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d04:	1e5a      	subs	r2, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e037      	b.n	8001d80 <escape_process+0x114>
		} else if (ch == '7') {
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	2b37      	cmp	r3, #55	; 0x37
 8001d14:	d104      	bne.n	8001d20 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2202      	movs	r2, #2
 8001d1a:	701a      	strb	r2, [r3, #0]
			return 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e02f      	b.n	8001d80 <escape_process+0x114>
		} else if (ch == '8') {
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	2b38      	cmp	r3, #56	; 0x38
 8001d24:	d12b      	bne.n	8001d7e <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2203      	movs	r2, #3
 8001d2a:	701a      	strb	r2, [r3, #0]
			return 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e027      	b.n	8001d80 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	2b7e      	cmp	r3, #126	; 0x7e
 8001d34:	d123      	bne.n	8001d7e <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d108      	bne.n	8001d50 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff fe8c 	bl	8001a5c <terminal_reset_cursor>
			pThis->cursor = 0;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e017      	b.n	8001d80 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d112      	bne.n	8001d7e <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	4619      	mov	r1, r3
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff fe27 	bl	80019bc <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	2b64      	cmp	r3, #100	; 0x64
 8001da0:	dc60      	bgt.n	8001e64 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001dae:	4619      	mov	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	440b      	add	r3, r1
 8001db4:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3354      	adds	r3, #84	; 0x54
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor + len,
 8001dc0:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001dce:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	f00a fd5b 	bl	800c88c <memmove>
		for (i = 0; i < len; i++) {
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	e025      	b.n	8001e28 <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	441a      	add	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	440b      	add	r3, r1
 8001dec:	7811      	ldrb	r1, [r2, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4413      	add	r3, r2
 8001df2:	460a      	mov	r2, r1
 8001df4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	4413      	add	r3, r2
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4413      	add	r3, r2
 8001e06:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e0a:	2b20      	cmp	r3, #32
 8001e0c:	d109      	bne.n	8001e22 <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	4413      	add	r3, r2
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	dbd5      	blt.n	8001ddc <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	441a      	add	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdlen += len;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	441a      	add	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4413      	add	r3, r2
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <microrl_insert_text+0xde>
	}
	return false;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	dd31      	ble.n	8001ee4 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff fd2b 	bl	80018dc <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e92:	3b01      	subs	r3, #1
 8001e94:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3354      	adds	r3, #84	; 0x54
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor-1,
 8001ea0:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f00a fcea 	bl	800c88c <memmove>
		pThis->cursor--;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ebe:	1e5a      	subs	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001edc:	1e5a      	subs	r2, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	}
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f7fe f930 	bl	8000160 <strlen>
 8001f00:	4603      	mov	r3, r0
 8001f02:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	e019      	b.n	8001f3e <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe f923 	bl	8000160 <strlen>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d20a      	bcs.n	8001f38 <common_len+0x4c>
			shortest = arr[i];
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f7fe f916 	bl	8000160 <strlen>
 8001f34:	4603      	mov	r3, r0
 8001f36:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1de      	bne.n	8001f0a <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	e01f      	b.n	8001f92 <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	e012      	b.n	8001f7e <common_len+0x92>
			if (shortest[i] != arr[j][i])
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	781a      	ldrb	r2, [r3, #0]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	440b      	add	r3, r1
 8001f68:	6819      	ldr	r1, [r3, #0]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	440b      	add	r3, r1
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d001      	beq.n	8001f78 <common_len+0x8c>
				return i;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	e011      	b.n	8001f9c <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1e5      	bne.n	8001f58 <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	dbdb      	blt.n	8001f52 <common_len+0x66>

	return i;
 8001f9a:	697b      	ldr	r3, [r7, #20]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 8001fa4:	b5b0      	push	{r4, r5, r7, lr}
 8001fa6:	b090      	sub	sp, #64	; 0x40
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 809c 	beq.w	80020f0 <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001fbe:	f107 0208 	add.w	r2, r7, #8
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff fc31 	bl	800182c <split>
 8001fca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d109      	bne.n	8001ff4 <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 8001fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001fec:	4413      	add	r3, r2
 8001fee:	4a42      	ldr	r2, [pc, #264]	; (80020f8 <microrl_get_complite+0x154>)
 8001ff0:	f843 2c38 	str.w	r2, [r3, #-56]
	compl_token = pThis->get_completion (status, tkn_arr);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001ffa:	f107 0208 	add.w	r2, r7, #8
 8001ffe:	4611      	mov	r1, r2
 8002000:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002002:	4798      	blx	r3
 8002004:	6338      	str	r0, [r7, #48]	; 0x30
	if (compl_token[0] != NULL) {
 8002006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d071      	beq.n	80020f2 <microrl_get_complite+0x14e>
		int i = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	63bb      	str	r3, [r7, #56]	; 0x38
		int len;

		if (compl_token[1] == NULL) {
 8002012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002014:	3304      	adds	r3, #4
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d107      	bne.n	800202c <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 800201c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe f89d 	bl	8000160 <strlen>
 8002026:	4603      	mov	r3, r0
 8002028:	637b      	str	r3, [r7, #52]	; 0x34
 800202a:	e026      	b.n	800207a <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 800202c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800202e:	f7ff ff5d 	bl	8001eec <common_len>
 8002032:	6378      	str	r0, [r7, #52]	; 0x34
			terminal_newline (pThis);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff fc61 	bl	80018fc <terminal_newline>
			while (compl_token [i] != NULL) {
 800203a:	e011      	b.n	8002060 <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002044:	0092      	lsls	r2, r2, #2
 8002046:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002048:	440a      	add	r2, r1
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	4610      	mov	r0, r2
 800204e:	4798      	blx	r3
				pThis->print (" ");
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002056:	4829      	ldr	r0, [pc, #164]	; (80020fc <microrl_get_complite+0x158>)
 8002058:	4798      	blx	r3
				i++;
 800205a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800205c:	3301      	adds	r3, #1
 800205e:	63bb      	str	r3, [r7, #56]	; 0x38
			while (compl_token [i] != NULL) {
 8002060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002066:	4413      	add	r3, r2
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1e6      	bne.n	800203c <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fc44 	bl	80018fc <terminal_newline>
			print_prompt (pThis);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff fc22 	bl	80018be <print_prompt>
		}
		
		if (len) {
 800207a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207c:	2b00      	cmp	r3, #0
 800207e:	d02b      	beq.n	80020d8 <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8002080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002082:	681c      	ldr	r4, [r3, #0]
 8002084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002086:	3b01      	subs	r3, #1
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800208e:	4413      	add	r3, r2
 8002090:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe f863 	bl	8000160 <strlen>
 800209a:	4603      	mov	r3, r0
 800209c:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 800209e:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80020a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a2:	3b01      	subs	r3, #1
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80020aa:	4413      	add	r3, r2
 80020ac:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe f855 	bl	8000160 <strlen>
 80020b6:	4603      	mov	r3, r0
 80020b8:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 80020ba:	461a      	mov	r2, r3
 80020bc:	4629      	mov	r1, r5
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff fe62 	bl	8001d88 <microrl_insert_text>
			if (compl_token[1] == NULL) 
 80020c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c6:	3304      	adds	r3, #4
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d104      	bne.n	80020d8 <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 80020ce:	2201      	movs	r2, #1
 80020d0:	490a      	ldr	r1, [pc, #40]	; (80020fc <microrl_get_complite+0x158>)
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff fe58 	bl	8001d88 <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff fcbf 	bl	8001a5c <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020e4:	461a      	mov	r2, r3
 80020e6:	2100      	movs	r1, #0
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff fcef 	bl	8001acc <terminal_print_line>
 80020ee:	e000      	b.n	80020f2 <microrl_get_complite+0x14e>
		return;
 80020f0:	bf00      	nop
	} 
}
 80020f2:	3740      	adds	r7, #64	; 0x40
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bdb0      	pop	{r4, r5, r7, pc}
 80020f8:	0800d39c 	.word	0x0800d39c
 80020fc:	0800d3a0 	.word	0x0800d3a0

08002100 <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 8002100:	b580      	push	{r7, lr}
 8002102:	b08e      	sub	sp, #56	; 0x38
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff fbf7 	bl	80018fc <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002114:	2b00      	cmp	r3, #0
 8002116:	dd0a      	ble.n	800212e <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	1d18      	adds	r0, r3, #4
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002128:	461a      	mov	r2, r3
 800212a:	f7ff fa08 	bl	800153e <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002134:	f107 020c 	add.w	r2, r7, #12
 8002138:	4619      	mov	r1, r3
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fb76 	bl	800182c <split>
 8002140:	6378      	str	r0, [r7, #52]	; 0x34
	if (status == -1){
 8002142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d109      	bne.n	800215e <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002150:	4817      	ldr	r0, [pc, #92]	; (80021b0 <new_line_handler+0xb0>)
 8002152:	4798      	blx	r3
		pThis->print (ENDL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800215a:	4816      	ldr	r0, [pc, #88]	; (80021b4 <new_line_handler+0xb4>)
 800215c:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 800215e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002160:	2b00      	cmp	r3, #0
 8002162:	dd0c      	ble.n	800217e <new_line_handler+0x7e>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800216a:	2b00      	cmp	r3, #0
 800216c:	d007      	beq.n	800217e <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002174:	f107 020c 	add.w	r2, r7, #12
 8002178:	4611      	mov	r1, r2
 800217a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800217c:	4798      	blx	r3
	print_prompt (pThis);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff fb9d 	bl	80018be <print_prompt>
	pThis->cmdlen = 0;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3354      	adds	r3, #84	; 0x54
 8002198:	2265      	movs	r2, #101	; 0x65
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f00a fb8f 	bl	800c8c0 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 80021a8:	bf00      	nop
 80021aa:	3738      	adds	r7, #56	; 0x38
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	0800d3a4 	.word	0x0800d3a4
 80021b4:	0800d384 	.word	0x0800d384

080021b8 <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	785b      	ldrb	r3, [r3, #1]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00d      	beq.n	80021e6 <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	4619      	mov	r1, r3
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff fd4b 	bl	8001c6c <escape_process>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 81e3 	beq.w	80025a4 <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 80021e4:	e1de      	b.n	80025a4 <microrl_insert_char+0x3ec>
		switch (ch) {
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	2b7e      	cmp	r3, #126	; 0x7e
 80021ec:	f200 81af 	bhi.w	800254e <microrl_insert_char+0x396>
 80021f0:	a201      	add	r2, pc, #4	; (adr r2, 80021f8 <microrl_insert_char+0x40>)
 80021f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f6:	bf00      	nop
 80021f8:	0800248b 	.word	0x0800248b
 80021fc:	080024c3 	.word	0x080024c3
 8002200:	0800253b 	.word	0x0800253b
 8002204:	0800254f 	.word	0x0800254f
 8002208:	08002467 	.word	0x08002467
 800220c:	0800249b 	.word	0x0800249b
 8002210:	0800254f 	.word	0x0800254f
 8002214:	080024fb 	.word	0x080024fb
 8002218:	0800241d 	.word	0x0800241d
 800221c:	080023f5 	.word	0x080023f5
 8002220:	0800244f 	.word	0x0800244f
 8002224:	0800254f 	.word	0x0800254f
 8002228:	080023f5 	.word	0x080023f5
 800222c:	080024f1 	.word	0x080024f1
 8002230:	0800254f 	.word	0x0800254f
 8002234:	080024e7 	.word	0x080024e7
 8002238:	0800254f 	.word	0x0800254f
 800223c:	08002517 	.word	0x08002517
 8002240:	0800254f 	.word	0x0800254f
 8002244:	0800254f 	.word	0x0800254f
 8002248:	08002433 	.word	0x08002433
 800224c:	0800254f 	.word	0x0800254f
 8002250:	0800254f 	.word	0x0800254f
 8002254:	0800254f 	.word	0x0800254f
 8002258:	0800254f 	.word	0x0800254f
 800225c:	0800254f 	.word	0x0800254f
 8002260:	08002425 	.word	0x08002425
 8002264:	0800254f 	.word	0x0800254f
 8002268:	0800254f 	.word	0x0800254f
 800226c:	0800254f 	.word	0x0800254f
 8002270:	0800254f 	.word	0x0800254f
 8002274:	0800254f 	.word	0x0800254f
 8002278:	0800254f 	.word	0x0800254f
 800227c:	0800254f 	.word	0x0800254f
 8002280:	0800254f 	.word	0x0800254f
 8002284:	0800254f 	.word	0x0800254f
 8002288:	0800254f 	.word	0x0800254f
 800228c:	0800254f 	.word	0x0800254f
 8002290:	0800254f 	.word	0x0800254f
 8002294:	0800254f 	.word	0x0800254f
 8002298:	0800254f 	.word	0x0800254f
 800229c:	0800254f 	.word	0x0800254f
 80022a0:	0800254f 	.word	0x0800254f
 80022a4:	0800254f 	.word	0x0800254f
 80022a8:	0800254f 	.word	0x0800254f
 80022ac:	0800254f 	.word	0x0800254f
 80022b0:	0800254f 	.word	0x0800254f
 80022b4:	0800254f 	.word	0x0800254f
 80022b8:	0800254f 	.word	0x0800254f
 80022bc:	0800254f 	.word	0x0800254f
 80022c0:	0800254f 	.word	0x0800254f
 80022c4:	0800254f 	.word	0x0800254f
 80022c8:	0800254f 	.word	0x0800254f
 80022cc:	0800254f 	.word	0x0800254f
 80022d0:	0800254f 	.word	0x0800254f
 80022d4:	0800254f 	.word	0x0800254f
 80022d8:	0800254f 	.word	0x0800254f
 80022dc:	0800254f 	.word	0x0800254f
 80022e0:	0800254f 	.word	0x0800254f
 80022e4:	0800254f 	.word	0x0800254f
 80022e8:	0800254f 	.word	0x0800254f
 80022ec:	0800254f 	.word	0x0800254f
 80022f0:	0800254f 	.word	0x0800254f
 80022f4:	0800254f 	.word	0x0800254f
 80022f8:	0800254f 	.word	0x0800254f
 80022fc:	0800254f 	.word	0x0800254f
 8002300:	0800254f 	.word	0x0800254f
 8002304:	0800254f 	.word	0x0800254f
 8002308:	0800254f 	.word	0x0800254f
 800230c:	0800254f 	.word	0x0800254f
 8002310:	0800254f 	.word	0x0800254f
 8002314:	0800254f 	.word	0x0800254f
 8002318:	0800254f 	.word	0x0800254f
 800231c:	0800254f 	.word	0x0800254f
 8002320:	0800254f 	.word	0x0800254f
 8002324:	0800254f 	.word	0x0800254f
 8002328:	0800254f 	.word	0x0800254f
 800232c:	0800254f 	.word	0x0800254f
 8002330:	0800254f 	.word	0x0800254f
 8002334:	0800254f 	.word	0x0800254f
 8002338:	0800254f 	.word	0x0800254f
 800233c:	0800254f 	.word	0x0800254f
 8002340:	0800254f 	.word	0x0800254f
 8002344:	0800254f 	.word	0x0800254f
 8002348:	0800254f 	.word	0x0800254f
 800234c:	0800254f 	.word	0x0800254f
 8002350:	0800254f 	.word	0x0800254f
 8002354:	0800254f 	.word	0x0800254f
 8002358:	0800254f 	.word	0x0800254f
 800235c:	0800254f 	.word	0x0800254f
 8002360:	0800254f 	.word	0x0800254f
 8002364:	0800254f 	.word	0x0800254f
 8002368:	0800254f 	.word	0x0800254f
 800236c:	0800254f 	.word	0x0800254f
 8002370:	0800254f 	.word	0x0800254f
 8002374:	0800254f 	.word	0x0800254f
 8002378:	0800254f 	.word	0x0800254f
 800237c:	0800254f 	.word	0x0800254f
 8002380:	0800254f 	.word	0x0800254f
 8002384:	0800254f 	.word	0x0800254f
 8002388:	0800254f 	.word	0x0800254f
 800238c:	0800254f 	.word	0x0800254f
 8002390:	0800254f 	.word	0x0800254f
 8002394:	0800254f 	.word	0x0800254f
 8002398:	0800254f 	.word	0x0800254f
 800239c:	0800254f 	.word	0x0800254f
 80023a0:	0800254f 	.word	0x0800254f
 80023a4:	0800254f 	.word	0x0800254f
 80023a8:	0800254f 	.word	0x0800254f
 80023ac:	0800254f 	.word	0x0800254f
 80023b0:	0800254f 	.word	0x0800254f
 80023b4:	0800254f 	.word	0x0800254f
 80023b8:	0800254f 	.word	0x0800254f
 80023bc:	0800254f 	.word	0x0800254f
 80023c0:	0800254f 	.word	0x0800254f
 80023c4:	0800254f 	.word	0x0800254f
 80023c8:	0800254f 	.word	0x0800254f
 80023cc:	0800254f 	.word	0x0800254f
 80023d0:	0800254f 	.word	0x0800254f
 80023d4:	0800254f 	.word	0x0800254f
 80023d8:	0800254f 	.word	0x0800254f
 80023dc:	0800254f 	.word	0x0800254f
 80023e0:	0800254f 	.word	0x0800254f
 80023e4:	0800254f 	.word	0x0800254f
 80023e8:	0800254f 	.word	0x0800254f
 80023ec:	0800254f 	.word	0x0800254f
 80023f0:	080024fb 	.word	0x080024fb
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	789b      	ldrb	r3, [r3, #2]
 80023f8:	461a      	mov	r2, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2b0d      	cmp	r3, #13
 80023fe:	d101      	bne.n	8002404 <microrl_insert_char+0x24c>
 8002400:	230a      	movs	r3, #10
 8002402:	e000      	b.n	8002406 <microrl_insert_char+0x24e>
 8002404:	230d      	movs	r3, #13
 8002406:	4293      	cmp	r3, r2
 8002408:	f000 80c1 	beq.w	800258e <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	b2da      	uxtb	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff fe73 	bl	8002100 <new_line_handler>
				break;
 800241a:	e0c3      	b.n	80025a4 <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff fdc1 	bl	8001fa4 <microrl_get_complite>
			break;
 8002422:	e0bf      	b.n	80025a4 <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	705a      	strb	r2, [r3, #1]
			break;
 800242a:	e0bb      	b.n	80025a4 <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff fd1e 	bl	8001e6e <microrl_backspace>
					while (pThis->cursor > 0) {
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002438:	2b00      	cmp	r3, #0
 800243a:	dcf7      	bgt.n	800242c <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002442:	461a      	mov	r2, r3
 8002444:	2100      	movs	r1, #0
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff fb40 	bl	8001acc <terminal_print_line>
			break;
 800244c:	e0aa      	b.n	80025a4 <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002454:	4855      	ldr	r0, [pc, #340]	; (80025ac <microrl_insert_char+0x3f4>)
 8002456:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			break;
 8002464:	e09e      	b.n	80025a4 <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	4619      	mov	r1, r3
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff faa0 	bl	80019bc <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8002488:	e08c      	b.n	80025a4 <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff fae6 	bl	8001a5c <terminal_reset_cursor>
				pThis->cursor = 0;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8002498:	e084      	b.n	80025a4 <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80024a6:	429a      	cmp	r2, r3
 80024a8:	da73      	bge.n	8002592 <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 80024aa:	2101      	movs	r1, #1
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff fa85 	bl	80019bc <terminal_move_cursor>
				pThis->cursor++;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 80024c0:	e067      	b.n	8002592 <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d064      	beq.n	8002596 <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 80024cc:	f04f 31ff 	mov.w	r1, #4294967295
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff fa73 	bl	80019bc <terminal_move_cursor>
				pThis->cursor--;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024dc:	1e5a      	subs	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 80024e4:	e057      	b.n	8002596 <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 80024e6:	2100      	movs	r1, #0
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff fb8f 	bl	8001c0c <hist_search>
			break;
 80024ee:	e059      	b.n	80025a4 <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 80024f0:	2101      	movs	r1, #1
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff fb8a 	bl	8001c0c <hist_search>
			break;
 80024f8:	e054      	b.n	80025a4 <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff fcb7 	bl	8001e6e <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800250c:	461a      	mov	r2, r3
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff fadc 	bl	8001acc <terminal_print_line>
			break;
 8002514:	e046      	b.n	80025a4 <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff f9f0 	bl	80018fc <terminal_newline>
				print_prompt (pThis);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff f9ce 	bl	80018be <print_prompt>
				terminal_reset_cursor (pThis);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff fa9a 	bl	8001a5c <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800252e:	461a      	mov	r2, r3
 8002530:	2100      	movs	r1, #0
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff faca 	bl	8001acc <terminal_print_line>
			break;
 8002538:	e034      	b.n	80025a4 <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d02a      	beq.n	800259a <microrl_insert_char+0x3e2>
				pThis->sigint();
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800254a:	4798      	blx	r3
			break;
 800254c:	e025      	b.n	800259a <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b20      	cmp	r3, #32
 8002552:	d104      	bne.n	800255e <microrl_insert_char+0x3a6>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800255a:	2b00      	cmp	r3, #0
 800255c:	d01f      	beq.n	800259e <microrl_insert_char+0x3e6>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b1f      	cmp	r3, #31
 8002562:	dd1c      	ble.n	800259e <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8002564:	463b      	mov	r3, r7
 8002566:	2201      	movs	r2, #1
 8002568:	4619      	mov	r1, r3
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff fc0c 	bl	8001d88 <microrl_insert_text>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d015      	beq.n	80025a2 <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800257c:	1e59      	subs	r1, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002584:	461a      	mov	r2, r3
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff faa0 	bl	8001acc <terminal_print_line>
			break;
 800258c:	e009      	b.n	80025a2 <microrl_insert_char+0x3ea>
					break;
 800258e:	bf00      	nop
 8002590:	e008      	b.n	80025a4 <microrl_insert_char+0x3ec>
			break;
 8002592:	bf00      	nop
 8002594:	e006      	b.n	80025a4 <microrl_insert_char+0x3ec>
			break;
 8002596:	bf00      	nop
 8002598:	e004      	b.n	80025a4 <microrl_insert_char+0x3ec>
			break;
 800259a:	bf00      	nop
 800259c:	e002      	b.n	80025a4 <microrl_insert_char+0x3ec>
	}
 800259e:	bf00      	nop
 80025a0:	e000      	b.n	80025a4 <microrl_insert_char+0x3ec>
			break;
 80025a2:	bf00      	nop
}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	0800d398 	.word	0x0800d398

080025b0 <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 80025ba:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <microrl_print_char+0x20>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	79fa      	ldrb	r2, [r7, #7]
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fdf8 	bl	80021b8 <microrl_insert_char>
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	2000000c 	.word	0x2000000c

080025d4 <print>:

void print (const char * str)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 80025dc:	4b19      	ldr	r3, [pc, #100]	; (8002644 <print+0x70>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	f083 0301 	eor.w	r3, r3, #1
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <print+0x1e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b1b      	cmp	r3, #27
 80025f0:	d024      	beq.n	800263c <print+0x68>
		return;
	uint16_t len = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 80025f6:	89fb      	ldrh	r3, [r7, #14]
 80025f8:	3301      	adds	r3, #1
 80025fa:	81fb      	strh	r3, [r7, #14]
 80025fc:	89fb      	ldrh	r3, [r7, #14]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f6      	bne.n	80025f6 <print+0x22>
	uint32_t timeout = HAL_GetTick();
 8002608:	f001 fb16 	bl	8003c38 <HAL_GetTick>
 800260c:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 800260e:	e006      	b.n	800261e <print+0x4a>
		if (HAL_GetTick() - timeout >= 5)
 8002610:	f001 fb12 	bl	8003c38 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b04      	cmp	r3, #4
 800261c:	d807      	bhi.n	800262e <print+0x5a>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <print+0x74>)
 8002620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002624:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f1      	bne.n	8002610 <print+0x3c>
 800262c:	e000      	b.n	8002630 <print+0x5c>
			break;
 800262e:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 8002630:	89fb      	ldrh	r3, [r7, #14]
 8002632:	4619      	mov	r1, r3
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f009 fd13 	bl	800c060 <CDC_Transmit_FS>
 800263a:	e000      	b.n	800263e <print+0x6a>
		return;
 800263c:	bf00      	nop
}
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000010 	.word	0x20000010
 8002648:	20000828 	.word	0x20000828

0800264c <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	e010      	b.n	800267e <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 800265c:	490c      	ldr	r1, [pc, #48]	; (8002690 <find_color_by_name+0x44>)
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4413      	add	r3, r2
 800266a:	440b      	add	r3, r1
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	79fa      	ldrb	r2, [r7, #7]
 8002670:	429a      	cmp	r2, r3
 8002672:	d101      	bne.n	8002678 <find_color_by_name+0x2c>
		{
			return i;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	e006      	b.n	8002686 <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3301      	adds	r3, #1
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b10      	cmp	r3, #16
 8002682:	d9eb      	bls.n	800265c <find_color_by_name+0x10>
		}
	}
	return 0;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	0800d6f0 	.word	0x0800d6f0

08002694 <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff ffd2 	bl	800264c <find_color_by_name>
 80026a8:	4602      	mov	r2, r0
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	4a08      	ldr	r2, [pc, #32]	; (80026d8 <print_color+0x44>)
 80026b6:	4413      	add	r3, r2
 80026b8:	3301      	adds	r3, #1
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff8a 	bl	80025d4 <print>
	print(str);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff ff87 	bl	80025d4 <print>
	print(COLOR_NC);
 80026c6:	4805      	ldr	r0, [pc, #20]	; (80026dc <print_color+0x48>)
 80026c8:	f7ff ff84 	bl	80025d4 <print>
	return 0;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	0800d6f0 	.word	0x0800d6f0
 80026dc:	0800d3bc 	.word	0x0800d3bc

080026e0 <str_length>:

int str_length(const char * str)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
	int i = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]
	while (str[i])
 80026ec:	e002      	b.n	80026f4 <str_length+0x14>
		i++;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	3301      	adds	r3, #1
 80026f2:	60fb      	str	r3, [r7, #12]
	while (str[i])
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f6      	bne.n	80026ee <str_length+0xe>
	return i;
 8002700:	68fb      	ldr	r3, [r7, #12]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <print_help>:


int print_help(int argc, const char * const * argv)
{
 800270c:	b590      	push	{r4, r7, lr}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
	print(_VER);
 8002716:	4862      	ldr	r0, [pc, #392]	; (80028a0 <print_help+0x194>)
 8002718:	f7ff ff5c 	bl	80025d4 <print>
	print(ENDL);
 800271c:	4861      	ldr	r0, [pc, #388]	; (80028a4 <print_help+0x198>)
 800271e:	f7ff ff59 	bl	80025d4 <print>
	print ("Use ");
 8002722:	4861      	ldr	r0, [pc, #388]	; (80028a8 <print_help+0x19c>)
 8002724:	f7ff ff56 	bl	80025d4 <print>
	print_color("TAB", C_GREEN);
 8002728:	2105      	movs	r1, #5
 800272a:	4860      	ldr	r0, [pc, #384]	; (80028ac <print_help+0x1a0>)
 800272c:	f7ff ffb2 	bl	8002694 <print_color>
	print(" key for completion");
 8002730:	485f      	ldr	r0, [pc, #380]	; (80028b0 <print_help+0x1a4>)
 8002732:	f7ff ff4f 	bl	80025d4 <print>
	print (ENDL);
 8002736:	485b      	ldr	r0, [pc, #364]	; (80028a4 <print_help+0x198>)
 8002738:	f7ff ff4c 	bl	80025d4 <print>
	print ("Available commands:");
 800273c:	485d      	ldr	r0, [pc, #372]	; (80028b4 <print_help+0x1a8>)
 800273e:	f7ff ff49 	bl	80025d4 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	e09e      	b.n	8002886 <print_help+0x17a>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 8002748:	4a5b      	ldr	r2, [pc, #364]	; (80028b8 <print_help+0x1ac>)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	212c      	movs	r1, #44	; 0x2c
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	4413      	add	r3, r2
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275a:	d11f      	bne.n	800279c <print_help+0x90>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	3b01      	subs	r3, #1
 8002760:	4a55      	ldr	r2, [pc, #340]	; (80028b8 <print_help+0x1ac>)
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002770:	d004      	beq.n	800277c <print_help+0x70>
				print_color(" aka ", C_L_PURPLE);
 8002772:	210c      	movs	r1, #12
 8002774:	4851      	ldr	r0, [pc, #324]	; (80028bc <print_help+0x1b0>)
 8002776:	f7ff ff8d 	bl	8002694 <print_color>
 800277a:	e003      	b.n	8002784 <print_help+0x78>
			else
				print_color("/", C_L_PURPLE);
 800277c:	210c      	movs	r1, #12
 800277e:	4850      	ldr	r0, [pc, #320]	; (80028c0 <print_help+0x1b4>)
 8002780:	f7ff ff88 	bl	8002694 <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	222c      	movs	r2, #44	; 0x2c
 8002788:	fb02 f303 	mul.w	r3, r2, r3
 800278c:	4a4a      	ldr	r2, [pc, #296]	; (80028b8 <print_help+0x1ac>)
 800278e:	4413      	add	r3, r2
 8002790:	3304      	adds	r3, #4
 8002792:	210b      	movs	r1, #11
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff7d 	bl	8002694 <print_color>
 800279a:	e071      	b.n	8002880 <print_help+0x174>
		}
		else
		{
			print(ENDL);
 800279c:	4841      	ldr	r0, [pc, #260]	; (80028a4 <print_help+0x198>)
 800279e:	f7ff ff19 	bl	80025d4 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 80027a2:	f06f 0303 	mvn.w	r3, #3
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	e005      	b.n	80027b6 <print_help+0xaa>
				print(" ");
 80027aa:	4846      	ldr	r0, [pc, #280]	; (80028c4 <print_help+0x1b8>)
 80027ac:	f7ff ff12 	bl	80025d4 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	3301      	adds	r3, #1
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	4a40      	ldr	r2, [pc, #256]	; (80028b8 <print_help+0x1ac>)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	212c      	movs	r1, #44	; 0x2c
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	dbef      	blt.n	80027aa <print_help+0x9e>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	222c      	movs	r2, #44	; 0x2c
 80027ce:	fb02 f303 	mul.w	r3, r2, r3
 80027d2:	4a39      	ldr	r2, [pc, #228]	; (80028b8 <print_help+0x1ac>)
 80027d4:	4413      	add	r3, r2
 80027d6:	1d1a      	adds	r2, r3, #4
 80027d8:	4937      	ldr	r1, [pc, #220]	; (80028b8 <print_help+0x1ac>)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	202c      	movs	r0, #44	; 0x2c
 80027de:	fb00 f303 	mul.w	r3, r0, r3
 80027e2:	440b      	add	r3, r1
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4938      	ldr	r1, [pc, #224]	; (80028c8 <print_help+0x1bc>)
 80027e8:	5ccb      	ldrb	r3, [r1, r3]
 80027ea:	4619      	mov	r1, r3
 80027ec:	4610      	mov	r0, r2
 80027ee:	f7ff ff51 	bl	8002694 <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	e005      	b.n	8002804 <print_help+0xf8>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 80027f8:	4832      	ldr	r0, [pc, #200]	; (80028c4 <print_help+0x1b8>)
 80027fa:	f7ff feeb 	bl	80025d4 <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	3301      	adds	r3, #1
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	4a2c      	ldr	r2, [pc, #176]	; (80028b8 <print_help+0x1ac>)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	212c      	movs	r1, #44	; 0x2c
 800280a:	fb01 f303 	mul.w	r3, r1, r3
 800280e:	4413      	add	r3, r2
 8002810:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8002812:	f1c3 040b 	rsb	r4, r3, #11
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	222c      	movs	r2, #44	; 0x2c
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	4a26      	ldr	r2, [pc, #152]	; (80028b8 <print_help+0x1ac>)
 8002820:	4413      	add	r3, r2
 8002822:	3304      	adds	r3, #4
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff5b 	bl	80026e0 <str_length>
 800282a:	4603      	mov	r3, r0
 800282c:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	429a      	cmp	r2, r3
 8002832:	dbe1      	blt.n	80027f8 <print_help+0xec>
			switch (microrl_actions[i].level){
 8002834:	4a20      	ldr	r2, [pc, #128]	; (80028b8 <print_help+0x1ac>)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	212c      	movs	r1, #44	; 0x2c
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	4413      	add	r3, r2
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <print_help+0x140>
 8002846:	2b01      	cmp	r3, #1
 8002848:	d004      	beq.n	8002854 <print_help+0x148>
 800284a:	e007      	b.n	800285c <print_help+0x150>
			case 0:
				print ("-");
 800284c:	481f      	ldr	r0, [pc, #124]	; (80028cc <print_help+0x1c0>)
 800284e:	f7ff fec1 	bl	80025d4 <print>
				break;
 8002852:	e007      	b.n	8002864 <print_help+0x158>
			case 1:
				print ("^");
 8002854:	481e      	ldr	r0, [pc, #120]	; (80028d0 <print_help+0x1c4>)
 8002856:	f7ff febd 	bl	80025d4 <print>
				break;
 800285a:	e003      	b.n	8002864 <print_help+0x158>
			default:
				print ("#");
 800285c:	481d      	ldr	r0, [pc, #116]	; (80028d4 <print_help+0x1c8>)
 800285e:	f7ff feb9 	bl	80025d4 <print>
				break;
 8002862:	bf00      	nop
			}
			print (" ");
 8002864:	4817      	ldr	r0, [pc, #92]	; (80028c4 <print_help+0x1b8>)
 8002866:	f7ff feb5 	bl	80025d4 <print>
			print (microrl_actions[i].help_msg);
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	222c      	movs	r2, #44	; 0x2c
 800286e:	fb02 f303 	mul.w	r3, r2, r3
 8002872:	3308      	adds	r3, #8
 8002874:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <print_help+0x1ac>)
 8002876:	4413      	add	r3, r2
 8002878:	3305      	adds	r3, #5
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff feaa 	bl	80025d4 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	3301      	adds	r3, #1
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b0a      	cmp	r3, #10
 800288a:	f67f af5d 	bls.w	8002748 <print_help+0x3c>
		}
	}
	print(ENDL);
 800288e:	4805      	ldr	r0, [pc, #20]	; (80028a4 <print_help+0x198>)
 8002890:	f7ff fea0 	bl	80025d4 <print>
	return 0;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	bd90      	pop	{r4, r7, pc}
 800289e:	bf00      	nop
 80028a0:	0800d3c4 	.word	0x0800d3c4
 80028a4:	0800d3dc 	.word	0x0800d3dc
 80028a8:	0800d3e0 	.word	0x0800d3e0
 80028ac:	0800d3e8 	.word	0x0800d3e8
 80028b0:	0800d3ec 	.word	0x0800d3ec
 80028b4:	0800d400 	.word	0x0800d400
 80028b8:	0800d50c 	.word	0x0800d50c
 80028bc:	0800d414 	.word	0x0800d414
 80028c0:	0800d41c 	.word	0x0800d41c
 80028c4:	0800d420 	.word	0x0800d420
 80028c8:	0800d7ac 	.word	0x0800d7ac
 80028cc:	0800d424 	.word	0x0800d424
 80028d0:	0800d428 	.word	0x0800d428
 80028d4:	0800d42c 	.word	0x0800d42c

080028d8 <execute>:



int execute (int argc, const char * const * argv)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08a      	sub	sp, #40	; 0x28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
	int (*func)   (int argc, const char * const * argv ) = NULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 80028ee:	2300      	movs	r3, #0
 80028f0:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	e056      	b.n	80029a6 <execute+0xce>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	e045      	b.n	800298a <execute+0xb2>
		{
			tokens_found = false;
 80028fe:	2300      	movs	r3, #0
 8002900:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 8002902:	4a55      	ldr	r2, [pc, #340]	; (8002a58 <execute+0x180>)
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	212c      	movs	r1, #44	; 0x2c
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d001      	beq.n	800291e <execute+0x46>
				synonym_level = current_level; // save the synonym level
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d003      	beq.n	800292e <execute+0x56>
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	429a      	cmp	r2, r3
 800292c:	db31      	blt.n	8002992 <execute+0xba>
				break;
			if (current_level == i)
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	429a      	cmp	r2, r3
 8002934:	d101      	bne.n	800293a <execute+0x62>
				last_main_synonym = n;
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	4413      	add	r3, r2
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	212c      	movs	r1, #44	; 0x2c
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4942      	ldr	r1, [pc, #264]	; (8002a58 <execute+0x180>)
 800294e:	440b      	add	r3, r1
 8002950:	3304      	adds	r3, #4
 8002952:	4619      	mov	r1, r3
 8002954:	4610      	mov	r0, r2
 8002956:	f7fd fbf9 	bl	800014c <strcmp>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d111      	bne.n	8002984 <execute+0xac>
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	429a      	cmp	r2, r3
 8002966:	d10d      	bne.n	8002984 <execute+0xac>
					(i == synonym_level))
			{
				tokens_found = true;
 8002968:	2301      	movs	r3, #1
 800296a:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	623a      	str	r2, [r7, #32]
 8002972:	4a39      	ldr	r2, [pc, #228]	; (8002a58 <execute+0x180>)
 8002974:	212c      	movs	r1, #44	; 0x2c
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	3328      	adds	r3, #40	; 0x28
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8002982:	e007      	b.n	8002994 <execute+0xbc>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	3301      	adds	r3, #1
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	2b0a      	cmp	r3, #10
 800298e:	d9b6      	bls.n	80028fe <execute+0x26>
 8002990:	e000      	b.n	8002994 <execute+0xbc>
				break;
 8002992:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 8002994:	7efb      	ldrb	r3, [r7, #27]
 8002996:	f083 0301 	eor.w	r3, r3, #1
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d107      	bne.n	80029b0 <execute+0xd8>
	for (int i = 0; i < argc; i++)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	3301      	adds	r3, #1
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	dba4      	blt.n	80028f8 <execute+0x20>
 80029ae:	e000      	b.n	80029b2 <execute+0xda>
			break;
 80029b0:	bf00      	nop
	}

	if (func != NULL)
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <execute+0xec>
	{
		return func(argc, argv); // function found
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	6839      	ldr	r1, [r7, #0]
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	4798      	blx	r3
 80029c0:	4603      	mov	r3, r0
 80029c2:	e045      	b.n	8002a50 <execute+0x178>
	} else if (tokens_found)
 80029c4:	7efb      	ldrb	r3, [r7, #27]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d021      	beq.n	8002a0e <execute+0x136>
	{
		print_color ("command: '", C_L_RED);
 80029ca:	210a      	movs	r1, #10
 80029cc:	4823      	ldr	r0, [pc, #140]	; (8002a5c <execute+0x184>)
 80029ce:	f7ff fe61 	bl	8002694 <print_color>
		print_color ((char*)argv[0], C_L_RED);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	210a      	movs	r1, #10
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fe5b 	bl	8002694 <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 80029de:	210a      	movs	r1, #10
 80029e0:	481f      	ldr	r0, [pc, #124]	; (8002a60 <execute+0x188>)
 80029e2:	f7ff fe57 	bl	8002694 <print_color>
		print(ENDL);
 80029e6:	481f      	ldr	r0, [pc, #124]	; (8002a64 <execute+0x18c>)
 80029e8:	f7ff fdf4 	bl	80025d4 <print>
		print_color ("use '", C_NC);
 80029ec:	2100      	movs	r1, #0
 80029ee:	481e      	ldr	r0, [pc, #120]	; (8002a68 <execute+0x190>)
 80029f0:	f7ff fe50 	bl	8002694 <print_color>
		print_color ("?", C_GREEN);
 80029f4:	2105      	movs	r1, #5
 80029f6:	481d      	ldr	r0, [pc, #116]	; (8002a6c <execute+0x194>)
 80029f8:	f7ff fe4c 	bl	8002694 <print_color>
		print_color ("' for help", C_NC);
 80029fc:	2100      	movs	r1, #0
 80029fe:	481c      	ldr	r0, [pc, #112]	; (8002a70 <execute+0x198>)
 8002a00:	f7ff fe48 	bl	8002694 <print_color>
		print (ENDL);
 8002a04:	4817      	ldr	r0, [pc, #92]	; (8002a64 <execute+0x18c>)
 8002a06:	f7ff fde5 	bl	80025d4 <print>
		return 1;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e020      	b.n	8002a50 <execute+0x178>
	}
	else
	{
		print_color ("command: '", C_RED);
 8002a0e:	2109      	movs	r1, #9
 8002a10:	4812      	ldr	r0, [pc, #72]	; (8002a5c <execute+0x184>)
 8002a12:	f7ff fe3f 	bl	8002694 <print_color>
		print_color ((char*)argv[0], C_RED);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2109      	movs	r1, #9
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fe39 	bl	8002694 <print_color>
		print_color ("' not found", C_RED);
 8002a22:	2109      	movs	r1, #9
 8002a24:	4813      	ldr	r0, [pc, #76]	; (8002a74 <execute+0x19c>)
 8002a26:	f7ff fe35 	bl	8002694 <print_color>
		print(ENDL);
 8002a2a:	480e      	ldr	r0, [pc, #56]	; (8002a64 <execute+0x18c>)
 8002a2c:	f7ff fdd2 	bl	80025d4 <print>
		print_color ("use '", C_NC);
 8002a30:	2100      	movs	r1, #0
 8002a32:	480d      	ldr	r0, [pc, #52]	; (8002a68 <execute+0x190>)
 8002a34:	f7ff fe2e 	bl	8002694 <print_color>
		print_color ("?", C_GREEN);
 8002a38:	2105      	movs	r1, #5
 8002a3a:	480c      	ldr	r0, [pc, #48]	; (8002a6c <execute+0x194>)
 8002a3c:	f7ff fe2a 	bl	8002694 <print_color>
		print_color ("' for help", C_NC);
 8002a40:	2100      	movs	r1, #0
 8002a42:	480b      	ldr	r0, [pc, #44]	; (8002a70 <execute+0x198>)
 8002a44:	f7ff fe26 	bl	8002694 <print_color>
		print (ENDL);
 8002a48:	4806      	ldr	r0, [pc, #24]	; (8002a64 <execute+0x18c>)
 8002a4a:	f7ff fdc3 	bl	80025d4 <print>
		return 1;
 8002a4e:	2301      	movs	r3, #1

	}
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3728      	adds	r7, #40	; 0x28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	0800d50c 	.word	0x0800d50c
 8002a5c:	0800d430 	.word	0x0800d430
 8002a60:	0800d43c 	.word	0x0800d43c
 8002a64:	0800d3dc 	.word	0x0800d3dc
 8002a68:	0800d45c 	.word	0x0800d45c
 8002a6c:	0800d464 	.word	0x0800d464
 8002a70:	0800d468 	.word	0x0800d468
 8002a74:	0800d474 	.word	0x0800d474

08002a78 <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08c      	sub	sp, #48	; 0x30
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
	int j = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 8002a86:	4b63      	ldr	r3, [pc, #396]	; (8002c14 <complet+0x19c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d11f      	bne.n	8002ad2 <complet+0x5a>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 8002a92:	2300      	movs	r3, #0
 8002a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a96:	e018      	b.n	8002aca <complet+0x52>
			if (microrl_actions[i].level == 0)
 8002a98:	4a5f      	ldr	r2, [pc, #380]	; (8002c18 <complet+0x1a0>)
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10c      	bne.n	8002ac4 <complet+0x4c>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 8002aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f202 	mul.w	r2, r1, r2
 8002ab8:	4957      	ldr	r1, [pc, #348]	; (8002c18 <complet+0x1a0>)
 8002aba:	440a      	add	r2, r1
 8002abc:	3204      	adds	r2, #4
 8002abe:	4955      	ldr	r1, [pc, #340]	; (8002c14 <complet+0x19c>)
 8002ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 8002ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002acc:	2b0a      	cmp	r3, #10
 8002ace:	d9e3      	bls.n	8002a98 <complet+0x20>
 8002ad0:	e095      	b.n	8002bfe <complet+0x186>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	4413      	add	r3, r2
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 8002aec:	2300      	movs	r3, #0
 8002aee:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 8002af0:	2300      	movs	r3, #0
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	e07c      	b.n	8002bf0 <complet+0x178>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	e06b      	b.n	8002bd4 <complet+0x15c>
			{
				tokens_found = false;
 8002afc:	2300      	movs	r3, #0
 8002afe:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 8002b00:	4a45      	ldr	r2, [pc, #276]	; (8002c18 <complet+0x1a0>)
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	212c      	movs	r1, #44	; 0x2c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b16:	d001      	beq.n	8002b1c <complet+0xa4>
					synonym_level = current_level; // save the synonym level
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b22:	d003      	beq.n	8002b2c <complet+0xb4>
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	db57      	blt.n	8002bdc <complet+0x164>
					break;
				if (current_level == i)
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d101      	bne.n	8002b38 <complet+0xc0>
					last_main_synonym = n;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d128      	bne.n	8002b94 <complet+0x11c>
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	222c      	movs	r2, #44	; 0x2c
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	4a33      	ldr	r2, [pc, #204]	; (8002c18 <complet+0x1a0>)
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3304      	adds	r3, #4
 8002b50:	6939      	ldr	r1, [r7, #16]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f009 fef0 	bl	800c938 <strstr>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	212c      	movs	r1, #44	; 0x2c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	492d      	ldr	r1, [pc, #180]	; (8002c18 <complet+0x1a0>)
 8002b64:	440b      	add	r3, r1
 8002b66:	3304      	adds	r3, #4
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d113      	bne.n	8002b94 <complet+0x11c>
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d10f      	bne.n	8002b94 <complet+0x11c>
										(i == synonym_level))
				{
					tokens_found = true;
 8002b74:	2301      	movs	r3, #1
 8002b76:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 8002b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	fb01 f202 	mul.w	r2, r1, r2
 8002b86:	4924      	ldr	r1, [pc, #144]	; (8002c18 <complet+0x1a0>)
 8002b88:	440a      	add	r2, r1
 8002b8a:	3204      	adds	r2, #4
 8002b8c:	4921      	ldr	r1, [pc, #132]	; (8002c14 <complet+0x19c>)
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002b92:	e01c      	b.n	8002bce <complet+0x156>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	212c      	movs	r1, #44	; 0x2c
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	491c      	ldr	r1, [pc, #112]	; (8002c18 <complet+0x1a0>)
 8002ba8:	440b      	add	r3, r1
 8002baa:	3304      	adds	r3, #4
 8002bac:	4619      	mov	r1, r3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	f7fd facc 	bl	800014c <strcmp>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <complet+0x156>
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d105      	bne.n	8002bce <complet+0x156>
				{
					last_main_synonym++;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	77fb      	strb	r3, [r7, #31]
					break;
 8002bcc:	e007      	b.n	8002bde <complet+0x166>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b0a      	cmp	r3, #10
 8002bd8:	d990      	bls.n	8002afc <complet+0x84>
 8002bda:	e000      	b.n	8002bde <complet+0x166>
					break;
 8002bdc:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 8002bde:	7ffb      	ldrb	r3, [r7, #31]
 8002be0:	f083 0301 	eor.w	r3, r3, #1
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d108      	bne.n	8002bfc <complet+0x184>
		for (int i = 0; i < argc; i++)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	3301      	adds	r3, #1
 8002bee:	61bb      	str	r3, [r7, #24]
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	f6ff af7e 	blt.w	8002af6 <complet+0x7e>
 8002bfa:	e000      	b.n	8002bfe <complet+0x186>
				break;
 8002bfc:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 8002bfe:	4a05      	ldr	r2, [pc, #20]	; (8002c14 <complet+0x19c>)
 8002c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c02:	2100      	movs	r1, #0
 8002c04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 8002c08:	4b02      	ldr	r3, [pc, #8]	; (8002c14 <complet+0x19c>)
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3730      	adds	r7, #48	; 0x30
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000720 	.word	0x20000720
 8002c18:	0800d50c 	.word	0x0800d50c

08002c1c <init_microrl>:
#endif

void init_microrl(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <init_microrl+0x38>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	490c      	ldr	r1, [pc, #48]	; (8002c58 <init_microrl+0x3c>)
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe ff88 	bl	8001b3c <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 8002c2c:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <init_microrl+0x38>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	490a      	ldr	r1, [pc, #40]	; (8002c5c <init_microrl+0x40>)
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe ffce 	bl	8001bd4 <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <init_microrl+0x38>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4908      	ldr	r1, [pc, #32]	; (8002c60 <init_microrl+0x44>)
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe ffba 	bl	8001bb8 <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 8002c44:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <init_microrl+0x38>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4906      	ldr	r1, [pc, #24]	; (8002c64 <init_microrl+0x48>)
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe ffd0 	bl	8001bf0 <microrl_set_sigint_callback>
}
 8002c50:	bf00      	nop
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	2000000c 	.word	0x2000000c
 8002c58:	080025d5 	.word	0x080025d5
 8002c5c:	080028d9 	.word	0x080028d9
 8002c60:	08002a79 	.word	0x08002a79
 8002c64:	08000cc9 	.word	0x08000cc9

08002c68 <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 8002c72:	4805      	ldr	r0, [pc, #20]	; (8002c88 <clear_screen+0x20>)
 8002c74:	f7ff fcae 	bl	80025d4 <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 8002c78:	4804      	ldr	r0, [pc, #16]	; (8002c8c <clear_screen+0x24>)
 8002c7a:	f7ff fcab 	bl	80025d4 <print>
	return 0;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	0800d480 	.word	0x0800d480
 8002c8c:	0800d488 	.word	0x0800d488

08002c90 <color_toggle>:

int color_toggle 	(int argc, const char * const * argv)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <color_toggle+0x30>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	f083 0301 	eor.w	r3, r3, #1
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bf14      	ite	ne
 8002ca8:	2301      	movne	r3, #1
 8002caa:	2300      	moveq	r3, #0
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <color_toggle+0x30>)
 8002cb0:	701a      	strb	r2, [r3, #0]
	return 0;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	20000010 	.word	0x20000010

08002cc4 <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
	color_out = 1;
 8002cce:	4b07      	ldr	r3, [pc, #28]	; (8002cec <color_on+0x28>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 8002cd4:	2105      	movs	r1, #5
 8002cd6:	4806      	ldr	r0, [pc, #24]	; (8002cf0 <color_on+0x2c>)
 8002cd8:	f7ff fcdc 	bl	8002694 <print_color>
	print(ENDL);
 8002cdc:	4805      	ldr	r0, [pc, #20]	; (8002cf4 <color_on+0x30>)
 8002cde:	f7ff fc79 	bl	80025d4 <print>
	return 0;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20000010 	.word	0x20000010
 8002cf0:	0800d48c 	.word	0x0800d48c
 8002cf4:	0800d3dc 	.word	0x0800d3dc

08002cf8 <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
	color_out = 0;
 8002d02:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <color_off+0x28>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 8002d08:	4806      	ldr	r0, [pc, #24]	; (8002d24 <color_off+0x2c>)
 8002d0a:	f7ff fc63 	bl	80025d4 <print>
	print(ENDL);
 8002d0e:	4806      	ldr	r0, [pc, #24]	; (8002d28 <color_off+0x30>)
 8002d10:	f7ff fc60 	bl	80025d4 <print>
	return 0;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000010 	.word	0x20000010
 8002d24:	0800d4a0 	.word	0x0800d4a0
 8002d28:	0800d3dc 	.word	0x0800d3dc

08002d2c <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
	if (color_out)
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <color_show+0x34>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d004      	beq.n	8002d48 <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 8002d3e:	2105      	movs	r1, #5
 8002d40:	4808      	ldr	r0, [pc, #32]	; (8002d64 <color_show+0x38>)
 8002d42:	f7ff fca7 	bl	8002694 <print_color>
 8002d46:	e002      	b.n	8002d4e <color_show+0x22>
	else
		print ("Color output is OFF");
 8002d48:	4807      	ldr	r0, [pc, #28]	; (8002d68 <color_show+0x3c>)
 8002d4a:	f7ff fc43 	bl	80025d4 <print>
	print(ENDL);
 8002d4e:	4807      	ldr	r0, [pc, #28]	; (8002d6c <color_show+0x40>)
 8002d50:	f7ff fc40 	bl	80025d4 <print>
	return 0;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000010 	.word	0x20000010
 8002d64:	0800d48c 	.word	0x0800d48c
 8002d68:	0800d4a0 	.word	0x0800d4a0
 8002d6c:	0800d3dc 	.word	0x0800d3dc

08002d70 <nrf24l01p_get_clear_irq_flags>:
{
  nrf24l01p_write_reg(NRF24L01P_CONFIG, BIT_COND(nrf24l01p_read_reg(NRF24L01P_CONFIG), int_source, !irq_state));
}

uint8_t nrf24l01p_get_clear_irq_flags(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  enum { IRQ_FLAGS = BIT(NRF24L01P_IRQ_MAX_RT) | BIT(NRF24L01P_IRQ_TX_DS) | BIT(NRF24L01P_IRQ_RX_DR) };
  return nrf24l01p_write_reg(NRF24L01P_STATUS, IRQ_FLAGS) & IRQ_FLAGS;
 8002d74:	2170      	movs	r1, #112	; 0x70
 8002d76:	2007      	movs	r0, #7
 8002d78:	f000 fa73 	bl	8003262 <nrf24l01p_write_reg>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d82:	b2db      	uxtb	r3, r3
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <nrf24l01p_clear_irq_flag>:

void nrf24l01p_clear_irq_flag(nrf24l01p_irq_source_t int_source)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_STATUS, BIT(int_source));
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	2201      	movs	r2, #1
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	2007      	movs	r0, #7
 8002da0:	f000 fa5f 	bl	8003262 <nrf24l01p_write_reg>
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <nrf24l01p_get_irq_flags>:
{
  return !(nrf24l01p_read_reg(NRF24L01P_CONFIG) & BIT(int_type));
}

uint8_t nrf24l01p_get_irq_flags(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  return nrf24l01p_nop() & (BIT(6)|BIT(5)|BIT(4));
 8002db0:	f000 fa17 	bl	80031e2 <nrf24l01p_nop>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dba:	b2db      	uxtb	r3, r3
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <nrf24l01p_set_crc_mode>:

void nrf24l01p_set_crc_mode(nrf24l01p_crc_mode_t crc_mode)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_CONFIG, (nrf24l01p_read_reg(NRF24L01P_CONFIG) & ~(BIT(3)|BIT(2))) | ((uint8_t)crc_mode<<2u));
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f000 fa30 	bl	8003230 <nrf24l01p_read_reg>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	b25b      	sxtb	r3, r3
 8002dd4:	f023 030c 	bic.w	r3, r3, #12
 8002dd8:	b25a      	sxtb	r2, r3
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	b25b      	sxtb	r3, r3
 8002de0:	4313      	orrs	r3, r2
 8002de2:	b25b      	sxtb	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	4619      	mov	r1, r3
 8002de8:	2000      	movs	r0, #0
 8002dea:	f000 fa3a 	bl	8003262 <nrf24l01p_write_reg>
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <nrf24l01p_open_pipe>:

void nrf24l01p_open_pipe(nrf24l01p_address_t pipe_num, bool auto_ack)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	460a      	mov	r2, r1
 8002e00:	71fb      	strb	r3, [r7, #7]
 8002e02:	4613      	mov	r3, r2
 8002e04:	71bb      	strb	r3, [r7, #6]
  switch(pipe_num)
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	2b05      	cmp	r3, #5
 8002e0a:	dc02      	bgt.n	8002e12 <nrf24l01p_open_pipe+0x1c>
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	da03      	bge.n	8002e18 <nrf24l01p_open_pipe+0x22>
      else
        nrf24l01p_write_reg(NRF24L01P_EN_AA, 0);
      break;
      
    default:
      break;
 8002e10:	e044      	b.n	8002e9c <nrf24l01p_open_pipe+0xa6>
  switch(pipe_num)
 8002e12:	2bff      	cmp	r3, #255	; 0xff
 8002e14:	d031      	beq.n	8002e7a <nrf24l01p_open_pipe+0x84>
      break;
 8002e16:	e041      	b.n	8002e9c <nrf24l01p_open_pipe+0xa6>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, nrf24l01p_read_reg(NRF24L01P_EN_RXADDR) | BIT(pipe_num));
 8002e18:	2002      	movs	r0, #2
 8002e1a:	f000 fa09 	bl	8003230 <nrf24l01p_read_reg>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	b25a      	sxtb	r2, r3
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	2101      	movs	r1, #1
 8002e26:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2a:	b25b      	sxtb	r3, r3
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	b25b      	sxtb	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	4619      	mov	r1, r3
 8002e34:	2002      	movs	r0, #2
 8002e36:	f000 fa14 	bl	8003262 <nrf24l01p_write_reg>
      nrf24l01p_write_reg(NRF24L01P_EN_AA, BIT_COND(nrf24l01p_read_reg(NRF24L01P_EN_AA), pipe_num, auto_ack));
 8002e3a:	2001      	movs	r0, #1
 8002e3c:	f000 f9f8 	bl	8003230 <nrf24l01p_read_reg>
 8002e40:	4603      	mov	r3, r0
 8002e42:	b25a      	sxtb	r2, r3
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	2101      	movs	r1, #1
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	b25b      	sxtb	r3, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	b25b      	sxtb	r3, r3
 8002e52:	4013      	ands	r3, r2
 8002e54:	b25a      	sxtb	r2, r3
 8002e56:	79bb      	ldrb	r3, [r7, #6]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <nrf24l01p_open_pipe+0x72>
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	2101      	movs	r1, #1
 8002e60:	fa01 f303 	lsl.w	r3, r1, r3
 8002e64:	b25b      	sxtb	r3, r3
 8002e66:	e000      	b.n	8002e6a <nrf24l01p_open_pipe+0x74>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	b25b      	sxtb	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	4619      	mov	r1, r3
 8002e72:	2001      	movs	r0, #1
 8002e74:	f000 f9f5 	bl	8003262 <nrf24l01p_write_reg>
      break;
 8002e78:	e010      	b.n	8002e9c <nrf24l01p_open_pipe+0xa6>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, (uint8_t)~(BIT(7)|BIT(6)));
 8002e7a:	213f      	movs	r1, #63	; 0x3f
 8002e7c:	2002      	movs	r0, #2
 8002e7e:	f000 f9f0 	bl	8003262 <nrf24l01p_write_reg>
      if(auto_ack)
 8002e82:	79bb      	ldrb	r3, [r7, #6]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d004      	beq.n	8002e92 <nrf24l01p_open_pipe+0x9c>
        nrf24l01p_write_reg(NRF24L01P_EN_AA, (uint8_t)~(BIT(7)|BIT(6)));
 8002e88:	213f      	movs	r1, #63	; 0x3f
 8002e8a:	2001      	movs	r0, #1
 8002e8c:	f000 f9e9 	bl	8003262 <nrf24l01p_write_reg>
      break;
 8002e90:	e003      	b.n	8002e9a <nrf24l01p_open_pipe+0xa4>
        nrf24l01p_write_reg(NRF24L01P_EN_AA, 0);
 8002e92:	2100      	movs	r1, #0
 8002e94:	2001      	movs	r0, #1
 8002e96:	f000 f9e4 	bl	8003262 <nrf24l01p_write_reg>
      break;
 8002e9a:	bf00      	nop
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <nrf24l01p_close_pipe>:

void nrf24l01p_close_pipe(nrf24l01p_address_t pipe_num)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	71fb      	strb	r3, [r7, #7]
  switch(pipe_num)
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	2b05      	cmp	r3, #5
 8002eb2:	dc02      	bgt.n	8002eba <nrf24l01p_close_pipe+0x16>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	da03      	bge.n	8002ec0 <nrf24l01p_close_pipe+0x1c>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, 0);
      nrf24l01p_write_reg(NRF24L01P_EN_AA, 0);
      break;
      
    default:
      break;
 8002eb8:	e032      	b.n	8002f20 <nrf24l01p_close_pipe+0x7c>
  switch(pipe_num)
 8002eba:	2bff      	cmp	r3, #255	; 0xff
 8002ebc:	d027      	beq.n	8002f0e <nrf24l01p_close_pipe+0x6a>
      break;
 8002ebe:	e02f      	b.n	8002f20 <nrf24l01p_close_pipe+0x7c>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, nrf24l01p_read_reg(NRF24L01P_EN_RXADDR) & ~BIT(pipe_num));
 8002ec0:	2002      	movs	r0, #2
 8002ec2:	f000 f9b5 	bl	8003230 <nrf24l01p_read_reg>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	b25a      	sxtb	r2, r3
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	2101      	movs	r1, #1
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	b25b      	sxtb	r3, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	b25b      	sxtb	r3, r3
 8002ed8:	4013      	ands	r3, r2
 8002eda:	b25b      	sxtb	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	4619      	mov	r1, r3
 8002ee0:	2002      	movs	r0, #2
 8002ee2:	f000 f9be 	bl	8003262 <nrf24l01p_write_reg>
      nrf24l01p_write_reg(NRF24L01P_EN_AA, nrf24l01p_read_reg(NRF24L01P_EN_AA) & ~BIT(pipe_num));
 8002ee6:	2001      	movs	r0, #1
 8002ee8:	f000 f9a2 	bl	8003230 <nrf24l01p_read_reg>
 8002eec:	4603      	mov	r3, r0
 8002eee:	b25a      	sxtb	r2, r3
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef8:	b25b      	sxtb	r3, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	b25b      	sxtb	r3, r3
 8002efe:	4013      	ands	r3, r2
 8002f00:	b25b      	sxtb	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	4619      	mov	r1, r3
 8002f06:	2001      	movs	r0, #1
 8002f08:	f000 f9ab 	bl	8003262 <nrf24l01p_write_reg>
      break;
 8002f0c:	e008      	b.n	8002f20 <nrf24l01p_close_pipe+0x7c>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, 0);
 8002f0e:	2100      	movs	r1, #0
 8002f10:	2002      	movs	r0, #2
 8002f12:	f000 f9a6 	bl	8003262 <nrf24l01p_write_reg>
      nrf24l01p_write_reg(NRF24L01P_EN_AA, 0);
 8002f16:	2100      	movs	r1, #0
 8002f18:	2001      	movs	r0, #1
 8002f1a:	f000 f9a2 	bl	8003262 <nrf24l01p_write_reg>
      break;
 8002f1e:	bf00      	nop
  }
}
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <nrf24l01p_set_address>:

void nrf24l01p_set_address(nrf24l01p_address_t address, const uint8_t *addr)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	6039      	str	r1, [r7, #0]
 8002f32:	71fb      	strb	r3, [r7, #7]
  switch(address)
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	2b06      	cmp	r3, #6
 8002f38:	d00a      	beq.n	8002f50 <nrf24l01p_set_address+0x28>
 8002f3a:	2b06      	cmp	r3, #6
 8002f3c:	dc19      	bgt.n	8002f72 <nrf24l01p_set_address+0x4a>
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	dc02      	bgt.n	8002f48 <nrf24l01p_set_address+0x20>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	da04      	bge.n	8002f50 <nrf24l01p_set_address+0x28>
    case NRF24L01P_PIPE5:
      nrf24l01p_write_reg(NRF24L01P_RX_ADDR_P0 + (uint8_t)address, *addr);
      break;

    default:
      break;
 8002f46:	e014      	b.n	8002f72 <nrf24l01p_set_address+0x4a>
 8002f48:	3b02      	subs	r3, #2
  switch(address)
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d811      	bhi.n	8002f72 <nrf24l01p_set_address+0x4a>
 8002f4e:	e006      	b.n	8002f5e <nrf24l01p_set_address+0x36>
      nrf24l01p_write_multibyte_reg((uint8_t) address, addr, 0);
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	2200      	movs	r2, #0
 8002f54:	6839      	ldr	r1, [r7, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fa20 	bl	800339c <nrf24l01p_write_multibyte_reg>
      break;
 8002f5c:	e00a      	b.n	8002f74 <nrf24l01p_set_address+0x4c>
      nrf24l01p_write_reg(NRF24L01P_RX_ADDR_P0 + (uint8_t)address, *addr);
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	330a      	adds	r3, #10
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	f000 f979 	bl	8003262 <nrf24l01p_write_reg>
      break;
 8002f70:	e000      	b.n	8002f74 <nrf24l01p_set_address+0x4c>
      break;
 8002f72:	bf00      	nop
  }
}
 8002f74:	bf00      	nop
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <nrf24l01p_set_auto_retr>:

void nrf24l01p_set_auto_retr(uint8_t retr, uint16_t delay)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	460a      	mov	r2, r1
 8002f86:	71fb      	strb	r3, [r7, #7]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	80bb      	strh	r3, [r7, #4]
  nrf24l01p_write_reg(NRF24L01P_SETUP_RETR, (((delay/250)-1)<<4) | retr);
 8002f8c:	88bb      	ldrh	r3, [r7, #4]
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <nrf24l01p_set_auto_retr+0x3c>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	b25a      	sxtb	r2, r3
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	b25b      	sxtb	r3, r3
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	4619      	mov	r1, r3
 8002faa:	2004      	movs	r0, #4
 8002fac:	f000 f959 	bl	8003262 <nrf24l01p_write_reg>
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	10624dd3 	.word	0x10624dd3

08002fbc <nrf24l01p_set_address_width>:

void nrf24l01p_set_address_width(nrf24l01p_address_width_t address_width)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_SETUP_AW, (uint8_t)address_width - 2);
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	3b02      	subs	r3, #2
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	4619      	mov	r1, r3
 8002fce:	2003      	movs	r0, #3
 8002fd0:	f000 f947 	bl	8003262 <nrf24l01p_write_reg>
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <nrf24l01p_set_rx_payload_width>:

void nrf24l01p_set_rx_payload_width(uint8_t pipe_num, uint8_t payload_width)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	460a      	mov	r2, r1
 8002fe6:	71fb      	strb	r3, [r7, #7]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	71bb      	strb	r3, [r7, #6]
  nrf24l01p_write_reg(NRF24L01P_RX_PW_P0 + pipe_num, payload_width);
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	3311      	adds	r3, #17
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	79ba      	ldrb	r2, [r7, #6]
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 f933 	bl	8003262 <nrf24l01p_write_reg>
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <nrf24l01p_get_address_width>:
{
  return (nrf24l01p_read_reg(NRF24L01P_OBSERVE_TX) & (BIT(7)|BIT(6)|BIT(5)|BIT(4))) >> 4;
}

uint8_t nrf24l01p_get_address_width(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  return (nrf24l01p_read_reg(NRF24L01P_SETUP_AW) + 2);
 8003008:	2003      	movs	r0, #3
 800300a:	f000 f911 	bl	8003230 <nrf24l01p_read_reg>
 800300e:	4603      	mov	r3, r0
 8003010:	3302      	adds	r3, #2
 8003012:	b2db      	uxtb	r3, r3
}
 8003014:	4618      	mov	r0, r3
 8003016:	bd80      	pop	{r7, pc}

08003018 <nrf24l01p_set_operation_mode>:
{
  return nrf24l01p_read_reg(NRF24L01P_RX_PW_P0 + pipe_num);
}

void nrf24l01p_set_operation_mode(nrf24l01p_operation_mode_t op_mode)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_CONFIG, BIT_COND(nrf24l01p_read_reg(NRF24L01P_CONFIG), NRF24L01P_CONFIG_PRIM_RX, op_mode == NRF24L01P_PRX));
 8003022:	2000      	movs	r0, #0
 8003024:	f000 f904 	bl	8003230 <nrf24l01p_read_reg>
 8003028:	4603      	mov	r3, r0
 800302a:	b25b      	sxtb	r3, r3
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	b25a      	sxtb	r2, r3
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	2b01      	cmp	r3, #1
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	b25b      	sxtb	r3, r3
 8003040:	4313      	orrs	r3, r2
 8003042:	b25b      	sxtb	r3, r3
 8003044:	b2db      	uxtb	r3, r3
 8003046:	4619      	mov	r1, r3
 8003048:	2000      	movs	r0, #0
 800304a:	f000 f90a 	bl	8003262 <nrf24l01p_write_reg>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <nrf24l01p_set_power_mode>:

void nrf24l01p_set_power_mode(nrf24l01p_pwr_mode_t pwr_mode)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	4603      	mov	r3, r0
 800305e:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_CONFIG, BIT_COND(nrf24l01p_read_reg(NRF24L01P_CONFIG), NRF24L01P_CONFIG_PWR_UP, pwr_mode == NRF24L01P_PWR_UP));
 8003060:	2000      	movs	r0, #0
 8003062:	f000 f8e5 	bl	8003230 <nrf24l01p_read_reg>
 8003066:	4603      	mov	r3, r0
 8003068:	b25b      	sxtb	r3, r3
 800306a:	f023 0302 	bic.w	r3, r3, #2
 800306e:	b25b      	sxtb	r3, r3
 8003070:	79fa      	ldrb	r2, [r7, #7]
 8003072:	2a01      	cmp	r2, #1
 8003074:	d101      	bne.n	800307a <nrf24l01p_set_power_mode+0x24>
 8003076:	2202      	movs	r2, #2
 8003078:	e000      	b.n	800307c <nrf24l01p_set_power_mode+0x26>
 800307a:	2200      	movs	r2, #0
 800307c:	4313      	orrs	r3, r2
 800307e:	b25b      	sxtb	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	4619      	mov	r1, r3
 8003084:	2000      	movs	r0, #0
 8003086:	f000 f8ec 	bl	8003262 <nrf24l01p_write_reg>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(uint8_t channel)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	4603      	mov	r3, r0
 800309a:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_RF_CH, channel);
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	4619      	mov	r1, r3
 80030a0:	2005      	movs	r0, #5
 80030a2:	f000 f8de 	bl	8003262 <nrf24l01p_write_reg>
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <nrf24l01p_set_datarate>:
{
  nrf24l01p_write_reg(NRF24L01P_RF_SETUP, (nrf24l01p_read_reg(NRF24L01P_RF_SETUP) & ~((1<<NRF24L01P_RF_SETUP_RF_PWR1)|(1<<NRF24L01P_RF_SETUP_RF_PWR0))) | ((uint8_t)power<<1));
}

void nrf24l01p_set_datarate(nrf24l01p_datarate_t datarate)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4603      	mov	r3, r0
 80030b6:	71fb      	strb	r3, [r7, #7]
  if (datarate == NRF24L01P_250KBPS)
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d116      	bne.n	80030ec <nrf24l01p_set_datarate+0x3e>
  {
	nrf24l01p_write_reg(NRF24L01P_RF_SETUP, BIT_COND(nrf24l01p_read_reg(NRF24L01P_RF_SETUP), NRF24L01P_RF_SETUP_RF_DR_LOW, 1));
 80030be:	2006      	movs	r0, #6
 80030c0:	f000 f8b6 	bl	8003230 <nrf24l01p_read_reg>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f043 0320 	orr.w	r3, r3, #32
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	4619      	mov	r1, r3
 80030ce:	2006      	movs	r0, #6
 80030d0:	f000 f8c7 	bl	8003262 <nrf24l01p_write_reg>
	nrf24l01p_write_reg(NRF24L01P_RF_SETUP, BIT_COND(nrf24l01p_read_reg(NRF24L01P_RF_SETUP), NRF24L01P_RF_SETUP_RF_DR, 0));
 80030d4:	2006      	movs	r0, #6
 80030d6:	f000 f8ab 	bl	8003230 <nrf24l01p_read_reg>
 80030da:	4603      	mov	r3, r0
 80030dc:	f023 0308 	bic.w	r3, r3, #8
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	4619      	mov	r1, r3
 80030e4:	2006      	movs	r0, #6
 80030e6:	f000 f8bc 	bl	8003262 <nrf24l01p_write_reg>
  }
  else
  {
    nrf24l01p_write_reg(NRF24L01P_CONFIG, BIT_COND(nrf24l01p_read_reg(NRF24L01P_RF_SETUP), NRF24L01P_RF_SETUP_RF_DR, datarate != NRF24L01P_1MBPS));
  }
}
 80030ea:	e014      	b.n	8003116 <nrf24l01p_set_datarate+0x68>
    nrf24l01p_write_reg(NRF24L01P_CONFIG, BIT_COND(nrf24l01p_read_reg(NRF24L01P_RF_SETUP), NRF24L01P_RF_SETUP_RF_DR, datarate != NRF24L01P_1MBPS));
 80030ec:	2006      	movs	r0, #6
 80030ee:	f000 f89f 	bl	8003230 <nrf24l01p_read_reg>
 80030f2:	4603      	mov	r3, r0
 80030f4:	b25b      	sxtb	r3, r3
 80030f6:	f023 0308 	bic.w	r3, r3, #8
 80030fa:	b25b      	sxtb	r3, r3
 80030fc:	79fa      	ldrb	r2, [r7, #7]
 80030fe:	2a00      	cmp	r2, #0
 8003100:	d001      	beq.n	8003106 <nrf24l01p_set_datarate+0x58>
 8003102:	2208      	movs	r2, #8
 8003104:	e000      	b.n	8003108 <nrf24l01p_set_datarate+0x5a>
 8003106:	2200      	movs	r2, #0
 8003108:	4313      	orrs	r3, r2
 800310a:	b25b      	sxtb	r3, r3
 800310c:	b2db      	uxtb	r3, r3
 800310e:	4619      	mov	r1, r3
 8003110:	2000      	movs	r0, #0
 8003112:	f000 f8a6 	bl	8003262 <nrf24l01p_write_reg>
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <nrf24l01p_rx_fifo_empty>:
	  return NRF24L01P_250KBPS;
  return (nrf24l01p_read_reg(NRF24L01P_RF_SETUP) & (1<<NRF24L01P_RF_SETUP_RF_DR)) >> NRF24L01P_RF_SETUP_RF_DR;
}

bool nrf24l01p_rx_fifo_empty(void)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	af00      	add	r7, sp, #0
  return nrf24l01p_get_rx_data_source() == 7;
 8003122:	f000 f83d 	bl	80031a0 <nrf24l01p_get_rx_data_source>
 8003126:	4603      	mov	r3, r0
 8003128:	2b07      	cmp	r3, #7
 800312a:	bf0c      	ite	eq
 800312c:	2301      	moveq	r3, #1
 800312e:	2300      	movne	r3, #0
 8003130:	b2db      	uxtb	r3, r3
}
 8003132:	4618      	mov	r0, r3
 8003134:	bd80      	pop	{r7, pc}

08003136 <nrf24l01p_get_carrier_detect>:
{
  return nrf24l01p_read_reg(NRF24L01P_OBSERVE_TX) & (BIT(3)|BIT(2)|BIT(1)|BIT(0));
}

bool nrf24l01p_get_carrier_detect(void)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	af00      	add	r7, sp, #0
  return nrf24l01p_read_reg(NRF24L01P_CD) & 1;
 800313a:	2009      	movs	r0, #9
 800313c:	f000 f878 	bl	8003230 <nrf24l01p_read_reg>
 8003140:	4603      	mov	r3, r0
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	bf14      	ite	ne
 800314a:	2301      	movne	r3, #1
 800314c:	2300      	moveq	r3, #0
 800314e:	b2db      	uxtb	r3, r3
}
 8003150:	4618      	mov	r0, r3
 8003152:	bd80      	pop	{r7, pc}

08003154 <nrf24l01p_write_tx_payload>:

void nrf24l01p_write_tx_payload(const uint8_t *tx_payload, uint8_t length)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	70fb      	strb	r3, [r7, #3]
  nrf24l01p_write_multibyte_reg(NRF24L01P_TX_PAYLOAD, tx_payload, length);
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	461a      	mov	r2, r3
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	2007      	movs	r0, #7
 8003168:	f000 f918 	bl	800339c <nrf24l01p_write_multibyte_reg>
}
 800316c:	bf00      	nop
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <nrf24l01p_read_rx_fifo_payload_width>:

  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
}

uint8_t nrf24l01p_read_rx_fifo_payload_width()
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
  uint8_t temp;
  
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 800317a:	2000      	movs	r0, #0
 800317c:	f7fd f90c 	bl	8000398 <nrf24l01p_spi_ss>

  nrf24l01p_spi_rw(NRF24L01P_RD_RX_PAYLOAD_WIDTH);
 8003180:	2060      	movs	r0, #96	; 0x60
 8003182:	f7fd f933 	bl	80003ec <nrf24l01p_spi_rw>
  temp = nrf24l01p_spi_rw(0);
 8003186:	2000      	movs	r0, #0
 8003188:	f7fd f930 	bl	80003ec <nrf24l01p_spi_rw>
 800318c:	4603      	mov	r3, r0
 800318e:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 8003190:	2001      	movs	r0, #1
 8003192:	f7fd f901 	bl	8000398 <nrf24l01p_spi_ss>

  return temp;
 8003196:	79fb      	ldrb	r3, [r7, #7]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <nrf24l01p_get_rx_data_source>:
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
}
 */

uint8_t nrf24l01p_get_rx_data_source(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  return ((nrf24l01p_nop() & (BIT(3)|BIT(2)|BIT(1))) >> 1);
 80031a4:	f000 f81d 	bl	80031e2 <nrf24l01p_nop>
 80031a8:	4603      	mov	r3, r0
 80031aa:	105b      	asrs	r3, r3, #1
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	b2db      	uxtb	r3, r3
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <nrf24l01p_read_rx_payload>:

// Fixed: returns length==0 and pipe==7 means FIFO empty

uint16_t nrf24l01p_read_rx_payload(uint8_t *rx_payload)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  return nrf24l01p_read_multibyte_reg(NRF24L01P_RX_PAYLOAD, rx_payload);
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	2008      	movs	r0, #8
 80031c4:	f000 f88d 	bl	80032e2 <nrf24l01p_read_multibyte_reg>
 80031c8:	4603      	mov	r3, r0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <nrf24l01p_flush_tx>:
{
  nrf24l01p_write_reg(NRF24L01P_FLUSH_RX, 0);
}

void nrf24l01p_flush_tx(void)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	af00      	add	r7, sp, #0
  nrf24l01p_write_reg(NRF24L01P_FLUSH_TX, 0);
 80031d6:	2100      	movs	r1, #0
 80031d8:	20e1      	movs	r0, #225	; 0xe1
 80031da:	f000 f842 	bl	8003262 <nrf24l01p_write_reg>
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <nrf24l01p_nop>:

uint8_t nrf24l01p_nop(void)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	af00      	add	r7, sp, #0
  return nrf24l01p_write_reg(NRF24L01P_NOP,0);
 80031e6:	2100      	movs	r1, #0
 80031e8:	20ff      	movs	r0, #255	; 0xff
 80031ea:	f000 f83a 	bl	8003262 <nrf24l01p_write_reg>
 80031ee:	4603      	mov	r3, r0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <nrf24l01p_set_pll_mode>:

void nrf24l01p_set_pll_mode(nrf24l01p_pll_mode_t pll_mode)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_RF_SETUP, BIT_COND(nrf24l01p_read_reg(NRF24L01P_RF_SETUP), NRF24L01P_RF_SETUP_PLL_LOCK, pll_mode == NRF24L01P_PLL_LOCK));
 80031fe:	2006      	movs	r0, #6
 8003200:	f000 f816 	bl	8003230 <nrf24l01p_read_reg>
 8003204:	4603      	mov	r3, r0
 8003206:	b25b      	sxtb	r3, r3
 8003208:	f023 0310 	bic.w	r3, r3, #16
 800320c:	b25b      	sxtb	r3, r3
 800320e:	79fa      	ldrb	r2, [r7, #7]
 8003210:	2a01      	cmp	r2, #1
 8003212:	d101      	bne.n	8003218 <nrf24l01p_set_pll_mode+0x24>
 8003214:	2210      	movs	r2, #16
 8003216:	e000      	b.n	800321a <nrf24l01p_set_pll_mode+0x26>
 8003218:	2200      	movs	r2, #0
 800321a:	4313      	orrs	r3, r2
 800321c:	b25b      	sxtb	r3, r3
 800321e:	b2db      	uxtb	r3, r3
 8003220:	4619      	mov	r1, r3
 8003222:	2006      	movs	r0, #6
 8003224:	f000 f81d 	bl	8003262 <nrf24l01p_write_reg>
}
 8003228:	bf00      	nop
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <nrf24l01p_read_reg>:
{
  return (nrf24l01p_lna_mode_t) ( (nrf24l01p_read_reg(NRF24L01P_RF_SETUP) & (1<<NRF24L01P_LNA_HCURR)) >> NRF24L01P_LNA_HCURR );
}

uint8_t nrf24l01p_read_reg(uint8_t reg)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	71fb      	strb	r3, [r7, #7]
uint8_t temp;
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 800323a:	2000      	movs	r0, #0
 800323c:	f7fd f8ac 	bl	8000398 <nrf24l01p_spi_ss>
  nrf24l01p_spi_rw(reg);
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd f8d2 	bl	80003ec <nrf24l01p_spi_rw>
  temp = nrf24l01p_spi_rw(0);
 8003248:	2000      	movs	r0, #0
 800324a:	f7fd f8cf 	bl	80003ec <nrf24l01p_spi_rw>
 800324e:	4603      	mov	r3, r0
 8003250:	73fb      	strb	r3, [r7, #15]
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 8003252:	2001      	movs	r0, #1
 8003254:	f7fd f8a0 	bl	8000398 <nrf24l01p_spi_ss>

  return temp;
 8003258:	7bfb      	ldrb	r3, [r7, #15]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <nrf24l01p_write_reg>:

uint8_t nrf24l01p_write_reg(uint8_t reg, uint8_t value)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b084      	sub	sp, #16
 8003266:	af00      	add	r7, sp, #0
 8003268:	4603      	mov	r3, r0
 800326a:	460a      	mov	r2, r1
 800326c:	71fb      	strb	r3, [r7, #7]
 800326e:	4613      	mov	r3, r2
 8003270:	71bb      	strb	r3, [r7, #6]
  uint8_t retval;
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 8003272:	2000      	movs	r0, #0
 8003274:	f7fd f890 	bl	8000398 <nrf24l01p_spi_ss>
  if(reg < NRF24L01P_NRF_WRITE_REG)   // i.e. this is a register access
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	2b1f      	cmp	r3, #31
 800327c:	d80c      	bhi.n	8003298 <nrf24l01p_write_reg+0x36>
  {
    retval = nrf24l01p_spi_rw(NRF24L01P_NRF_WRITE_REG + reg);
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	3320      	adds	r3, #32
 8003282:	b2db      	uxtb	r3, r3
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd f8b1 	bl	80003ec <nrf24l01p_spi_rw>
 800328a:	4603      	mov	r3, r0
 800328c:	73fb      	strb	r3, [r7, #15]
    nrf24l01p_spi_rw(value);
 800328e:	79bb      	ldrb	r3, [r7, #6]
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd f8ab 	bl	80003ec <nrf24l01p_spi_rw>
 8003296:	e01c      	b.n	80032d2 <nrf24l01p_write_reg+0x70>
  }
  else            // single byte cmd OR future command/register access
  {
    if(!(reg == NRF24L01P_FLUSH_TX) && !(reg == NRF24L01P_FLUSH_RX) && !(reg == NRF24L01P_REUSE_TX_PL) && !(reg == NRF24L01P_NOP))
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	2be1      	cmp	r3, #225	; 0xe1
 800329c:	d013      	beq.n	80032c6 <nrf24l01p_write_reg+0x64>
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	2be2      	cmp	r3, #226	; 0xe2
 80032a2:	d010      	beq.n	80032c6 <nrf24l01p_write_reg+0x64>
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	2be3      	cmp	r3, #227	; 0xe3
 80032a8:	d00d      	beq.n	80032c6 <nrf24l01p_write_reg+0x64>
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	2bff      	cmp	r3, #255	; 0xff
 80032ae:	d00a      	beq.n	80032c6 <nrf24l01p_write_reg+0x64>
    {
      retval = nrf24l01p_spi_rw(reg);
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd f89a 	bl	80003ec <nrf24l01p_spi_rw>
 80032b8:	4603      	mov	r3, r0
 80032ba:	73fb      	strb	r3, [r7, #15]
      nrf24l01p_spi_rw(value);
 80032bc:	79bb      	ldrb	r3, [r7, #6]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd f894 	bl	80003ec <nrf24l01p_spi_rw>
 80032c4:	e005      	b.n	80032d2 <nrf24l01p_write_reg+0x70>
    }
    else          // single byte L01 command
    {
      retval = nrf24l01p_spi_rw(reg);
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd f88f 	bl	80003ec <nrf24l01p_spi_rw>
 80032ce:	4603      	mov	r3, r0
 80032d0:	73fb      	strb	r3, [r7, #15]
    }
  }
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 80032d2:	2001      	movs	r0, #1
 80032d4:	f7fd f860 	bl	8000398 <nrf24l01p_spi_ss>

  return retval;
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <nrf24l01p_read_multibyte_reg>:

uint16_t nrf24l01p_read_multibyte_reg(uint8_t reg, uint8_t *pbuf)
{
 80032e2:	b590      	push	{r4, r7, lr}
 80032e4:	b085      	sub	sp, #20
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	4603      	mov	r3, r0
 80032ea:	6039      	str	r1, [r7, #0]
 80032ec:	71fb      	strb	r3, [r7, #7]
uint8_t ctr, length;
  switch(reg)
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d018      	beq.n	8003326 <nrf24l01p_read_multibyte_reg+0x44>
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	dc2f      	bgt.n	8003358 <nrf24l01p_read_multibyte_reg+0x76>
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	dc02      	bgt.n	8003302 <nrf24l01p_read_multibyte_reg+0x20>
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	da02      	bge.n	8003306 <nrf24l01p_read_multibyte_reg+0x24>
 8003300:	e02a      	b.n	8003358 <nrf24l01p_read_multibyte_reg+0x76>
 8003302:	2b06      	cmp	r3, #6
 8003304:	d128      	bne.n	8003358 <nrf24l01p_read_multibyte_reg+0x76>
  {
    case NRF24L01P_PIPE0:
    case NRF24L01P_PIPE1:
    case NRF24L01P_TX:
      length = ctr = nrf24l01p_get_address_width();
 8003306:	f7ff fe7d 	bl	8003004 <nrf24l01p_get_address_width>
 800330a:	4603      	mov	r3, r0
 800330c:	73fb      	strb	r3, [r7, #15]
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	73bb      	strb	r3, [r7, #14]
      nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 8003312:	2000      	movs	r0, #0
 8003314:	f7fd f840 	bl	8000398 <nrf24l01p_spi_ss>
      nrf24l01p_spi_rw(NRF24L01P_RX_ADDR_P0 + reg);
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	330a      	adds	r3, #10
 800331c:	b2db      	uxtb	r3, r3
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd f864 	bl	80003ec <nrf24l01p_spi_rw>
      break;
 8003324:	e01d      	b.n	8003362 <nrf24l01p_read_multibyte_reg+0x80>
      
    case NRF24L01P_RX_PAYLOAD:
      if( (reg = nrf24l01p_get_rx_data_source()) < 7)
 8003326:	f7ff ff3b 	bl	80031a0 <nrf24l01p_get_rx_data_source>
 800332a:	4603      	mov	r3, r0
 800332c:	71fb      	strb	r3, [r7, #7]
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	2b06      	cmp	r3, #6
 8003332:	d80c      	bhi.n	800334e <nrf24l01p_read_multibyte_reg+0x6c>
      {
        length = ctr = nrf24l01p_read_rx_fifo_payload_width();
 8003334:	f7ff ff1e 	bl	8003174 <nrf24l01p_read_rx_fifo_payload_width>
 8003338:	4603      	mov	r3, r0
 800333a:	73fb      	strb	r3, [r7, #15]
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	73bb      	strb	r3, [r7, #14]

        nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 8003340:	2000      	movs	r0, #0
 8003342:	f7fd f829 	bl	8000398 <nrf24l01p_spi_ss>
        nrf24l01p_spi_rw(NRF24L01P_RD_RX_PAYLOAD);
 8003346:	2061      	movs	r0, #97	; 0x61
 8003348:	f7fd f850 	bl	80003ec <nrf24l01p_spi_rw>
      }
      else
      {
       ctr = length = 0;
      }
      break;
 800334c:	e009      	b.n	8003362 <nrf24l01p_read_multibyte_reg+0x80>
       ctr = length = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	73bb      	strb	r3, [r7, #14]
 8003352:	7bbb      	ldrb	r3, [r7, #14]
 8003354:	73fb      	strb	r3, [r7, #15]
      break;
 8003356:	e004      	b.n	8003362 <nrf24l01p_read_multibyte_reg+0x80>

    default:
      ctr = length = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	73bb      	strb	r3, [r7, #14]
 800335c:	7bbb      	ldrb	r3, [r7, #14]
 800335e:	73fb      	strb	r3, [r7, #15]
      break;
 8003360:	bf00      	nop
  }

  while(ctr--)
 8003362:	e007      	b.n	8003374 <nrf24l01p_read_multibyte_reg+0x92>
  {
    *pbuf++ = nrf24l01p_spi_rw(0);
 8003364:	683c      	ldr	r4, [r7, #0]
 8003366:	1c63      	adds	r3, r4, #1
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	2000      	movs	r0, #0
 800336c:	f7fd f83e 	bl	80003ec <nrf24l01p_spi_rw>
 8003370:	4603      	mov	r3, r0
 8003372:	7023      	strb	r3, [r4, #0]
  while(ctr--)
 8003374:	7bfb      	ldrb	r3, [r7, #15]
 8003376:	1e5a      	subs	r2, r3, #1
 8003378:	73fa      	strb	r2, [r7, #15]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f2      	bne.n	8003364 <nrf24l01p_read_multibyte_reg+0x82>
  }

  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 800337e:	2001      	movs	r0, #1
 8003380:	f7fd f80a 	bl	8000398 <nrf24l01p_spi_ss>

  return (((uint16_t) reg << 8) | length);
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	b21a      	sxth	r2, r3
 800338a:	7bbb      	ldrb	r3, [r7, #14]
 800338c:	b21b      	sxth	r3, r3
 800338e:	4313      	orrs	r3, r2
 8003390:	b21b      	sxth	r3, r3
 8003392:	b29b      	uxth	r3, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	bd90      	pop	{r4, r7, pc}

0800339c <nrf24l01p_write_multibyte_reg>:

void nrf24l01p_write_multibyte_reg(uint8_t reg, const uint8_t *pbuf, uint8_t length)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	6039      	str	r1, [r7, #0]
 80033a6:	71fb      	strb	r3, [r7, #7]
 80033a8:	4613      	mov	r3, r2
 80033aa:	71bb      	strb	r3, [r7, #6]
  switch(reg)
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	2b07      	cmp	r3, #7
 80033b0:	d016      	beq.n	80033e0 <nrf24l01p_write_multibyte_reg+0x44>
 80033b2:	2b07      	cmp	r3, #7
 80033b4:	dc1b      	bgt.n	80033ee <nrf24l01p_write_multibyte_reg+0x52>
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	dc02      	bgt.n	80033c0 <nrf24l01p_write_multibyte_reg+0x24>
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	da02      	bge.n	80033c4 <nrf24l01p_write_multibyte_reg+0x28>
    case NRF24L01P_TX_PAYLOAD:
      nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
      nrf24l01p_spi_rw(NRF24L01P_WR_TX_PAYLOAD);
      break;      
    default:
      break;
 80033be:	e016      	b.n	80033ee <nrf24l01p_write_multibyte_reg+0x52>
  switch(reg)
 80033c0:	2b06      	cmp	r3, #6
 80033c2:	d114      	bne.n	80033ee <nrf24l01p_write_multibyte_reg+0x52>
      length = nrf24l01p_get_address_width();
 80033c4:	f7ff fe1e 	bl	8003004 <nrf24l01p_get_address_width>
 80033c8:	4603      	mov	r3, r0
 80033ca:	71bb      	strb	r3, [r7, #6]
      nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 80033cc:	2000      	movs	r0, #0
 80033ce:	f7fc ffe3 	bl	8000398 <nrf24l01p_spi_ss>
      nrf24l01p_spi_rw(NRF24L01P_NRF_WRITE_REG + NRF24L01P_RX_ADDR_P0 + reg);
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	332a      	adds	r3, #42	; 0x2a
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fd f807 	bl	80003ec <nrf24l01p_spi_rw>
      break;
 80033de:	e007      	b.n	80033f0 <nrf24l01p_write_multibyte_reg+0x54>
      nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 80033e0:	2000      	movs	r0, #0
 80033e2:	f7fc ffd9 	bl	8000398 <nrf24l01p_spi_ss>
      nrf24l01p_spi_rw(NRF24L01P_WR_TX_PAYLOAD);
 80033e6:	20a0      	movs	r0, #160	; 0xa0
 80033e8:	f7fd f800 	bl	80003ec <nrf24l01p_spi_rw>
      break;      
 80033ec:	e000      	b.n	80033f0 <nrf24l01p_write_multibyte_reg+0x54>
      break;
 80033ee:	bf00      	nop
  }

  while(length--)
 80033f0:	e006      	b.n	8003400 <nrf24l01p_write_multibyte_reg+0x64>
    nrf24l01p_spi_rw(*pbuf++);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	603a      	str	r2, [r7, #0]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fc fff6 	bl	80003ec <nrf24l01p_spi_rw>
  while(length--)
 8003400:	79bb      	ldrb	r3, [r7, #6]
 8003402:	1e5a      	subs	r2, r3, #1
 8003404:	71ba      	strb	r2, [r7, #6]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f3      	bne.n	80033f2 <nrf24l01p_write_multibyte_reg+0x56>

  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 800340a:	2001      	movs	r0, #1
 800340c:	f7fc ffc4 	bl	8000398 <nrf24l01p_spi_ss>
}
 8003410:	bf00      	nop
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800341e:	4b15      	ldr	r3, [pc, #84]	; (8003474 <HAL_MspInit+0x5c>)
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	4a14      	ldr	r2, [pc, #80]	; (8003474 <HAL_MspInit+0x5c>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	6193      	str	r3, [r2, #24]
 800342a:	4b12      	ldr	r3, [pc, #72]	; (8003474 <HAL_MspInit+0x5c>)
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003436:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <HAL_MspInit+0x5c>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	4a0e      	ldr	r2, [pc, #56]	; (8003474 <HAL_MspInit+0x5c>)
 800343c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003440:	61d3      	str	r3, [r2, #28]
 8003442:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <HAL_MspInit+0x5c>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344a:	607b      	str	r3, [r7, #4]
 800344c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800344e:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <HAL_MspInit+0x60>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	4a04      	ldr	r2, [pc, #16]	; (8003478 <HAL_MspInit+0x60>)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800346a:	bf00      	nop
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr
 8003474:	40021000 	.word	0x40021000
 8003478:	40010000 	.word	0x40010000

0800347c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003484:	f107 0310 	add.w	r3, r7, #16
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a15      	ldr	r2, [pc, #84]	; (80034ec <HAL_I2C_MspInit+0x70>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d123      	bne.n	80034e4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800349c:	4b14      	ldr	r3, [pc, #80]	; (80034f0 <HAL_I2C_MspInit+0x74>)
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	4a13      	ldr	r2, [pc, #76]	; (80034f0 <HAL_I2C_MspInit+0x74>)
 80034a2:	f043 0308 	orr.w	r3, r3, #8
 80034a6:	6193      	str	r3, [r2, #24]
 80034a8:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <HAL_I2C_MspInit+0x74>)
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034b4:	23c0      	movs	r3, #192	; 0xc0
 80034b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034b8:	2312      	movs	r3, #18
 80034ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034bc:	2303      	movs	r3, #3
 80034be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c0:	f107 0310 	add.w	r3, r7, #16
 80034c4:	4619      	mov	r1, r3
 80034c6:	480b      	ldr	r0, [pc, #44]	; (80034f4 <HAL_I2C_MspInit+0x78>)
 80034c8:	f000 fcf2 	bl	8003eb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034cc:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <HAL_I2C_MspInit+0x74>)
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	4a07      	ldr	r2, [pc, #28]	; (80034f0 <HAL_I2C_MspInit+0x74>)
 80034d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034d6:	61d3      	str	r3, [r2, #28]
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_I2C_MspInit+0x74>)
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80034e4:	bf00      	nop
 80034e6:	3720      	adds	r7, #32
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40005400 	.word	0x40005400
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40010c00 	.word	0x40010c00

080034f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b088      	sub	sp, #32
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003500:	f107 0310 	add.w	r3, r7, #16
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1c      	ldr	r2, [pc, #112]	; (8003584 <HAL_SPI_MspInit+0x8c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d131      	bne.n	800357c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003518:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <HAL_SPI_MspInit+0x90>)
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	4a1a      	ldr	r2, [pc, #104]	; (8003588 <HAL_SPI_MspInit+0x90>)
 800351e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003522:	61d3      	str	r3, [r2, #28]
 8003524:	4b18      	ldr	r3, [pc, #96]	; (8003588 <HAL_SPI_MspInit+0x90>)
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003530:	4b15      	ldr	r3, [pc, #84]	; (8003588 <HAL_SPI_MspInit+0x90>)
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	4a14      	ldr	r2, [pc, #80]	; (8003588 <HAL_SPI_MspInit+0x90>)
 8003536:	f043 0308 	orr.w	r3, r3, #8
 800353a:	6193      	str	r3, [r2, #24]
 800353c:	4b12      	ldr	r3, [pc, #72]	; (8003588 <HAL_SPI_MspInit+0x90>)
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003548:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800354c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354e:	2302      	movs	r3, #2
 8003550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003552:	2303      	movs	r3, #3
 8003554:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003556:	f107 0310 	add.w	r3, r7, #16
 800355a:	4619      	mov	r1, r3
 800355c:	480b      	ldr	r0, [pc, #44]	; (800358c <HAL_SPI_MspInit+0x94>)
 800355e:	f000 fca7 	bl	8003eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003562:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003566:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356c:	2300      	movs	r3, #0
 800356e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003570:	f107 0310 	add.w	r3, r7, #16
 8003574:	4619      	mov	r1, r3
 8003576:	4805      	ldr	r0, [pc, #20]	; (800358c <HAL_SPI_MspInit+0x94>)
 8003578:	f000 fc9a 	bl	8003eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800357c:	bf00      	nop
 800357e:	3720      	adds	r7, #32
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40003800 	.word	0x40003800
 8003588:	40021000 	.word	0x40021000
 800358c:	40010c00 	.word	0x40010c00

08003590 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a09      	ldr	r2, [pc, #36]	; (80035c4 <HAL_TIM_Base_MspInit+0x34>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d10b      	bne.n	80035ba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035a2:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <HAL_TIM_Base_MspInit+0x38>)
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	4a08      	ldr	r2, [pc, #32]	; (80035c8 <HAL_TIM_Base_MspInit+0x38>)
 80035a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035ac:	6193      	str	r3, [r2, #24]
 80035ae:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <HAL_TIM_Base_MspInit+0x38>)
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80035ba:	bf00      	nop
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr
 80035c4:	40012c00 	.word	0x40012c00
 80035c8:	40021000 	.word	0x40021000

080035cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035d0:	e7fe      	b.n	80035d0 <NMI_Handler+0x4>

080035d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035d2:	b480      	push	{r7}
 80035d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035d6:	e7fe      	b.n	80035d6 <HardFault_Handler+0x4>

080035d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035dc:	e7fe      	b.n	80035dc <MemManage_Handler+0x4>

080035de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035de:	b480      	push	{r7}
 80035e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035e2:	e7fe      	b.n	80035e2 <BusFault_Handler+0x4>

080035e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035e8:	e7fe      	b.n	80035e8 <UsageFault_Handler+0x4>

080035ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035ea:	b480      	push	{r7}
 80035ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr

080035f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035f6:	b480      	push	{r7}
 80035f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035fa:	bf00      	nop
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr

08003602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003602:	b480      	push	{r7}
 8003604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003606:	bf00      	nop
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr

0800360e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003612:	f000 faff 	bl	8003c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003620:	4802      	ldr	r0, [pc, #8]	; (800362c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003622:	f001 ff42 	bl	80054aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	200014bc 	.word	0x200014bc

08003630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003638:	4a14      	ldr	r2, [pc, #80]	; (800368c <_sbrk+0x5c>)
 800363a:	4b15      	ldr	r3, [pc, #84]	; (8003690 <_sbrk+0x60>)
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003644:	4b13      	ldr	r3, [pc, #76]	; (8003694 <_sbrk+0x64>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d102      	bne.n	8003652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800364c:	4b11      	ldr	r3, [pc, #68]	; (8003694 <_sbrk+0x64>)
 800364e:	4a12      	ldr	r2, [pc, #72]	; (8003698 <_sbrk+0x68>)
 8003650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003652:	4b10      	ldr	r3, [pc, #64]	; (8003694 <_sbrk+0x64>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4413      	add	r3, r2
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	429a      	cmp	r2, r3
 800365e:	d207      	bcs.n	8003670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003660:	f009 f8dc 	bl	800c81c <__errno>
 8003664:	4603      	mov	r3, r0
 8003666:	220c      	movs	r2, #12
 8003668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800366a:	f04f 33ff 	mov.w	r3, #4294967295
 800366e:	e009      	b.n	8003684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003670:	4b08      	ldr	r3, [pc, #32]	; (8003694 <_sbrk+0x64>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003676:	4b07      	ldr	r3, [pc, #28]	; (8003694 <_sbrk+0x64>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4413      	add	r3, r2
 800367e:	4a05      	ldr	r2, [pc, #20]	; (8003694 <_sbrk+0x64>)
 8003680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003682:	68fb      	ldr	r3, [r7, #12]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20005000 	.word	0x20005000
 8003690:	00000400 	.word	0x00000400
 8003694:	200002d4 	.word	0x200002d4
 8003698:	200017b8 	.word	0x200017b8

0800369c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036a0:	bf00      	nop
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr

080036a8 <_vfd_get_char_code>:

/**
 * Returns code for display from character code
 */
uint16_t _vfd_get_char_code(char code)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	71fb      	strb	r3, [r7, #7]
	if ('0' <= code && code <= '9')
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	2b2f      	cmp	r3, #47	; 0x2f
 80036b6:	d908      	bls.n	80036ca <_vfd_get_char_code+0x22>
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	2b39      	cmp	r3, #57	; 0x39
 80036bc:	d805      	bhi.n	80036ca <_vfd_get_char_code+0x22>
		return _VFD_MAP_DIGITS[code - '0'];
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	3b30      	subs	r3, #48	; 0x30
 80036c2:	4a2b      	ldr	r2, [pc, #172]	; (8003770 <_vfd_get_char_code+0xc8>)
 80036c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036c8:	e04c      	b.n	8003764 <_vfd_get_char_code+0xbc>
	if (0 <= code && code <= 9)
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	2b09      	cmp	r3, #9
 80036ce:	d804      	bhi.n	80036da <_vfd_get_char_code+0x32>
		return _VFD_MAP_DIGITS[(uint8_t)code];
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	4a27      	ldr	r2, [pc, #156]	; (8003770 <_vfd_get_char_code+0xc8>)
 80036d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036d8:	e044      	b.n	8003764 <_vfd_get_char_code+0xbc>
	for (int i = 0; i < _VFD_SIZE_SPECIAL; i++)
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	e00e      	b.n	80036fe <_vfd_get_char_code+0x56>
		if (_VFD_MAP_SPECIAL_CHAR[i] == code)
 80036e0:	4a24      	ldr	r2, [pc, #144]	; (8003774 <_vfd_get_char_code+0xcc>)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4413      	add	r3, r2
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	79fa      	ldrb	r2, [r7, #7]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d104      	bne.n	80036f8 <_vfd_get_char_code+0x50>
			return _VFD_MAP_SPECIAL[i];
 80036ee:	4a22      	ldr	r2, [pc, #136]	; (8003778 <_vfd_get_char_code+0xd0>)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036f6:	e035      	b.n	8003764 <_vfd_get_char_code+0xbc>
	for (int i = 0; i < _VFD_SIZE_SPECIAL; i++)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	3301      	adds	r3, #1
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	231a      	movs	r3, #26
 8003700:	461a      	mov	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	4293      	cmp	r3, r2
 8003706:	dbeb      	blt.n	80036e0 <_vfd_get_char_code+0x38>
	if ('a' <= code && code <= 'z')
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	2b60      	cmp	r3, #96	; 0x60
 800370c:	d908      	bls.n	8003720 <_vfd_get_char_code+0x78>
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	2b7a      	cmp	r3, #122	; 0x7a
 8003712:	d805      	bhi.n	8003720 <_vfd_get_char_code+0x78>
		return _VFD_MAP_ALPHA[code - 'a'];
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	3b61      	subs	r3, #97	; 0x61
 8003718:	4a18      	ldr	r2, [pc, #96]	; (800377c <_vfd_get_char_code+0xd4>)
 800371a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800371e:	e021      	b.n	8003764 <_vfd_get_char_code+0xbc>
	if ('A' <= code && code <= 'Z')
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	2b40      	cmp	r3, #64	; 0x40
 8003724:	d908      	bls.n	8003738 <_vfd_get_char_code+0x90>
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	2b5a      	cmp	r3, #90	; 0x5a
 800372a:	d805      	bhi.n	8003738 <_vfd_get_char_code+0x90>
		return _VFD_MAP_ALPHA[code - 'A'];
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	3b41      	subs	r3, #65	; 0x41
 8003730:	4a12      	ldr	r2, [pc, #72]	; (800377c <_vfd_get_char_code+0xd4>)
 8003732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003736:	e015      	b.n	8003764 <_vfd_get_char_code+0xbc>
	if (192 <= code && code <= 223) // russian upper letters
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	2bbf      	cmp	r3, #191	; 0xbf
 800373c:	d908      	bls.n	8003750 <_vfd_get_char_code+0xa8>
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	2bdf      	cmp	r3, #223	; 0xdf
 8003742:	d805      	bhi.n	8003750 <_vfd_get_char_code+0xa8>
		return _VFD_MAP_ALPHA_RU[code - 192];
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	3bc0      	subs	r3, #192	; 0xc0
 8003748:	4a0d      	ldr	r2, [pc, #52]	; (8003780 <_vfd_get_char_code+0xd8>)
 800374a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800374e:	e009      	b.n	8003764 <_vfd_get_char_code+0xbc>
	if (224 <= code && code <= 255) // russian lower letters
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	2bdf      	cmp	r3, #223	; 0xdf
 8003754:	d905      	bls.n	8003762 <_vfd_get_char_code+0xba>
		return _VFD_MAP_ALPHA_RU[code - 224];
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	3be0      	subs	r3, #224	; 0xe0
 800375a:	4a09      	ldr	r2, [pc, #36]	; (8003780 <_vfd_get_char_code+0xd8>)
 800375c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003760:	e000      	b.n	8003764 <_vfd_get_char_code+0xbc>
	return 0;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	0800d7c8 	.word	0x0800d7c8
 8003774:	0800d884 	.word	0x0800d884
 8003778:	0800d850 	.word	0x0800d850
 800377c:	0800d7dc 	.word	0x0800d7dc
 8003780:	0800d810 	.word	0x0800d810

08003784 <vfd_put_string>:

/**
 * put string in buffer
 */
void vfd_put_string(char * str)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
	uint16_t buf;
	// erase letters only
	for (int i = 10; i > 0; i --)
 800378c:	230a      	movs	r3, #10
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	e028      	b.n	80037e4 <vfd_put_string+0x60>
	{
		 vfd.arr2[i][0] &= 1<<0;
 8003792:	493e      	ldr	r1, [pc, #248]	; (800388c <vfd_put_string+0x108>)
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4613      	mov	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	4413      	add	r3, r2
 800379c:	440b      	add	r3, r1
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	b2d8      	uxtb	r0, r3
 80037a6:	4939      	ldr	r1, [pc, #228]	; (800388c <vfd_put_string+0x108>)
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4613      	mov	r3, r2
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	4413      	add	r3, r2
 80037b0:	440b      	add	r3, r1
 80037b2:	4602      	mov	r2, r0
 80037b4:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] &= 1<<7;
 80037b6:	4935      	ldr	r1, [pc, #212]	; (800388c <vfd_put_string+0x108>)
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4613      	mov	r3, r2
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	4413      	add	r3, r2
 80037c0:	440b      	add	r3, r1
 80037c2:	3301      	adds	r3, #1
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80037ca:	b2d8      	uxtb	r0, r3
 80037cc:	492f      	ldr	r1, [pc, #188]	; (800388c <vfd_put_string+0x108>)
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4613      	mov	r3, r2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4413      	add	r3, r2
 80037d6:	440b      	add	r3, r1
 80037d8:	3301      	adds	r3, #1
 80037da:	4602      	mov	r2, r0
 80037dc:	701a      	strb	r2, [r3, #0]
	for (int i = 10; i > 0; i --)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	3b01      	subs	r3, #1
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	dcd3      	bgt.n	8003792 <vfd_put_string+0xe>
	}
	uint8_t i = 10;
 80037ea:	230a      	movs	r3, #10
 80037ec:	72fb      	strb	r3, [r7, #11]
	while (*str)
 80037ee:	e042      	b.n	8003876 <vfd_put_string+0xf2>
	{
		 buf = _vfd_get_char_code(*(str++));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff ff55 	bl	80036a8 <_vfd_get_char_code>
 80037fe:	4603      	mov	r3, r0
 8003800:	813b      	strh	r3, [r7, #8]
		 vfd.arr2[i][0] |= buf & (~(1<<0));
 8003802:	7afa      	ldrb	r2, [r7, #11]
 8003804:	4921      	ldr	r1, [pc, #132]	; (800388c <vfd_put_string+0x108>)
 8003806:	4613      	mov	r3, r2
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	4413      	add	r3, r2
 800380c:	440b      	add	r3, r1
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	b25a      	sxtb	r2, r3
 8003812:	893b      	ldrh	r3, [r7, #8]
 8003814:	b25b      	sxtb	r3, r3
 8003816:	f023 0301 	bic.w	r3, r3, #1
 800381a:	b25b      	sxtb	r3, r3
 800381c:	4313      	orrs	r3, r2
 800381e:	b25b      	sxtb	r3, r3
 8003820:	7afa      	ldrb	r2, [r7, #11]
 8003822:	b2d8      	uxtb	r0, r3
 8003824:	4919      	ldr	r1, [pc, #100]	; (800388c <vfd_put_string+0x108>)
 8003826:	4613      	mov	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4413      	add	r3, r2
 800382c:	440b      	add	r3, r1
 800382e:	4602      	mov	r2, r0
 8003830:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] |= (buf>>8)&(~(1<<7));
 8003832:	7afa      	ldrb	r2, [r7, #11]
 8003834:	4915      	ldr	r1, [pc, #84]	; (800388c <vfd_put_string+0x108>)
 8003836:	4613      	mov	r3, r2
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	4413      	add	r3, r2
 800383c:	440b      	add	r3, r1
 800383e:	3301      	adds	r3, #1
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	b25a      	sxtb	r2, r3
 8003844:	893b      	ldrh	r3, [r7, #8]
 8003846:	0a1b      	lsrs	r3, r3, #8
 8003848:	b29b      	uxth	r3, r3
 800384a:	b25b      	sxtb	r3, r3
 800384c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003850:	b25b      	sxtb	r3, r3
 8003852:	4313      	orrs	r3, r2
 8003854:	b25b      	sxtb	r3, r3
 8003856:	7afa      	ldrb	r2, [r7, #11]
 8003858:	b2d8      	uxtb	r0, r3
 800385a:	490c      	ldr	r1, [pc, #48]	; (800388c <vfd_put_string+0x108>)
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	440b      	add	r3, r1
 8003864:	3301      	adds	r3, #1
 8003866:	4602      	mov	r2, r0
 8003868:	701a      	strb	r2, [r3, #0]
		 if (!--i)
 800386a:	7afb      	ldrb	r3, [r7, #11]
 800386c:	3b01      	subs	r3, #1
 800386e:	72fb      	strb	r3, [r7, #11]
 8003870:	7afb      	ldrb	r3, [r7, #11]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d004      	beq.n	8003880 <vfd_put_string+0xfc>
	while (*str)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1b8      	bne.n	80037f0 <vfd_put_string+0x6c>
			 break;
	}
}
 800387e:	e000      	b.n	8003882 <vfd_put_string+0xfe>
			 break;
 8003880:	bf00      	nop
}
 8003882:	bf00      	nop
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	200006b4 	.word	0x200006b4

08003890 <vfd_set_symbols>:

/**
 * set symbols mask in buffer
 */
void vfd_set_symbols(uint32_t symbols)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < _VFD_SIZE_SYMBOLS; i++)
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	e041      	b.n	8003922 <vfd_set_symbols+0x92>
	{
		if (symbols & (1<<i))
 800389e:	2201      	movs	r2, #1
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	461a      	mov	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d035      	beq.n	800391c <vfd_set_symbols+0x8c>
		{
			// set symbol
			for (int b = 0; b < 3; b++)
 80038b0:	2300      	movs	r3, #0
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	e02f      	b.n	8003916 <vfd_set_symbols+0x86>
			  vfd.arr2[_VFD_MAP_SYMBOLS[i][0]][b] |= ((1<<_VFD_MAP_SYMBOLS[i][1])>>(b<<3))&0xFF;
 80038b6:	4a20      	ldr	r2, [pc, #128]	; (8003938 <vfd_set_symbols+0xa8>)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80038be:	4619      	mov	r1, r3
 80038c0:	4a1e      	ldr	r2, [pc, #120]	; (800393c <vfd_set_symbols+0xac>)
 80038c2:	460b      	mov	r3, r1
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	440b      	add	r3, r1
 80038c8:	441a      	add	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4413      	add	r3, r2
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	b25a      	sxtb	r2, r3
 80038d2:	4919      	ldr	r1, [pc, #100]	; (8003938 <vfd_set_symbols+0xa8>)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	440b      	add	r3, r1
 80038da:	785b      	ldrb	r3, [r3, #1]
 80038dc:	4619      	mov	r1, r3
 80038de:	2301      	movs	r3, #1
 80038e0:	fa03 f101 	lsl.w	r1, r3, r1
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	fa41 f303 	asr.w	r3, r1, r3
 80038ec:	b25b      	sxtb	r3, r3
 80038ee:	4313      	orrs	r3, r2
 80038f0:	b258      	sxtb	r0, r3
 80038f2:	4a11      	ldr	r2, [pc, #68]	; (8003938 <vfd_set_symbols+0xa8>)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80038fa:	4619      	mov	r1, r3
 80038fc:	b2c0      	uxtb	r0, r0
 80038fe:	4a0f      	ldr	r2, [pc, #60]	; (800393c <vfd_set_symbols+0xac>)
 8003900:	460b      	mov	r3, r1
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	440b      	add	r3, r1
 8003906:	441a      	add	r2, r3
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4413      	add	r3, r2
 800390c:	4602      	mov	r2, r0
 800390e:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	3301      	adds	r3, #1
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b02      	cmp	r3, #2
 800391a:	ddcc      	ble.n	80038b6 <vfd_set_symbols+0x26>
	for (int i = 0; i < _VFD_SIZE_SYMBOLS; i++)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3301      	adds	r3, #1
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	2319      	movs	r3, #25
 8003924:	461a      	mov	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4293      	cmp	r3, r2
 800392a:	dbb8      	blt.n	800389e <vfd_set_symbols+0xe>
		}
	}
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	0800d8a0 	.word	0x0800d8a0
 800393c:	200006b4 	.word	0x200006b4

08003940 <vfd_clr_symbols>:

/**
 * put symbols mask in buffer
 */
void vfd_clr_symbols(uint32_t symbols)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < _VFD_SIZE_SYMBOLS; i++)
 8003948:	2300      	movs	r3, #0
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	e043      	b.n	80039d6 <vfd_clr_symbols+0x96>
	{
		if (symbols & (1<<i))
 800394e:	2201      	movs	r2, #1
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	461a      	mov	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d037      	beq.n	80039d0 <vfd_clr_symbols+0x90>
		{
			// reset symbol
			for (int b = 0; b < 3; b++)
 8003960:	2300      	movs	r3, #0
 8003962:	60bb      	str	r3, [r7, #8]
 8003964:	e031      	b.n	80039ca <vfd_clr_symbols+0x8a>
			  vfd.arr2[_VFD_MAP_SYMBOLS[i][0]][b] &= ~(((1<<_VFD_MAP_SYMBOLS[i][1])>>(b<<3))&0xFF);
 8003966:	4a21      	ldr	r2, [pc, #132]	; (80039ec <vfd_clr_symbols+0xac>)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800396e:	4619      	mov	r1, r3
 8003970:	4a1f      	ldr	r2, [pc, #124]	; (80039f0 <vfd_clr_symbols+0xb0>)
 8003972:	460b      	mov	r3, r1
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	440b      	add	r3, r1
 8003978:	441a      	add	r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	4413      	add	r3, r2
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	b25a      	sxtb	r2, r3
 8003982:	491a      	ldr	r1, [pc, #104]	; (80039ec <vfd_clr_symbols+0xac>)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	440b      	add	r3, r1
 800398a:	785b      	ldrb	r3, [r3, #1]
 800398c:	4619      	mov	r1, r3
 800398e:	2301      	movs	r3, #1
 8003990:	fa03 f101 	lsl.w	r1, r3, r1
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	fa41 f303 	asr.w	r3, r1, r3
 800399c:	b25b      	sxtb	r3, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	b25b      	sxtb	r3, r3
 80039a2:	4013      	ands	r3, r2
 80039a4:	b258      	sxtb	r0, r3
 80039a6:	4a11      	ldr	r2, [pc, #68]	; (80039ec <vfd_clr_symbols+0xac>)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80039ae:	4619      	mov	r1, r3
 80039b0:	b2c0      	uxtb	r0, r0
 80039b2:	4a0f      	ldr	r2, [pc, #60]	; (80039f0 <vfd_clr_symbols+0xb0>)
 80039b4:	460b      	mov	r3, r1
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	440b      	add	r3, r1
 80039ba:	441a      	add	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4413      	add	r3, r2
 80039c0:	4602      	mov	r2, r0
 80039c2:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	3301      	adds	r3, #1
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	ddca      	ble.n	8003966 <vfd_clr_symbols+0x26>
	for (int i = 0; i < _VFD_SIZE_SYMBOLS; i++)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	3301      	adds	r3, #1
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	2319      	movs	r3, #25
 80039d8:	461a      	mov	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4293      	cmp	r3, r2
 80039de:	dbb6      	blt.n	800394e <vfd_clr_symbols+0xe>
		}
	}
}
 80039e0:	bf00      	nop
 80039e2:	bf00      	nop
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr
 80039ec:	0800d8a0 	.word	0x0800d8a0
 80039f0:	200006b4 	.word	0x200006b4

080039f4 <vfd_clear_buf>:

/**
 * clear buffer
 */
void vfd_clear_buf(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 80039fa:	2300      	movs	r3, #0
 80039fc:	607b      	str	r3, [r7, #4]
 80039fe:	e007      	b.n	8003a10 <vfd_clear_buf+0x1c>
		  vfd.arr1[a] = 0;
 8003a00:	4a08      	ldr	r2, [pc, #32]	; (8003a24 <vfd_clear_buf+0x30>)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4413      	add	r3, r2
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	607b      	str	r3, [r7, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d9f4      	bls.n	8003a00 <vfd_clear_buf+0xc>
}
 8003a16:	bf00      	nop
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	200006b4 	.word	0x200006b4

08003a28 <vfd_update>:
}

/**
 * update data on VFD display
 */
void vfd_update(void) {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
	uint8_t data;

	vfd_spi_cs(VFD_CS_LOW);
 8003a2e:	2000      	movs	r0, #0
 8003a30:	f7fc fcf2 	bl	8000418 <vfd_spi_cs>
	data = VFD_COM_DATA_SETTING|VFD_DS_WRITE_DISP; // command 2, write display
 8003a34:	2340      	movs	r3, #64	; 0x40
 8003a36:	71fb      	strb	r3, [r7, #7]
	vfd_spi_tx(&data, 1);
 8003a38:	1dfb      	adds	r3, r7, #7
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fc fcfd 	bl	800043c <vfd_spi_tx>
	vfd_spi_cs(VFD_CS_HIGH);
 8003a42:	2001      	movs	r0, #1
 8003a44:	f7fc fce8 	bl	8000418 <vfd_spi_cs>

	vfd_spi_cs(VFD_CS_LOW);
 8003a48:	2000      	movs	r0, #0
 8003a4a:	f7fc fce5 	bl	8000418 <vfd_spi_cs>
	data = VFD_COM_ADDRESS_SETTING; // command 3, set address to 0
 8003a4e:	23c0      	movs	r3, #192	; 0xc0
 8003a50:	71fb      	strb	r3, [r7, #7]
	vfd_spi_tx(&data, 1);
 8003a52:	1dfb      	adds	r3, r7, #7
 8003a54:	2101      	movs	r1, #1
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fc fcf0 	bl	800043c <vfd_spi_tx>
	vfd_spi_tx(vfd.arr1, sizeof(vfd.arr1)); // transmit data
 8003a5c:	2121      	movs	r1, #33	; 0x21
 8003a5e:	4805      	ldr	r0, [pc, #20]	; (8003a74 <vfd_update+0x4c>)
 8003a60:	f7fc fcec 	bl	800043c <vfd_spi_tx>
	vfd_spi_cs(VFD_CS_HIGH);
 8003a64:	2001      	movs	r0, #1
 8003a66:	f7fc fcd7 	bl	8000418 <vfd_spi_cs>
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	200006b4 	.word	0x200006b4

08003a78 <vfd_leds>:

/**
 * enable disable leds mask (4 leds available)
 */
void vfd_leds(uint8_t leds)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	71fb      	strb	r3, [r7, #7]
	uint8_t data = VFD_COM_DATA_SETTING|VFD_DS_WRITE_LED; // command 2, write to LED port
 8003a82:	2341      	movs	r3, #65	; 0x41
 8003a84:	73fb      	strb	r3, [r7, #15]
	vfd_spi_cs(VFD_CS_LOW);
 8003a86:	2000      	movs	r0, #0
 8003a88:	f7fc fcc6 	bl	8000418 <vfd_spi_cs>
	vfd_spi_tx(&data, 1);
 8003a8c:	f107 030f 	add.w	r3, r7, #15
 8003a90:	2101      	movs	r1, #1
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fc fcd2 	bl	800043c <vfd_spi_tx>
	data = (~leds)&0b1111;
 8003a98:	79fb      	ldrb	r3, [r7, #7]
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	73fb      	strb	r3, [r7, #15]
	vfd_spi_tx(&data, 1);
 8003aa6:	f107 030f 	add.w	r3, r7, #15
 8003aaa:	2101      	movs	r1, #1
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fc fcc5 	bl	800043c <vfd_spi_tx>
	vfd_spi_cs(VFD_CS_HIGH);
 8003ab2:	2001      	movs	r0, #1
 8003ab4:	f7fc fcb0 	bl	8000418 <vfd_spi_cs>
}
 8003ab8:	bf00      	nop
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <vfd_init>:

/**
 * sets correct grid & segments count
 */
void vfd_init(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
	uint8_t data;

	vfd_spi_cs(VFD_CS_LOW);
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	f7fc fca6 	bl	8000418 <vfd_spi_cs>
	data = VFD_COM_DISPLAY_MODE_SETTING|VFD_DMS_11dig_17seg; // command 2, write display
 8003acc:	2307      	movs	r3, #7
 8003ace:	71fb      	strb	r3, [r7, #7]
	vfd_spi_tx(&data, 1);
 8003ad0:	1dfb      	adds	r3, r7, #7
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fc fcb1 	bl	800043c <vfd_spi_tx>
	vfd_spi_cs(VFD_CS_HIGH);
 8003ada:	2001      	movs	r0, #1
 8003adc:	f7fc fc9c 	bl	8000418 <vfd_spi_cs>

}
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <vfd_control>:

/**
 * enable/disable display and set dimming (0..7)
 */
void vfd_control(bool enable, uint8_t dimm)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	460a      	mov	r2, r1
 8003af2:	71fb      	strb	r3, [r7, #7]
 8003af4:	4613      	mov	r3, r2
 8003af6:	71bb      	strb	r3, [r7, #6]
	uint8_t data;

	vfd_spi_cs(VFD_CS_LOW);
 8003af8:	2000      	movs	r0, #0
 8003afa:	f7fc fc8d 	bl	8000418 <vfd_spi_cs>
	data = VFD_COM_DISPLAY_CONTROL|(enable?VFD_DC_DISP_ON:0)|(dimm&0b111); // command 4
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <vfd_control+0x22>
 8003b04:	f06f 0277 	mvn.w	r2, #119	; 0x77
 8003b08:	e001      	b.n	8003b0e <vfd_control+0x26>
 8003b0a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003b0e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	b25b      	sxtb	r3, r3
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	b25b      	sxtb	r3, r3
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	73fb      	strb	r3, [r7, #15]
	vfd_spi_tx(&data, 1);
 8003b20:	f107 030f 	add.w	r3, r7, #15
 8003b24:	2101      	movs	r1, #1
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fc fc88 	bl	800043c <vfd_spi_tx>
	vfd_spi_cs(VFD_CS_HIGH);
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	f7fc fc73 	bl	8000418 <vfd_spi_cs>
}
 8003b32:	bf00      	nop
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b3c:	480c      	ldr	r0, [pc, #48]	; (8003b70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b3e:	490d      	ldr	r1, [pc, #52]	; (8003b74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b40:	4a0d      	ldr	r2, [pc, #52]	; (8003b78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b44:	e002      	b.n	8003b4c <LoopCopyDataInit>

08003b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b4a:	3304      	adds	r3, #4

08003b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b50:	d3f9      	bcc.n	8003b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b52:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b54:	4c0a      	ldr	r4, [pc, #40]	; (8003b80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b58:	e001      	b.n	8003b5e <LoopFillZerobss>

08003b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b5c:	3204      	adds	r2, #4

08003b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b60:	d3fb      	bcc.n	8003b5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b62:	f7ff fd9b 	bl	800369c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b66:	f008 fe5f 	bl	800c828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b6a:	f7fd fa0f 	bl	8000f8c <main>
  bx lr
 8003b6e:	4770      	bx	lr
  ldr r0, =_sdata
 8003b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b74:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003b78:	0800d910 	.word	0x0800d910
  ldr r2, =_sbss
 8003b7c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003b80:	200017b8 	.word	0x200017b8

08003b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b84:	e7fe      	b.n	8003b84 <ADC1_2_IRQHandler>
	...

08003b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b8c:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <HAL_Init+0x28>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a07      	ldr	r2, [pc, #28]	; (8003bb0 <HAL_Init+0x28>)
 8003b92:	f043 0310 	orr.w	r3, r3, #16
 8003b96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b98:	2003      	movs	r0, #3
 8003b9a:	f000 f947 	bl	8003e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b9e:	200f      	movs	r0, #15
 8003ba0:	f000 f808 	bl	8003bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ba4:	f7ff fc38 	bl	8003418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40022000 	.word	0x40022000

08003bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bbc:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <HAL_InitTick+0x54>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <HAL_InitTick+0x58>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 f95f 	bl	8003e96 <HAL_SYSTICK_Config>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e00e      	b.n	8003c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b0f      	cmp	r3, #15
 8003be6:	d80a      	bhi.n	8003bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003be8:	2200      	movs	r2, #0
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf0:	f000 f927 	bl	8003e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bf4:	4a06      	ldr	r2, [pc, #24]	; (8003c10 <HAL_InitTick+0x5c>)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e000      	b.n	8003c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20000014 	.word	0x20000014
 8003c0c:	2000001c 	.word	0x2000001c
 8003c10:	20000018 	.word	0x20000018

08003c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_IncTick+0x1c>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_IncTick+0x20>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4413      	add	r3, r2
 8003c24:	4a03      	ldr	r2, [pc, #12]	; (8003c34 <HAL_IncTick+0x20>)
 8003c26:	6013      	str	r3, [r2, #0]
}
 8003c28:	bf00      	nop
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr
 8003c30:	2000001c 	.word	0x2000001c
 8003c34:	20000824 	.word	0x20000824

08003c38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c3c:	4b02      	ldr	r3, [pc, #8]	; (8003c48 <HAL_GetTick+0x10>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr
 8003c48:	20000824 	.word	0x20000824

08003c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c54:	f7ff fff0 	bl	8003c38 <HAL_GetTick>
 8003c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c64:	d005      	beq.n	8003c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c66:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <HAL_Delay+0x44>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c72:	bf00      	nop
 8003c74:	f7ff ffe0 	bl	8003c38 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d8f7      	bhi.n	8003c74 <HAL_Delay+0x28>
  {
  }
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	2000001c 	.word	0x2000001c

08003c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cc6:	4a04      	ldr	r2, [pc, #16]	; (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	60d3      	str	r3, [r2, #12]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce0:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	0a1b      	lsrs	r3, r3, #8
 8003ce6:	f003 0307 	and.w	r3, r3, #7
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	db0b      	blt.n	8003d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	f003 021f 	and.w	r2, r3, #31
 8003d10:	4906      	ldr	r1, [pc, #24]	; (8003d2c <__NVIC_EnableIRQ+0x34>)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	2001      	movs	r0, #1
 8003d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr
 8003d2c:	e000e100 	.word	0xe000e100

08003d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	6039      	str	r1, [r7, #0]
 8003d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	db0a      	blt.n	8003d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	490c      	ldr	r1, [pc, #48]	; (8003d7c <__NVIC_SetPriority+0x4c>)
 8003d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4e:	0112      	lsls	r2, r2, #4
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	440b      	add	r3, r1
 8003d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d58:	e00a      	b.n	8003d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	4908      	ldr	r1, [pc, #32]	; (8003d80 <__NVIC_SetPriority+0x50>)
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	3b04      	subs	r3, #4
 8003d68:	0112      	lsls	r2, r2, #4
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	761a      	strb	r2, [r3, #24]
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	e000e100 	.word	0xe000e100
 8003d80:	e000ed00 	.word	0xe000ed00

08003d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b089      	sub	sp, #36	; 0x24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f1c3 0307 	rsb	r3, r3, #7
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	bf28      	it	cs
 8003da2:	2304      	movcs	r3, #4
 8003da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	3304      	adds	r3, #4
 8003daa:	2b06      	cmp	r3, #6
 8003dac:	d902      	bls.n	8003db4 <NVIC_EncodePriority+0x30>
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3b03      	subs	r3, #3
 8003db2:	e000      	b.n	8003db6 <NVIC_EncodePriority+0x32>
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43da      	mvns	r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	401a      	ands	r2, r3
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd6:	43d9      	mvns	r1, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ddc:	4313      	orrs	r3, r2
         );
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3724      	adds	r7, #36	; 0x24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr

08003de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003df8:	d301      	bcc.n	8003dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e00f      	b.n	8003e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dfe:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <SysTick_Config+0x40>)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e06:	210f      	movs	r1, #15
 8003e08:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0c:	f7ff ff90 	bl	8003d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e10:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <SysTick_Config+0x40>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e16:	4b04      	ldr	r3, [pc, #16]	; (8003e28 <SysTick_Config+0x40>)
 8003e18:	2207      	movs	r2, #7
 8003e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	e000e010 	.word	0xe000e010

08003e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff ff2d 	bl	8003c94 <__NVIC_SetPriorityGrouping>
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b086      	sub	sp, #24
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	4603      	mov	r3, r0
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
 8003e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e54:	f7ff ff42 	bl	8003cdc <__NVIC_GetPriorityGrouping>
 8003e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	68b9      	ldr	r1, [r7, #8]
 8003e5e:	6978      	ldr	r0, [r7, #20]
 8003e60:	f7ff ff90 	bl	8003d84 <NVIC_EncodePriority>
 8003e64:	4602      	mov	r2, r0
 8003e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff ff5f 	bl	8003d30 <__NVIC_SetPriority>
}
 8003e72:	bf00      	nop
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	4603      	mov	r3, r0
 8003e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff ff35 	bl	8003cf8 <__NVIC_EnableIRQ>
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b082      	sub	sp, #8
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff ffa2 	bl	8003de8 <SysTick_Config>
 8003ea4:	4603      	mov	r3, r0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b08b      	sub	sp, #44	; 0x2c
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ec2:	e169      	b.n	8004198 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69fa      	ldr	r2, [r7, #28]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	f040 8158 	bne.w	8004192 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	4a9a      	ldr	r2, [pc, #616]	; (8004150 <HAL_GPIO_Init+0x2a0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d05e      	beq.n	8003faa <HAL_GPIO_Init+0xfa>
 8003eec:	4a98      	ldr	r2, [pc, #608]	; (8004150 <HAL_GPIO_Init+0x2a0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d875      	bhi.n	8003fde <HAL_GPIO_Init+0x12e>
 8003ef2:	4a98      	ldr	r2, [pc, #608]	; (8004154 <HAL_GPIO_Init+0x2a4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d058      	beq.n	8003faa <HAL_GPIO_Init+0xfa>
 8003ef8:	4a96      	ldr	r2, [pc, #600]	; (8004154 <HAL_GPIO_Init+0x2a4>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d86f      	bhi.n	8003fde <HAL_GPIO_Init+0x12e>
 8003efe:	4a96      	ldr	r2, [pc, #600]	; (8004158 <HAL_GPIO_Init+0x2a8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d052      	beq.n	8003faa <HAL_GPIO_Init+0xfa>
 8003f04:	4a94      	ldr	r2, [pc, #592]	; (8004158 <HAL_GPIO_Init+0x2a8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d869      	bhi.n	8003fde <HAL_GPIO_Init+0x12e>
 8003f0a:	4a94      	ldr	r2, [pc, #592]	; (800415c <HAL_GPIO_Init+0x2ac>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d04c      	beq.n	8003faa <HAL_GPIO_Init+0xfa>
 8003f10:	4a92      	ldr	r2, [pc, #584]	; (800415c <HAL_GPIO_Init+0x2ac>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d863      	bhi.n	8003fde <HAL_GPIO_Init+0x12e>
 8003f16:	4a92      	ldr	r2, [pc, #584]	; (8004160 <HAL_GPIO_Init+0x2b0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d046      	beq.n	8003faa <HAL_GPIO_Init+0xfa>
 8003f1c:	4a90      	ldr	r2, [pc, #576]	; (8004160 <HAL_GPIO_Init+0x2b0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d85d      	bhi.n	8003fde <HAL_GPIO_Init+0x12e>
 8003f22:	2b12      	cmp	r3, #18
 8003f24:	d82a      	bhi.n	8003f7c <HAL_GPIO_Init+0xcc>
 8003f26:	2b12      	cmp	r3, #18
 8003f28:	d859      	bhi.n	8003fde <HAL_GPIO_Init+0x12e>
 8003f2a:	a201      	add	r2, pc, #4	; (adr r2, 8003f30 <HAL_GPIO_Init+0x80>)
 8003f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f30:	08003fab 	.word	0x08003fab
 8003f34:	08003f85 	.word	0x08003f85
 8003f38:	08003f97 	.word	0x08003f97
 8003f3c:	08003fd9 	.word	0x08003fd9
 8003f40:	08003fdf 	.word	0x08003fdf
 8003f44:	08003fdf 	.word	0x08003fdf
 8003f48:	08003fdf 	.word	0x08003fdf
 8003f4c:	08003fdf 	.word	0x08003fdf
 8003f50:	08003fdf 	.word	0x08003fdf
 8003f54:	08003fdf 	.word	0x08003fdf
 8003f58:	08003fdf 	.word	0x08003fdf
 8003f5c:	08003fdf 	.word	0x08003fdf
 8003f60:	08003fdf 	.word	0x08003fdf
 8003f64:	08003fdf 	.word	0x08003fdf
 8003f68:	08003fdf 	.word	0x08003fdf
 8003f6c:	08003fdf 	.word	0x08003fdf
 8003f70:	08003fdf 	.word	0x08003fdf
 8003f74:	08003f8d 	.word	0x08003f8d
 8003f78:	08003fa1 	.word	0x08003fa1
 8003f7c:	4a79      	ldr	r2, [pc, #484]	; (8004164 <HAL_GPIO_Init+0x2b4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f82:	e02c      	b.n	8003fde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	623b      	str	r3, [r7, #32]
          break;
 8003f8a:	e029      	b.n	8003fe0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	3304      	adds	r3, #4
 8003f92:	623b      	str	r3, [r7, #32]
          break;
 8003f94:	e024      	b.n	8003fe0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	623b      	str	r3, [r7, #32]
          break;
 8003f9e:	e01f      	b.n	8003fe0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	623b      	str	r3, [r7, #32]
          break;
 8003fa8:	e01a      	b.n	8003fe0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d102      	bne.n	8003fb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	623b      	str	r3, [r7, #32]
          break;
 8003fb6:	e013      	b.n	8003fe0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d105      	bne.n	8003fcc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fc0:	2308      	movs	r3, #8
 8003fc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	611a      	str	r2, [r3, #16]
          break;
 8003fca:	e009      	b.n	8003fe0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fcc:	2308      	movs	r3, #8
 8003fce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	615a      	str	r2, [r3, #20]
          break;
 8003fd6:	e003      	b.n	8003fe0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	623b      	str	r3, [r7, #32]
          break;
 8003fdc:	e000      	b.n	8003fe0 <HAL_GPIO_Init+0x130>
          break;
 8003fde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2bff      	cmp	r3, #255	; 0xff
 8003fe4:	d801      	bhi.n	8003fea <HAL_GPIO_Init+0x13a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	e001      	b.n	8003fee <HAL_GPIO_Init+0x13e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3304      	adds	r3, #4
 8003fee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	2bff      	cmp	r3, #255	; 0xff
 8003ff4:	d802      	bhi.n	8003ffc <HAL_GPIO_Init+0x14c>
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	e002      	b.n	8004002 <HAL_GPIO_Init+0x152>
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	3b08      	subs	r3, #8
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	210f      	movs	r1, #15
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	fa01 f303 	lsl.w	r3, r1, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	401a      	ands	r2, r3
 8004014:	6a39      	ldr	r1, [r7, #32]
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	fa01 f303 	lsl.w	r3, r1, r3
 800401c:	431a      	orrs	r2, r3
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 80b1 	beq.w	8004192 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004030:	4b4d      	ldr	r3, [pc, #308]	; (8004168 <HAL_GPIO_Init+0x2b8>)
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	4a4c      	ldr	r2, [pc, #304]	; (8004168 <HAL_GPIO_Init+0x2b8>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6193      	str	r3, [r2, #24]
 800403c:	4b4a      	ldr	r3, [pc, #296]	; (8004168 <HAL_GPIO_Init+0x2b8>)
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	60bb      	str	r3, [r7, #8]
 8004046:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004048:	4a48      	ldr	r2, [pc, #288]	; (800416c <HAL_GPIO_Init+0x2bc>)
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	089b      	lsrs	r3, r3, #2
 800404e:	3302      	adds	r3, #2
 8004050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004054:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	f003 0303 	and.w	r3, r3, #3
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	220f      	movs	r2, #15
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43db      	mvns	r3, r3
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	4013      	ands	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a40      	ldr	r2, [pc, #256]	; (8004170 <HAL_GPIO_Init+0x2c0>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d013      	beq.n	800409c <HAL_GPIO_Init+0x1ec>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a3f      	ldr	r2, [pc, #252]	; (8004174 <HAL_GPIO_Init+0x2c4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00d      	beq.n	8004098 <HAL_GPIO_Init+0x1e8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a3e      	ldr	r2, [pc, #248]	; (8004178 <HAL_GPIO_Init+0x2c8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d007      	beq.n	8004094 <HAL_GPIO_Init+0x1e4>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a3d      	ldr	r2, [pc, #244]	; (800417c <HAL_GPIO_Init+0x2cc>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d101      	bne.n	8004090 <HAL_GPIO_Init+0x1e0>
 800408c:	2303      	movs	r3, #3
 800408e:	e006      	b.n	800409e <HAL_GPIO_Init+0x1ee>
 8004090:	2304      	movs	r3, #4
 8004092:	e004      	b.n	800409e <HAL_GPIO_Init+0x1ee>
 8004094:	2302      	movs	r3, #2
 8004096:	e002      	b.n	800409e <HAL_GPIO_Init+0x1ee>
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <HAL_GPIO_Init+0x1ee>
 800409c:	2300      	movs	r3, #0
 800409e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a0:	f002 0203 	and.w	r2, r2, #3
 80040a4:	0092      	lsls	r2, r2, #2
 80040a6:	4093      	lsls	r3, r2
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80040ae:	492f      	ldr	r1, [pc, #188]	; (800416c <HAL_GPIO_Init+0x2bc>)
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	089b      	lsrs	r3, r3, #2
 80040b4:	3302      	adds	r3, #2
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d006      	beq.n	80040d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80040c8:	4b2d      	ldr	r3, [pc, #180]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	492c      	ldr	r1, [pc, #176]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	600b      	str	r3, [r1, #0]
 80040d4:	e006      	b.n	80040e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80040d6:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	43db      	mvns	r3, r3
 80040de:	4928      	ldr	r1, [pc, #160]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d006      	beq.n	80040fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80040f0:	4b23      	ldr	r3, [pc, #140]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	4922      	ldr	r1, [pc, #136]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	604b      	str	r3, [r1, #4]
 80040fc:	e006      	b.n	800410c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80040fe:	4b20      	ldr	r3, [pc, #128]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	43db      	mvns	r3, r3
 8004106:	491e      	ldr	r1, [pc, #120]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 8004108:	4013      	ands	r3, r2
 800410a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d006      	beq.n	8004126 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004118:	4b19      	ldr	r3, [pc, #100]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	4918      	ldr	r1, [pc, #96]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	4313      	orrs	r3, r2
 8004122:	608b      	str	r3, [r1, #8]
 8004124:	e006      	b.n	8004134 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004126:	4b16      	ldr	r3, [pc, #88]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	43db      	mvns	r3, r3
 800412e:	4914      	ldr	r1, [pc, #80]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 8004130:	4013      	ands	r3, r2
 8004132:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d021      	beq.n	8004184 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004140:	4b0f      	ldr	r3, [pc, #60]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	490e      	ldr	r1, [pc, #56]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	4313      	orrs	r3, r2
 800414a:	60cb      	str	r3, [r1, #12]
 800414c:	e021      	b.n	8004192 <HAL_GPIO_Init+0x2e2>
 800414e:	bf00      	nop
 8004150:	10320000 	.word	0x10320000
 8004154:	10310000 	.word	0x10310000
 8004158:	10220000 	.word	0x10220000
 800415c:	10210000 	.word	0x10210000
 8004160:	10120000 	.word	0x10120000
 8004164:	10110000 	.word	0x10110000
 8004168:	40021000 	.word	0x40021000
 800416c:	40010000 	.word	0x40010000
 8004170:	40010800 	.word	0x40010800
 8004174:	40010c00 	.word	0x40010c00
 8004178:	40011000 	.word	0x40011000
 800417c:	40011400 	.word	0x40011400
 8004180:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004184:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <HAL_GPIO_Init+0x304>)
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	43db      	mvns	r3, r3
 800418c:	4909      	ldr	r1, [pc, #36]	; (80041b4 <HAL_GPIO_Init+0x304>)
 800418e:	4013      	ands	r3, r2
 8004190:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	3301      	adds	r3, #1
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	fa22 f303 	lsr.w	r3, r2, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f47f ae8e 	bne.w	8003ec4 <HAL_GPIO_Init+0x14>
  }
}
 80041a8:	bf00      	nop
 80041aa:	bf00      	nop
 80041ac:	372c      	adds	r7, #44	; 0x2c
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr
 80041b4:	40010400 	.word	0x40010400

080041b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	887b      	ldrh	r3, [r7, #2]
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
 80041d4:	e001      	b.n	80041da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041d6:	2300      	movs	r3, #0
 80041d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041da:	7bfb      	ldrb	r3, [r7, #15]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr

080041e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	460b      	mov	r3, r1
 80041f0:	807b      	strh	r3, [r7, #2]
 80041f2:	4613      	mov	r3, r2
 80041f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041f6:	787b      	ldrb	r3, [r7, #1]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041fc:	887a      	ldrh	r2, [r7, #2]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004202:	e003      	b.n	800420c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004204:	887b      	ldrh	r3, [r7, #2]
 8004206:	041a      	lsls	r2, r3, #16
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	611a      	str	r2, [r3, #16]
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr

08004216 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004216:	b480      	push	{r7}
 8004218:	b085      	sub	sp, #20
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	460b      	mov	r3, r1
 8004220:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004228:	887a      	ldrh	r2, [r7, #2]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4013      	ands	r3, r2
 800422e:	041a      	lsls	r2, r3, #16
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	43d9      	mvns	r1, r3
 8004234:	887b      	ldrh	r3, [r7, #2]
 8004236:	400b      	ands	r3, r1
 8004238:	431a      	orrs	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	611a      	str	r2, [r3, #16]
}
 800423e:	bf00      	nop
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr

08004248 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e12b      	b.n	80044b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff f904 	bl	800347c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2224      	movs	r2, #36	; 0x24
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0201 	bic.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800429a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042ac:	f003 f868 	bl	8007380 <HAL_RCC_GetPCLK1Freq>
 80042b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	4a81      	ldr	r2, [pc, #516]	; (80044bc <HAL_I2C_Init+0x274>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d807      	bhi.n	80042cc <HAL_I2C_Init+0x84>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4a80      	ldr	r2, [pc, #512]	; (80044c0 <HAL_I2C_Init+0x278>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	bf94      	ite	ls
 80042c4:	2301      	movls	r3, #1
 80042c6:	2300      	movhi	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	e006      	b.n	80042da <HAL_I2C_Init+0x92>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4a7d      	ldr	r2, [pc, #500]	; (80044c4 <HAL_I2C_Init+0x27c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	bf94      	ite	ls
 80042d4:	2301      	movls	r3, #1
 80042d6:	2300      	movhi	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e0e7      	b.n	80044b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4a78      	ldr	r2, [pc, #480]	; (80044c8 <HAL_I2C_Init+0x280>)
 80042e6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ea:	0c9b      	lsrs	r3, r3, #18
 80042ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	430a      	orrs	r2, r1
 8004300:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	4a6a      	ldr	r2, [pc, #424]	; (80044bc <HAL_I2C_Init+0x274>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d802      	bhi.n	800431c <HAL_I2C_Init+0xd4>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	3301      	adds	r3, #1
 800431a:	e009      	b.n	8004330 <HAL_I2C_Init+0xe8>
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004322:	fb02 f303 	mul.w	r3, r2, r3
 8004326:	4a69      	ldr	r2, [pc, #420]	; (80044cc <HAL_I2C_Init+0x284>)
 8004328:	fba2 2303 	umull	r2, r3, r2, r3
 800432c:	099b      	lsrs	r3, r3, #6
 800432e:	3301      	adds	r3, #1
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6812      	ldr	r2, [r2, #0]
 8004334:	430b      	orrs	r3, r1
 8004336:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004342:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	495c      	ldr	r1, [pc, #368]	; (80044bc <HAL_I2C_Init+0x274>)
 800434c:	428b      	cmp	r3, r1
 800434e:	d819      	bhi.n	8004384 <HAL_I2C_Init+0x13c>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	1e59      	subs	r1, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	fbb1 f3f3 	udiv	r3, r1, r3
 800435e:	1c59      	adds	r1, r3, #1
 8004360:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004364:	400b      	ands	r3, r1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <HAL_I2C_Init+0x138>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	1e59      	subs	r1, r3, #1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	fbb1 f3f3 	udiv	r3, r1, r3
 8004378:	3301      	adds	r3, #1
 800437a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800437e:	e051      	b.n	8004424 <HAL_I2C_Init+0x1dc>
 8004380:	2304      	movs	r3, #4
 8004382:	e04f      	b.n	8004424 <HAL_I2C_Init+0x1dc>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d111      	bne.n	80043b0 <HAL_I2C_Init+0x168>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	1e58      	subs	r0, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6859      	ldr	r1, [r3, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	440b      	add	r3, r1
 800439a:	fbb0 f3f3 	udiv	r3, r0, r3
 800439e:	3301      	adds	r3, #1
 80043a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	bf0c      	ite	eq
 80043a8:	2301      	moveq	r3, #1
 80043aa:	2300      	movne	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	e012      	b.n	80043d6 <HAL_I2C_Init+0x18e>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	1e58      	subs	r0, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6859      	ldr	r1, [r3, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	0099      	lsls	r1, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c6:	3301      	adds	r3, #1
 80043c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bf0c      	ite	eq
 80043d0:	2301      	moveq	r3, #1
 80043d2:	2300      	movne	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_I2C_Init+0x196>
 80043da:	2301      	movs	r3, #1
 80043dc:	e022      	b.n	8004424 <HAL_I2C_Init+0x1dc>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10e      	bne.n	8004404 <HAL_I2C_Init+0x1bc>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1e58      	subs	r0, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6859      	ldr	r1, [r3, #4]
 80043ee:	460b      	mov	r3, r1
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	440b      	add	r3, r1
 80043f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80043f8:	3301      	adds	r3, #1
 80043fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004402:	e00f      	b.n	8004424 <HAL_I2C_Init+0x1dc>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	1e58      	subs	r0, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6859      	ldr	r1, [r3, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	0099      	lsls	r1, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	fbb0 f3f3 	udiv	r3, r0, r3
 800441a:	3301      	adds	r3, #1
 800441c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004420:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	6809      	ldr	r1, [r1, #0]
 8004428:	4313      	orrs	r3, r2
 800442a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69da      	ldr	r2, [r3, #28]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004452:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6911      	ldr	r1, [r2, #16]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	68d2      	ldr	r2, [r2, #12]
 800445e:	4311      	orrs	r1, r2
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	430b      	orrs	r3, r1
 8004466:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	000186a0 	.word	0x000186a0
 80044c0:	001e847f 	.word	0x001e847f
 80044c4:	003d08ff 	.word	0x003d08ff
 80044c8:	431bde83 	.word	0x431bde83
 80044cc:	10624dd3 	.word	0x10624dd3

080044d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af02      	add	r7, sp, #8
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	4608      	mov	r0, r1
 80044da:	4611      	mov	r1, r2
 80044dc:	461a      	mov	r2, r3
 80044de:	4603      	mov	r3, r0
 80044e0:	817b      	strh	r3, [r7, #10]
 80044e2:	460b      	mov	r3, r1
 80044e4:	813b      	strh	r3, [r7, #8]
 80044e6:	4613      	mov	r3, r2
 80044e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044ea:	f7ff fba5 	bl	8003c38 <HAL_GetTick>
 80044ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b20      	cmp	r3, #32
 80044fa:	f040 80d9 	bne.w	80046b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	2319      	movs	r3, #25
 8004504:	2201      	movs	r2, #1
 8004506:	496d      	ldr	r1, [pc, #436]	; (80046bc <HAL_I2C_Mem_Write+0x1ec>)
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 fcc1 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004514:	2302      	movs	r3, #2
 8004516:	e0cc      	b.n	80046b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800451e:	2b01      	cmp	r3, #1
 8004520:	d101      	bne.n	8004526 <HAL_I2C_Mem_Write+0x56>
 8004522:	2302      	movs	r3, #2
 8004524:	e0c5      	b.n	80046b2 <HAL_I2C_Mem_Write+0x1e2>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b01      	cmp	r3, #1
 800453a:	d007      	beq.n	800454c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0201 	orr.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800455a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2221      	movs	r2, #33	; 0x21
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2240      	movs	r2, #64	; 0x40
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a3a      	ldr	r2, [r7, #32]
 8004576:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800457c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004582:	b29a      	uxth	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4a4d      	ldr	r2, [pc, #308]	; (80046c0 <HAL_I2C_Mem_Write+0x1f0>)
 800458c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800458e:	88f8      	ldrh	r0, [r7, #6]
 8004590:	893a      	ldrh	r2, [r7, #8]
 8004592:	8979      	ldrh	r1, [r7, #10]
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	9301      	str	r3, [sp, #4]
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	4603      	mov	r3, r0
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 faf8 	bl	8004b94 <I2C_RequestMemoryWrite>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d052      	beq.n	8004650 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e081      	b.n	80046b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 fd42 	bl	800503c <I2C_WaitOnTXEFlagUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00d      	beq.n	80045da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d107      	bne.n	80045d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e06b      	b.n	80046b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	781a      	ldrb	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b04      	cmp	r3, #4
 8004616:	d11b      	bne.n	8004650 <HAL_I2C_Mem_Write+0x180>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461c:	2b00      	cmp	r3, #0
 800461e:	d017      	beq.n	8004650 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	781a      	ldrb	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1aa      	bne.n	80045ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 fd2e 	bl	80050be <I2C_WaitOnBTFFlagUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00d      	beq.n	8004684 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	2b04      	cmp	r3, #4
 800466e:	d107      	bne.n	8004680 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e016      	b.n	80046b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046ac:	2300      	movs	r3, #0
 80046ae:	e000      	b.n	80046b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80046b0:	2302      	movs	r3, #2
  }
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	00100002 	.word	0x00100002
 80046c0:	ffff0000 	.word	0xffff0000

080046c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08c      	sub	sp, #48	; 0x30
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	4608      	mov	r0, r1
 80046ce:	4611      	mov	r1, r2
 80046d0:	461a      	mov	r2, r3
 80046d2:	4603      	mov	r3, r0
 80046d4:	817b      	strh	r3, [r7, #10]
 80046d6:	460b      	mov	r3, r1
 80046d8:	813b      	strh	r3, [r7, #8]
 80046da:	4613      	mov	r3, r2
 80046dc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046e2:	f7ff faa9 	bl	8003c38 <HAL_GetTick>
 80046e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	f040 8244 	bne.w	8004b7e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	2319      	movs	r3, #25
 80046fc:	2201      	movs	r2, #1
 80046fe:	4982      	ldr	r1, [pc, #520]	; (8004908 <HAL_I2C_Mem_Read+0x244>)
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 fbc5 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800470c:	2302      	movs	r3, #2
 800470e:	e237      	b.n	8004b80 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_I2C_Mem_Read+0x5a>
 800471a:	2302      	movs	r3, #2
 800471c:	e230      	b.n	8004b80 <HAL_I2C_Mem_Read+0x4bc>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b01      	cmp	r3, #1
 8004732:	d007      	beq.n	8004744 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004752:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2222      	movs	r2, #34	; 0x22
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2240      	movs	r2, #64	; 0x40
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800476e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004774:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4a62      	ldr	r2, [pc, #392]	; (800490c <HAL_I2C_Mem_Read+0x248>)
 8004784:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004786:	88f8      	ldrh	r0, [r7, #6]
 8004788:	893a      	ldrh	r2, [r7, #8]
 800478a:	8979      	ldrh	r1, [r7, #10]
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	4603      	mov	r3, r0
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 fa92 	bl	8004cc0 <I2C_RequestMemoryRead>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e1ec      	b.n	8004b80 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d113      	bne.n	80047d6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ae:	2300      	movs	r3, #0
 80047b0:	61fb      	str	r3, [r7, #28]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	61fb      	str	r3, [r7, #28]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	e1c0      	b.n	8004b58 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d11e      	bne.n	800481c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80047ee:	b672      	cpsid	i
}
 80047f0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f2:	2300      	movs	r3, #0
 80047f4:	61bb      	str	r3, [r7, #24]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004816:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004818:	b662      	cpsie	i
}
 800481a:	e035      	b.n	8004888 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004820:	2b02      	cmp	r3, #2
 8004822:	d11e      	bne.n	8004862 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004832:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004834:	b672      	cpsid	i
}
 8004836:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004838:	2300      	movs	r3, #0
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800485c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800485e:	b662      	cpsie	i
}
 8004860:	e012      	b.n	8004888 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004870:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004872:	2300      	movs	r3, #0
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	613b      	str	r3, [r7, #16]
 8004886:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004888:	e166      	b.n	8004b58 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488e:	2b03      	cmp	r3, #3
 8004890:	f200 811f 	bhi.w	8004ad2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004898:	2b01      	cmp	r3, #1
 800489a:	d123      	bne.n	80048e4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800489c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 fc4d 	bl	8005140 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e167      	b.n	8004b80 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048e2:	e139      	b.n	8004b58 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d152      	bne.n	8004992 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f2:	2200      	movs	r2, #0
 80048f4:	4906      	ldr	r1, [pc, #24]	; (8004910 <HAL_I2C_Mem_Read+0x24c>)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 faca 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d008      	beq.n	8004914 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e13c      	b.n	8004b80 <HAL_I2C_Mem_Read+0x4bc>
 8004906:	bf00      	nop
 8004908:	00100002 	.word	0x00100002
 800490c:	ffff0000 	.word	0xffff0000
 8004910:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004914:	b672      	cpsid	i
}
 8004916:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004926:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691a      	ldr	r2, [r3, #16]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	3b01      	subs	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800495a:	b662      	cpsie	i
}
 800495c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004986:	b29b      	uxth	r3, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004990:	e0e2      	b.n	8004b58 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004998:	2200      	movs	r2, #0
 800499a:	497b      	ldr	r1, [pc, #492]	; (8004b88 <HAL_I2C_Mem_Read+0x4c4>)
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 fa77 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0e9      	b.n	8004b80 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80049bc:	b672      	cpsid	i
}
 80049be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80049f2:	4b66      	ldr	r3, [pc, #408]	; (8004b8c <HAL_I2C_Mem_Read+0x4c8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	08db      	lsrs	r3, r3, #3
 80049f8:	4a65      	ldr	r2, [pc, #404]	; (8004b90 <HAL_I2C_Mem_Read+0x4cc>)
 80049fa:	fba2 2303 	umull	r2, r3, r2, r3
 80049fe:	0a1a      	lsrs	r2, r3, #8
 8004a00:	4613      	mov	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	00da      	lsls	r2, r3, #3
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d118      	bne.n	8004a4a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	f043 0220 	orr.w	r2, r3, #32
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004a3a:	b662      	cpsie	i
}
 8004a3c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e09a      	b.n	8004b80 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d1d9      	bne.n	8004a0c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691a      	ldr	r2, [r3, #16]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	1c5a      	adds	r2, r3, #1
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004a9a:	b662      	cpsie	i
}
 8004a9c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aba:	3b01      	subs	r3, #1
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ad0:	e042      	b.n	8004b58 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 fb32 	bl	8005140 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e04c      	b.n	8004b80 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f003 0304 	and.w	r3, r3, #4
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d118      	bne.n	8004b58 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f47f ae94 	bne.w	800488a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e000      	b.n	8004b80 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004b7e:	2302      	movs	r3, #2
  }
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3728      	adds	r7, #40	; 0x28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	00010004 	.word	0x00010004
 8004b8c:	20000014 	.word	0x20000014
 8004b90:	14f8b589 	.word	0x14f8b589

08004b94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af02      	add	r7, sp, #8
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	4608      	mov	r0, r1
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	817b      	strh	r3, [r7, #10]
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	813b      	strh	r3, [r7, #8]
 8004baa:	4613      	mov	r3, r2
 8004bac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 f960 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00d      	beq.n	8004bf2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be4:	d103      	bne.n	8004bee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e05f      	b.n	8004cb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bf2:	897b      	ldrh	r3, [r7, #10]
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	6a3a      	ldr	r2, [r7, #32]
 8004c06:	492d      	ldr	r1, [pc, #180]	; (8004cbc <I2C_RequestMemoryWrite+0x128>)
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f998 	bl	8004f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e04c      	b.n	8004cb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c18:	2300      	movs	r3, #0
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c30:	6a39      	ldr	r1, [r7, #32]
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 fa02 	bl	800503c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00d      	beq.n	8004c5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d107      	bne.n	8004c56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e02b      	b.n	8004cb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c5a:	88fb      	ldrh	r3, [r7, #6]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d105      	bne.n	8004c6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c60:	893b      	ldrh	r3, [r7, #8]
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	611a      	str	r2, [r3, #16]
 8004c6a:	e021      	b.n	8004cb0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c6c:	893b      	ldrh	r3, [r7, #8]
 8004c6e:	0a1b      	lsrs	r3, r3, #8
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7c:	6a39      	ldr	r1, [r7, #32]
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 f9dc 	bl	800503c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00d      	beq.n	8004ca6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d107      	bne.n	8004ca2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e005      	b.n	8004cb2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ca6:	893b      	ldrh	r3, [r7, #8]
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	00010002 	.word	0x00010002

08004cc0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af02      	add	r7, sp, #8
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	4608      	mov	r0, r1
 8004cca:	4611      	mov	r1, r2
 8004ccc:	461a      	mov	r2, r3
 8004cce:	4603      	mov	r3, r0
 8004cd0:	817b      	strh	r3, [r7, #10]
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	813b      	strh	r3, [r7, #8]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ce8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cf8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 f8c2 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00d      	beq.n	8004d2e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d20:	d103      	bne.n	8004d2a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e0aa      	b.n	8004e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d2e:	897b      	ldrh	r3, [r7, #10]
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	461a      	mov	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	6a3a      	ldr	r2, [r7, #32]
 8004d42:	4952      	ldr	r1, [pc, #328]	; (8004e8c <I2C_RequestMemoryRead+0x1cc>)
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f8fa 	bl	8004f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e097      	b.n	8004e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d54:	2300      	movs	r3, #0
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d6c:	6a39      	ldr	r1, [r7, #32]
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 f964 	bl	800503c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00d      	beq.n	8004d96 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d107      	bne.n	8004d92 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e076      	b.n	8004e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d105      	bne.n	8004da8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d9c:	893b      	ldrh	r3, [r7, #8]
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	611a      	str	r2, [r3, #16]
 8004da6:	e021      	b.n	8004dec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004da8:	893b      	ldrh	r3, [r7, #8]
 8004daa:	0a1b      	lsrs	r3, r3, #8
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db8:	6a39      	ldr	r1, [r7, #32]
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 f93e 	bl	800503c <I2C_WaitOnTXEFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00d      	beq.n	8004de2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d107      	bne.n	8004dde <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ddc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e050      	b.n	8004e84 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004de2:	893b      	ldrh	r3, [r7, #8]
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dee:	6a39      	ldr	r1, [r7, #32]
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 f923 	bl	800503c <I2C_WaitOnTXEFlagUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00d      	beq.n	8004e18 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d107      	bne.n	8004e14 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e035      	b.n	8004e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 f82b 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00d      	beq.n	8004e5c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4e:	d103      	bne.n	8004e58 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e013      	b.n	8004e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e5c:	897b      	ldrh	r3, [r7, #10]
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	f043 0301 	orr.w	r3, r3, #1
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	6a3a      	ldr	r2, [r7, #32]
 8004e70:	4906      	ldr	r1, [pc, #24]	; (8004e8c <I2C_RequestMemoryRead+0x1cc>)
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 f863 	bl	8004f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	00010002 	.word	0x00010002

08004e90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	603b      	str	r3, [r7, #0]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ea0:	e025      	b.n	8004eee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea8:	d021      	beq.n	8004eee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eaa:	f7fe fec5 	bl	8003c38 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d302      	bcc.n	8004ec0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d116      	bne.n	8004eee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	f043 0220 	orr.w	r2, r3, #32
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e023      	b.n	8004f36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	0c1b      	lsrs	r3, r3, #16
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d10d      	bne.n	8004f14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	43da      	mvns	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4013      	ands	r3, r2
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	bf0c      	ite	eq
 8004f0a:	2301      	moveq	r3, #1
 8004f0c:	2300      	movne	r3, #0
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	e00c      	b.n	8004f2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	43da      	mvns	r2, r3
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	bf0c      	ite	eq
 8004f26:	2301      	moveq	r3, #1
 8004f28:	2300      	movne	r3, #0
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	79fb      	ldrb	r3, [r7, #7]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d0b6      	beq.n	8004ea2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	607a      	str	r2, [r7, #4]
 8004f4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f4c:	e051      	b.n	8004ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f5c:	d123      	bne.n	8004fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	f043 0204 	orr.w	r2, r3, #4
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e046      	b.n	8005034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fac:	d021      	beq.n	8004ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fae:	f7fe fe43 	bl	8003c38 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d302      	bcc.n	8004fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d116      	bne.n	8004ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	f043 0220 	orr.w	r2, r3, #32
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e020      	b.n	8005034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	0c1b      	lsrs	r3, r3, #16
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d10c      	bne.n	8005016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	43da      	mvns	r2, r3
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	4013      	ands	r3, r2
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	bf14      	ite	ne
 800500e:	2301      	movne	r3, #1
 8005010:	2300      	moveq	r3, #0
 8005012:	b2db      	uxtb	r3, r3
 8005014:	e00b      	b.n	800502e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	43da      	mvns	r2, r3
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	4013      	ands	r3, r2
 8005022:	b29b      	uxth	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	bf14      	ite	ne
 8005028:	2301      	movne	r3, #1
 800502a:	2300      	moveq	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d18d      	bne.n	8004f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005048:	e02d      	b.n	80050a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 f8ce 	bl	80051ec <I2C_IsAcknowledgeFailed>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e02d      	b.n	80050b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005060:	d021      	beq.n	80050a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005062:	f7fe fde9 	bl	8003c38 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	429a      	cmp	r2, r3
 8005070:	d302      	bcc.n	8005078 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d116      	bne.n	80050a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2220      	movs	r2, #32
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	f043 0220 	orr.w	r2, r3, #32
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e007      	b.n	80050b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b0:	2b80      	cmp	r3, #128	; 0x80
 80050b2:	d1ca      	bne.n	800504a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050ca:	e02d      	b.n	8005128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f88d 	bl	80051ec <I2C_IsAcknowledgeFailed>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e02d      	b.n	8005138 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e2:	d021      	beq.n	8005128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e4:	f7fe fda8 	bl	8003c38 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d302      	bcc.n	80050fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d116      	bne.n	8005128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	f043 0220 	orr.w	r2, r3, #32
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e007      	b.n	8005138 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b04      	cmp	r3, #4
 8005134:	d1ca      	bne.n	80050cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800514c:	e042      	b.n	80051d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	f003 0310 	and.w	r3, r3, #16
 8005158:	2b10      	cmp	r3, #16
 800515a:	d119      	bne.n	8005190 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0210 	mvn.w	r2, #16
 8005164:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e029      	b.n	80051e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005190:	f7fe fd52 	bl	8003c38 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	429a      	cmp	r2, r3
 800519e:	d302      	bcc.n	80051a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d116      	bne.n	80051d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	f043 0220 	orr.w	r2, r3, #32
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e007      	b.n	80051e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051de:	2b40      	cmp	r3, #64	; 0x40
 80051e0:	d1b5      	bne.n	800514e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005202:	d11b      	bne.n	800523c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800520c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005228:	f043 0204 	orr.w	r2, r3, #4
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	bc80      	pop	{r7}
 8005246:	4770      	bx	lr

08005248 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800524a:	b08b      	sub	sp, #44	; 0x2c
 800524c:	af06      	add	r7, sp, #24
 800524e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e0fd      	b.n	8005456 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f007 f82a 	bl	800c2c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2203      	movs	r2, #3
 8005278:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f003 f847 	bl	8008314 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	603b      	str	r3, [r7, #0]
 800528c:	687e      	ldr	r6, [r7, #4]
 800528e:	466d      	mov	r5, sp
 8005290:	f106 0410 	add.w	r4, r6, #16
 8005294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005298:	6823      	ldr	r3, [r4, #0]
 800529a:	602b      	str	r3, [r5, #0]
 800529c:	1d33      	adds	r3, r6, #4
 800529e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052a0:	6838      	ldr	r0, [r7, #0]
 80052a2:	f003 f811 	bl	80082c8 <USB_CoreInit>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d005      	beq.n	80052b8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0ce      	b.n	8005456 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2100      	movs	r1, #0
 80052be:	4618      	mov	r0, r3
 80052c0:	f003 f842 	bl	8008348 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052c4:	2300      	movs	r3, #0
 80052c6:	73fb      	strb	r3, [r7, #15]
 80052c8:	e04c      	b.n	8005364 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	4613      	mov	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	440b      	add	r3, r1
 80052da:	3301      	adds	r3, #1
 80052dc:	2201      	movs	r2, #1
 80052de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	440b      	add	r3, r1
 80052f0:	7bfa      	ldrb	r2, [r7, #15]
 80052f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052f4:	7bfa      	ldrb	r2, [r7, #15]
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	b298      	uxth	r0, r3
 80052fa:	6879      	ldr	r1, [r7, #4]
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	440b      	add	r3, r1
 8005306:	3336      	adds	r3, #54	; 0x36
 8005308:	4602      	mov	r2, r0
 800530a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	4613      	mov	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	440b      	add	r3, r1
 800531c:	3303      	adds	r3, #3
 800531e:	2200      	movs	r2, #0
 8005320:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005322:	7bfa      	ldrb	r2, [r7, #15]
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	440b      	add	r3, r1
 8005330:	3338      	adds	r3, #56	; 0x38
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005336:	7bfa      	ldrb	r2, [r7, #15]
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	440b      	add	r3, r1
 8005344:	333c      	adds	r3, #60	; 0x3c
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800534a:	7bfa      	ldrb	r2, [r7, #15]
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	440b      	add	r3, r1
 8005358:	3340      	adds	r3, #64	; 0x40
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	3301      	adds	r3, #1
 8005362:	73fb      	strb	r3, [r7, #15]
 8005364:	7bfa      	ldrb	r2, [r7, #15]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	429a      	cmp	r2, r3
 800536c:	d3ad      	bcc.n	80052ca <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800536e:	2300      	movs	r3, #0
 8005370:	73fb      	strb	r3, [r7, #15]
 8005372:	e044      	b.n	80053fe <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005374:	7bfa      	ldrb	r2, [r7, #15]
 8005376:	6879      	ldr	r1, [r7, #4]
 8005378:	4613      	mov	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	440b      	add	r3, r1
 8005382:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005386:	2200      	movs	r2, #0
 8005388:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800538a:	7bfa      	ldrb	r2, [r7, #15]
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	4613      	mov	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	440b      	add	r3, r1
 8005398:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800539c:	7bfa      	ldrb	r2, [r7, #15]
 800539e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053a0:	7bfa      	ldrb	r2, [r7, #15]
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	440b      	add	r3, r1
 80053ae:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80053b2:	2200      	movs	r2, #0
 80053b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80053b6:	7bfa      	ldrb	r2, [r7, #15]
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	4613      	mov	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	440b      	add	r3, r1
 80053c4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053cc:	7bfa      	ldrb	r2, [r7, #15]
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	4613      	mov	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	440b      	add	r3, r1
 80053da:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053e2:	7bfa      	ldrb	r2, [r7, #15]
 80053e4:	6879      	ldr	r1, [r7, #4]
 80053e6:	4613      	mov	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	440b      	add	r3, r1
 80053f0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
 80053fa:	3301      	adds	r3, #1
 80053fc:	73fb      	strb	r3, [r7, #15]
 80053fe:	7bfa      	ldrb	r2, [r7, #15]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	429a      	cmp	r2, r3
 8005406:	d3b5      	bcc.n	8005374 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	603b      	str	r3, [r7, #0]
 800540e:	687e      	ldr	r6, [r7, #4]
 8005410:	466d      	mov	r5, sp
 8005412:	f106 0410 	add.w	r4, r6, #16
 8005416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005418:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	602b      	str	r3, [r5, #0]
 800541e:	1d33      	adds	r3, r6, #4
 8005420:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005422:	6838      	ldr	r0, [r7, #0]
 8005424:	f002 ff9c 	bl	8008360 <USB_DevInit>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d005      	beq.n	800543a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2202      	movs	r2, #2
 8005432:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e00d      	b.n	8005456 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4618      	mov	r0, r3
 8005450:	f005 f90d 	bl	800a66e <USB_DevDisconnect>

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800545e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800546c:	2b01      	cmp	r3, #1
 800546e:	d101      	bne.n	8005474 <HAL_PCD_Start+0x16>
 8005470:	2302      	movs	r3, #2
 8005472:	e016      	b.n	80054a2 <HAL_PCD_Start+0x44>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	f002 ff31 	bl	80082e8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005486:	2101      	movs	r1, #1
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f007 f990 	bl	800c7ae <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4618      	mov	r0, r3
 8005494:	f005 f8e1 	bl	800a65a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b088      	sub	sp, #32
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f005 f8e3 	bl	800a682 <USB_ReadInterrupts>
 80054bc:	4603      	mov	r3, r0
 80054be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c6:	d102      	bne.n	80054ce <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fb61 	bl	8005b90 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f005 f8d5 	bl	800a682 <USB_ReadInterrupts>
 80054d8:	4603      	mov	r3, r0
 80054da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e2:	d112      	bne.n	800550a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f6:	b292      	uxth	r2, r2
 80054f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f006 ff5e 	bl	800c3be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005502:	2100      	movs	r1, #0
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f925 	bl	8005754 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f005 f8b7 	bl	800a682 <USB_ReadInterrupts>
 8005514:	4603      	mov	r3, r0
 8005516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800551a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800551e:	d10b      	bne.n	8005538 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005528:	b29a      	uxth	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005532:	b292      	uxth	r2, r2
 8005534:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4618      	mov	r0, r3
 800553e:	f005 f8a0 	bl	800a682 <USB_ReadInterrupts>
 8005542:	4603      	mov	r3, r0
 8005544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800554c:	d10b      	bne.n	8005566 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005556:	b29a      	uxth	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005560:	b292      	uxth	r2, r2
 8005562:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f005 f889 	bl	800a682 <USB_ReadInterrupts>
 8005570:	4603      	mov	r3, r0
 8005572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800557a:	d126      	bne.n	80055ca <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005584:	b29a      	uxth	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0204 	bic.w	r2, r2, #4
 800558e:	b292      	uxth	r2, r2
 8005590:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800559c:	b29a      	uxth	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0208 	bic.w	r2, r2, #8
 80055a6:	b292      	uxth	r2, r2
 80055a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f006 ff3f 	bl	800c430 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055c4:	b292      	uxth	r2, r2
 80055c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f005 f857 	bl	800a682 <USB_ReadInterrupts>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055de:	f040 8084 	bne.w	80056ea <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80055e2:	2300      	movs	r3, #0
 80055e4:	77fb      	strb	r3, [r7, #31]
 80055e6:	e011      	b.n	800560c <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	7ffb      	ldrb	r3, [r7, #31]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	441a      	add	r2, r3
 80055f4:	7ffb      	ldrb	r3, [r7, #31]
 80055f6:	8812      	ldrh	r2, [r2, #0]
 80055f8:	b292      	uxth	r2, r2
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	f107 0120 	add.w	r1, r7, #32
 8005600:	440b      	add	r3, r1
 8005602:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8005606:	7ffb      	ldrb	r3, [r7, #31]
 8005608:	3301      	adds	r3, #1
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	7ffb      	ldrb	r3, [r7, #31]
 800560e:	2b07      	cmp	r3, #7
 8005610:	d9ea      	bls.n	80055e8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800561a:	b29a      	uxth	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0201 	orr.w	r2, r2, #1
 8005624:	b292      	uxth	r2, r2
 8005626:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005632:	b29a      	uxth	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0201 	bic.w	r2, r2, #1
 800563c:	b292      	uxth	r2, r2
 800563e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005642:	bf00      	nop
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800564c:	b29b      	uxth	r3, r3
 800564e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0f6      	beq.n	8005644 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800565e:	b29a      	uxth	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005668:	b292      	uxth	r2, r2
 800566a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800566e:	2300      	movs	r3, #0
 8005670:	77fb      	strb	r3, [r7, #31]
 8005672:	e010      	b.n	8005696 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005674:	7ffb      	ldrb	r3, [r7, #31]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6812      	ldr	r2, [r2, #0]
 800567a:	4611      	mov	r1, r2
 800567c:	7ffa      	ldrb	r2, [r7, #31]
 800567e:	0092      	lsls	r2, r2, #2
 8005680:	440a      	add	r2, r1
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	f107 0120 	add.w	r1, r7, #32
 8005688:	440b      	add	r3, r1
 800568a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800568e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005690:	7ffb      	ldrb	r3, [r7, #31]
 8005692:	3301      	adds	r3, #1
 8005694:	77fb      	strb	r3, [r7, #31]
 8005696:	7ffb      	ldrb	r3, [r7, #31]
 8005698:	2b07      	cmp	r3, #7
 800569a:	d9eb      	bls.n	8005674 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0208 	orr.w	r2, r2, #8
 80056ae:	b292      	uxth	r2, r2
 80056b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80056bc:	b29a      	uxth	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056c6:	b292      	uxth	r2, r2
 80056c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0204 	orr.w	r2, r2, #4
 80056de:	b292      	uxth	r2, r2
 80056e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f006 fe89 	bl	800c3fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f004 ffc7 	bl	800a682 <USB_ReadInterrupts>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056fe:	d10e      	bne.n	800571e <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005708:	b29a      	uxth	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005712:	b292      	uxth	r2, r2
 8005714:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f006 fe42 	bl	800c3a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f004 ffad 	bl	800a682 <USB_ReadInterrupts>
 8005728:	4603      	mov	r3, r0
 800572a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005732:	d10b      	bne.n	800574c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800573c:	b29a      	uxth	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005746:	b292      	uxth	r2, r2
 8005748:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800574c:	bf00      	nop
 800574e:	3720      	adds	r7, #32
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005766:	2b01      	cmp	r3, #1
 8005768:	d101      	bne.n	800576e <HAL_PCD_SetAddress+0x1a>
 800576a:	2302      	movs	r3, #2
 800576c:	e013      	b.n	8005796 <HAL_PCD_SetAddress+0x42>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	78fa      	ldrb	r2, [r7, #3]
 800577a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	78fa      	ldrb	r2, [r7, #3]
 8005784:	4611      	mov	r1, r2
 8005786:	4618      	mov	r0, r3
 8005788:	f004 ff54 	bl	800a634 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	4608      	mov	r0, r1
 80057a8:	4611      	mov	r1, r2
 80057aa:	461a      	mov	r2, r3
 80057ac:	4603      	mov	r3, r0
 80057ae:	70fb      	strb	r3, [r7, #3]
 80057b0:	460b      	mov	r3, r1
 80057b2:	803b      	strh	r3, [r7, #0]
 80057b4:	4613      	mov	r3, r2
 80057b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80057bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	da0e      	bge.n	80057e2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057c4:	78fb      	ldrb	r3, [r7, #3]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	4413      	add	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	705a      	strb	r2, [r3, #1]
 80057e0:	e00e      	b.n	8005800 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	f003 0207 	and.w	r2, r3, #7
 80057e8:	4613      	mov	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	4413      	add	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	b2da      	uxtb	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800580c:	883a      	ldrh	r2, [r7, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	78ba      	ldrb	r2, [r7, #2]
 8005816:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d004      	beq.n	800582a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800582a:	78bb      	ldrb	r3, [r7, #2]
 800582c:	2b02      	cmp	r3, #2
 800582e:	d102      	bne.n	8005836 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_PCD_EP_Open+0xa6>
 8005840:	2302      	movs	r3, #2
 8005842:	e00e      	b.n	8005862 <HAL_PCD_EP_Open+0xc4>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68f9      	ldr	r1, [r7, #12]
 8005852:	4618      	mov	r0, r3
 8005854:	f002 fda4 	bl	80083a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005860:	7afb      	ldrb	r3, [r7, #11]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b084      	sub	sp, #16
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	460b      	mov	r3, r1
 8005874:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005876:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800587a:	2b00      	cmp	r3, #0
 800587c:	da0e      	bge.n	800589c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800587e:	78fb      	ldrb	r3, [r7, #3]
 8005880:	f003 0307 	and.w	r3, r3, #7
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	4613      	mov	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	4413      	add	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2201      	movs	r2, #1
 8005898:	705a      	strb	r2, [r3, #1]
 800589a:	e00e      	b.n	80058ba <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800589c:	78fb      	ldrb	r3, [r7, #3]
 800589e:	f003 0207 	and.w	r2, r3, #7
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	4413      	add	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80058ba:	78fb      	ldrb	r3, [r7, #3]
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_PCD_EP_Close+0x6a>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e00e      	b.n	80058f2 <HAL_PCD_EP_Close+0x88>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68f9      	ldr	r1, [r7, #12]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f003 f8c6 	bl	8008a74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b086      	sub	sp, #24
 80058fe:	af00      	add	r7, sp, #0
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	603b      	str	r3, [r7, #0]
 8005906:	460b      	mov	r3, r1
 8005908:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800590a:	7afb      	ldrb	r3, [r7, #11]
 800590c:	f003 0207 	and.w	r2, r3, #7
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2200      	movs	r2, #0
 8005932:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	2200      	movs	r2, #0
 8005938:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800593a:	7afb      	ldrb	r3, [r7, #11]
 800593c:	f003 0307 	and.w	r3, r3, #7
 8005940:	b2da      	uxtb	r2, r3
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005946:	7afb      	ldrb	r3, [r7, #11]
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	2b00      	cmp	r3, #0
 800594e:	d106      	bne.n	800595e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6979      	ldr	r1, [r7, #20]
 8005956:	4618      	mov	r0, r3
 8005958:	f003 fa78 	bl	8008e4c <USB_EPStartXfer>
 800595c:	e005      	b.n	800596a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6979      	ldr	r1, [r7, #20]
 8005964:	4618      	mov	r0, r3
 8005966:	f003 fa71 	bl	8008e4c <USB_EPStartXfer>
  }

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	f003 0207 	and.w	r2, r3, #7
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	440b      	add	r3, r1
 8005992:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005996:	681b      	ldr	r3, [r3, #0]
}
 8005998:	4618      	mov	r0, r3
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	bc80      	pop	{r7}
 80059a0:	4770      	bx	lr

080059a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b086      	sub	sp, #24
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	60f8      	str	r0, [r7, #12]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
 80059ae:	460b      	mov	r3, r1
 80059b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059b2:	7afb      	ldrb	r3, [r7, #11]
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4413      	add	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2200      	movs	r2, #0
 80059e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2201      	movs	r2, #1
 80059ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059ee:	7afb      	ldrb	r3, [r7, #11]
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059fa:	7afb      	ldrb	r3, [r7, #11]
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d106      	bne.n	8005a12 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6979      	ldr	r1, [r7, #20]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f003 fa1e 	bl	8008e4c <USB_EPStartXfer>
 8005a10:	e005      	b.n	8005a1e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6979      	ldr	r1, [r7, #20]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f003 fa17 	bl	8008e4c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	f003 0207 	and.w	r2, r3, #7
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d901      	bls.n	8005a46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e04c      	b.n	8005ae0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	da0e      	bge.n	8005a6c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a4e:	78fb      	ldrb	r3, [r7, #3]
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	4413      	add	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	705a      	strb	r2, [r3, #1]
 8005a6a:	e00c      	b.n	8005a86 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a6c:	78fa      	ldrb	r2, [r7, #3]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	f003 0307 	and.w	r3, r3, #7
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d101      	bne.n	8005aa6 <HAL_PCD_EP_SetStall+0x7e>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e01c      	b.n	8005ae0 <HAL_PCD_EP_SetStall+0xb8>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68f9      	ldr	r1, [r7, #12]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f004 fcc0 	bl	800a43a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005aba:	78fb      	ldrb	r3, [r7, #3]
 8005abc:	f003 0307 	and.w	r3, r3, #7
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d108      	bne.n	8005ad6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005ace:	4619      	mov	r1, r3
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	f004 fde5 	bl	800a6a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	460b      	mov	r3, r1
 8005af2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005af4:	78fb      	ldrb	r3, [r7, #3]
 8005af6:	f003 020f 	and.w	r2, r3, #15
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d901      	bls.n	8005b06 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e040      	b.n	8005b88 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	da0e      	bge.n	8005b2c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b0e:	78fb      	ldrb	r3, [r7, #3]
 8005b10:	f003 0307 	and.w	r3, r3, #7
 8005b14:	1c5a      	adds	r2, r3, #1
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	4413      	add	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2201      	movs	r2, #1
 8005b28:	705a      	strb	r2, [r3, #1]
 8005b2a:	e00e      	b.n	8005b4a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	f003 0207 	and.w	r2, r3, #7
 8005b32:	4613      	mov	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	4413      	add	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b50:	78fb      	ldrb	r3, [r7, #3]
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <HAL_PCD_EP_ClrStall+0x82>
 8005b66:	2302      	movs	r3, #2
 8005b68:	e00e      	b.n	8005b88 <HAL_PCD_EP_ClrStall+0xa0>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f004 fcae 	bl	800a4da <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08e      	sub	sp, #56	; 0x38
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005b98:	e2ec      	b.n	8006174 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ba2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005ba4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	f003 030f 	and.w	r3, r3, #15
 8005bac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005bb0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f040 8161 	bne.w	8005e7c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005bba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d152      	bne.n	8005c6a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd4:	81fb      	strh	r3, [r7, #14]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	89fb      	ldrh	r3, [r7, #14]
 8005bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3328      	adds	r3, #40	; 0x28
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	4413      	add	r3, r2
 8005c02:	3302      	adds	r3, #2
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	695a      	ldr	r2, [r3, #20]
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	441a      	add	r2, r3
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005c28:	2100      	movs	r1, #0
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f006 fb9f 	bl	800c36e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 829b 	beq.w	8006174 <PCD_EP_ISR_Handler+0x5e4>
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f040 8296 	bne.w	8006174 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	b292      	uxth	r2, r2
 8005c5c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005c68:	e284      	b.n	8006174 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005c7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d034      	beq.n	8005cee <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	461a      	mov	r2, r3
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	4413      	add	r3, r2
 8005c98:	3306      	adds	r3, #6
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6812      	ldr	r2, [r2, #0]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6818      	ldr	r0, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f004 fd3c 	bl	800a740 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	823b      	strh	r3, [r7, #16]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	8a3a      	ldrh	r2, [r7, #16]
 8005cde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ce2:	b292      	uxth	r2, r2
 8005ce4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f006 fb14 	bl	800c314 <HAL_PCD_SetupStageCallback>
 8005cec:	e242      	b.n	8006174 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005cee:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f280 823e 	bge.w	8006174 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005d04:	4013      	ands	r3, r2
 8005d06:	83bb      	strh	r3, [r7, #28]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	8bba      	ldrh	r2, [r7, #28]
 8005d0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d12:	b292      	uxth	r2, r2
 8005d14:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	461a      	mov	r2, r3
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	4413      	add	r3, r2
 8005d2a:	3306      	adds	r3, #6
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6812      	ldr	r2, [r2, #0]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d019      	beq.n	8005d7e <PCD_EP_ISR_Handler+0x1ee>
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d015      	beq.n	8005d7e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6818      	ldr	r0, [r3, #0]
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	6959      	ldr	r1, [r3, #20]
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	f004 fcec 	bl	800a740 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	695a      	ldr	r2, [r3, #20]
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	441a      	add	r2, r3
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005d76:	2100      	movs	r1, #0
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f006 fadd 	bl	800c338 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f040 81f2 	bne.w	8006174 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	61bb      	str	r3, [r7, #24]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	4413      	add	r3, r2
 8005da6:	61bb      	str	r3, [r7, #24]
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dae:	617b      	str	r3, [r7, #20]
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d112      	bne.n	8005dde <PCD_EP_ISR_Handler+0x24e>
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	801a      	strh	r2, [r3, #0]
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	801a      	strh	r2, [r3, #0]
 8005ddc:	e02f      	b.n	8005e3e <PCD_EP_ISR_Handler+0x2ae>
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b3e      	cmp	r3, #62	; 0x3e
 8005de4:	d813      	bhi.n	8005e0e <PCD_EP_ISR_Handler+0x27e>
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	085b      	lsrs	r3, r3, #1
 8005dec:	633b      	str	r3, [r7, #48]	; 0x30
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <PCD_EP_ISR_Handler+0x270>
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	633b      	str	r3, [r7, #48]	; 0x30
 8005e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	029b      	lsls	r3, r3, #10
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	801a      	strh	r2, [r3, #0]
 8005e0c:	e017      	b.n	8005e3e <PCD_EP_ISR_Handler+0x2ae>
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	095b      	lsrs	r3, r3, #5
 8005e14:	633b      	str	r3, [r7, #48]	; 0x30
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f003 031f 	and.w	r3, r3, #31
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d102      	bne.n	8005e28 <PCD_EP_ISR_Handler+0x298>
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	3b01      	subs	r3, #1
 8005e26:	633b      	str	r3, [r7, #48]	; 0x30
 8005e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	029b      	lsls	r3, r3, #10
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4e:	827b      	strh	r3, [r7, #18]
 8005e50:	8a7b      	ldrh	r3, [r7, #18]
 8005e52:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e56:	827b      	strh	r3, [r7, #18]
 8005e58:	8a7b      	ldrh	r3, [r7, #18]
 8005e5a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e5e:	827b      	strh	r3, [r7, #18]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	8a7b      	ldrh	r3, [r7, #18]
 8005e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	8013      	strh	r3, [r2, #0]
 8005e7a:	e17b      	b.n	8006174 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	461a      	mov	r2, r3
 8005e82:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005e8e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f280 80ea 	bge.w	800606c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005eae:	4013      	ands	r3, r2
 8005eb0:	853b      	strh	r3, [r7, #40]	; 0x28
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005ec2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ec6:	b292      	uxth	r2, r2
 8005ec8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005eca:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005ece:	4613      	mov	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	4413      	add	r3, r2
 8005ede:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	7b1b      	ldrb	r3, [r3, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d122      	bne.n	8005f2e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	4413      	add	r3, r2
 8005efc:	3306      	adds	r3, #6
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6812      	ldr	r2, [r2, #0]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f10:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005f12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 8087 	beq.w	8006028 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6818      	ldr	r0, [r3, #0]
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	6959      	ldr	r1, [r3, #20]
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	88da      	ldrh	r2, [r3, #6]
 8005f26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f28:	f004 fc0a 	bl	800a740 <USB_ReadPMA>
 8005f2c:	e07c      	b.n	8006028 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	78db      	ldrb	r3, [r3, #3]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d108      	bne.n	8005f48 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005f36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f927 	bl	8006190 <HAL_PCD_EP_DB_Receive>
 8005f42:	4603      	mov	r3, r0
 8005f44:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005f46:	e06f      	b.n	8006028 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f62:	847b      	strh	r3, [r7, #34]	; 0x22
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	441a      	add	r2, r3
 8005f72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	881b      	ldrh	r3, [r3, #0]
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d021      	beq.n	8005fe6 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	461a      	mov	r2, r3
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3302      	adds	r3, #2
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	6812      	ldr	r2, [r2, #0]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fca:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005fcc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d02a      	beq.n	8006028 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6818      	ldr	r0, [r3, #0]
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	6959      	ldr	r1, [r3, #20]
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	891a      	ldrh	r2, [r3, #8]
 8005fde:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fe0:	f004 fbae 	bl	800a740 <USB_ReadPMA>
 8005fe4:	e020      	b.n	8006028 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	4413      	add	r3, r2
 8005ffa:	3306      	adds	r3, #6
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6812      	ldr	r2, [r2, #0]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800600e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006010:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006012:	2b00      	cmp	r3, #0
 8006014:	d008      	beq.n	8006028 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	6959      	ldr	r1, [r3, #20]
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	895a      	ldrh	r2, [r3, #10]
 8006022:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006024:	f004 fb8c 	bl	800a740 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	69da      	ldr	r2, [r3, #28]
 800602c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800602e:	441a      	add	r2, r3
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	695a      	ldr	r2, [r3, #20]
 8006038:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800603a:	441a      	add	r2, r3
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d004      	beq.n	8006052 <PCD_EP_ISR_Handler+0x4c2>
 8006048:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	429a      	cmp	r2, r3
 8006050:	d206      	bcs.n	8006060 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f006 f96d 	bl	800c338 <HAL_PCD_DataOutStageCallback>
 800605e:	e005      	b.n	800606c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006066:	4618      	mov	r0, r3
 8006068:	f002 fef0 	bl	8008e4c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800606c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800606e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006072:	2b00      	cmp	r3, #0
 8006074:	d07e      	beq.n	8006174 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8006076:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	4613      	mov	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	4413      	add	r3, r2
 8006088:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	b29b      	uxth	r3, r3
 800609c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80060a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a4:	843b      	strh	r3, [r7, #32]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	461a      	mov	r2, r3
 80060ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	441a      	add	r2, r3
 80060b4:	8c3b      	ldrh	r3, [r7, #32]
 80060b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060be:	b29b      	uxth	r3, r3
 80060c0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	78db      	ldrb	r3, [r3, #3]
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	d00c      	beq.n	80060e4 <PCD_EP_ISR_Handler+0x554>
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	78db      	ldrb	r3, [r3, #3]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d008      	beq.n	80060e4 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d146      	bne.n	8006168 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80060da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80060dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d141      	bne.n	8006168 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	461a      	mov	r2, r3
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	4413      	add	r3, r2
 80060f8:	3302      	adds	r3, #2
 80060fa:	005b      	lsls	r3, r3, #1
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6812      	ldr	r2, [r2, #0]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800610c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	8bfb      	ldrh	r3, [r7, #30]
 8006114:	429a      	cmp	r2, r3
 8006116:	d906      	bls.n	8006126 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	699a      	ldr	r2, [r3, #24]
 800611c:	8bfb      	ldrh	r3, [r7, #30]
 800611e:	1ad2      	subs	r2, r2, r3
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	619a      	str	r2, [r3, #24]
 8006124:	e002      	b.n	800612c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	2200      	movs	r2, #0
 800612a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d106      	bne.n	8006142 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	4619      	mov	r1, r3
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f006 f917 	bl	800c36e <HAL_PCD_DataInStageCallback>
 8006140:	e018      	b.n	8006174 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	695a      	ldr	r2, [r3, #20]
 8006146:	8bfb      	ldrh	r3, [r7, #30]
 8006148:	441a      	add	r2, r3
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	69da      	ldr	r2, [r3, #28]
 8006152:	8bfb      	ldrh	r3, [r7, #30]
 8006154:	441a      	add	r2, r3
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006160:	4618      	mov	r0, r3
 8006162:	f002 fe73 	bl	8008e4c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8006166:	e005      	b.n	8006174 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006168:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800616a:	461a      	mov	r2, r3
 800616c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f91b 	bl	80063aa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800617c:	b29b      	uxth	r3, r3
 800617e:	b21b      	sxth	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	f6ff ad0a 	blt.w	8005b9a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3738      	adds	r7, #56	; 0x38
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	4613      	mov	r3, r2
 800619c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800619e:	88fb      	ldrh	r3, [r7, #6]
 80061a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d07e      	beq.n	80062a6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	461a      	mov	r2, r3
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	4413      	add	r3, r2
 80061bc:	3302      	adds	r3, #2
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	6812      	ldr	r2, [r2, #0]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061d0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	8b7b      	ldrh	r3, [r7, #26]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d306      	bcc.n	80061ea <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	699a      	ldr	r2, [r3, #24]
 80061e0:	8b7b      	ldrh	r3, [r7, #26]
 80061e2:	1ad2      	subs	r2, r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	619a      	str	r2, [r3, #24]
 80061e8:	e002      	b.n	80061f0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2200      	movs	r2, #0
 80061ee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d123      	bne.n	8006240 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	461a      	mov	r2, r3
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	b29b      	uxth	r3, r3
 800620a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800620e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006212:	833b      	strh	r3, [r7, #24]
 8006214:	8b3b      	ldrh	r3, [r7, #24]
 8006216:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800621a:	833b      	strh	r3, [r7, #24]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	461a      	mov	r2, r3
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	441a      	add	r2, r3
 800622a:	8b3b      	ldrh	r3, [r7, #24]
 800622c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800623c:	b29b      	uxth	r3, r3
 800623e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006240:	88fb      	ldrh	r3, [r7, #6]
 8006242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d01f      	beq.n	800628a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	461a      	mov	r2, r3
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	881b      	ldrh	r3, [r3, #0]
 800625a:	b29b      	uxth	r3, r3
 800625c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006264:	82fb      	strh	r3, [r7, #22]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	461a      	mov	r2, r3
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	441a      	add	r2, r3
 8006274:	8afb      	ldrh	r3, [r7, #22]
 8006276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800627a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800627e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006282:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006286:	b29b      	uxth	r3, r3
 8006288:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800628a:	8b7b      	ldrh	r3, [r7, #26]
 800628c:	2b00      	cmp	r3, #0
 800628e:	f000 8087 	beq.w	80063a0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	6959      	ldr	r1, [r3, #20]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	891a      	ldrh	r2, [r3, #8]
 800629e:	8b7b      	ldrh	r3, [r7, #26]
 80062a0:	f004 fa4e 	bl	800a740 <USB_ReadPMA>
 80062a4:	e07c      	b.n	80063a0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	461a      	mov	r2, r3
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	4413      	add	r3, r2
 80062ba:	3306      	adds	r3, #6
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	6812      	ldr	r2, [r2, #0]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062ce:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	699a      	ldr	r2, [r3, #24]
 80062d4:	8b7b      	ldrh	r3, [r7, #26]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d306      	bcc.n	80062e8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	8b7b      	ldrh	r3, [r7, #26]
 80062e0:	1ad2      	subs	r2, r2, r3
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	619a      	str	r2, [r3, #24]
 80062e6:	e002      	b.n	80062ee <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2200      	movs	r2, #0
 80062ec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d123      	bne.n	800633e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	b29b      	uxth	r3, r3
 8006308:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800630c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006310:	83fb      	strh	r3, [r7, #30]
 8006312:	8bfb      	ldrh	r3, [r7, #30]
 8006314:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006318:	83fb      	strh	r3, [r7, #30]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	461a      	mov	r2, r3
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	441a      	add	r2, r3
 8006328:	8bfb      	ldrh	r3, [r7, #30]
 800632a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800632e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633a:	b29b      	uxth	r3, r3
 800633c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800633e:	88fb      	ldrh	r3, [r7, #6]
 8006340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006344:	2b00      	cmp	r3, #0
 8006346:	d11f      	bne.n	8006388 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	461a      	mov	r2, r3
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	b29b      	uxth	r3, r3
 800635a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800635e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006362:	83bb      	strh	r3, [r7, #28]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	461a      	mov	r2, r3
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	441a      	add	r2, r3
 8006372:	8bbb      	ldrh	r3, [r7, #28]
 8006374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800637c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006380:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006384:	b29b      	uxth	r3, r3
 8006386:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006388:	8b7b      	ldrh	r3, [r7, #26]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d008      	beq.n	80063a0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	6959      	ldr	r1, [r3, #20]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	895a      	ldrh	r2, [r3, #10]
 800639a:	8b7b      	ldrh	r3, [r7, #26]
 800639c:	f004 f9d0 	bl	800a740 <USB_ReadPMA>
    }
  }

  return count;
 80063a0:	8b7b      	ldrh	r3, [r7, #26]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3720      	adds	r7, #32
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b0a2      	sub	sp, #136	; 0x88
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	4613      	mov	r3, r2
 80063b6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80063b8:	88fb      	ldrh	r3, [r7, #6]
 80063ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 81c7 	beq.w	8006752 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	461a      	mov	r2, r3
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	4413      	add	r3, r2
 80063d8:	3302      	adds	r3, #2
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	6812      	ldr	r2, [r2, #0]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	699a      	ldr	r2, [r3, #24]
 80063f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d907      	bls.n	800640c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	699a      	ldr	r2, [r3, #24]
 8006400:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006404:	1ad2      	subs	r2, r2, r3
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	619a      	str	r2, [r3, #24]
 800640a:	e002      	b.n	8006412 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2200      	movs	r2, #0
 8006410:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	2b00      	cmp	r3, #0
 8006418:	f040 80b9 	bne.w	800658e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	785b      	ldrb	r3, [r3, #1]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d126      	bne.n	8006472 <HAL_PCD_EP_DB_Transmit+0xc8>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	62bb      	str	r3, [r7, #40]	; 0x28
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006432:	b29b      	uxth	r3, r3
 8006434:	461a      	mov	r2, r3
 8006436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006438:	4413      	add	r3, r2
 800643a:	62bb      	str	r3, [r7, #40]	; 0x28
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	011a      	lsls	r2, r3, #4
 8006442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006444:	4413      	add	r3, r2
 8006446:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800644a:	627b      	str	r3, [r7, #36]	; 0x24
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	b29b      	uxth	r3, r3
 8006452:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006456:	b29a      	uxth	r2, r3
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	801a      	strh	r2, [r3, #0]
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	b29b      	uxth	r3, r3
 8006462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800646a:	b29a      	uxth	r2, r3
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	801a      	strh	r2, [r3, #0]
 8006470:	e01a      	b.n	80064a8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	785b      	ldrb	r3, [r3, #1]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d116      	bne.n	80064a8 <HAL_PCD_EP_DB_Transmit+0xfe>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	633b      	str	r3, [r7, #48]	; 0x30
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006488:	b29b      	uxth	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648e:	4413      	add	r3, r2
 8006490:	633b      	str	r3, [r7, #48]	; 0x30
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	011a      	lsls	r2, r3, #4
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649a:	4413      	add	r3, r2
 800649c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a4:	2200      	movs	r2, #0
 80064a6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	623b      	str	r3, [r7, #32]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	785b      	ldrb	r3, [r3, #1]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d126      	bne.n	8006504 <HAL_PCD_EP_DB_Transmit+0x15a>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	61bb      	str	r3, [r7, #24]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	461a      	mov	r2, r3
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	4413      	add	r3, r2
 80064cc:	61bb      	str	r3, [r7, #24]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	011a      	lsls	r2, r3, #4
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	4413      	add	r3, r2
 80064d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	801a      	strh	r2, [r3, #0]
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	801a      	strh	r2, [r3, #0]
 8006502:	e017      	b.n	8006534 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	785b      	ldrb	r3, [r3, #1]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d113      	bne.n	8006534 <HAL_PCD_EP_DB_Transmit+0x18a>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006514:	b29b      	uxth	r3, r3
 8006516:	461a      	mov	r2, r3
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	4413      	add	r3, r2
 800651c:	623b      	str	r3, [r7, #32]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	011a      	lsls	r2, r3, #4
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	4413      	add	r3, r2
 8006528:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800652c:	61fb      	str	r3, [r7, #28]
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	2200      	movs	r2, #0
 8006532:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	4619      	mov	r1, r3
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f005 ff17 	bl	800c36e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006540:	88fb      	ldrh	r3, [r7, #6]
 8006542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 82d4 	beq.w	8006af4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	461a      	mov	r2, r3
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b29b      	uxth	r3, r3
 800655e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006566:	827b      	strh	r3, [r7, #18]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	461a      	mov	r2, r3
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	441a      	add	r2, r3
 8006576:	8a7b      	ldrh	r3, [r7, #18]
 8006578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800657c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006580:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006588:	b29b      	uxth	r3, r3
 800658a:	8013      	strh	r3, [r2, #0]
 800658c:	e2b2      	b.n	8006af4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800658e:	88fb      	ldrh	r3, [r7, #6]
 8006590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d021      	beq.n	80065dc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	461a      	mov	r2, r3
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	461a      	mov	r2, r3
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	441a      	add	r2, r3
 80065c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80065c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d8:	b29b      	uxth	r3, r3
 80065da:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	f040 8286 	bne.w	8006af4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	695a      	ldr	r2, [r3, #20]
 80065ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80065f0:	441a      	add	r2, r3
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	69da      	ldr	r2, [r3, #28]
 80065fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80065fe:	441a      	add	r2, r3
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	6a1a      	ldr	r2, [r3, #32]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	429a      	cmp	r2, r3
 800660e:	d309      	bcc.n	8006624 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	6a1a      	ldr	r2, [r3, #32]
 800661a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800661c:	1ad2      	subs	r2, r2, r3
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	621a      	str	r2, [r3, #32]
 8006622:	e015      	b.n	8006650 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	6a1b      	ldr	r3, [r3, #32]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d107      	bne.n	800663c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800662c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006630:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800663a:	e009      	b.n	8006650 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2200      	movs	r2, #0
 800664e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	785b      	ldrb	r3, [r3, #1]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d155      	bne.n	8006704 <HAL_PCD_EP_DB_Transmit+0x35a>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	63bb      	str	r3, [r7, #56]	; 0x38
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006666:	b29b      	uxth	r3, r3
 8006668:	461a      	mov	r2, r3
 800666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666c:	4413      	add	r3, r2
 800666e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	011a      	lsls	r2, r3, #4
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	4413      	add	r3, r2
 800667a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800667e:	637b      	str	r3, [r7, #52]	; 0x34
 8006680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006682:	2b00      	cmp	r3, #0
 8006684:	d112      	bne.n	80066ac <HAL_PCD_EP_DB_Transmit+0x302>
 8006686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006690:	b29a      	uxth	r2, r3
 8006692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006694:	801a      	strh	r2, [r3, #0]
 8006696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	b29b      	uxth	r3, r3
 800669c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a8:	801a      	strh	r2, [r3, #0]
 80066aa:	e047      	b.n	800673c <HAL_PCD_EP_DB_Transmit+0x392>
 80066ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ae:	2b3e      	cmp	r3, #62	; 0x3e
 80066b0:	d811      	bhi.n	80066d6 <HAL_PCD_EP_DB_Transmit+0x32c>
 80066b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066b4:	085b      	lsrs	r3, r3, #1
 80066b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80066b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <HAL_PCD_EP_DB_Transmit+0x31e>
 80066c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066c4:	3301      	adds	r3, #1
 80066c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80066c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	029b      	lsls	r3, r3, #10
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d2:	801a      	strh	r2, [r3, #0]
 80066d4:	e032      	b.n	800673c <HAL_PCD_EP_DB_Transmit+0x392>
 80066d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066d8:	095b      	lsrs	r3, r3, #5
 80066da:	64bb      	str	r3, [r7, #72]	; 0x48
 80066dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066de:	f003 031f 	and.w	r3, r3, #31
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d102      	bne.n	80066ec <HAL_PCD_EP_DB_Transmit+0x342>
 80066e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e8:	3b01      	subs	r3, #1
 80066ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80066ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	029b      	lsls	r3, r3, #10
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006700:	801a      	strh	r2, [r3, #0]
 8006702:	e01b      	b.n	800673c <HAL_PCD_EP_DB_Transmit+0x392>
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	785b      	ldrb	r3, [r3, #1]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d117      	bne.n	800673c <HAL_PCD_EP_DB_Transmit+0x392>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	643b      	str	r3, [r7, #64]	; 0x40
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800671a:	b29b      	uxth	r3, r3
 800671c:	461a      	mov	r2, r3
 800671e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006720:	4413      	add	r3, r2
 8006722:	643b      	str	r3, [r7, #64]	; 0x40
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	011a      	lsls	r2, r3, #4
 800672a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800672c:	4413      	add	r3, r2
 800672e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006736:	b29a      	uxth	r2, r3
 8006738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800673a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6818      	ldr	r0, [r3, #0]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	6959      	ldr	r1, [r3, #20]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	891a      	ldrh	r2, [r3, #8]
 8006748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800674a:	b29b      	uxth	r3, r3
 800674c:	f003 ffb3 	bl	800a6b6 <USB_WritePMA>
 8006750:	e1d0      	b.n	8006af4 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800675a:	b29b      	uxth	r3, r3
 800675c:	461a      	mov	r2, r3
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	4413      	add	r3, r2
 8006766:	3306      	adds	r3, #6
 8006768:	005b      	lsls	r3, r3, #1
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	6812      	ldr	r2, [r2, #0]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800677a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	699a      	ldr	r2, [r3, #24]
 8006782:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006786:	429a      	cmp	r2, r3
 8006788:	d307      	bcc.n	800679a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006792:	1ad2      	subs	r2, r2, r3
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	619a      	str	r2, [r3, #24]
 8006798:	e002      	b.n	80067a0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	2200      	movs	r2, #0
 800679e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f040 80c4 	bne.w	8006932 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	785b      	ldrb	r3, [r3, #1]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d126      	bne.n	8006800 <HAL_PCD_EP_DB_Transmit+0x456>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	461a      	mov	r2, r3
 80067c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c6:	4413      	add	r3, r2
 80067c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	011a      	lsls	r2, r3, #4
 80067d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d2:	4413      	add	r3, r2
 80067d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80067da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067dc:	881b      	ldrh	r3, [r3, #0]
 80067de:	b29b      	uxth	r3, r3
 80067e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067e8:	801a      	strh	r2, [r3, #0]
 80067ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067fc:	801a      	strh	r2, [r3, #0]
 80067fe:	e01a      	b.n	8006836 <HAL_PCD_EP_DB_Transmit+0x48c>
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	785b      	ldrb	r3, [r3, #1]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d116      	bne.n	8006836 <HAL_PCD_EP_DB_Transmit+0x48c>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	677b      	str	r3, [r7, #116]	; 0x74
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006816:	b29b      	uxth	r3, r3
 8006818:	461a      	mov	r2, r3
 800681a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800681c:	4413      	add	r3, r2
 800681e:	677b      	str	r3, [r7, #116]	; 0x74
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	011a      	lsls	r2, r3, #4
 8006826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006828:	4413      	add	r3, r2
 800682a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800682e:	673b      	str	r3, [r7, #112]	; 0x70
 8006830:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006832:	2200      	movs	r2, #0
 8006834:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	67bb      	str	r3, [r7, #120]	; 0x78
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	785b      	ldrb	r3, [r3, #1]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d12f      	bne.n	80068a4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006854:	b29b      	uxth	r3, r3
 8006856:	461a      	mov	r2, r3
 8006858:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800685c:	4413      	add	r3, r2
 800685e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	011a      	lsls	r2, r3, #4
 8006868:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800686c:	4413      	add	r3, r2
 800686e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006872:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006876:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800687a:	881b      	ldrh	r3, [r3, #0]
 800687c:	b29b      	uxth	r3, r3
 800687e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006882:	b29a      	uxth	r2, r3
 8006884:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006888:	801a      	strh	r2, [r3, #0]
 800688a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800689a:	b29a      	uxth	r2, r3
 800689c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068a0:	801a      	strh	r2, [r3, #0]
 80068a2:	e017      	b.n	80068d4 <HAL_PCD_EP_DB_Transmit+0x52a>
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	785b      	ldrb	r3, [r3, #1]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d113      	bne.n	80068d4 <HAL_PCD_EP_DB_Transmit+0x52a>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ba:	4413      	add	r3, r2
 80068bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	011a      	lsls	r2, r3, #4
 80068c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068c6:	4413      	add	r3, r2
 80068c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068d0:	2200      	movs	r2, #0
 80068d2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	4619      	mov	r1, r3
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f005 fd47 	bl	800c36e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80068e0:	88fb      	ldrh	r3, [r7, #6]
 80068e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f040 8104 	bne.w	8006af4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	461a      	mov	r2, r3
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006906:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	441a      	add	r2, r3
 8006918:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800691c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006924:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800692c:	b29b      	uxth	r3, r3
 800692e:	8013      	strh	r3, [r2, #0]
 8006930:	e0e0      	b.n	8006af4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006932:	88fb      	ldrh	r3, [r7, #6]
 8006934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d121      	bne.n	8006980 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	461a      	mov	r2, r3
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	b29b      	uxth	r3, r3
 800694e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006956:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	461a      	mov	r2, r3
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	441a      	add	r2, r3
 8006968:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800696c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800697c:	b29b      	uxth	r3, r3
 800697e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006986:	2b01      	cmp	r3, #1
 8006988:	f040 80b4 	bne.w	8006af4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	695a      	ldr	r2, [r3, #20]
 8006990:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006994:	441a      	add	r2, r3
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	69da      	ldr	r2, [r3, #28]
 800699e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80069a2:	441a      	add	r2, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	6a1a      	ldr	r2, [r3, #32]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d309      	bcc.n	80069c8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	6a1a      	ldr	r2, [r3, #32]
 80069be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069c0:	1ad2      	subs	r2, r2, r3
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	621a      	str	r2, [r3, #32]
 80069c6:	e015      	b.n	80069f4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d107      	bne.n	80069e0 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80069d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80069d4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80069de:	e009      	b.n	80069f4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2200      	movs	r2, #0
 80069ea:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	667b      	str	r3, [r7, #100]	; 0x64
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	785b      	ldrb	r3, [r3, #1]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d155      	bne.n	8006aae <HAL_PCD_EP_DB_Transmit+0x704>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	461a      	mov	r2, r3
 8006a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a16:	4413      	add	r3, r2
 8006a18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	011a      	lsls	r2, r3, #4
 8006a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a22:	4413      	add	r3, r2
 8006a24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a28:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d112      	bne.n	8006a56 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006a30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a3e:	801a      	strh	r2, [r3, #0]
 8006a40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a52:	801a      	strh	r2, [r3, #0]
 8006a54:	e044      	b.n	8006ae0 <HAL_PCD_EP_DB_Transmit+0x736>
 8006a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a58:	2b3e      	cmp	r3, #62	; 0x3e
 8006a5a:	d811      	bhi.n	8006a80 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a5e:	085b      	lsrs	r3, r3, #1
 8006a60:	657b      	str	r3, [r7, #84]	; 0x54
 8006a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a6e:	3301      	adds	r3, #1
 8006a70:	657b      	str	r3, [r7, #84]	; 0x54
 8006a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	029b      	lsls	r3, r3, #10
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a7c:	801a      	strh	r2, [r3, #0]
 8006a7e:	e02f      	b.n	8006ae0 <HAL_PCD_EP_DB_Transmit+0x736>
 8006a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a82:	095b      	lsrs	r3, r3, #5
 8006a84:	657b      	str	r3, [r7, #84]	; 0x54
 8006a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a88:	f003 031f 	and.w	r3, r3, #31
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d102      	bne.n	8006a96 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8006a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a92:	3b01      	subs	r3, #1
 8006a94:	657b      	str	r3, [r7, #84]	; 0x54
 8006a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	029b      	lsls	r3, r3, #10
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aaa:	801a      	strh	r2, [r3, #0]
 8006aac:	e018      	b.n	8006ae0 <HAL_PCD_EP_DB_Transmit+0x736>
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	785b      	ldrb	r3, [r3, #1]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d114      	bne.n	8006ae0 <HAL_PCD_EP_DB_Transmit+0x736>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ac4:	4413      	add	r3, r2
 8006ac6:	667b      	str	r3, [r7, #100]	; 0x64
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	011a      	lsls	r2, r3, #4
 8006ace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ad6:	663b      	str	r3, [r7, #96]	; 0x60
 8006ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ade:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6818      	ldr	r0, [r3, #0]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	6959      	ldr	r1, [r3, #20]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	895a      	ldrh	r2, [r3, #10]
 8006aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	f003 fde1 	bl	800a6b6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	461a      	mov	r2, r3
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b0e:	823b      	strh	r3, [r7, #16]
 8006b10:	8a3b      	ldrh	r3, [r7, #16]
 8006b12:	f083 0310 	eor.w	r3, r3, #16
 8006b16:	823b      	strh	r3, [r7, #16]
 8006b18:	8a3b      	ldrh	r3, [r7, #16]
 8006b1a:	f083 0320 	eor.w	r3, r3, #32
 8006b1e:	823b      	strh	r3, [r7, #16]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	461a      	mov	r2, r3
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	441a      	add	r2, r3
 8006b2e:	8a3b      	ldrh	r3, [r7, #16]
 8006b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3788      	adds	r7, #136	; 0x88
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b087      	sub	sp, #28
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	60f8      	str	r0, [r7, #12]
 8006b56:	607b      	str	r3, [r7, #4]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	817b      	strh	r3, [r7, #10]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006b60:	897b      	ldrh	r3, [r7, #10]
 8006b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00b      	beq.n	8006b84 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b6c:	897b      	ldrh	r3, [r7, #10]
 8006b6e:	f003 0307 	and.w	r3, r3, #7
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	4613      	mov	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	4413      	add	r3, r2
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	e009      	b.n	8006b98 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006b84:	897a      	ldrh	r2, [r7, #10]
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	00db      	lsls	r3, r3, #3
 8006b8e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4413      	add	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006b98:	893b      	ldrh	r3, [r7, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d107      	bne.n	8006bae <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	80da      	strh	r2, [r3, #6]
 8006bac:	e00b      	b.n	8006bc6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	0c1b      	lsrs	r3, r3, #16
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	371c      	adds	r7, #28
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bc80      	pop	{r7}
 8006bd0:	4770      	bx	lr
	...

08006bd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e26c      	b.n	80070c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 8087 	beq.w	8006d02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006bf4:	4b92      	ldr	r3, [pc, #584]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f003 030c 	and.w	r3, r3, #12
 8006bfc:	2b04      	cmp	r3, #4
 8006bfe:	d00c      	beq.n	8006c1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006c00:	4b8f      	ldr	r3, [pc, #572]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f003 030c 	and.w	r3, r3, #12
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	d112      	bne.n	8006c32 <HAL_RCC_OscConfig+0x5e>
 8006c0c:	4b8c      	ldr	r3, [pc, #560]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c18:	d10b      	bne.n	8006c32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c1a:	4b89      	ldr	r3, [pc, #548]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d06c      	beq.n	8006d00 <HAL_RCC_OscConfig+0x12c>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d168      	bne.n	8006d00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e246      	b.n	80070c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c3a:	d106      	bne.n	8006c4a <HAL_RCC_OscConfig+0x76>
 8006c3c:	4b80      	ldr	r3, [pc, #512]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a7f      	ldr	r2, [pc, #508]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	e02e      	b.n	8006ca8 <HAL_RCC_OscConfig+0xd4>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10c      	bne.n	8006c6c <HAL_RCC_OscConfig+0x98>
 8006c52:	4b7b      	ldr	r3, [pc, #492]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a7a      	ldr	r2, [pc, #488]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c5c:	6013      	str	r3, [r2, #0]
 8006c5e:	4b78      	ldr	r3, [pc, #480]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a77      	ldr	r2, [pc, #476]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006c64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	e01d      	b.n	8006ca8 <HAL_RCC_OscConfig+0xd4>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c74:	d10c      	bne.n	8006c90 <HAL_RCC_OscConfig+0xbc>
 8006c76:	4b72      	ldr	r3, [pc, #456]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a71      	ldr	r2, [pc, #452]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c80:	6013      	str	r3, [r2, #0]
 8006c82:	4b6f      	ldr	r3, [pc, #444]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a6e      	ldr	r2, [pc, #440]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c8c:	6013      	str	r3, [r2, #0]
 8006c8e:	e00b      	b.n	8006ca8 <HAL_RCC_OscConfig+0xd4>
 8006c90:	4b6b      	ldr	r3, [pc, #428]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a6a      	ldr	r2, [pc, #424]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c9a:	6013      	str	r3, [r2, #0]
 8006c9c:	4b68      	ldr	r3, [pc, #416]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a67      	ldr	r2, [pc, #412]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ca6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d013      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cb0:	f7fc ffc2 	bl	8003c38 <HAL_GetTick>
 8006cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cb6:	e008      	b.n	8006cca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cb8:	f7fc ffbe 	bl	8003c38 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	2b64      	cmp	r3, #100	; 0x64
 8006cc4:	d901      	bls.n	8006cca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e1fa      	b.n	80070c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cca:	4b5d      	ldr	r3, [pc, #372]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d0f0      	beq.n	8006cb8 <HAL_RCC_OscConfig+0xe4>
 8006cd6:	e014      	b.n	8006d02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd8:	f7fc ffae 	bl	8003c38 <HAL_GetTick>
 8006cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cde:	e008      	b.n	8006cf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ce0:	f7fc ffaa 	bl	8003c38 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	2b64      	cmp	r3, #100	; 0x64
 8006cec:	d901      	bls.n	8006cf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e1e6      	b.n	80070c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cf2:	4b53      	ldr	r3, [pc, #332]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1f0      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x10c>
 8006cfe:	e000      	b.n	8006d02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d063      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d0e:	4b4c      	ldr	r3, [pc, #304]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f003 030c 	and.w	r3, r3, #12
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00b      	beq.n	8006d32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006d1a:	4b49      	ldr	r3, [pc, #292]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f003 030c 	and.w	r3, r3, #12
 8006d22:	2b08      	cmp	r3, #8
 8006d24:	d11c      	bne.n	8006d60 <HAL_RCC_OscConfig+0x18c>
 8006d26:	4b46      	ldr	r3, [pc, #280]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d116      	bne.n	8006d60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d32:	4b43      	ldr	r3, [pc, #268]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d005      	beq.n	8006d4a <HAL_RCC_OscConfig+0x176>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d001      	beq.n	8006d4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e1ba      	b.n	80070c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d4a:	4b3d      	ldr	r3, [pc, #244]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	4939      	ldr	r1, [pc, #228]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d5e:	e03a      	b.n	8006dd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d020      	beq.n	8006daa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d68:	4b36      	ldr	r3, [pc, #216]	; (8006e44 <HAL_RCC_OscConfig+0x270>)
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d6e:	f7fc ff63 	bl	8003c38 <HAL_GetTick>
 8006d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d74:	e008      	b.n	8006d88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d76:	f7fc ff5f 	bl	8003c38 <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d901      	bls.n	8006d88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e19b      	b.n	80070c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d88:	4b2d      	ldr	r3, [pc, #180]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d0f0      	beq.n	8006d76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d94:	4b2a      	ldr	r3, [pc, #168]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	00db      	lsls	r3, r3, #3
 8006da2:	4927      	ldr	r1, [pc, #156]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	600b      	str	r3, [r1, #0]
 8006da8:	e015      	b.n	8006dd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006daa:	4b26      	ldr	r3, [pc, #152]	; (8006e44 <HAL_RCC_OscConfig+0x270>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db0:	f7fc ff42 	bl	8003c38 <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006db8:	f7fc ff3e 	bl	8003c38 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e17a      	b.n	80070c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dca:	4b1d      	ldr	r3, [pc, #116]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1f0      	bne.n	8006db8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0308 	and.w	r3, r3, #8
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d03a      	beq.n	8006e58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d019      	beq.n	8006e1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dea:	4b17      	ldr	r3, [pc, #92]	; (8006e48 <HAL_RCC_OscConfig+0x274>)
 8006dec:	2201      	movs	r2, #1
 8006dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006df0:	f7fc ff22 	bl	8003c38 <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006df6:	e008      	b.n	8006e0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006df8:	f7fc ff1e 	bl	8003c38 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e15a      	b.n	80070c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e0a:	4b0d      	ldr	r3, [pc, #52]	; (8006e40 <HAL_RCC_OscConfig+0x26c>)
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0f0      	beq.n	8006df8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006e16:	2001      	movs	r0, #1
 8006e18:	f000 fac6 	bl	80073a8 <RCC_Delay>
 8006e1c:	e01c      	b.n	8006e58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e1e:	4b0a      	ldr	r3, [pc, #40]	; (8006e48 <HAL_RCC_OscConfig+0x274>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e24:	f7fc ff08 	bl	8003c38 <HAL_GetTick>
 8006e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e2a:	e00f      	b.n	8006e4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e2c:	f7fc ff04 	bl	8003c38 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d908      	bls.n	8006e4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e140      	b.n	80070c0 <HAL_RCC_OscConfig+0x4ec>
 8006e3e:	bf00      	nop
 8006e40:	40021000 	.word	0x40021000
 8006e44:	42420000 	.word	0x42420000
 8006e48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e4c:	4b9e      	ldr	r3, [pc, #632]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e9      	bne.n	8006e2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 80a6 	beq.w	8006fb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e66:	2300      	movs	r3, #0
 8006e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e6a:	4b97      	ldr	r3, [pc, #604]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10d      	bne.n	8006e92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e76:	4b94      	ldr	r3, [pc, #592]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	4a93      	ldr	r2, [pc, #588]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e80:	61d3      	str	r3, [r2, #28]
 8006e82:	4b91      	ldr	r3, [pc, #580]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e8a:	60bb      	str	r3, [r7, #8]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e92:	4b8e      	ldr	r3, [pc, #568]	; (80070cc <HAL_RCC_OscConfig+0x4f8>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d118      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e9e:	4b8b      	ldr	r3, [pc, #556]	; (80070cc <HAL_RCC_OscConfig+0x4f8>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a8a      	ldr	r2, [pc, #552]	; (80070cc <HAL_RCC_OscConfig+0x4f8>)
 8006ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006eaa:	f7fc fec5 	bl	8003c38 <HAL_GetTick>
 8006eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eb0:	e008      	b.n	8006ec4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eb2:	f7fc fec1 	bl	8003c38 <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	2b64      	cmp	r3, #100	; 0x64
 8006ebe:	d901      	bls.n	8006ec4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e0fd      	b.n	80070c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ec4:	4b81      	ldr	r3, [pc, #516]	; (80070cc <HAL_RCC_OscConfig+0x4f8>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0f0      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d106      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x312>
 8006ed8:	4b7b      	ldr	r3, [pc, #492]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	4a7a      	ldr	r2, [pc, #488]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006ede:	f043 0301 	orr.w	r3, r3, #1
 8006ee2:	6213      	str	r3, [r2, #32]
 8006ee4:	e02d      	b.n	8006f42 <HAL_RCC_OscConfig+0x36e>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10c      	bne.n	8006f08 <HAL_RCC_OscConfig+0x334>
 8006eee:	4b76      	ldr	r3, [pc, #472]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	4a75      	ldr	r2, [pc, #468]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006ef4:	f023 0301 	bic.w	r3, r3, #1
 8006ef8:	6213      	str	r3, [r2, #32]
 8006efa:	4b73      	ldr	r3, [pc, #460]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	4a72      	ldr	r2, [pc, #456]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006f00:	f023 0304 	bic.w	r3, r3, #4
 8006f04:	6213      	str	r3, [r2, #32]
 8006f06:	e01c      	b.n	8006f42 <HAL_RCC_OscConfig+0x36e>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	2b05      	cmp	r3, #5
 8006f0e:	d10c      	bne.n	8006f2a <HAL_RCC_OscConfig+0x356>
 8006f10:	4b6d      	ldr	r3, [pc, #436]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	4a6c      	ldr	r2, [pc, #432]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006f16:	f043 0304 	orr.w	r3, r3, #4
 8006f1a:	6213      	str	r3, [r2, #32]
 8006f1c:	4b6a      	ldr	r3, [pc, #424]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	4a69      	ldr	r2, [pc, #420]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006f22:	f043 0301 	orr.w	r3, r3, #1
 8006f26:	6213      	str	r3, [r2, #32]
 8006f28:	e00b      	b.n	8006f42 <HAL_RCC_OscConfig+0x36e>
 8006f2a:	4b67      	ldr	r3, [pc, #412]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	4a66      	ldr	r2, [pc, #408]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006f30:	f023 0301 	bic.w	r3, r3, #1
 8006f34:	6213      	str	r3, [r2, #32]
 8006f36:	4b64      	ldr	r3, [pc, #400]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	4a63      	ldr	r2, [pc, #396]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006f3c:	f023 0304 	bic.w	r3, r3, #4
 8006f40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d015      	beq.n	8006f76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f4a:	f7fc fe75 	bl	8003c38 <HAL_GetTick>
 8006f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f50:	e00a      	b.n	8006f68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f52:	f7fc fe71 	bl	8003c38 <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d901      	bls.n	8006f68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e0ab      	b.n	80070c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f68:	4b57      	ldr	r3, [pc, #348]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	f003 0302 	and.w	r3, r3, #2
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d0ee      	beq.n	8006f52 <HAL_RCC_OscConfig+0x37e>
 8006f74:	e014      	b.n	8006fa0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f76:	f7fc fe5f 	bl	8003c38 <HAL_GetTick>
 8006f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f7c:	e00a      	b.n	8006f94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f7e:	f7fc fe5b 	bl	8003c38 <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d901      	bls.n	8006f94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e095      	b.n	80070c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f94:	4b4c      	ldr	r3, [pc, #304]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1ee      	bne.n	8006f7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006fa0:	7dfb      	ldrb	r3, [r7, #23]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d105      	bne.n	8006fb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fa6:	4b48      	ldr	r3, [pc, #288]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	4a47      	ldr	r2, [pc, #284]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 8081 	beq.w	80070be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006fbc:	4b42      	ldr	r3, [pc, #264]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f003 030c 	and.w	r3, r3, #12
 8006fc4:	2b08      	cmp	r3, #8
 8006fc6:	d061      	beq.n	800708c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d146      	bne.n	800705e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fd0:	4b3f      	ldr	r3, [pc, #252]	; (80070d0 <HAL_RCC_OscConfig+0x4fc>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fd6:	f7fc fe2f 	bl	8003c38 <HAL_GetTick>
 8006fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fde:	f7fc fe2b 	bl	8003c38 <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e067      	b.n	80070c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ff0:	4b35      	ldr	r3, [pc, #212]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1f0      	bne.n	8006fde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007004:	d108      	bne.n	8007018 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007006:	4b30      	ldr	r3, [pc, #192]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	492d      	ldr	r1, [pc, #180]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8007014:	4313      	orrs	r3, r2
 8007016:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007018:	4b2b      	ldr	r3, [pc, #172]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a19      	ldr	r1, [r3, #32]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007028:	430b      	orrs	r3, r1
 800702a:	4927      	ldr	r1, [pc, #156]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 800702c:	4313      	orrs	r3, r2
 800702e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007030:	4b27      	ldr	r3, [pc, #156]	; (80070d0 <HAL_RCC_OscConfig+0x4fc>)
 8007032:	2201      	movs	r2, #1
 8007034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007036:	f7fc fdff 	bl	8003c38 <HAL_GetTick>
 800703a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800703c:	e008      	b.n	8007050 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800703e:	f7fc fdfb 	bl	8003c38 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	2b02      	cmp	r3, #2
 800704a:	d901      	bls.n	8007050 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e037      	b.n	80070c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007050:	4b1d      	ldr	r3, [pc, #116]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d0f0      	beq.n	800703e <HAL_RCC_OscConfig+0x46a>
 800705c:	e02f      	b.n	80070be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800705e:	4b1c      	ldr	r3, [pc, #112]	; (80070d0 <HAL_RCC_OscConfig+0x4fc>)
 8007060:	2200      	movs	r2, #0
 8007062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007064:	f7fc fde8 	bl	8003c38 <HAL_GetTick>
 8007068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800706a:	e008      	b.n	800707e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800706c:	f7fc fde4 	bl	8003c38 <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	2b02      	cmp	r3, #2
 8007078:	d901      	bls.n	800707e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e020      	b.n	80070c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800707e:	4b12      	ldr	r3, [pc, #72]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1f0      	bne.n	800706c <HAL_RCC_OscConfig+0x498>
 800708a:	e018      	b.n	80070be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	69db      	ldr	r3, [r3, #28]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d101      	bne.n	8007098 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e013      	b.n	80070c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007098:	4b0b      	ldr	r3, [pc, #44]	; (80070c8 <HAL_RCC_OscConfig+0x4f4>)
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d106      	bne.n	80070ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d001      	beq.n	80070be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e000      	b.n	80070c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	40021000 	.word	0x40021000
 80070cc:	40007000 	.word	0x40007000
 80070d0:	42420060 	.word	0x42420060

080070d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e0d0      	b.n	800728a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070e8:	4b6a      	ldr	r3, [pc, #424]	; (8007294 <HAL_RCC_ClockConfig+0x1c0>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0307 	and.w	r3, r3, #7
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d910      	bls.n	8007118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070f6:	4b67      	ldr	r3, [pc, #412]	; (8007294 <HAL_RCC_ClockConfig+0x1c0>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f023 0207 	bic.w	r2, r3, #7
 80070fe:	4965      	ldr	r1, [pc, #404]	; (8007294 <HAL_RCC_ClockConfig+0x1c0>)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	4313      	orrs	r3, r2
 8007104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007106:	4b63      	ldr	r3, [pc, #396]	; (8007294 <HAL_RCC_ClockConfig+0x1c0>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0307 	and.w	r3, r3, #7
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	429a      	cmp	r2, r3
 8007112:	d001      	beq.n	8007118 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e0b8      	b.n	800728a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0302 	and.w	r3, r3, #2
 8007120:	2b00      	cmp	r3, #0
 8007122:	d020      	beq.n	8007166 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b00      	cmp	r3, #0
 800712e:	d005      	beq.n	800713c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007130:	4b59      	ldr	r3, [pc, #356]	; (8007298 <HAL_RCC_ClockConfig+0x1c4>)
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	4a58      	ldr	r2, [pc, #352]	; (8007298 <HAL_RCC_ClockConfig+0x1c4>)
 8007136:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800713a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0308 	and.w	r3, r3, #8
 8007144:	2b00      	cmp	r3, #0
 8007146:	d005      	beq.n	8007154 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007148:	4b53      	ldr	r3, [pc, #332]	; (8007298 <HAL_RCC_ClockConfig+0x1c4>)
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	4a52      	ldr	r2, [pc, #328]	; (8007298 <HAL_RCC_ClockConfig+0x1c4>)
 800714e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007152:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007154:	4b50      	ldr	r3, [pc, #320]	; (8007298 <HAL_RCC_ClockConfig+0x1c4>)
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	494d      	ldr	r1, [pc, #308]	; (8007298 <HAL_RCC_ClockConfig+0x1c4>)
 8007162:	4313      	orrs	r3, r2
 8007164:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	2b00      	cmp	r3, #0
 8007170:	d040      	beq.n	80071f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d107      	bne.n	800718a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800717a:	4b47      	ldr	r3, [pc, #284]	; (8007298 <HAL_RCC_ClockConfig+0x1c4>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d115      	bne.n	80071b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e07f      	b.n	800728a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	2b02      	cmp	r3, #2
 8007190:	d107      	bne.n	80071a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007192:	4b41      	ldr	r3, [pc, #260]	; (8007298 <HAL_RCC_ClockConfig+0x1c4>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d109      	bne.n	80071b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e073      	b.n	800728a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071a2:	4b3d      	ldr	r3, [pc, #244]	; (8007298 <HAL_RCC_ClockConfig+0x1c4>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e06b      	b.n	800728a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071b2:	4b39      	ldr	r3, [pc, #228]	; (8007298 <HAL_RCC_ClockConfig+0x1c4>)
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f023 0203 	bic.w	r2, r3, #3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	4936      	ldr	r1, [pc, #216]	; (8007298 <HAL_RCC_ClockConfig+0x1c4>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071c4:	f7fc fd38 	bl	8003c38 <HAL_GetTick>
 80071c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071ca:	e00a      	b.n	80071e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071cc:	f7fc fd34 	bl	8003c38 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80071da:	4293      	cmp	r3, r2
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e053      	b.n	800728a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071e2:	4b2d      	ldr	r3, [pc, #180]	; (8007298 <HAL_RCC_ClockConfig+0x1c4>)
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f003 020c 	and.w	r2, r3, #12
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d1eb      	bne.n	80071cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071f4:	4b27      	ldr	r3, [pc, #156]	; (8007294 <HAL_RCC_ClockConfig+0x1c0>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0307 	and.w	r3, r3, #7
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d210      	bcs.n	8007224 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007202:	4b24      	ldr	r3, [pc, #144]	; (8007294 <HAL_RCC_ClockConfig+0x1c0>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f023 0207 	bic.w	r2, r3, #7
 800720a:	4922      	ldr	r1, [pc, #136]	; (8007294 <HAL_RCC_ClockConfig+0x1c0>)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	4313      	orrs	r3, r2
 8007210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007212:	4b20      	ldr	r3, [pc, #128]	; (8007294 <HAL_RCC_ClockConfig+0x1c0>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0307 	and.w	r3, r3, #7
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	429a      	cmp	r2, r3
 800721e:	d001      	beq.n	8007224 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e032      	b.n	800728a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0304 	and.w	r3, r3, #4
 800722c:	2b00      	cmp	r3, #0
 800722e:	d008      	beq.n	8007242 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007230:	4b19      	ldr	r3, [pc, #100]	; (8007298 <HAL_RCC_ClockConfig+0x1c4>)
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	4916      	ldr	r1, [pc, #88]	; (8007298 <HAL_RCC_ClockConfig+0x1c4>)
 800723e:	4313      	orrs	r3, r2
 8007240:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0308 	and.w	r3, r3, #8
 800724a:	2b00      	cmp	r3, #0
 800724c:	d009      	beq.n	8007262 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800724e:	4b12      	ldr	r3, [pc, #72]	; (8007298 <HAL_RCC_ClockConfig+0x1c4>)
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	00db      	lsls	r3, r3, #3
 800725c:	490e      	ldr	r1, [pc, #56]	; (8007298 <HAL_RCC_ClockConfig+0x1c4>)
 800725e:	4313      	orrs	r3, r2
 8007260:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007262:	f000 f821 	bl	80072a8 <HAL_RCC_GetSysClockFreq>
 8007266:	4602      	mov	r2, r0
 8007268:	4b0b      	ldr	r3, [pc, #44]	; (8007298 <HAL_RCC_ClockConfig+0x1c4>)
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	091b      	lsrs	r3, r3, #4
 800726e:	f003 030f 	and.w	r3, r3, #15
 8007272:	490a      	ldr	r1, [pc, #40]	; (800729c <HAL_RCC_ClockConfig+0x1c8>)
 8007274:	5ccb      	ldrb	r3, [r1, r3]
 8007276:	fa22 f303 	lsr.w	r3, r2, r3
 800727a:	4a09      	ldr	r2, [pc, #36]	; (80072a0 <HAL_RCC_ClockConfig+0x1cc>)
 800727c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800727e:	4b09      	ldr	r3, [pc, #36]	; (80072a4 <HAL_RCC_ClockConfig+0x1d0>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4618      	mov	r0, r3
 8007284:	f7fc fc96 	bl	8003bb4 <HAL_InitTick>

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	40022000 	.word	0x40022000
 8007298:	40021000 	.word	0x40021000
 800729c:	0800d7b0 	.word	0x0800d7b0
 80072a0:	20000014 	.word	0x20000014
 80072a4:	20000018 	.word	0x20000018

080072a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072a8:	b490      	push	{r4, r7}
 80072aa:	b08a      	sub	sp, #40	; 0x28
 80072ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80072ae:	4b2a      	ldr	r3, [pc, #168]	; (8007358 <HAL_RCC_GetSysClockFreq+0xb0>)
 80072b0:	1d3c      	adds	r4, r7, #4
 80072b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80072b8:	f240 2301 	movw	r3, #513	; 0x201
 80072bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	61fb      	str	r3, [r7, #28]
 80072c2:	2300      	movs	r3, #0
 80072c4:	61bb      	str	r3, [r7, #24]
 80072c6:	2300      	movs	r3, #0
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
 80072ca:	2300      	movs	r3, #0
 80072cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80072d2:	4b22      	ldr	r3, [pc, #136]	; (800735c <HAL_RCC_GetSysClockFreq+0xb4>)
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	f003 030c 	and.w	r3, r3, #12
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d002      	beq.n	80072e8 <HAL_RCC_GetSysClockFreq+0x40>
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d003      	beq.n	80072ee <HAL_RCC_GetSysClockFreq+0x46>
 80072e6:	e02d      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80072e8:	4b1d      	ldr	r3, [pc, #116]	; (8007360 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072ea:	623b      	str	r3, [r7, #32]
      break;
 80072ec:	e02d      	b.n	800734a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	0c9b      	lsrs	r3, r3, #18
 80072f2:	f003 030f 	and.w	r3, r3, #15
 80072f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80072fa:	4413      	add	r3, r2
 80072fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007300:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d013      	beq.n	8007334 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800730c:	4b13      	ldr	r3, [pc, #76]	; (800735c <HAL_RCC_GetSysClockFreq+0xb4>)
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	0c5b      	lsrs	r3, r3, #17
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800731a:	4413      	add	r3, r2
 800731c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007320:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	4a0e      	ldr	r2, [pc, #56]	; (8007360 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007326:	fb02 f203 	mul.w	r2, r2, r3
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007330:	627b      	str	r3, [r7, #36]	; 0x24
 8007332:	e004      	b.n	800733e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	4a0b      	ldr	r2, [pc, #44]	; (8007364 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007338:	fb02 f303 	mul.w	r3, r2, r3
 800733c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	623b      	str	r3, [r7, #32]
      break;
 8007342:	e002      	b.n	800734a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007344:	4b08      	ldr	r3, [pc, #32]	; (8007368 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007346:	623b      	str	r3, [r7, #32]
      break;
 8007348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800734a:	6a3b      	ldr	r3, [r7, #32]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3728      	adds	r7, #40	; 0x28
 8007350:	46bd      	mov	sp, r7
 8007352:	bc90      	pop	{r4, r7}
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	0800d4b4 	.word	0x0800d4b4
 800735c:	40021000 	.word	0x40021000
 8007360:	00f42400 	.word	0x00f42400
 8007364:	003d0900 	.word	0x003d0900
 8007368:	007a1200 	.word	0x007a1200

0800736c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007370:	4b02      	ldr	r3, [pc, #8]	; (800737c <HAL_RCC_GetHCLKFreq+0x10>)
 8007372:	681b      	ldr	r3, [r3, #0]
}
 8007374:	4618      	mov	r0, r3
 8007376:	46bd      	mov	sp, r7
 8007378:	bc80      	pop	{r7}
 800737a:	4770      	bx	lr
 800737c:	20000014 	.word	0x20000014

08007380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007384:	f7ff fff2 	bl	800736c <HAL_RCC_GetHCLKFreq>
 8007388:	4602      	mov	r2, r0
 800738a:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	0a1b      	lsrs	r3, r3, #8
 8007390:	f003 0307 	and.w	r3, r3, #7
 8007394:	4903      	ldr	r1, [pc, #12]	; (80073a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007396:	5ccb      	ldrb	r3, [r1, r3]
 8007398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800739c:	4618      	mov	r0, r3
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	40021000 	.word	0x40021000
 80073a4:	0800d7c0 	.word	0x0800d7c0

080073a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80073b0:	4b0a      	ldr	r3, [pc, #40]	; (80073dc <RCC_Delay+0x34>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a0a      	ldr	r2, [pc, #40]	; (80073e0 <RCC_Delay+0x38>)
 80073b6:	fba2 2303 	umull	r2, r3, r2, r3
 80073ba:	0a5b      	lsrs	r3, r3, #9
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	fb02 f303 	mul.w	r3, r2, r3
 80073c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80073c4:	bf00      	nop
  }
  while (Delay --);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	1e5a      	subs	r2, r3, #1
 80073ca:	60fa      	str	r2, [r7, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1f9      	bne.n	80073c4 <RCC_Delay+0x1c>
}
 80073d0:	bf00      	nop
 80073d2:	bf00      	nop
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bc80      	pop	{r7}
 80073da:	4770      	bx	lr
 80073dc:	20000014 	.word	0x20000014
 80073e0:	10624dd3 	.word	0x10624dd3

080073e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80073ec:	2300      	movs	r3, #0
 80073ee:	613b      	str	r3, [r7, #16]
 80073f0:	2300      	movs	r3, #0
 80073f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d07d      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007400:	2300      	movs	r3, #0
 8007402:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007404:	4b4f      	ldr	r3, [pc, #316]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10d      	bne.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007410:	4b4c      	ldr	r3, [pc, #304]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	4a4b      	ldr	r2, [pc, #300]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800741a:	61d3      	str	r3, [r2, #28]
 800741c:	4b49      	ldr	r3, [pc, #292]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007424:	60bb      	str	r3, [r7, #8]
 8007426:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007428:	2301      	movs	r3, #1
 800742a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800742c:	4b46      	ldr	r3, [pc, #280]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007434:	2b00      	cmp	r3, #0
 8007436:	d118      	bne.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007438:	4b43      	ldr	r3, [pc, #268]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a42      	ldr	r2, [pc, #264]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800743e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007442:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007444:	f7fc fbf8 	bl	8003c38 <HAL_GetTick>
 8007448:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800744a:	e008      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800744c:	f7fc fbf4 	bl	8003c38 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	2b64      	cmp	r3, #100	; 0x64
 8007458:	d901      	bls.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e06d      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800745e:	4b3a      	ldr	r3, [pc, #232]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007466:	2b00      	cmp	r3, #0
 8007468:	d0f0      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800746a:	4b36      	ldr	r3, [pc, #216]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007472:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d02e      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	429a      	cmp	r2, r3
 8007486:	d027      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007488:	4b2e      	ldr	r3, [pc, #184]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800748a:	6a1b      	ldr	r3, [r3, #32]
 800748c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007490:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007492:	4b2e      	ldr	r3, [pc, #184]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007494:	2201      	movs	r2, #1
 8007496:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007498:	4b2c      	ldr	r3, [pc, #176]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800749a:	2200      	movs	r2, #0
 800749c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800749e:	4a29      	ldr	r2, [pc, #164]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d014      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ae:	f7fc fbc3 	bl	8003c38 <HAL_GetTick>
 80074b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074b4:	e00a      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074b6:	f7fc fbbf 	bl	8003c38 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d901      	bls.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e036      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074cc:	4b1d      	ldr	r3, [pc, #116]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ce:	6a1b      	ldr	r3, [r3, #32]
 80074d0:	f003 0302 	and.w	r3, r3, #2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d0ee      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074d8:	4b1a      	ldr	r3, [pc, #104]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	4917      	ldr	r1, [pc, #92]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80074ea:	7dfb      	ldrb	r3, [r7, #23]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d105      	bne.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074f0:	4b14      	ldr	r3, [pc, #80]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074f2:	69db      	ldr	r3, [r3, #28]
 80074f4:	4a13      	ldr	r2, [pc, #76]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d008      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007508:	4b0e      	ldr	r3, [pc, #56]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	490b      	ldr	r1, [pc, #44]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007516:	4313      	orrs	r3, r2
 8007518:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0310 	and.w	r3, r3, #16
 8007522:	2b00      	cmp	r3, #0
 8007524:	d008      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007526:	4b07      	ldr	r3, [pc, #28]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	4904      	ldr	r1, [pc, #16]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007534:	4313      	orrs	r3, r2
 8007536:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	40021000 	.word	0x40021000
 8007548:	40007000 	.word	0x40007000
 800754c:	42420440 	.word	0x42420440

08007550 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e076      	b.n	8007650 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	2b00      	cmp	r3, #0
 8007568:	d108      	bne.n	800757c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007572:	d009      	beq.n	8007588 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	61da      	str	r2, [r3, #28]
 800757a:	e005      	b.n	8007588 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d106      	bne.n	80075a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fb ffa8 	bl	80034f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2202      	movs	r2, #2
 80075ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80075d0:	431a      	orrs	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075da:	431a      	orrs	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	431a      	orrs	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	431a      	orrs	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075f8:	431a      	orrs	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007602:	431a      	orrs	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800760c:	ea42 0103 	orr.w	r1, r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007614:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	430a      	orrs	r2, r1
 800761e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	0c1a      	lsrs	r2, r3, #16
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f002 0204 	and.w	r2, r2, #4
 800762e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	69da      	ldr	r2, [r3, #28]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800763e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b088      	sub	sp, #32
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	603b      	str	r3, [r7, #0]
 8007664:	4613      	mov	r3, r2
 8007666:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007672:	2b01      	cmp	r3, #1
 8007674:	d101      	bne.n	800767a <HAL_SPI_Transmit+0x22>
 8007676:	2302      	movs	r3, #2
 8007678:	e126      	b.n	80078c8 <HAL_SPI_Transmit+0x270>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007682:	f7fc fad9 	bl	8003c38 <HAL_GetTick>
 8007686:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007688:	88fb      	ldrh	r3, [r7, #6]
 800768a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b01      	cmp	r3, #1
 8007696:	d002      	beq.n	800769e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007698:	2302      	movs	r3, #2
 800769a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800769c:	e10b      	b.n	80078b6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <HAL_SPI_Transmit+0x52>
 80076a4:	88fb      	ldrh	r3, [r7, #6]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d102      	bne.n	80076b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076ae:	e102      	b.n	80078b6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2203      	movs	r2, #3
 80076b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	88fa      	ldrh	r2, [r7, #6]
 80076c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	88fa      	ldrh	r2, [r7, #6]
 80076ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076f6:	d10f      	bne.n	8007718 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007706:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007716:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007722:	2b40      	cmp	r3, #64	; 0x40
 8007724:	d007      	beq.n	8007736 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007734:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800773e:	d14b      	bne.n	80077d8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <HAL_SPI_Transmit+0xf6>
 8007748:	8afb      	ldrh	r3, [r7, #22]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d13e      	bne.n	80077cc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007752:	881a      	ldrh	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775e:	1c9a      	adds	r2, r3, #2
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007768:	b29b      	uxth	r3, r3
 800776a:	3b01      	subs	r3, #1
 800776c:	b29a      	uxth	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007772:	e02b      	b.n	80077cc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b02      	cmp	r3, #2
 8007780:	d112      	bne.n	80077a8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007786:	881a      	ldrh	r2, [r3, #0]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007792:	1c9a      	adds	r2, r3, #2
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800779c:	b29b      	uxth	r3, r3
 800779e:	3b01      	subs	r3, #1
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80077a6:	e011      	b.n	80077cc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077a8:	f7fc fa46 	bl	8003c38 <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d803      	bhi.n	80077c0 <HAL_SPI_Transmit+0x168>
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077be:	d102      	bne.n	80077c6 <HAL_SPI_Transmit+0x16e>
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d102      	bne.n	80077cc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80077ca:	e074      	b.n	80078b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1ce      	bne.n	8007774 <HAL_SPI_Transmit+0x11c>
 80077d6:	e04c      	b.n	8007872 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <HAL_SPI_Transmit+0x18e>
 80077e0:	8afb      	ldrh	r3, [r7, #22]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d140      	bne.n	8007868 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	330c      	adds	r3, #12
 80077f0:	7812      	ldrb	r2, [r2, #0]
 80077f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007802:	b29b      	uxth	r3, r3
 8007804:	3b01      	subs	r3, #1
 8007806:	b29a      	uxth	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800780c:	e02c      	b.n	8007868 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b02      	cmp	r3, #2
 800781a:	d113      	bne.n	8007844 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	330c      	adds	r3, #12
 8007826:	7812      	ldrb	r2, [r2, #0]
 8007828:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782e:	1c5a      	adds	r2, r3, #1
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007838:	b29b      	uxth	r3, r3
 800783a:	3b01      	subs	r3, #1
 800783c:	b29a      	uxth	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	86da      	strh	r2, [r3, #54]	; 0x36
 8007842:	e011      	b.n	8007868 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007844:	f7fc f9f8 	bl	8003c38 <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	429a      	cmp	r2, r3
 8007852:	d803      	bhi.n	800785c <HAL_SPI_Transmit+0x204>
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785a:	d102      	bne.n	8007862 <HAL_SPI_Transmit+0x20a>
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d102      	bne.n	8007868 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007866:	e026      	b.n	80078b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800786c:	b29b      	uxth	r3, r3
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1cd      	bne.n	800780e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007872:	69ba      	ldr	r2, [r7, #24]
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f000 fa54 	bl	8007d24 <SPI_EndRxTxTransaction>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d002      	beq.n	8007888 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2220      	movs	r2, #32
 8007886:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10a      	bne.n	80078a6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007890:	2300      	movs	r3, #0
 8007892:	613b      	str	r3, [r7, #16]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	613b      	str	r3, [r7, #16]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	613b      	str	r3, [r7, #16]
 80078a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	77fb      	strb	r3, [r7, #31]
 80078b2:	e000      	b.n	80078b6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80078b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80078c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3720      	adds	r7, #32
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b08c      	sub	sp, #48	; 0x30
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
 80078dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80078de:	2301      	movs	r3, #1
 80078e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d101      	bne.n	80078f6 <HAL_SPI_TransmitReceive+0x26>
 80078f2:	2302      	movs	r3, #2
 80078f4:	e18a      	b.n	8007c0c <HAL_SPI_TransmitReceive+0x33c>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078fe:	f7fc f99b 	bl	8003c38 <HAL_GetTick>
 8007902:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800790a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007914:	887b      	ldrh	r3, [r7, #2]
 8007916:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007918:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800791c:	2b01      	cmp	r3, #1
 800791e:	d00f      	beq.n	8007940 <HAL_SPI_TransmitReceive+0x70>
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007926:	d107      	bne.n	8007938 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d103      	bne.n	8007938 <HAL_SPI_TransmitReceive+0x68>
 8007930:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007934:	2b04      	cmp	r3, #4
 8007936:	d003      	beq.n	8007940 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007938:	2302      	movs	r3, #2
 800793a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800793e:	e15b      	b.n	8007bf8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d005      	beq.n	8007952 <HAL_SPI_TransmitReceive+0x82>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d002      	beq.n	8007952 <HAL_SPI_TransmitReceive+0x82>
 800794c:	887b      	ldrh	r3, [r7, #2]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d103      	bne.n	800795a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007958:	e14e      	b.n	8007bf8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b04      	cmp	r3, #4
 8007964:	d003      	beq.n	800796e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2205      	movs	r2, #5
 800796a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	887a      	ldrh	r2, [r7, #2]
 800797e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	887a      	ldrh	r2, [r7, #2]
 8007984:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	887a      	ldrh	r2, [r7, #2]
 8007990:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	887a      	ldrh	r2, [r7, #2]
 8007996:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ae:	2b40      	cmp	r3, #64	; 0x40
 80079b0:	d007      	beq.n	80079c2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079ca:	d178      	bne.n	8007abe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <HAL_SPI_TransmitReceive+0x10a>
 80079d4:	8b7b      	ldrh	r3, [r7, #26]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d166      	bne.n	8007aa8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079de:	881a      	ldrh	r2, [r3, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ea:	1c9a      	adds	r2, r3, #2
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	3b01      	subs	r3, #1
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079fe:	e053      	b.n	8007aa8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f003 0302 	and.w	r3, r3, #2
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d11b      	bne.n	8007a46 <HAL_SPI_TransmitReceive+0x176>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d016      	beq.n	8007a46 <HAL_SPI_TransmitReceive+0x176>
 8007a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d113      	bne.n	8007a46 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a22:	881a      	ldrh	r2, [r3, #0]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2e:	1c9a      	adds	r2, r3, #2
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d119      	bne.n	8007a88 <HAL_SPI_TransmitReceive+0x1b8>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d014      	beq.n	8007a88 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68da      	ldr	r2, [r3, #12]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a68:	b292      	uxth	r2, r2
 8007a6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a70:	1c9a      	adds	r2, r3, #2
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a84:	2301      	movs	r3, #1
 8007a86:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a88:	f7fc f8d6 	bl	8003c38 <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d807      	bhi.n	8007aa8 <HAL_SPI_TransmitReceive+0x1d8>
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9e:	d003      	beq.n	8007aa8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007aa6:	e0a7      	b.n	8007bf8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1a6      	bne.n	8007a00 <HAL_SPI_TransmitReceive+0x130>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1a1      	bne.n	8007a00 <HAL_SPI_TransmitReceive+0x130>
 8007abc:	e07c      	b.n	8007bb8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d002      	beq.n	8007acc <HAL_SPI_TransmitReceive+0x1fc>
 8007ac6:	8b7b      	ldrh	r3, [r7, #26]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d16b      	bne.n	8007ba4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	330c      	adds	r3, #12
 8007ad6:	7812      	ldrb	r2, [r2, #0]
 8007ad8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ade:	1c5a      	adds	r2, r3, #1
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	3b01      	subs	r3, #1
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007af2:	e057      	b.n	8007ba4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f003 0302 	and.w	r3, r3, #2
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d11c      	bne.n	8007b3c <HAL_SPI_TransmitReceive+0x26c>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d017      	beq.n	8007b3c <HAL_SPI_TransmitReceive+0x26c>
 8007b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d114      	bne.n	8007b3c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	330c      	adds	r3, #12
 8007b1c:	7812      	ldrb	r2, [r2, #0]
 8007b1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b24:	1c5a      	adds	r2, r3, #1
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	3b01      	subs	r3, #1
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d119      	bne.n	8007b7e <HAL_SPI_TransmitReceive+0x2ae>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d014      	beq.n	8007b7e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68da      	ldr	r2, [r3, #12]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5e:	b2d2      	uxtb	r2, r2
 8007b60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b66:	1c5a      	adds	r2, r3, #1
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	3b01      	subs	r3, #1
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b7e:	f7fc f85b 	bl	8003c38 <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d803      	bhi.n	8007b96 <HAL_SPI_TransmitReceive+0x2c6>
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b94:	d102      	bne.n	8007b9c <HAL_SPI_TransmitReceive+0x2cc>
 8007b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d103      	bne.n	8007ba4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007ba2:	e029      	b.n	8007bf8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1a2      	bne.n	8007af4 <HAL_SPI_TransmitReceive+0x224>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d19d      	bne.n	8007af4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 f8b1 	bl	8007d24 <SPI_EndRxTxTransaction>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d006      	beq.n	8007bd6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007bd4:	e010      	b.n	8007bf8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10b      	bne.n	8007bf6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bde:	2300      	movs	r3, #0
 8007be0:	617b      	str	r3, [r7, #20]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	617b      	str	r3, [r7, #20]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	617b      	str	r3, [r7, #20]
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	e000      	b.n	8007bf8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007bf6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3730      	adds	r7, #48	; 0x30
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b088      	sub	sp, #32
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	603b      	str	r3, [r7, #0]
 8007c20:	4613      	mov	r3, r2
 8007c22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c24:	f7fc f808 	bl	8003c38 <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2c:	1a9b      	subs	r3, r3, r2
 8007c2e:	683a      	ldr	r2, [r7, #0]
 8007c30:	4413      	add	r3, r2
 8007c32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c34:	f7fc f800 	bl	8003c38 <HAL_GetTick>
 8007c38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c3a:	4b39      	ldr	r3, [pc, #228]	; (8007d20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	015b      	lsls	r3, r3, #5
 8007c40:	0d1b      	lsrs	r3, r3, #20
 8007c42:	69fa      	ldr	r2, [r7, #28]
 8007c44:	fb02 f303 	mul.w	r3, r2, r3
 8007c48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c4a:	e054      	b.n	8007cf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c52:	d050      	beq.n	8007cf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c54:	f7fb fff0 	bl	8003c38 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	69fa      	ldr	r2, [r7, #28]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d902      	bls.n	8007c6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d13d      	bne.n	8007ce6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	685a      	ldr	r2, [r3, #4]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c82:	d111      	bne.n	8007ca8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c8c:	d004      	beq.n	8007c98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c96:	d107      	bne.n	8007ca8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ca6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cb0:	d10f      	bne.n	8007cd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e017      	b.n	8007d16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689a      	ldr	r2, [r3, #8]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	4013      	ands	r3, r2
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	bf0c      	ite	eq
 8007d06:	2301      	moveq	r3, #1
 8007d08:	2300      	movne	r3, #0
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	79fb      	ldrb	r3, [r7, #7]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d19b      	bne.n	8007c4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3720      	adds	r7, #32
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	20000014 	.word	0x20000014

08007d24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af02      	add	r7, sp, #8
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2200      	movs	r2, #0
 8007d38:	2180      	movs	r1, #128	; 0x80
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f7ff ff6a 	bl	8007c14 <SPI_WaitFlagStateUntilTimeout>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d007      	beq.n	8007d56 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4a:	f043 0220 	orr.w	r2, r3, #32
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e000      	b.n	8007d58 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e041      	b.n	8007df6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d106      	bne.n	8007d8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7fb fc02 	bl	8003590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	4610      	mov	r0, r2
 8007da0:	f000 f93c 	bl	800801c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
	...

08007e00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d001      	beq.n	8007e18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e032      	b.n	8007e7e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a18      	ldr	r2, [pc, #96]	; (8007e88 <HAL_TIM_Base_Start+0x88>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d00e      	beq.n	8007e48 <HAL_TIM_Base_Start+0x48>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e32:	d009      	beq.n	8007e48 <HAL_TIM_Base_Start+0x48>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a14      	ldr	r2, [pc, #80]	; (8007e8c <HAL_TIM_Base_Start+0x8c>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d004      	beq.n	8007e48 <HAL_TIM_Base_Start+0x48>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a13      	ldr	r2, [pc, #76]	; (8007e90 <HAL_TIM_Base_Start+0x90>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d111      	bne.n	8007e6c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f003 0307 	and.w	r3, r3, #7
 8007e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2b06      	cmp	r3, #6
 8007e58:	d010      	beq.n	8007e7c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f042 0201 	orr.w	r2, r2, #1
 8007e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e6a:	e007      	b.n	8007e7c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f042 0201 	orr.w	r2, r2, #1
 8007e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bc80      	pop	{r7}
 8007e86:	4770      	bx	lr
 8007e88:	40012c00 	.word	0x40012c00
 8007e8c:	40000400 	.word	0x40000400
 8007e90:	40000800 	.word	0x40000800

08007e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d101      	bne.n	8007eac <HAL_TIM_ConfigClockSource+0x18>
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	e0b3      	b.n	8008014 <HAL_TIM_ConfigClockSource+0x180>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007eca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ed2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee4:	d03e      	beq.n	8007f64 <HAL_TIM_ConfigClockSource+0xd0>
 8007ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eea:	f200 8087 	bhi.w	8007ffc <HAL_TIM_ConfigClockSource+0x168>
 8007eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef2:	f000 8085 	beq.w	8008000 <HAL_TIM_ConfigClockSource+0x16c>
 8007ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007efa:	d87f      	bhi.n	8007ffc <HAL_TIM_ConfigClockSource+0x168>
 8007efc:	2b70      	cmp	r3, #112	; 0x70
 8007efe:	d01a      	beq.n	8007f36 <HAL_TIM_ConfigClockSource+0xa2>
 8007f00:	2b70      	cmp	r3, #112	; 0x70
 8007f02:	d87b      	bhi.n	8007ffc <HAL_TIM_ConfigClockSource+0x168>
 8007f04:	2b60      	cmp	r3, #96	; 0x60
 8007f06:	d050      	beq.n	8007faa <HAL_TIM_ConfigClockSource+0x116>
 8007f08:	2b60      	cmp	r3, #96	; 0x60
 8007f0a:	d877      	bhi.n	8007ffc <HAL_TIM_ConfigClockSource+0x168>
 8007f0c:	2b50      	cmp	r3, #80	; 0x50
 8007f0e:	d03c      	beq.n	8007f8a <HAL_TIM_ConfigClockSource+0xf6>
 8007f10:	2b50      	cmp	r3, #80	; 0x50
 8007f12:	d873      	bhi.n	8007ffc <HAL_TIM_ConfigClockSource+0x168>
 8007f14:	2b40      	cmp	r3, #64	; 0x40
 8007f16:	d058      	beq.n	8007fca <HAL_TIM_ConfigClockSource+0x136>
 8007f18:	2b40      	cmp	r3, #64	; 0x40
 8007f1a:	d86f      	bhi.n	8007ffc <HAL_TIM_ConfigClockSource+0x168>
 8007f1c:	2b30      	cmp	r3, #48	; 0x30
 8007f1e:	d064      	beq.n	8007fea <HAL_TIM_ConfigClockSource+0x156>
 8007f20:	2b30      	cmp	r3, #48	; 0x30
 8007f22:	d86b      	bhi.n	8007ffc <HAL_TIM_ConfigClockSource+0x168>
 8007f24:	2b20      	cmp	r3, #32
 8007f26:	d060      	beq.n	8007fea <HAL_TIM_ConfigClockSource+0x156>
 8007f28:	2b20      	cmp	r3, #32
 8007f2a:	d867      	bhi.n	8007ffc <HAL_TIM_ConfigClockSource+0x168>
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d05c      	beq.n	8007fea <HAL_TIM_ConfigClockSource+0x156>
 8007f30:	2b10      	cmp	r3, #16
 8007f32:	d05a      	beq.n	8007fea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007f34:	e062      	b.n	8007ffc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6818      	ldr	r0, [r3, #0]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	6899      	ldr	r1, [r3, #8]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	685a      	ldr	r2, [r3, #4]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	f000 f942 	bl	80081ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f58:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	609a      	str	r2, [r3, #8]
      break;
 8007f62:	e04e      	b.n	8008002 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6818      	ldr	r0, [r3, #0]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	6899      	ldr	r1, [r3, #8]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f000 f92b 	bl	80081ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	689a      	ldr	r2, [r3, #8]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f86:	609a      	str	r2, [r3, #8]
      break;
 8007f88:	e03b      	b.n	8008002 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6818      	ldr	r0, [r3, #0]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	6859      	ldr	r1, [r3, #4]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	461a      	mov	r2, r3
 8007f98:	f000 f8a2 	bl	80080e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2150      	movs	r1, #80	; 0x50
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 f8f9 	bl	800819a <TIM_ITRx_SetConfig>
      break;
 8007fa8:	e02b      	b.n	8008002 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6818      	ldr	r0, [r3, #0]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	6859      	ldr	r1, [r3, #4]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f000 f8c0 	bl	800813c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2160      	movs	r1, #96	; 0x60
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 f8e9 	bl	800819a <TIM_ITRx_SetConfig>
      break;
 8007fc8:	e01b      	b.n	8008002 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6818      	ldr	r0, [r3, #0]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	6859      	ldr	r1, [r3, #4]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	f000 f882 	bl	80080e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2140      	movs	r1, #64	; 0x40
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 f8d9 	bl	800819a <TIM_ITRx_SetConfig>
      break;
 8007fe8:	e00b      	b.n	8008002 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	4610      	mov	r0, r2
 8007ff6:	f000 f8d0 	bl	800819a <TIM_ITRx_SetConfig>
        break;
 8007ffa:	e002      	b.n	8008002 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007ffc:	bf00      	nop
 8007ffe:	e000      	b.n	8008002 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008000:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a29      	ldr	r2, [pc, #164]	; (80080d4 <TIM_Base_SetConfig+0xb8>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d00b      	beq.n	800804c <TIM_Base_SetConfig+0x30>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800803a:	d007      	beq.n	800804c <TIM_Base_SetConfig+0x30>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a26      	ldr	r2, [pc, #152]	; (80080d8 <TIM_Base_SetConfig+0xbc>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d003      	beq.n	800804c <TIM_Base_SetConfig+0x30>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a25      	ldr	r2, [pc, #148]	; (80080dc <TIM_Base_SetConfig+0xc0>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d108      	bne.n	800805e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	4313      	orrs	r3, r2
 800805c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a1c      	ldr	r2, [pc, #112]	; (80080d4 <TIM_Base_SetConfig+0xb8>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d00b      	beq.n	800807e <TIM_Base_SetConfig+0x62>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800806c:	d007      	beq.n	800807e <TIM_Base_SetConfig+0x62>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a19      	ldr	r2, [pc, #100]	; (80080d8 <TIM_Base_SetConfig+0xbc>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d003      	beq.n	800807e <TIM_Base_SetConfig+0x62>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a18      	ldr	r2, [pc, #96]	; (80080dc <TIM_Base_SetConfig+0xc0>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d108      	bne.n	8008090 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	4313      	orrs	r3, r2
 800808e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	4313      	orrs	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	689a      	ldr	r2, [r3, #8]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a07      	ldr	r2, [pc, #28]	; (80080d4 <TIM_Base_SetConfig+0xb8>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d103      	bne.n	80080c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	691a      	ldr	r2, [r3, #16]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	615a      	str	r2, [r3, #20]
}
 80080ca:	bf00      	nop
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bc80      	pop	{r7}
 80080d2:	4770      	bx	lr
 80080d4:	40012c00 	.word	0x40012c00
 80080d8:	40000400 	.word	0x40000400
 80080dc:	40000800 	.word	0x40000800

080080e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b087      	sub	sp, #28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	f023 0201 	bic.w	r2, r3, #1
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800810a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	693a      	ldr	r2, [r7, #16]
 8008112:	4313      	orrs	r3, r2
 8008114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f023 030a 	bic.w	r3, r3, #10
 800811c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	4313      	orrs	r3, r2
 8008124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	621a      	str	r2, [r3, #32]
}
 8008132:	bf00      	nop
 8008134:	371c      	adds	r7, #28
 8008136:	46bd      	mov	sp, r7
 8008138:	bc80      	pop	{r7}
 800813a:	4770      	bx	lr

0800813c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800813c:	b480      	push	{r7}
 800813e:	b087      	sub	sp, #28
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6a1b      	ldr	r3, [r3, #32]
 800814c:	f023 0210 	bic.w	r2, r3, #16
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008166:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	031b      	lsls	r3, r3, #12
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	4313      	orrs	r3, r2
 8008170:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008178:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	011b      	lsls	r3, r3, #4
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	4313      	orrs	r3, r2
 8008182:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	621a      	str	r2, [r3, #32]
}
 8008190:	bf00      	nop
 8008192:	371c      	adds	r7, #28
 8008194:	46bd      	mov	sp, r7
 8008196:	bc80      	pop	{r7}
 8008198:	4770      	bx	lr

0800819a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800819a:	b480      	push	{r7}
 800819c:	b085      	sub	sp, #20
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	f043 0307 	orr.w	r3, r3, #7
 80081bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	609a      	str	r2, [r3, #8]
}
 80081c4:	bf00      	nop
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bc80      	pop	{r7}
 80081cc:	4770      	bx	lr

080081ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b087      	sub	sp, #28
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	60f8      	str	r0, [r7, #12]
 80081d6:	60b9      	str	r1, [r7, #8]
 80081d8:	607a      	str	r2, [r7, #4]
 80081da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	021a      	lsls	r2, r3, #8
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	431a      	orrs	r2, r3
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	609a      	str	r2, [r3, #8]
}
 8008202:	bf00      	nop
 8008204:	371c      	adds	r7, #28
 8008206:	46bd      	mov	sp, r7
 8008208:	bc80      	pop	{r7}
 800820a:	4770      	bx	lr

0800820c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800821c:	2b01      	cmp	r3, #1
 800821e:	d101      	bne.n	8008224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008220:	2302      	movs	r3, #2
 8008222:	e046      	b.n	80082b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2202      	movs	r2, #2
 8008230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800824a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	4313      	orrs	r3, r2
 8008254:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a16      	ldr	r2, [pc, #88]	; (80082bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d00e      	beq.n	8008286 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008270:	d009      	beq.n	8008286 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a12      	ldr	r2, [pc, #72]	; (80082c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d004      	beq.n	8008286 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a10      	ldr	r2, [pc, #64]	; (80082c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d10c      	bne.n	80082a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800828c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	4313      	orrs	r3, r2
 8008296:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bc80      	pop	{r7}
 80082ba:	4770      	bx	lr
 80082bc:	40012c00 	.word	0x40012c00
 80082c0:	40000400 	.word	0x40000400
 80082c4:	40000800 	.word	0x40000800

080082c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80082c8:	b084      	sub	sp, #16
 80082ca:	b480      	push	{r7}
 80082cc:	b083      	sub	sp, #12
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	f107 0014 	add.w	r0, r7, #20
 80082d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bc80      	pop	{r7}
 80082e4:	b004      	add	sp, #16
 80082e6:	4770      	bx	lr

080082e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80082f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80082fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	b29a      	uxth	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	bc80      	pop	{r7}
 8008312:	4770      	bx	lr

08008314 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800831c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008320:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008328:	b29a      	uxth	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	b29b      	uxth	r3, r3
 800832e:	43db      	mvns	r3, r3
 8008330:	b29b      	uxth	r3, r3
 8008332:	4013      	ands	r3, r2
 8008334:	b29a      	uxth	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3714      	adds	r7, #20
 8008342:	46bd      	mov	sp, r7
 8008344:	bc80      	pop	{r7}
 8008346:	4770      	bx	lr

08008348 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	bc80      	pop	{r7}
 800835e:	4770      	bx	lr

08008360 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008360:	b084      	sub	sp, #16
 8008362:	b480      	push	{r7}
 8008364:	b083      	sub	sp, #12
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	f107 0014 	add.w	r0, r7, #20
 800836e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	bc80      	pop	{r7}
 800839c:	b004      	add	sp, #16
 800839e:	4770      	bx	lr

080083a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b09b      	sub	sp, #108	; 0x6c
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80083aa:	2300      	movs	r3, #0
 80083ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	881b      	ldrh	r3, [r3, #0]
 80083bc:	b29b      	uxth	r3, r3
 80083be:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80083c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	78db      	ldrb	r3, [r3, #3]
 80083ce:	2b03      	cmp	r3, #3
 80083d0:	d81f      	bhi.n	8008412 <USB_ActivateEndpoint+0x72>
 80083d2:	a201      	add	r2, pc, #4	; (adr r2, 80083d8 <USB_ActivateEndpoint+0x38>)
 80083d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d8:	080083e9 	.word	0x080083e9
 80083dc:	08008405 	.word	0x08008405
 80083e0:	0800841b 	.word	0x0800841b
 80083e4:	080083f7 	.word	0x080083f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80083e8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80083ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80083f0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80083f4:	e012      	b.n	800841c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80083f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80083fa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80083fe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008402:	e00b      	b.n	800841c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008404:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008408:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800840c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008410:	e004      	b.n	800841c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8008418:	e000      	b.n	800841c <USB_ActivateEndpoint+0x7c>
      break;
 800841a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	441a      	add	r2, r3
 8008426:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800842a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800842e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800843a:	b29b      	uxth	r3, r3
 800843c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4413      	add	r3, r2
 8008448:	881b      	ldrh	r3, [r3, #0]
 800844a:	b29b      	uxth	r3, r3
 800844c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008454:	b29a      	uxth	r2, r3
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	b29b      	uxth	r3, r3
 800845c:	4313      	orrs	r3, r2
 800845e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	441a      	add	r2, r3
 800846c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800847c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008480:	b29b      	uxth	r3, r3
 8008482:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	7b1b      	ldrb	r3, [r3, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	f040 8149 	bne.w	8008720 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	785b      	ldrb	r3, [r3, #1]
 8008492:	2b00      	cmp	r3, #0
 8008494:	f000 8084 	beq.w	80085a0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	617b      	str	r3, [r7, #20]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	461a      	mov	r2, r3
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	4413      	add	r3, r2
 80084aa:	617b      	str	r3, [r7, #20]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	011a      	lsls	r2, r3, #4
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084ba:	613b      	str	r3, [r7, #16]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	88db      	ldrh	r3, [r3, #6]
 80084c0:	085b      	lsrs	r3, r3, #1
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	005b      	lsls	r3, r3, #1
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	81fb      	strh	r3, [r7, #14]
 80084da:	89fb      	ldrh	r3, [r7, #14]
 80084dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d01b      	beq.n	800851c <USB_ActivateEndpoint+0x17c>
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	881b      	ldrh	r3, [r3, #0]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084fa:	81bb      	strh	r3, [r7, #12]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	441a      	add	r2, r3
 8008506:	89bb      	ldrh	r3, [r7, #12]
 8008508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800850c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008514:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008518:	b29b      	uxth	r3, r3
 800851a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	78db      	ldrb	r3, [r3, #3]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d020      	beq.n	8008566 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4413      	add	r3, r2
 800852e:	881b      	ldrh	r3, [r3, #0]
 8008530:	b29b      	uxth	r3, r3
 8008532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800853a:	813b      	strh	r3, [r7, #8]
 800853c:	893b      	ldrh	r3, [r7, #8]
 800853e:	f083 0320 	eor.w	r3, r3, #32
 8008542:	813b      	strh	r3, [r7, #8]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	441a      	add	r2, r3
 800854e:	893b      	ldrh	r3, [r7, #8]
 8008550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800855c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008560:	b29b      	uxth	r3, r3
 8008562:	8013      	strh	r3, [r2, #0]
 8008564:	e27f      	b.n	8008a66 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	b29b      	uxth	r3, r3
 8008574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800857c:	817b      	strh	r3, [r7, #10]
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	441a      	add	r2, r3
 8008588:	897b      	ldrh	r3, [r7, #10]
 800858a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800858e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800859a:	b29b      	uxth	r3, r3
 800859c:	8013      	strh	r3, [r2, #0]
 800859e:	e262      	b.n	8008a66 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	461a      	mov	r2, r3
 80085ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b0:	4413      	add	r3, r2
 80085b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	011a      	lsls	r2, r3, #4
 80085ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085bc:	4413      	add	r3, r2
 80085be:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80085c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	88db      	ldrh	r3, [r3, #6]
 80085c8:	085b      	lsrs	r3, r3, #1
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	005b      	lsls	r3, r3, #1
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	627b      	str	r3, [r7, #36]	; 0x24
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085de:	b29b      	uxth	r3, r3
 80085e0:	461a      	mov	r2, r3
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	4413      	add	r3, r2
 80085e6:	627b      	str	r3, [r7, #36]	; 0x24
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	011a      	lsls	r2, r3, #4
 80085ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f0:	4413      	add	r3, r2
 80085f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085f6:	623b      	str	r3, [r7, #32]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d112      	bne.n	8008626 <USB_ActivateEndpoint+0x286>
 8008600:	6a3b      	ldr	r3, [r7, #32]
 8008602:	881b      	ldrh	r3, [r3, #0]
 8008604:	b29b      	uxth	r3, r3
 8008606:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800860a:	b29a      	uxth	r2, r3
 800860c:	6a3b      	ldr	r3, [r7, #32]
 800860e:	801a      	strh	r2, [r3, #0]
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	881b      	ldrh	r3, [r3, #0]
 8008614:	b29b      	uxth	r3, r3
 8008616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800861a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800861e:	b29a      	uxth	r2, r3
 8008620:	6a3b      	ldr	r3, [r7, #32]
 8008622:	801a      	strh	r2, [r3, #0]
 8008624:	e02f      	b.n	8008686 <USB_ActivateEndpoint+0x2e6>
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	2b3e      	cmp	r3, #62	; 0x3e
 800862c:	d813      	bhi.n	8008656 <USB_ActivateEndpoint+0x2b6>
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	085b      	lsrs	r3, r3, #1
 8008634:	663b      	str	r3, [r7, #96]	; 0x60
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <USB_ActivateEndpoint+0x2a8>
 8008642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008644:	3301      	adds	r3, #1
 8008646:	663b      	str	r3, [r7, #96]	; 0x60
 8008648:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800864a:	b29b      	uxth	r3, r3
 800864c:	029b      	lsls	r3, r3, #10
 800864e:	b29a      	uxth	r2, r3
 8008650:	6a3b      	ldr	r3, [r7, #32]
 8008652:	801a      	strh	r2, [r3, #0]
 8008654:	e017      	b.n	8008686 <USB_ActivateEndpoint+0x2e6>
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	095b      	lsrs	r3, r3, #5
 800865c:	663b      	str	r3, [r7, #96]	; 0x60
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	f003 031f 	and.w	r3, r3, #31
 8008666:	2b00      	cmp	r3, #0
 8008668:	d102      	bne.n	8008670 <USB_ActivateEndpoint+0x2d0>
 800866a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800866c:	3b01      	subs	r3, #1
 800866e:	663b      	str	r3, [r7, #96]	; 0x60
 8008670:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008672:	b29b      	uxth	r3, r3
 8008674:	029b      	lsls	r3, r3, #10
 8008676:	b29b      	uxth	r3, r3
 8008678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800867c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008680:	b29a      	uxth	r2, r3
 8008682:	6a3b      	ldr	r3, [r7, #32]
 8008684:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	83fb      	strh	r3, [r7, #30]
 8008694:	8bfb      	ldrh	r3, [r7, #30]
 8008696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d01b      	beq.n	80086d6 <USB_ActivateEndpoint+0x336>
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	4413      	add	r3, r2
 80086a8:	881b      	ldrh	r3, [r3, #0]
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086b4:	83bb      	strh	r3, [r7, #28]
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	441a      	add	r2, r3
 80086c0:	8bbb      	ldrh	r3, [r7, #28]
 80086c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80086ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	881b      	ldrh	r3, [r3, #0]
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ec:	837b      	strh	r3, [r7, #26]
 80086ee:	8b7b      	ldrh	r3, [r7, #26]
 80086f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80086f4:	837b      	strh	r3, [r7, #26]
 80086f6:	8b7b      	ldrh	r3, [r7, #26]
 80086f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80086fc:	837b      	strh	r3, [r7, #26]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	441a      	add	r2, r3
 8008708:	8b7b      	ldrh	r3, [r7, #26]
 800870a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800870e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800871a:	b29b      	uxth	r3, r3
 800871c:	8013      	strh	r3, [r2, #0]
 800871e:	e1a2      	b.n	8008a66 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	4413      	add	r3, r2
 800872a:	881b      	ldrh	r3, [r3, #0]
 800872c:	b29b      	uxth	r3, r3
 800872e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008736:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	441a      	add	r2, r3
 8008744:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800874c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008750:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008758:	b29b      	uxth	r3, r3
 800875a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008766:	b29b      	uxth	r3, r3
 8008768:	461a      	mov	r2, r3
 800876a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800876c:	4413      	add	r3, r2
 800876e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	011a      	lsls	r2, r3, #4
 8008776:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008778:	4413      	add	r3, r2
 800877a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800877e:	657b      	str	r3, [r7, #84]	; 0x54
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	891b      	ldrh	r3, [r3, #8]
 8008784:	085b      	lsrs	r3, r3, #1
 8008786:	b29b      	uxth	r3, r3
 8008788:	005b      	lsls	r3, r3, #1
 800878a:	b29a      	uxth	r2, r3
 800878c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800878e:	801a      	strh	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	653b      	str	r3, [r7, #80]	; 0x50
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800879a:	b29b      	uxth	r3, r3
 800879c:	461a      	mov	r2, r3
 800879e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087a0:	4413      	add	r3, r2
 80087a2:	653b      	str	r3, [r7, #80]	; 0x50
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	011a      	lsls	r2, r3, #4
 80087aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087ac:	4413      	add	r3, r2
 80087ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80087b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	895b      	ldrh	r3, [r3, #10]
 80087b8:	085b      	lsrs	r3, r3, #1
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	005b      	lsls	r3, r3, #1
 80087be:	b29a      	uxth	r2, r3
 80087c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087c2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	785b      	ldrb	r3, [r3, #1]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f040 8091 	bne.w	80088f0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80087dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80087de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d01b      	beq.n	800881e <USB_ActivateEndpoint+0x47e>
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087fc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	441a      	add	r2, r3
 8008808:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800880a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800880e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008812:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800881a:	b29b      	uxth	r3, r3
 800881c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	873b      	strh	r3, [r7, #56]	; 0x38
 800882c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800882e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008832:	2b00      	cmp	r3, #0
 8008834:	d01b      	beq.n	800886e <USB_ActivateEndpoint+0x4ce>
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4413      	add	r3, r2
 8008840:	881b      	ldrh	r3, [r3, #0]
 8008842:	b29b      	uxth	r3, r3
 8008844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800884c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	441a      	add	r2, r3
 8008858:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800885a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800885e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008866:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800886a:	b29b      	uxth	r3, r3
 800886c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	b29b      	uxth	r3, r3
 800887c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008884:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008886:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008888:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800888c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800888e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008890:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008894:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	441a      	add	r2, r3
 80088a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80088a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	881b      	ldrh	r3, [r3, #0]
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088cc:	867b      	strh	r3, [r7, #50]	; 0x32
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	441a      	add	r2, r3
 80088d8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80088da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	8013      	strh	r3, [r2, #0]
 80088ee:	e0ba      	b.n	8008a66 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	4413      	add	r3, r2
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008900:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008908:	2b00      	cmp	r3, #0
 800890a:	d01d      	beq.n	8008948 <USB_ActivateEndpoint+0x5a8>
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	881b      	ldrh	r3, [r3, #0]
 8008918:	b29b      	uxth	r3, r3
 800891a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800891e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008922:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	441a      	add	r2, r3
 8008930:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800893c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008944:	b29b      	uxth	r3, r3
 8008946:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008958:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800895c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008960:	2b00      	cmp	r3, #0
 8008962:	d01d      	beq.n	80089a0 <USB_ActivateEndpoint+0x600>
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	4413      	add	r3, r2
 800896e:	881b      	ldrh	r3, [r3, #0]
 8008970:	b29b      	uxth	r3, r3
 8008972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800897a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	441a      	add	r2, r3
 8008988:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800898c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008990:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008998:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800899c:	b29b      	uxth	r3, r3
 800899e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	78db      	ldrb	r3, [r3, #3]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d024      	beq.n	80089f2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4413      	add	r3, r2
 80089b2:	881b      	ldrh	r3, [r3, #0]
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80089c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80089c6:	f083 0320 	eor.w	r3, r3, #32
 80089ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	441a      	add	r2, r3
 80089d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80089dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	8013      	strh	r3, [r2, #0]
 80089f0:	e01d      	b.n	8008a2e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	441a      	add	r2, r3
 8008a16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4413      	add	r3, r2
 8008a38:	881b      	ldrh	r3, [r3, #0]
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a44:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	441a      	add	r2, r3
 8008a50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008a66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	376c      	adds	r7, #108	; 0x6c
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bc80      	pop	{r7}
 8008a72:	4770      	bx	lr

08008a74 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b08d      	sub	sp, #52	; 0x34
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	7b1b      	ldrb	r3, [r3, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f040 808e 	bne.w	8008ba4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	785b      	ldrb	r3, [r3, #1]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d044      	beq.n	8008b1a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4413      	add	r3, r2
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	81bb      	strh	r3, [r7, #12]
 8008a9e:	89bb      	ldrh	r3, [r7, #12]
 8008aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d01b      	beq.n	8008ae0 <USB_DeactivateEndpoint+0x6c>
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	881b      	ldrh	r3, [r3, #0]
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008abe:	817b      	strh	r3, [r7, #10]
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	441a      	add	r2, r3
 8008aca:	897b      	ldrh	r3, [r7, #10]
 8008acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ad8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008af6:	813b      	strh	r3, [r7, #8]
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	441a      	add	r2, r3
 8008b02:	893b      	ldrh	r3, [r7, #8]
 8008b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	8013      	strh	r3, [r2, #0]
 8008b18:	e192      	b.n	8008e40 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4413      	add	r3, r2
 8008b24:	881b      	ldrh	r3, [r3, #0]
 8008b26:	827b      	strh	r3, [r7, #18]
 8008b28:	8a7b      	ldrh	r3, [r7, #18]
 8008b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d01b      	beq.n	8008b6a <USB_DeactivateEndpoint+0xf6>
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	881b      	ldrh	r3, [r3, #0]
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b48:	823b      	strh	r3, [r7, #16]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	441a      	add	r2, r3
 8008b54:	8a3b      	ldrh	r3, [r7, #16]
 8008b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4413      	add	r3, r2
 8008b74:	881b      	ldrh	r3, [r3, #0]
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b80:	81fb      	strh	r3, [r7, #14]
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	441a      	add	r2, r3
 8008b8c:	89fb      	ldrh	r3, [r7, #14]
 8008b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	8013      	strh	r3, [r2, #0]
 8008ba2:	e14d      	b.n	8008e40 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	785b      	ldrb	r3, [r3, #1]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f040 80a5 	bne.w	8008cf8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	881b      	ldrh	r3, [r3, #0]
 8008bba:	843b      	strh	r3, [r7, #32]
 8008bbc:	8c3b      	ldrh	r3, [r7, #32]
 8008bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d01b      	beq.n	8008bfe <USB_DeactivateEndpoint+0x18a>
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	881b      	ldrh	r3, [r3, #0]
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bdc:	83fb      	strh	r3, [r7, #30]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	441a      	add	r2, r3
 8008be8:	8bfb      	ldrh	r3, [r7, #30]
 8008bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	881b      	ldrh	r3, [r3, #0]
 8008c0a:	83bb      	strh	r3, [r7, #28]
 8008c0c:	8bbb      	ldrh	r3, [r7, #28]
 8008c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d01b      	beq.n	8008c4e <USB_DeactivateEndpoint+0x1da>
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	881b      	ldrh	r3, [r3, #0]
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c2c:	837b      	strh	r3, [r7, #26]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	441a      	add	r2, r3
 8008c38:	8b7b      	ldrh	r3, [r7, #26]
 8008c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	881b      	ldrh	r3, [r3, #0]
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c64:	833b      	strh	r3, [r7, #24]
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	441a      	add	r2, r3
 8008c70:	8b3b      	ldrh	r3, [r7, #24]
 8008c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4413      	add	r3, r2
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c9c:	82fb      	strh	r3, [r7, #22]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	441a      	add	r2, r3
 8008ca8:	8afb      	ldrh	r3, [r7, #22]
 8008caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cd4:	82bb      	strh	r3, [r7, #20]
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	441a      	add	r2, r3
 8008ce0:	8abb      	ldrh	r3, [r7, #20]
 8008ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	8013      	strh	r3, [r2, #0]
 8008cf6:	e0a3      	b.n	8008e40 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	881b      	ldrh	r3, [r3, #0]
 8008d04:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008d06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d01b      	beq.n	8008d48 <USB_DeactivateEndpoint+0x2d4>
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d26:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	441a      	add	r2, r3
 8008d32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008d34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	881b      	ldrh	r3, [r3, #0]
 8008d54:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008d56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d01b      	beq.n	8008d98 <USB_DeactivateEndpoint+0x324>
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d76:	853b      	strh	r3, [r7, #40]	; 0x28
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	441a      	add	r2, r3
 8008d82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	4413      	add	r3, r2
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dae:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	441a      	add	r2, r3
 8008dba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4413      	add	r3, r2
 8008dda:	881b      	ldrh	r3, [r3, #0]
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008de6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	441a      	add	r2, r3
 8008df2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	881b      	ldrh	r3, [r3, #0]
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e1e:	847b      	strh	r3, [r7, #34]	; 0x22
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	441a      	add	r2, r3
 8008e2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3734      	adds	r7, #52	; 0x34
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bc80      	pop	{r7}
 8008e4a:	4770      	bx	lr

08008e4c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b0cc      	sub	sp, #304	; 0x130
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	1d3b      	adds	r3, r7, #4
 8008e54:	6018      	str	r0, [r3, #0]
 8008e56:	463b      	mov	r3, r7
 8008e58:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e5a:	463b      	mov	r3, r7
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	785b      	ldrb	r3, [r3, #1]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	f040 872e 	bne.w	8009cc2 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008e66:	463b      	mov	r3, r7
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	699a      	ldr	r2, [r3, #24]
 8008e6c:	463b      	mov	r3, r7
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d905      	bls.n	8008e82 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008e76:	463b      	mov	r3, r7
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008e80:	e004      	b.n	8008e8c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008e82:	463b      	mov	r3, r7
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008e8c:	463b      	mov	r3, r7
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	7b1b      	ldrb	r3, [r3, #12]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d134      	bne.n	8008f00 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008e96:	463b      	mov	r3, r7
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6959      	ldr	r1, [r3, #20]
 8008e9c:	463b      	mov	r3, r7
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	88da      	ldrh	r2, [r3, #6]
 8008ea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	1d38      	adds	r0, r7, #4
 8008eaa:	6800      	ldr	r0, [r0, #0]
 8008eac:	f001 fc03 	bl	800a6b6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008eb0:	f107 0310 	add.w	r3, r7, #16
 8008eb4:	1d3a      	adds	r2, r7, #4
 8008eb6:	6812      	ldr	r2, [r2, #0]
 8008eb8:	601a      	str	r2, [r3, #0]
 8008eba:	1d3b      	adds	r3, r7, #4
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	f107 0310 	add.w	r3, r7, #16
 8008eca:	f107 0210 	add.w	r2, r7, #16
 8008ece:	6812      	ldr	r2, [r2, #0]
 8008ed0:	440a      	add	r2, r1
 8008ed2:	601a      	str	r2, [r3, #0]
 8008ed4:	463b      	mov	r3, r7
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	011a      	lsls	r2, r3, #4
 8008edc:	f107 0310 	add.w	r3, r7, #16
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008ee8:	f107 030c 	add.w	r3, r7, #12
 8008eec:	601a      	str	r2, [r3, #0]
 8008eee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	f107 030c 	add.w	r3, r7, #12
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	801a      	strh	r2, [r3, #0]
 8008efc:	f000 beac 	b.w	8009c58 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008f00:	463b      	mov	r3, r7
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	78db      	ldrb	r3, [r3, #3]
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	f040 838c 	bne.w	8009624 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008f0c:	463b      	mov	r3, r7
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6a1a      	ldr	r2, [r3, #32]
 8008f12:	463b      	mov	r3, r7
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	f240 8330 	bls.w	800957e <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008f1e:	1d3b      	adds	r3, r7, #4
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	463b      	mov	r3, r7
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f38:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008f3c:	1d3b      	adds	r3, r7, #4
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	463b      	mov	r3, r7
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	441a      	add	r2, r3
 8008f4a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f56:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008f62:	463b      	mov	r3, r7
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	6a1a      	ldr	r2, [r3, #32]
 8008f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f6c:	1ad2      	subs	r2, r2, r3
 8008f6e:	463b      	mov	r3, r7
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008f74:	1d3b      	adds	r3, r7, #4
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	463b      	mov	r3, r7
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	4413      	add	r3, r2
 8008f82:	881b      	ldrh	r3, [r3, #0]
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f000 819e 	beq.w	80092cc <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008f90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f94:	1d3a      	adds	r2, r7, #4
 8008f96:	6812      	ldr	r2, [r2, #0]
 8008f98:	601a      	str	r2, [r3, #0]
 8008f9a:	463b      	mov	r3, r7
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	785b      	ldrb	r3, [r3, #1]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d17a      	bne.n	800909a <USB_EPStartXfer+0x24e>
 8008fa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fa8:	1d3a      	adds	r2, r7, #4
 8008faa:	6812      	ldr	r2, [r2, #0]
 8008fac:	601a      	str	r2, [r3, #0]
 8008fae:	1d3b      	adds	r3, r7, #4
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	4619      	mov	r1, r3
 8008fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008fc2:	6812      	ldr	r2, [r2, #0]
 8008fc4:	440a      	add	r2, r1
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	463b      	mov	r3, r7
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	011a      	lsls	r2, r3, #4
 8008fd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fe0:	601a      	str	r2, [r3, #0]
 8008fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d11a      	bne.n	8009020 <USB_EPStartXfer+0x1d4>
 8008fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	881b      	ldrh	r3, [r3, #0]
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	801a      	strh	r2, [r3, #0]
 8009002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	881b      	ldrh	r3, [r3, #0]
 800900a:	b29b      	uxth	r3, r3
 800900c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009014:	b29a      	uxth	r2, r3
 8009016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	801a      	strh	r2, [r3, #0]
 800901e:	e062      	b.n	80090e6 <USB_EPStartXfer+0x29a>
 8009020:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009024:	2b3e      	cmp	r3, #62	; 0x3e
 8009026:	d819      	bhi.n	800905c <USB_EPStartXfer+0x210>
 8009028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800902c:	085b      	lsrs	r3, r3, #1
 800902e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009032:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b00      	cmp	r3, #0
 800903c:	d004      	beq.n	8009048 <USB_EPStartXfer+0x1fc>
 800903e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009042:	3301      	adds	r3, #1
 8009044:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009048:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800904c:	b29b      	uxth	r3, r3
 800904e:	029b      	lsls	r3, r3, #10
 8009050:	b29a      	uxth	r2, r3
 8009052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	801a      	strh	r2, [r3, #0]
 800905a:	e044      	b.n	80090e6 <USB_EPStartXfer+0x29a>
 800905c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009060:	095b      	lsrs	r3, r3, #5
 8009062:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800906a:	f003 031f 	and.w	r3, r3, #31
 800906e:	2b00      	cmp	r3, #0
 8009070:	d104      	bne.n	800907c <USB_EPStartXfer+0x230>
 8009072:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009076:	3b01      	subs	r3, #1
 8009078:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800907c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009080:	b29b      	uxth	r3, r3
 8009082:	029b      	lsls	r3, r3, #10
 8009084:	b29b      	uxth	r3, r3
 8009086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800908a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800908e:	b29a      	uxth	r2, r3
 8009090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	801a      	strh	r2, [r3, #0]
 8009098:	e025      	b.n	80090e6 <USB_EPStartXfer+0x29a>
 800909a:	463b      	mov	r3, r7
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	785b      	ldrb	r3, [r3, #1]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d120      	bne.n	80090e6 <USB_EPStartXfer+0x29a>
 80090a4:	1d3b      	adds	r3, r7, #4
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	4619      	mov	r1, r3
 80090b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80090b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80090b8:	6812      	ldr	r2, [r2, #0]
 80090ba:	440a      	add	r2, r1
 80090bc:	601a      	str	r2, [r3, #0]
 80090be:	463b      	mov	r3, r7
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	011a      	lsls	r2, r3, #4
 80090c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4413      	add	r3, r2
 80090ce:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80090d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80090d6:	601a      	str	r2, [r3, #0]
 80090d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090dc:	b29a      	uxth	r2, r3
 80090de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80090e6:	463b      	mov	r3, r7
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	895b      	ldrh	r3, [r3, #10]
 80090ec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090f0:	463b      	mov	r3, r7
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6959      	ldr	r1, [r3, #20]
 80090f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009100:	1d38      	adds	r0, r7, #4
 8009102:	6800      	ldr	r0, [r0, #0]
 8009104:	f001 fad7 	bl	800a6b6 <USB_WritePMA>
            ep->xfer_buff += len;
 8009108:	463b      	mov	r3, r7
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	695a      	ldr	r2, [r3, #20]
 800910e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009112:	441a      	add	r2, r3
 8009114:	463b      	mov	r3, r7
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800911a:	463b      	mov	r3, r7
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	6a1a      	ldr	r2, [r3, #32]
 8009120:	463b      	mov	r3, r7
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	429a      	cmp	r2, r3
 8009128:	d909      	bls.n	800913e <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800912a:	463b      	mov	r3, r7
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	6a1a      	ldr	r2, [r3, #32]
 8009130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009134:	1ad2      	subs	r2, r2, r3
 8009136:	463b      	mov	r3, r7
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	621a      	str	r2, [r3, #32]
 800913c:	e008      	b.n	8009150 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800913e:	463b      	mov	r3, r7
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6a1b      	ldr	r3, [r3, #32]
 8009144:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8009148:	463b      	mov	r3, r7
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2200      	movs	r2, #0
 800914e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009150:	463b      	mov	r3, r7
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	785b      	ldrb	r3, [r3, #1]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d17a      	bne.n	8009250 <USB_EPStartXfer+0x404>
 800915a:	f107 0318 	add.w	r3, r7, #24
 800915e:	1d3a      	adds	r2, r7, #4
 8009160:	6812      	ldr	r2, [r2, #0]
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	1d3b      	adds	r3, r7, #4
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800916c:	b29b      	uxth	r3, r3
 800916e:	4619      	mov	r1, r3
 8009170:	f107 0318 	add.w	r3, r7, #24
 8009174:	f107 0218 	add.w	r2, r7, #24
 8009178:	6812      	ldr	r2, [r2, #0]
 800917a:	440a      	add	r2, r1
 800917c:	601a      	str	r2, [r3, #0]
 800917e:	463b      	mov	r3, r7
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	011a      	lsls	r2, r3, #4
 8009186:	f107 0318 	add.w	r3, r7, #24
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4413      	add	r3, r2
 800918e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009192:	f107 0314 	add.w	r3, r7, #20
 8009196:	601a      	str	r2, [r3, #0]
 8009198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800919c:	2b00      	cmp	r3, #0
 800919e:	d11a      	bne.n	80091d6 <USB_EPStartXfer+0x38a>
 80091a0:	f107 0314 	add.w	r3, r7, #20
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	881b      	ldrh	r3, [r3, #0]
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	f107 0314 	add.w	r3, r7, #20
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	801a      	strh	r2, [r3, #0]
 80091b8:	f107 0314 	add.w	r3, r7, #20
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	881b      	ldrh	r3, [r3, #0]
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	f107 0314 	add.w	r3, r7, #20
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	801a      	strh	r2, [r3, #0]
 80091d4:	e067      	b.n	80092a6 <USB_EPStartXfer+0x45a>
 80091d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091da:	2b3e      	cmp	r3, #62	; 0x3e
 80091dc:	d819      	bhi.n	8009212 <USB_EPStartXfer+0x3c6>
 80091de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091e2:	085b      	lsrs	r3, r3, #1
 80091e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80091e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091ec:	f003 0301 	and.w	r3, r3, #1
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d004      	beq.n	80091fe <USB_EPStartXfer+0x3b2>
 80091f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80091f8:	3301      	adds	r3, #1
 80091fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80091fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009202:	b29b      	uxth	r3, r3
 8009204:	029b      	lsls	r3, r3, #10
 8009206:	b29a      	uxth	r2, r3
 8009208:	f107 0314 	add.w	r3, r7, #20
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	801a      	strh	r2, [r3, #0]
 8009210:	e049      	b.n	80092a6 <USB_EPStartXfer+0x45a>
 8009212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009216:	095b      	lsrs	r3, r3, #5
 8009218:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800921c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009220:	f003 031f 	and.w	r3, r3, #31
 8009224:	2b00      	cmp	r3, #0
 8009226:	d104      	bne.n	8009232 <USB_EPStartXfer+0x3e6>
 8009228:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800922c:	3b01      	subs	r3, #1
 800922e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009232:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009236:	b29b      	uxth	r3, r3
 8009238:	029b      	lsls	r3, r3, #10
 800923a:	b29b      	uxth	r3, r3
 800923c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009244:	b29a      	uxth	r2, r3
 8009246:	f107 0314 	add.w	r3, r7, #20
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	801a      	strh	r2, [r3, #0]
 800924e:	e02a      	b.n	80092a6 <USB_EPStartXfer+0x45a>
 8009250:	463b      	mov	r3, r7
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	785b      	ldrb	r3, [r3, #1]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d125      	bne.n	80092a6 <USB_EPStartXfer+0x45a>
 800925a:	f107 0320 	add.w	r3, r7, #32
 800925e:	1d3a      	adds	r2, r7, #4
 8009260:	6812      	ldr	r2, [r2, #0]
 8009262:	601a      	str	r2, [r3, #0]
 8009264:	1d3b      	adds	r3, r7, #4
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800926c:	b29b      	uxth	r3, r3
 800926e:	4619      	mov	r1, r3
 8009270:	f107 0320 	add.w	r3, r7, #32
 8009274:	f107 0220 	add.w	r2, r7, #32
 8009278:	6812      	ldr	r2, [r2, #0]
 800927a:	440a      	add	r2, r1
 800927c:	601a      	str	r2, [r3, #0]
 800927e:	463b      	mov	r3, r7
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	011a      	lsls	r2, r3, #4
 8009286:	f107 0320 	add.w	r3, r7, #32
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4413      	add	r3, r2
 800928e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009292:	f107 031c 	add.w	r3, r7, #28
 8009296:	601a      	str	r2, [r3, #0]
 8009298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800929c:	b29a      	uxth	r2, r3
 800929e:	f107 031c 	add.w	r3, r7, #28
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80092a6:	463b      	mov	r3, r7
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	891b      	ldrh	r3, [r3, #8]
 80092ac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092b0:	463b      	mov	r3, r7
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6959      	ldr	r1, [r3, #20]
 80092b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80092c0:	1d38      	adds	r0, r7, #4
 80092c2:	6800      	ldr	r0, [r0, #0]
 80092c4:	f001 f9f7 	bl	800a6b6 <USB_WritePMA>
 80092c8:	f000 bcc6 	b.w	8009c58 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80092cc:	463b      	mov	r3, r7
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	785b      	ldrb	r3, [r3, #1]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d164      	bne.n	80093a0 <USB_EPStartXfer+0x554>
 80092d6:	1d3b      	adds	r3, r7, #4
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	64bb      	str	r3, [r7, #72]	; 0x48
 80092dc:	1d3b      	adds	r3, r7, #4
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	461a      	mov	r2, r3
 80092e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092ea:	4413      	add	r3, r2
 80092ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80092ee:	463b      	mov	r3, r7
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	011a      	lsls	r2, r3, #4
 80092f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092f8:	4413      	add	r3, r2
 80092fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092fe:	647b      	str	r3, [r7, #68]	; 0x44
 8009300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009304:	2b00      	cmp	r3, #0
 8009306:	d112      	bne.n	800932e <USB_EPStartXfer+0x4e2>
 8009308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800930a:	881b      	ldrh	r3, [r3, #0]
 800930c:	b29b      	uxth	r3, r3
 800930e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009312:	b29a      	uxth	r2, r3
 8009314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009316:	801a      	strh	r2, [r3, #0]
 8009318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800931a:	881b      	ldrh	r3, [r3, #0]
 800931c:	b29b      	uxth	r3, r3
 800931e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009326:	b29a      	uxth	r2, r3
 8009328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800932a:	801a      	strh	r2, [r3, #0]
 800932c:	e057      	b.n	80093de <USB_EPStartXfer+0x592>
 800932e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009332:	2b3e      	cmp	r3, #62	; 0x3e
 8009334:	d817      	bhi.n	8009366 <USB_EPStartXfer+0x51a>
 8009336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800933a:	085b      	lsrs	r3, r3, #1
 800933c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009344:	f003 0301 	and.w	r3, r3, #1
 8009348:	2b00      	cmp	r3, #0
 800934a:	d004      	beq.n	8009356 <USB_EPStartXfer+0x50a>
 800934c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009350:	3301      	adds	r3, #1
 8009352:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009356:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800935a:	b29b      	uxth	r3, r3
 800935c:	029b      	lsls	r3, r3, #10
 800935e:	b29a      	uxth	r2, r3
 8009360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009362:	801a      	strh	r2, [r3, #0]
 8009364:	e03b      	b.n	80093de <USB_EPStartXfer+0x592>
 8009366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800936a:	095b      	lsrs	r3, r3, #5
 800936c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009374:	f003 031f 	and.w	r3, r3, #31
 8009378:	2b00      	cmp	r3, #0
 800937a:	d104      	bne.n	8009386 <USB_EPStartXfer+0x53a>
 800937c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009380:	3b01      	subs	r3, #1
 8009382:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009386:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800938a:	b29b      	uxth	r3, r3
 800938c:	029b      	lsls	r3, r3, #10
 800938e:	b29b      	uxth	r3, r3
 8009390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009398:	b29a      	uxth	r2, r3
 800939a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800939c:	801a      	strh	r2, [r3, #0]
 800939e:	e01e      	b.n	80093de <USB_EPStartXfer+0x592>
 80093a0:	463b      	mov	r3, r7
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	785b      	ldrb	r3, [r3, #1]
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d119      	bne.n	80093de <USB_EPStartXfer+0x592>
 80093aa:	1d3b      	adds	r3, r7, #4
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	653b      	str	r3, [r7, #80]	; 0x50
 80093b0:	1d3b      	adds	r3, r7, #4
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	461a      	mov	r2, r3
 80093bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093be:	4413      	add	r3, r2
 80093c0:	653b      	str	r3, [r7, #80]	; 0x50
 80093c2:	463b      	mov	r3, r7
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	011a      	lsls	r2, r3, #4
 80093ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093cc:	4413      	add	r3, r2
 80093ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80093d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093d8:	b29a      	uxth	r2, r3
 80093da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80093de:	463b      	mov	r3, r7
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	891b      	ldrh	r3, [r3, #8]
 80093e4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093e8:	463b      	mov	r3, r7
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6959      	ldr	r1, [r3, #20]
 80093ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80093f8:	1d38      	adds	r0, r7, #4
 80093fa:	6800      	ldr	r0, [r0, #0]
 80093fc:	f001 f95b 	bl	800a6b6 <USB_WritePMA>
            ep->xfer_buff += len;
 8009400:	463b      	mov	r3, r7
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	695a      	ldr	r2, [r3, #20]
 8009406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800940a:	441a      	add	r2, r3
 800940c:	463b      	mov	r3, r7
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009412:	463b      	mov	r3, r7
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6a1a      	ldr	r2, [r3, #32]
 8009418:	463b      	mov	r3, r7
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	429a      	cmp	r2, r3
 8009420:	d909      	bls.n	8009436 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8009422:	463b      	mov	r3, r7
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	6a1a      	ldr	r2, [r3, #32]
 8009428:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800942c:	1ad2      	subs	r2, r2, r3
 800942e:	463b      	mov	r3, r7
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	621a      	str	r2, [r3, #32]
 8009434:	e008      	b.n	8009448 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8009436:	463b      	mov	r3, r7
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	6a1b      	ldr	r3, [r3, #32]
 800943c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8009440:	463b      	mov	r3, r7
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2200      	movs	r2, #0
 8009446:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009448:	1d3b      	adds	r3, r7, #4
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	643b      	str	r3, [r7, #64]	; 0x40
 800944e:	463b      	mov	r3, r7
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	785b      	ldrb	r3, [r3, #1]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d164      	bne.n	8009522 <USB_EPStartXfer+0x6d6>
 8009458:	1d3b      	adds	r3, r7, #4
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	63bb      	str	r3, [r7, #56]	; 0x38
 800945e:	1d3b      	adds	r3, r7, #4
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009466:	b29b      	uxth	r3, r3
 8009468:	461a      	mov	r2, r3
 800946a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946c:	4413      	add	r3, r2
 800946e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009470:	463b      	mov	r3, r7
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	011a      	lsls	r2, r3, #4
 8009478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947a:	4413      	add	r3, r2
 800947c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009480:	637b      	str	r3, [r7, #52]	; 0x34
 8009482:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009486:	2b00      	cmp	r3, #0
 8009488:	d112      	bne.n	80094b0 <USB_EPStartXfer+0x664>
 800948a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800948c:	881b      	ldrh	r3, [r3, #0]
 800948e:	b29b      	uxth	r3, r3
 8009490:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009494:	b29a      	uxth	r2, r3
 8009496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009498:	801a      	strh	r2, [r3, #0]
 800949a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949c:	881b      	ldrh	r3, [r3, #0]
 800949e:	b29b      	uxth	r3, r3
 80094a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ac:	801a      	strh	r2, [r3, #0]
 80094ae:	e054      	b.n	800955a <USB_EPStartXfer+0x70e>
 80094b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094b4:	2b3e      	cmp	r3, #62	; 0x3e
 80094b6:	d817      	bhi.n	80094e8 <USB_EPStartXfer+0x69c>
 80094b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094bc:	085b      	lsrs	r3, r3, #1
 80094be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80094c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094c6:	f003 0301 	and.w	r3, r3, #1
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d004      	beq.n	80094d8 <USB_EPStartXfer+0x68c>
 80094ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80094d2:	3301      	adds	r3, #1
 80094d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80094d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80094dc:	b29b      	uxth	r3, r3
 80094de:	029b      	lsls	r3, r3, #10
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e4:	801a      	strh	r2, [r3, #0]
 80094e6:	e038      	b.n	800955a <USB_EPStartXfer+0x70e>
 80094e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094ec:	095b      	lsrs	r3, r3, #5
 80094ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80094f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094f6:	f003 031f 	and.w	r3, r3, #31
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d104      	bne.n	8009508 <USB_EPStartXfer+0x6bc>
 80094fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009502:	3b01      	subs	r3, #1
 8009504:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009508:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800950c:	b29b      	uxth	r3, r3
 800950e:	029b      	lsls	r3, r3, #10
 8009510:	b29b      	uxth	r3, r3
 8009512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800951a:	b29a      	uxth	r2, r3
 800951c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800951e:	801a      	strh	r2, [r3, #0]
 8009520:	e01b      	b.n	800955a <USB_EPStartXfer+0x70e>
 8009522:	463b      	mov	r3, r7
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	785b      	ldrb	r3, [r3, #1]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d116      	bne.n	800955a <USB_EPStartXfer+0x70e>
 800952c:	1d3b      	adds	r3, r7, #4
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009534:	b29b      	uxth	r3, r3
 8009536:	461a      	mov	r2, r3
 8009538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800953a:	4413      	add	r3, r2
 800953c:	643b      	str	r3, [r7, #64]	; 0x40
 800953e:	463b      	mov	r3, r7
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	011a      	lsls	r2, r3, #4
 8009546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009548:	4413      	add	r3, r2
 800954a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800954e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009554:	b29a      	uxth	r2, r3
 8009556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009558:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800955a:	463b      	mov	r3, r7
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	895b      	ldrh	r3, [r3, #10]
 8009560:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009564:	463b      	mov	r3, r7
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6959      	ldr	r1, [r3, #20]
 800956a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800956e:	b29b      	uxth	r3, r3
 8009570:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009574:	1d38      	adds	r0, r7, #4
 8009576:	6800      	ldr	r0, [r0, #0]
 8009578:	f001 f89d 	bl	800a6b6 <USB_WritePMA>
 800957c:	e36c      	b.n	8009c58 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800957e:	463b      	mov	r3, r7
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6a1b      	ldr	r3, [r3, #32]
 8009584:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009588:	1d3b      	adds	r3, r7, #4
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	463b      	mov	r3, r7
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4413      	add	r3, r2
 8009596:	881b      	ldrh	r3, [r3, #0]
 8009598:	b29b      	uxth	r3, r3
 800959a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800959e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095a2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80095a6:	1d3b      	adds	r3, r7, #4
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	463b      	mov	r3, r7
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	441a      	add	r2, r3
 80095b4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80095b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80095cc:	1d3b      	adds	r3, r7, #4
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095d2:	1d3b      	adds	r3, r7, #4
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095da:	b29b      	uxth	r3, r3
 80095dc:	461a      	mov	r2, r3
 80095de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095e0:	4413      	add	r3, r2
 80095e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095e4:	463b      	mov	r3, r7
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	011a      	lsls	r2, r3, #4
 80095ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095ee:	4413      	add	r3, r2
 80095f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80095f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80095f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095fe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009600:	463b      	mov	r3, r7
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	891b      	ldrh	r3, [r3, #8]
 8009606:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800960a:	463b      	mov	r3, r7
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	6959      	ldr	r1, [r3, #20]
 8009610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009614:	b29b      	uxth	r3, r3
 8009616:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800961a:	1d38      	adds	r0, r7, #4
 800961c:	6800      	ldr	r0, [r0, #0]
 800961e:	f001 f84a 	bl	800a6b6 <USB_WritePMA>
 8009622:	e319      	b.n	8009c58 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8009624:	1d3b      	adds	r3, r7, #4
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	463b      	mov	r3, r7
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4413      	add	r3, r2
 8009632:	881b      	ldrh	r3, [r3, #0]
 8009634:	b29b      	uxth	r3, r3
 8009636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800963a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800963e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009642:	1d3b      	adds	r3, r7, #4
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	463b      	mov	r3, r7
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	441a      	add	r2, r3
 8009650:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800965c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009664:	b29b      	uxth	r3, r3
 8009666:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009668:	463b      	mov	r3, r7
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6a1a      	ldr	r2, [r3, #32]
 800966e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009672:	1ad2      	subs	r2, r2, r3
 8009674:	463b      	mov	r3, r7
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800967a:	1d3b      	adds	r3, r7, #4
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	463b      	mov	r3, r7
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	881b      	ldrh	r3, [r3, #0]
 800968a:	b29b      	uxth	r3, r3
 800968c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009690:	2b00      	cmp	r3, #0
 8009692:	f000 8162 	beq.w	800995a <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009696:	1d3b      	adds	r3, r7, #4
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800969e:	463b      	mov	r3, r7
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	785b      	ldrb	r3, [r3, #1]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d164      	bne.n	8009772 <USB_EPStartXfer+0x926>
 80096a8:	1d3b      	adds	r3, r7, #4
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80096ae:	1d3b      	adds	r3, r7, #4
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	461a      	mov	r2, r3
 80096ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096bc:	4413      	add	r3, r2
 80096be:	67bb      	str	r3, [r7, #120]	; 0x78
 80096c0:	463b      	mov	r3, r7
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	011a      	lsls	r2, r3, #4
 80096c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096ca:	4413      	add	r3, r2
 80096cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80096d0:	677b      	str	r3, [r7, #116]	; 0x74
 80096d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d112      	bne.n	8009700 <USB_EPStartXfer+0x8b4>
 80096da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096dc:	881b      	ldrh	r3, [r3, #0]
 80096de:	b29b      	uxth	r3, r3
 80096e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096e8:	801a      	strh	r2, [r3, #0]
 80096ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096ec:	881b      	ldrh	r3, [r3, #0]
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096fc:	801a      	strh	r2, [r3, #0]
 80096fe:	e057      	b.n	80097b0 <USB_EPStartXfer+0x964>
 8009700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009704:	2b3e      	cmp	r3, #62	; 0x3e
 8009706:	d817      	bhi.n	8009738 <USB_EPStartXfer+0x8ec>
 8009708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800970c:	085b      	lsrs	r3, r3, #1
 800970e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009712:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009716:	f003 0301 	and.w	r3, r3, #1
 800971a:	2b00      	cmp	r3, #0
 800971c:	d004      	beq.n	8009728 <USB_EPStartXfer+0x8dc>
 800971e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009722:	3301      	adds	r3, #1
 8009724:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009728:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800972c:	b29b      	uxth	r3, r3
 800972e:	029b      	lsls	r3, r3, #10
 8009730:	b29a      	uxth	r2, r3
 8009732:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009734:	801a      	strh	r2, [r3, #0]
 8009736:	e03b      	b.n	80097b0 <USB_EPStartXfer+0x964>
 8009738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800973c:	095b      	lsrs	r3, r3, #5
 800973e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009746:	f003 031f 	and.w	r3, r3, #31
 800974a:	2b00      	cmp	r3, #0
 800974c:	d104      	bne.n	8009758 <USB_EPStartXfer+0x90c>
 800974e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009752:	3b01      	subs	r3, #1
 8009754:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009758:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800975c:	b29b      	uxth	r3, r3
 800975e:	029b      	lsls	r3, r3, #10
 8009760:	b29b      	uxth	r3, r3
 8009762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800976a:	b29a      	uxth	r2, r3
 800976c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800976e:	801a      	strh	r2, [r3, #0]
 8009770:	e01e      	b.n	80097b0 <USB_EPStartXfer+0x964>
 8009772:	463b      	mov	r3, r7
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	785b      	ldrb	r3, [r3, #1]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d119      	bne.n	80097b0 <USB_EPStartXfer+0x964>
 800977c:	1d3b      	adds	r3, r7, #4
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009784:	b29b      	uxth	r3, r3
 8009786:	461a      	mov	r2, r3
 8009788:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800978c:	4413      	add	r3, r2
 800978e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009792:	463b      	mov	r3, r7
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	011a      	lsls	r2, r3, #4
 800979a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800979e:	4413      	add	r3, r2
 80097a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80097a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80097a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80097b0:	463b      	mov	r3, r7
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	895b      	ldrh	r3, [r3, #10]
 80097b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097ba:	463b      	mov	r3, r7
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	6959      	ldr	r1, [r3, #20]
 80097c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80097ca:	1d38      	adds	r0, r7, #4
 80097cc:	6800      	ldr	r0, [r0, #0]
 80097ce:	f000 ff72 	bl	800a6b6 <USB_WritePMA>
          ep->xfer_buff += len;
 80097d2:	463b      	mov	r3, r7
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	695a      	ldr	r2, [r3, #20]
 80097d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097dc:	441a      	add	r2, r3
 80097de:	463b      	mov	r3, r7
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80097e4:	463b      	mov	r3, r7
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	6a1a      	ldr	r2, [r3, #32]
 80097ea:	463b      	mov	r3, r7
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d909      	bls.n	8009808 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80097f4:	463b      	mov	r3, r7
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	6a1a      	ldr	r2, [r3, #32]
 80097fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097fe:	1ad2      	subs	r2, r2, r3
 8009800:	463b      	mov	r3, r7
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	621a      	str	r2, [r3, #32]
 8009806:	e008      	b.n	800981a <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8009808:	463b      	mov	r3, r7
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6a1b      	ldr	r3, [r3, #32]
 800980e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009812:	463b      	mov	r3, r7
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2200      	movs	r2, #0
 8009818:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800981a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800981e:	2b00      	cmp	r3, #0
 8009820:	f000 821a 	beq.w	8009c58 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009824:	463b      	mov	r3, r7
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	785b      	ldrb	r3, [r3, #1]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d164      	bne.n	80098f8 <USB_EPStartXfer+0xaac>
 800982e:	1d3b      	adds	r3, r7, #4
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	66bb      	str	r3, [r7, #104]	; 0x68
 8009834:	1d3b      	adds	r3, r7, #4
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800983c:	b29b      	uxth	r3, r3
 800983e:	461a      	mov	r2, r3
 8009840:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009842:	4413      	add	r3, r2
 8009844:	66bb      	str	r3, [r7, #104]	; 0x68
 8009846:	463b      	mov	r3, r7
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	011a      	lsls	r2, r3, #4
 800984e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009850:	4413      	add	r3, r2
 8009852:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009856:	667b      	str	r3, [r7, #100]	; 0x64
 8009858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800985c:	2b00      	cmp	r3, #0
 800985e:	d112      	bne.n	8009886 <USB_EPStartXfer+0xa3a>
 8009860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	b29b      	uxth	r3, r3
 8009866:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800986a:	b29a      	uxth	r2, r3
 800986c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800986e:	801a      	strh	r2, [r3, #0]
 8009870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009872:	881b      	ldrh	r3, [r3, #0]
 8009874:	b29b      	uxth	r3, r3
 8009876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800987a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800987e:	b29a      	uxth	r2, r3
 8009880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009882:	801a      	strh	r2, [r3, #0]
 8009884:	e057      	b.n	8009936 <USB_EPStartXfer+0xaea>
 8009886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800988a:	2b3e      	cmp	r3, #62	; 0x3e
 800988c:	d817      	bhi.n	80098be <USB_EPStartXfer+0xa72>
 800988e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009892:	085b      	lsrs	r3, r3, #1
 8009894:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800989c:	f003 0301 	and.w	r3, r3, #1
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d004      	beq.n	80098ae <USB_EPStartXfer+0xa62>
 80098a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a8:	3301      	adds	r3, #1
 80098aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80098ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	029b      	lsls	r3, r3, #10
 80098b6:	b29a      	uxth	r2, r3
 80098b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098ba:	801a      	strh	r2, [r3, #0]
 80098bc:	e03b      	b.n	8009936 <USB_EPStartXfer+0xaea>
 80098be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098c2:	095b      	lsrs	r3, r3, #5
 80098c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80098c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098cc:	f003 031f 	and.w	r3, r3, #31
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d104      	bne.n	80098de <USB_EPStartXfer+0xa92>
 80098d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098d8:	3b01      	subs	r3, #1
 80098da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80098de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	029b      	lsls	r3, r3, #10
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098f4:	801a      	strh	r2, [r3, #0]
 80098f6:	e01e      	b.n	8009936 <USB_EPStartXfer+0xaea>
 80098f8:	463b      	mov	r3, r7
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	785b      	ldrb	r3, [r3, #1]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d119      	bne.n	8009936 <USB_EPStartXfer+0xaea>
 8009902:	1d3b      	adds	r3, r7, #4
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	673b      	str	r3, [r7, #112]	; 0x70
 8009908:	1d3b      	adds	r3, r7, #4
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009910:	b29b      	uxth	r3, r3
 8009912:	461a      	mov	r2, r3
 8009914:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009916:	4413      	add	r3, r2
 8009918:	673b      	str	r3, [r7, #112]	; 0x70
 800991a:	463b      	mov	r3, r7
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	011a      	lsls	r2, r3, #4
 8009922:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009924:	4413      	add	r3, r2
 8009926:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800992a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800992c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009930:	b29a      	uxth	r2, r3
 8009932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009934:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009936:	463b      	mov	r3, r7
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	891b      	ldrh	r3, [r3, #8]
 800993c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009940:	463b      	mov	r3, r7
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6959      	ldr	r1, [r3, #20]
 8009946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800994a:	b29b      	uxth	r3, r3
 800994c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009950:	1d38      	adds	r0, r7, #4
 8009952:	6800      	ldr	r0, [r0, #0]
 8009954:	f000 feaf 	bl	800a6b6 <USB_WritePMA>
 8009958:	e17e      	b.n	8009c58 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800995a:	463b      	mov	r3, r7
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	785b      	ldrb	r3, [r3, #1]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d16f      	bne.n	8009a44 <USB_EPStartXfer+0xbf8>
 8009964:	1d3b      	adds	r3, r7, #4
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800996c:	1d3b      	adds	r3, r7, #4
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009974:	b29b      	uxth	r3, r3
 8009976:	461a      	mov	r2, r3
 8009978:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800997c:	4413      	add	r3, r2
 800997e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009982:	463b      	mov	r3, r7
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	011a      	lsls	r2, r3, #4
 800998a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800998e:	4413      	add	r3, r2
 8009990:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009998:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800999c:	2b00      	cmp	r3, #0
 800999e:	d116      	bne.n	80099ce <USB_EPStartXfer+0xb82>
 80099a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099a4:	881b      	ldrh	r3, [r3, #0]
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099b2:	801a      	strh	r2, [r3, #0]
 80099b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099b8:	881b      	ldrh	r3, [r3, #0]
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099ca:	801a      	strh	r2, [r3, #0]
 80099cc:	e05f      	b.n	8009a8e <USB_EPStartXfer+0xc42>
 80099ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099d2:	2b3e      	cmp	r3, #62	; 0x3e
 80099d4:	d818      	bhi.n	8009a08 <USB_EPStartXfer+0xbbc>
 80099d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099da:	085b      	lsrs	r3, r3, #1
 80099dc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80099e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099e4:	f003 0301 	and.w	r3, r3, #1
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d004      	beq.n	80099f6 <USB_EPStartXfer+0xbaa>
 80099ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80099f0:	3301      	adds	r3, #1
 80099f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80099f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	029b      	lsls	r3, r3, #10
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a04:	801a      	strh	r2, [r3, #0]
 8009a06:	e042      	b.n	8009a8e <USB_EPStartXfer+0xc42>
 8009a08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a0c:	095b      	lsrs	r3, r3, #5
 8009a0e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a16:	f003 031f 	and.w	r3, r3, #31
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d104      	bne.n	8009a28 <USB_EPStartXfer+0xbdc>
 8009a1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009a22:	3b01      	subs	r3, #1
 8009a24:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009a28:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	029b      	lsls	r3, r3, #10
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a40:	801a      	strh	r2, [r3, #0]
 8009a42:	e024      	b.n	8009a8e <USB_EPStartXfer+0xc42>
 8009a44:	463b      	mov	r3, r7
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	785b      	ldrb	r3, [r3, #1]
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d11f      	bne.n	8009a8e <USB_EPStartXfer+0xc42>
 8009a4e:	1d3b      	adds	r3, r7, #4
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009a56:	1d3b      	adds	r3, r7, #4
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	461a      	mov	r2, r3
 8009a62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a66:	4413      	add	r3, r2
 8009a68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009a6c:	463b      	mov	r3, r7
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	011a      	lsls	r2, r3, #4
 8009a74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a78:	4413      	add	r3, r2
 8009a7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a8c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009a8e:	463b      	mov	r3, r7
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	891b      	ldrh	r3, [r3, #8]
 8009a94:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a98:	463b      	mov	r3, r7
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6959      	ldr	r1, [r3, #20]
 8009a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009aa8:	1d38      	adds	r0, r7, #4
 8009aaa:	6800      	ldr	r0, [r0, #0]
 8009aac:	f000 fe03 	bl	800a6b6 <USB_WritePMA>
          ep->xfer_buff += len;
 8009ab0:	463b      	mov	r3, r7
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	695a      	ldr	r2, [r3, #20]
 8009ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aba:	441a      	add	r2, r3
 8009abc:	463b      	mov	r3, r7
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009ac2:	463b      	mov	r3, r7
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6a1a      	ldr	r2, [r3, #32]
 8009ac8:	463b      	mov	r3, r7
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d909      	bls.n	8009ae6 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8009ad2:	463b      	mov	r3, r7
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6a1a      	ldr	r2, [r3, #32]
 8009ad8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009adc:	1ad2      	subs	r2, r2, r3
 8009ade:	463b      	mov	r3, r7
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	621a      	str	r2, [r3, #32]
 8009ae4:	e008      	b.n	8009af8 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8009ae6:	463b      	mov	r3, r7
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	6a1b      	ldr	r3, [r3, #32]
 8009aec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009af0:	463b      	mov	r3, r7
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2200      	movs	r2, #0
 8009af6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f000 80ab 	beq.w	8009c58 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009b02:	1d3b      	adds	r3, r7, #4
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b0a:	463b      	mov	r3, r7
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	785b      	ldrb	r3, [r3, #1]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d16f      	bne.n	8009bf4 <USB_EPStartXfer+0xda8>
 8009b14:	1d3b      	adds	r3, r7, #4
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009b1c:	1d3b      	adds	r3, r7, #4
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	461a      	mov	r2, r3
 8009b28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009b32:	463b      	mov	r3, r7
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	011a      	lsls	r2, r3, #4
 8009b3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b3e:	4413      	add	r3, r2
 8009b40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d116      	bne.n	8009b7e <USB_EPStartXfer+0xd32>
 8009b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b54:	881b      	ldrh	r3, [r3, #0]
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b62:	801a      	strh	r2, [r3, #0]
 8009b64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b68:	881b      	ldrh	r3, [r3, #0]
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b7a:	801a      	strh	r2, [r3, #0]
 8009b7c:	e05b      	b.n	8009c36 <USB_EPStartXfer+0xdea>
 8009b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b82:	2b3e      	cmp	r3, #62	; 0x3e
 8009b84:	d818      	bhi.n	8009bb8 <USB_EPStartXfer+0xd6c>
 8009b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b8a:	085b      	lsrs	r3, r3, #1
 8009b8c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b94:	f003 0301 	and.w	r3, r3, #1
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d004      	beq.n	8009ba6 <USB_EPStartXfer+0xd5a>
 8009b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	029b      	lsls	r3, r3, #10
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009bb4:	801a      	strh	r2, [r3, #0]
 8009bb6:	e03e      	b.n	8009c36 <USB_EPStartXfer+0xdea>
 8009bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bbc:	095b      	lsrs	r3, r3, #5
 8009bbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bc6:	f003 031f 	and.w	r3, r3, #31
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d104      	bne.n	8009bd8 <USB_EPStartXfer+0xd8c>
 8009bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	029b      	lsls	r3, r3, #10
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009bf0:	801a      	strh	r2, [r3, #0]
 8009bf2:	e020      	b.n	8009c36 <USB_EPStartXfer+0xdea>
 8009bf4:	463b      	mov	r3, r7
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	785b      	ldrb	r3, [r3, #1]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d11b      	bne.n	8009c36 <USB_EPStartXfer+0xdea>
 8009bfe:	1d3b      	adds	r3, r7, #4
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	461a      	mov	r2, r3
 8009c0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c0e:	4413      	add	r3, r2
 8009c10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c14:	463b      	mov	r3, r7
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	011a      	lsls	r2, r3, #4
 8009c1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c20:	4413      	add	r3, r2
 8009c22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009c36:	463b      	mov	r3, r7
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	895b      	ldrh	r3, [r3, #10]
 8009c3c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c40:	463b      	mov	r3, r7
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6959      	ldr	r1, [r3, #20]
 8009c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009c50:	1d38      	adds	r0, r7, #4
 8009c52:	6800      	ldr	r0, [r0, #0]
 8009c54:	f000 fd2f 	bl	800a6b6 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009c58:	1d3b      	adds	r3, r7, #4
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	463b      	mov	r3, r7
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4413      	add	r3, r2
 8009c66:	881b      	ldrh	r3, [r3, #0]
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	f107 020a 	add.w	r2, r7, #10
 8009c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c76:	8013      	strh	r3, [r2, #0]
 8009c78:	f107 030a 	add.w	r3, r7, #10
 8009c7c:	f107 020a 	add.w	r2, r7, #10
 8009c80:	8812      	ldrh	r2, [r2, #0]
 8009c82:	f082 0210 	eor.w	r2, r2, #16
 8009c86:	801a      	strh	r2, [r3, #0]
 8009c88:	f107 030a 	add.w	r3, r7, #10
 8009c8c:	f107 020a 	add.w	r2, r7, #10
 8009c90:	8812      	ldrh	r2, [r2, #0]
 8009c92:	f082 0220 	eor.w	r2, r2, #32
 8009c96:	801a      	strh	r2, [r3, #0]
 8009c98:	1d3b      	adds	r3, r7, #4
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	463b      	mov	r3, r7
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	441a      	add	r2, r3
 8009ca6:	f107 030a 	add.w	r3, r7, #10
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	8013      	strh	r3, [r2, #0]
 8009cc0:	e3b5      	b.n	800a42e <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009cc2:	463b      	mov	r3, r7
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	7b1b      	ldrb	r3, [r3, #12]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f040 8090 	bne.w	8009dee <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009cce:	463b      	mov	r3, r7
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	699a      	ldr	r2, [r3, #24]
 8009cd4:	463b      	mov	r3, r7
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d90e      	bls.n	8009cfc <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8009cde:	463b      	mov	r3, r7
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009ce8:	463b      	mov	r3, r7
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	699a      	ldr	r2, [r3, #24]
 8009cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cf2:	1ad2      	subs	r2, r2, r3
 8009cf4:	463b      	mov	r3, r7
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	619a      	str	r2, [r3, #24]
 8009cfa:	e008      	b.n	8009d0e <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8009cfc:	463b      	mov	r3, r7
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009d06:	463b      	mov	r3, r7
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009d0e:	1d3b      	adds	r3, r7, #4
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d16:	1d3b      	adds	r3, r7, #4
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	461a      	mov	r2, r3
 8009d22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009d26:	4413      	add	r3, r2
 8009d28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d2c:	463b      	mov	r3, r7
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	011a      	lsls	r2, r3, #4
 8009d34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009d38:	4413      	add	r3, r2
 8009d3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d116      	bne.n	8009d78 <USB_EPStartXfer+0xf2c>
 8009d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d4e:	881b      	ldrh	r3, [r3, #0]
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d5c:	801a      	strh	r2, [r3, #0]
 8009d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d62:	881b      	ldrh	r3, [r3, #0]
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d74:	801a      	strh	r2, [r3, #0]
 8009d76:	e32c      	b.n	800a3d2 <USB_EPStartXfer+0x1586>
 8009d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d7c:	2b3e      	cmp	r3, #62	; 0x3e
 8009d7e:	d818      	bhi.n	8009db2 <USB_EPStartXfer+0xf66>
 8009d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d84:	085b      	lsrs	r3, r3, #1
 8009d86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d8e:	f003 0301 	and.w	r3, r3, #1
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d004      	beq.n	8009da0 <USB_EPStartXfer+0xf54>
 8009d96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009da0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	029b      	lsls	r3, r3, #10
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009dae:	801a      	strh	r2, [r3, #0]
 8009db0:	e30f      	b.n	800a3d2 <USB_EPStartXfer+0x1586>
 8009db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009db6:	095b      	lsrs	r3, r3, #5
 8009db8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dc0:	f003 031f 	and.w	r3, r3, #31
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d104      	bne.n	8009dd2 <USB_EPStartXfer+0xf86>
 8009dc8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009dd2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	029b      	lsls	r3, r3, #10
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009dea:	801a      	strh	r2, [r3, #0]
 8009dec:	e2f1      	b.n	800a3d2 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009dee:	463b      	mov	r3, r7
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	78db      	ldrb	r3, [r3, #3]
 8009df4:	2b02      	cmp	r3, #2
 8009df6:	f040 818f 	bne.w	800a118 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009dfa:	463b      	mov	r3, r7
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	785b      	ldrb	r3, [r3, #1]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d175      	bne.n	8009ef0 <USB_EPStartXfer+0x10a4>
 8009e04:	1d3b      	adds	r3, r7, #4
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e0c:	1d3b      	adds	r3, r7, #4
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	461a      	mov	r2, r3
 8009e18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e1c:	4413      	add	r3, r2
 8009e1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e22:	463b      	mov	r3, r7
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	011a      	lsls	r2, r3, #4
 8009e2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e2e:	4413      	add	r3, r2
 8009e30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e38:	463b      	mov	r3, r7
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d116      	bne.n	8009e70 <USB_EPStartXfer+0x1024>
 8009e42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e46:	881b      	ldrh	r3, [r3, #0]
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e54:	801a      	strh	r2, [r3, #0]
 8009e56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e5a:	881b      	ldrh	r3, [r3, #0]
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e6c:	801a      	strh	r2, [r3, #0]
 8009e6e:	e065      	b.n	8009f3c <USB_EPStartXfer+0x10f0>
 8009e70:	463b      	mov	r3, r7
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	2b3e      	cmp	r3, #62	; 0x3e
 8009e78:	d81a      	bhi.n	8009eb0 <USB_EPStartXfer+0x1064>
 8009e7a:	463b      	mov	r3, r7
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	085b      	lsrs	r3, r3, #1
 8009e82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009e86:	463b      	mov	r3, r7
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	f003 0301 	and.w	r3, r3, #1
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d004      	beq.n	8009e9e <USB_EPStartXfer+0x1052>
 8009e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e98:	3301      	adds	r3, #1
 8009e9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	029b      	lsls	r3, r3, #10
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009eac:	801a      	strh	r2, [r3, #0]
 8009eae:	e045      	b.n	8009f3c <USB_EPStartXfer+0x10f0>
 8009eb0:	463b      	mov	r3, r7
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	095b      	lsrs	r3, r3, #5
 8009eb8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009ebc:	463b      	mov	r3, r7
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	f003 031f 	and.w	r3, r3, #31
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d104      	bne.n	8009ed4 <USB_EPStartXfer+0x1088>
 8009eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	029b      	lsls	r3, r3, #10
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009eec:	801a      	strh	r2, [r3, #0]
 8009eee:	e025      	b.n	8009f3c <USB_EPStartXfer+0x10f0>
 8009ef0:	463b      	mov	r3, r7
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	785b      	ldrb	r3, [r3, #1]
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d120      	bne.n	8009f3c <USB_EPStartXfer+0x10f0>
 8009efa:	1d3b      	adds	r3, r7, #4
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009f02:	1d3b      	adds	r3, r7, #4
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f12:	4413      	add	r3, r2
 8009f14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009f18:	463b      	mov	r3, r7
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	011a      	lsls	r2, r3, #4
 8009f20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f24:	4413      	add	r3, r2
 8009f26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f2e:	463b      	mov	r3, r7
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009f3a:	801a      	strh	r2, [r3, #0]
 8009f3c:	1d3b      	adds	r3, r7, #4
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f44:	463b      	mov	r3, r7
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	785b      	ldrb	r3, [r3, #1]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d175      	bne.n	800a03a <USB_EPStartXfer+0x11ee>
 8009f4e:	1d3b      	adds	r3, r7, #4
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009f56:	1d3b      	adds	r3, r7, #4
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	461a      	mov	r2, r3
 8009f62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f66:	4413      	add	r3, r2
 8009f68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009f6c:	463b      	mov	r3, r7
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	011a      	lsls	r2, r3, #4
 8009f74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f78:	4413      	add	r3, r2
 8009f7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f82:	463b      	mov	r3, r7
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	691b      	ldr	r3, [r3, #16]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d116      	bne.n	8009fba <USB_EPStartXfer+0x116e>
 8009f8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f90:	881b      	ldrh	r3, [r3, #0]
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f9e:	801a      	strh	r2, [r3, #0]
 8009fa0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009fa4:	881b      	ldrh	r3, [r3, #0]
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009fb6:	801a      	strh	r2, [r3, #0]
 8009fb8:	e061      	b.n	800a07e <USB_EPStartXfer+0x1232>
 8009fba:	463b      	mov	r3, r7
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	2b3e      	cmp	r3, #62	; 0x3e
 8009fc2:	d81a      	bhi.n	8009ffa <USB_EPStartXfer+0x11ae>
 8009fc4:	463b      	mov	r3, r7
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	085b      	lsrs	r3, r3, #1
 8009fcc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009fd0:	463b      	mov	r3, r7
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d004      	beq.n	8009fe8 <USB_EPStartXfer+0x119c>
 8009fde:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009fe8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	029b      	lsls	r3, r3, #10
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ff6:	801a      	strh	r2, [r3, #0]
 8009ff8:	e041      	b.n	800a07e <USB_EPStartXfer+0x1232>
 8009ffa:	463b      	mov	r3, r7
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	095b      	lsrs	r3, r3, #5
 800a002:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a006:	463b      	mov	r3, r7
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	f003 031f 	and.w	r3, r3, #31
 800a010:	2b00      	cmp	r3, #0
 800a012:	d104      	bne.n	800a01e <USB_EPStartXfer+0x11d2>
 800a014:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a018:	3b01      	subs	r3, #1
 800a01a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a01e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a022:	b29b      	uxth	r3, r3
 800a024:	029b      	lsls	r3, r3, #10
 800a026:	b29b      	uxth	r3, r3
 800a028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a02c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a030:	b29a      	uxth	r2, r3
 800a032:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a036:	801a      	strh	r2, [r3, #0]
 800a038:	e021      	b.n	800a07e <USB_EPStartXfer+0x1232>
 800a03a:	463b      	mov	r3, r7
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	785b      	ldrb	r3, [r3, #1]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d11c      	bne.n	800a07e <USB_EPStartXfer+0x1232>
 800a044:	1d3b      	adds	r3, r7, #4
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	461a      	mov	r2, r3
 800a050:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a054:	4413      	add	r3, r2
 800a056:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a05a:	463b      	mov	r3, r7
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	011a      	lsls	r2, r3, #4
 800a062:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a066:	4413      	add	r3, r2
 800a068:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a06c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a070:	463b      	mov	r3, r7
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	b29a      	uxth	r2, r3
 800a078:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a07c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a07e:	463b      	mov	r3, r7
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	69db      	ldr	r3, [r3, #28]
 800a084:	2b00      	cmp	r3, #0
 800a086:	f000 81a4 	beq.w	800a3d2 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a08a:	1d3b      	adds	r3, r7, #4
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	463b      	mov	r3, r7
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	4413      	add	r3, r2
 800a098:	881b      	ldrh	r3, [r3, #0]
 800a09a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a09e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a0a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d005      	beq.n	800a0b6 <USB_EPStartXfer+0x126a>
 800a0aa:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a0ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d10d      	bne.n	800a0d2 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a0b6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a0ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f040 8187 	bne.w	800a3d2 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a0c4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f040 8180 	bne.w	800a3d2 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a0d2:	1d3b      	adds	r3, r7, #4
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	463b      	mov	r3, r7
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4413      	add	r3, r2
 800a0e0:	881b      	ldrh	r3, [r3, #0]
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ec:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a0f0:	1d3b      	adds	r3, r7, #4
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	463b      	mov	r3, r7
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	441a      	add	r2, r3
 800a0fe:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a10a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a10e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a112:	b29b      	uxth	r3, r3
 800a114:	8013      	strh	r3, [r2, #0]
 800a116:	e15c      	b.n	800a3d2 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a118:	463b      	mov	r3, r7
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	78db      	ldrb	r3, [r3, #3]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	f040 8155 	bne.w	800a3ce <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a124:	463b      	mov	r3, r7
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	699a      	ldr	r2, [r3, #24]
 800a12a:	463b      	mov	r3, r7
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	429a      	cmp	r2, r3
 800a132:	d90e      	bls.n	800a152 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800a134:	463b      	mov	r3, r7
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a13e:	463b      	mov	r3, r7
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	699a      	ldr	r2, [r3, #24]
 800a144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a148:	1ad2      	subs	r2, r2, r3
 800a14a:	463b      	mov	r3, r7
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	619a      	str	r2, [r3, #24]
 800a150:	e008      	b.n	800a164 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800a152:	463b      	mov	r3, r7
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	699b      	ldr	r3, [r3, #24]
 800a158:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a15c:	463b      	mov	r3, r7
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2200      	movs	r2, #0
 800a162:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a164:	463b      	mov	r3, r7
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	785b      	ldrb	r3, [r3, #1]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d16f      	bne.n	800a24e <USB_EPStartXfer+0x1402>
 800a16e:	1d3b      	adds	r3, r7, #4
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a176:	1d3b      	adds	r3, r7, #4
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a17e:	b29b      	uxth	r3, r3
 800a180:	461a      	mov	r2, r3
 800a182:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a186:	4413      	add	r3, r2
 800a188:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a18c:	463b      	mov	r3, r7
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	011a      	lsls	r2, r3, #4
 800a194:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a198:	4413      	add	r3, r2
 800a19a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a19e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a1a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d116      	bne.n	800a1d8 <USB_EPStartXfer+0x138c>
 800a1aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a1ae:	881b      	ldrh	r3, [r3, #0]
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a1bc:	801a      	strh	r2, [r3, #0]
 800a1be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a1d4:	801a      	strh	r2, [r3, #0]
 800a1d6:	e05f      	b.n	800a298 <USB_EPStartXfer+0x144c>
 800a1d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1dc:	2b3e      	cmp	r3, #62	; 0x3e
 800a1de:	d818      	bhi.n	800a212 <USB_EPStartXfer+0x13c6>
 800a1e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1e4:	085b      	lsrs	r3, r3, #1
 800a1e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a1ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1ee:	f003 0301 	and.w	r3, r3, #1
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d004      	beq.n	800a200 <USB_EPStartXfer+0x13b4>
 800a1f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a204:	b29b      	uxth	r3, r3
 800a206:	029b      	lsls	r3, r3, #10
 800a208:	b29a      	uxth	r2, r3
 800a20a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a20e:	801a      	strh	r2, [r3, #0]
 800a210:	e042      	b.n	800a298 <USB_EPStartXfer+0x144c>
 800a212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a216:	095b      	lsrs	r3, r3, #5
 800a218:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a21c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a220:	f003 031f 	and.w	r3, r3, #31
 800a224:	2b00      	cmp	r3, #0
 800a226:	d104      	bne.n	800a232 <USB_EPStartXfer+0x13e6>
 800a228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a22c:	3b01      	subs	r3, #1
 800a22e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a236:	b29b      	uxth	r3, r3
 800a238:	029b      	lsls	r3, r3, #10
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a244:	b29a      	uxth	r2, r3
 800a246:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a24a:	801a      	strh	r2, [r3, #0]
 800a24c:	e024      	b.n	800a298 <USB_EPStartXfer+0x144c>
 800a24e:	463b      	mov	r3, r7
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	785b      	ldrb	r3, [r3, #1]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d11f      	bne.n	800a298 <USB_EPStartXfer+0x144c>
 800a258:	1d3b      	adds	r3, r7, #4
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a260:	1d3b      	adds	r3, r7, #4
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a268:	b29b      	uxth	r3, r3
 800a26a:	461a      	mov	r2, r3
 800a26c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a270:	4413      	add	r3, r2
 800a272:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a276:	463b      	mov	r3, r7
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	011a      	lsls	r2, r3, #4
 800a27e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a282:	4413      	add	r3, r2
 800a284:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a288:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a28c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a290:	b29a      	uxth	r2, r3
 800a292:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a296:	801a      	strh	r2, [r3, #0]
 800a298:	1d3b      	adds	r3, r7, #4
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a2a0:	463b      	mov	r3, r7
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	785b      	ldrb	r3, [r3, #1]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d16f      	bne.n	800a38a <USB_EPStartXfer+0x153e>
 800a2aa:	1d3b      	adds	r3, r7, #4
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a2b2:	1d3b      	adds	r3, r7, #4
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	461a      	mov	r2, r3
 800a2be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a2c8:	463b      	mov	r3, r7
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	011a      	lsls	r2, r3, #4
 800a2d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2d4:	4413      	add	r3, r2
 800a2d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a2da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a2de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d116      	bne.n	800a314 <USB_EPStartXfer+0x14c8>
 800a2e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2ea:	881b      	ldrh	r3, [r3, #0]
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2f8:	801a      	strh	r2, [r3, #0]
 800a2fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2fe:	881b      	ldrh	r3, [r3, #0]
 800a300:	b29b      	uxth	r3, r3
 800a302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a310:	801a      	strh	r2, [r3, #0]
 800a312:	e05e      	b.n	800a3d2 <USB_EPStartXfer+0x1586>
 800a314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a318:	2b3e      	cmp	r3, #62	; 0x3e
 800a31a:	d818      	bhi.n	800a34e <USB_EPStartXfer+0x1502>
 800a31c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a320:	085b      	lsrs	r3, r3, #1
 800a322:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a32a:	f003 0301 	and.w	r3, r3, #1
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d004      	beq.n	800a33c <USB_EPStartXfer+0x14f0>
 800a332:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a336:	3301      	adds	r3, #1
 800a338:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a33c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a340:	b29b      	uxth	r3, r3
 800a342:	029b      	lsls	r3, r3, #10
 800a344:	b29a      	uxth	r2, r3
 800a346:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a34a:	801a      	strh	r2, [r3, #0]
 800a34c:	e041      	b.n	800a3d2 <USB_EPStartXfer+0x1586>
 800a34e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a352:	095b      	lsrs	r3, r3, #5
 800a354:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a35c:	f003 031f 	and.w	r3, r3, #31
 800a360:	2b00      	cmp	r3, #0
 800a362:	d104      	bne.n	800a36e <USB_EPStartXfer+0x1522>
 800a364:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a368:	3b01      	subs	r3, #1
 800a36a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a36e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a372:	b29b      	uxth	r3, r3
 800a374:	029b      	lsls	r3, r3, #10
 800a376:	b29b      	uxth	r3, r3
 800a378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a37c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a380:	b29a      	uxth	r2, r3
 800a382:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a386:	801a      	strh	r2, [r3, #0]
 800a388:	e023      	b.n	800a3d2 <USB_EPStartXfer+0x1586>
 800a38a:	463b      	mov	r3, r7
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	785b      	ldrb	r3, [r3, #1]
 800a390:	2b01      	cmp	r3, #1
 800a392:	d11e      	bne.n	800a3d2 <USB_EPStartXfer+0x1586>
 800a394:	1d3b      	adds	r3, r7, #4
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	461a      	mov	r2, r3
 800a3a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3a4:	4413      	add	r3, r2
 800a3a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a3aa:	463b      	mov	r3, r7
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	011a      	lsls	r2, r3, #4
 800a3b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3b6:	4413      	add	r3, r2
 800a3b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a3bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a3c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3c4:	b29a      	uxth	r2, r3
 800a3c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3ca:	801a      	strh	r2, [r3, #0]
 800a3cc:	e001      	b.n	800a3d2 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e02e      	b.n	800a430 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a3d2:	1d3b      	adds	r3, r7, #4
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	463b      	mov	r3, r7
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	4413      	add	r3, r2
 800a3e0:	881b      	ldrh	r3, [r3, #0]
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3ec:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a3f0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a3f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a3f8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a3fc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a400:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a404:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a408:	1d3b      	adds	r3, r7, #4
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	463b      	mov	r3, r7
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	441a      	add	r2, r3
 800a416:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a41a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a41e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a43a:	b480      	push	{r7}
 800a43c:	b085      	sub	sp, #20
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
 800a442:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	785b      	ldrb	r3, [r3, #1]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d020      	beq.n	800a48e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	4413      	add	r3, r2
 800a456:	881b      	ldrh	r3, [r3, #0]
 800a458:	b29b      	uxth	r3, r3
 800a45a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a45e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a462:	81bb      	strh	r3, [r7, #12]
 800a464:	89bb      	ldrh	r3, [r7, #12]
 800a466:	f083 0310 	eor.w	r3, r3, #16
 800a46a:	81bb      	strh	r3, [r7, #12]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	441a      	add	r2, r3
 800a476:	89bb      	ldrh	r3, [r7, #12]
 800a478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a47c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a488:	b29b      	uxth	r3, r3
 800a48a:	8013      	strh	r3, [r2, #0]
 800a48c:	e01f      	b.n	800a4ce <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	4413      	add	r3, r2
 800a498:	881b      	ldrh	r3, [r3, #0]
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4a4:	81fb      	strh	r3, [r7, #14]
 800a4a6:	89fb      	ldrh	r3, [r7, #14]
 800a4a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a4ac:	81fb      	strh	r3, [r7, #14]
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	441a      	add	r2, r3
 800a4b8:	89fb      	ldrh	r3, [r7, #14]
 800a4ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3714      	adds	r7, #20
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bc80      	pop	{r7}
 800a4d8:	4770      	bx	lr

0800a4da <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b087      	sub	sp, #28
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
 800a4e2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	7b1b      	ldrb	r3, [r3, #12]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f040 809d 	bne.w	800a628 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	785b      	ldrb	r3, [r3, #1]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d04c      	beq.n	800a590 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	4413      	add	r3, r2
 800a500:	881b      	ldrh	r3, [r3, #0]
 800a502:	823b      	strh	r3, [r7, #16]
 800a504:	8a3b      	ldrh	r3, [r7, #16]
 800a506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d01b      	beq.n	800a546 <USB_EPClearStall+0x6c>
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	4413      	add	r3, r2
 800a518:	881b      	ldrh	r3, [r3, #0]
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a524:	81fb      	strh	r3, [r7, #14]
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	441a      	add	r2, r3
 800a530:	89fb      	ldrh	r3, [r7, #14]
 800a532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a53a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a53e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a542:	b29b      	uxth	r3, r3
 800a544:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	78db      	ldrb	r3, [r3, #3]
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d06c      	beq.n	800a628 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	4413      	add	r3, r2
 800a558:	881b      	ldrh	r3, [r3, #0]
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a564:	81bb      	strh	r3, [r7, #12]
 800a566:	89bb      	ldrh	r3, [r7, #12]
 800a568:	f083 0320 	eor.w	r3, r3, #32
 800a56c:	81bb      	strh	r3, [r7, #12]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	441a      	add	r2, r3
 800a578:	89bb      	ldrh	r3, [r7, #12]
 800a57a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a57e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	8013      	strh	r3, [r2, #0]
 800a58e:	e04b      	b.n	800a628 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	4413      	add	r3, r2
 800a59a:	881b      	ldrh	r3, [r3, #0]
 800a59c:	82fb      	strh	r3, [r7, #22]
 800a59e:	8afb      	ldrh	r3, [r7, #22]
 800a5a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d01b      	beq.n	800a5e0 <USB_EPClearStall+0x106>
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	4413      	add	r3, r2
 800a5b2:	881b      	ldrh	r3, [r3, #0]
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5be:	82bb      	strh	r3, [r7, #20]
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	441a      	add	r2, r3
 800a5ca:	8abb      	ldrh	r3, [r7, #20]
 800a5cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a5d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4413      	add	r3, r2
 800a5ea:	881b      	ldrh	r3, [r3, #0]
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5f6:	827b      	strh	r3, [r7, #18]
 800a5f8:	8a7b      	ldrh	r3, [r7, #18]
 800a5fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a5fe:	827b      	strh	r3, [r7, #18]
 800a600:	8a7b      	ldrh	r3, [r7, #18]
 800a602:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a606:	827b      	strh	r3, [r7, #18]
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	441a      	add	r2, r3
 800a612:	8a7b      	ldrh	r3, [r7, #18]
 800a614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a61c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a624:	b29b      	uxth	r3, r3
 800a626:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	371c      	adds	r7, #28
 800a62e:	46bd      	mov	sp, r7
 800a630:	bc80      	pop	{r7}
 800a632:	4770      	bx	lr

0800a634 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	460b      	mov	r3, r1
 800a63e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a640:	78fb      	ldrb	r3, [r7, #3]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d103      	bne.n	800a64e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2280      	movs	r2, #128	; 0x80
 800a64a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	4618      	mov	r0, r3
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	bc80      	pop	{r7}
 800a658:	4770      	bx	lr

0800a65a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a65a:	b480      	push	{r7}
 800a65c:	b083      	sub	sp, #12
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	bc80      	pop	{r7}
 800a66c:	4770      	bx	lr

0800a66e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a66e:	b480      	push	{r7}
 800a670:	b083      	sub	sp, #12
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bc80      	pop	{r7}
 800a680:	4770      	bx	lr

0800a682 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a682:	b480      	push	{r7}
 800a684:	b085      	sub	sp, #20
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a690:	b29b      	uxth	r3, r3
 800a692:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a694:	68fb      	ldr	r3, [r7, #12]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3714      	adds	r7, #20
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bc80      	pop	{r7}
 800a69e:	4770      	bx	lr

0800a6a0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bc80      	pop	{r7}
 800a6b4:	4770      	bx	lr

0800a6b6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a6b6:	b480      	push	{r7}
 800a6b8:	b08d      	sub	sp, #52	; 0x34
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	60f8      	str	r0, [r7, #12]
 800a6be:	60b9      	str	r1, [r7, #8]
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	80fb      	strh	r3, [r7, #6]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a6cc:	88bb      	ldrh	r3, [r7, #4]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	085b      	lsrs	r3, r3, #1
 800a6d2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a6dc:	88fb      	ldrh	r3, [r7, #6]
 800a6de:	005a      	lsls	r2, r3, #1
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6e8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a6ea:	6a3b      	ldr	r3, [r7, #32]
 800a6ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6ee:	e01e      	b.n	800a72e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	b29b      	uxth	r3, r3
 800a702:	021b      	lsls	r3, r3, #8
 800a704:	b29b      	uxth	r3, r3
 800a706:	461a      	mov	r2, r3
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	b29a      	uxth	r2, r3
 800a712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a714:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a718:	3302      	adds	r3, #2
 800a71a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71e:	3302      	adds	r3, #2
 800a720:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a724:	3301      	adds	r3, #1
 800a726:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72a:	3b01      	subs	r3, #1
 800a72c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a730:	2b00      	cmp	r3, #0
 800a732:	d1dd      	bne.n	800a6f0 <USB_WritePMA+0x3a>
  }
}
 800a734:	bf00      	nop
 800a736:	bf00      	nop
 800a738:	3734      	adds	r7, #52	; 0x34
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bc80      	pop	{r7}
 800a73e:	4770      	bx	lr

0800a740 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a740:	b480      	push	{r7}
 800a742:	b08b      	sub	sp, #44	; 0x2c
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	4611      	mov	r1, r2
 800a74c:	461a      	mov	r2, r3
 800a74e:	460b      	mov	r3, r1
 800a750:	80fb      	strh	r3, [r7, #6]
 800a752:	4613      	mov	r3, r2
 800a754:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a756:	88bb      	ldrh	r3, [r7, #4]
 800a758:	085b      	lsrs	r3, r3, #1
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a766:	88fb      	ldrh	r3, [r7, #6]
 800a768:	005a      	lsls	r2, r3, #1
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	4413      	add	r3, r2
 800a76e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a772:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	627b      	str	r3, [r7, #36]	; 0x24
 800a778:	e01b      	b.n	800a7b2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a77a:	6a3b      	ldr	r3, [r7, #32]
 800a77c:	881b      	ldrh	r3, [r3, #0]
 800a77e:	b29b      	uxth	r3, r3
 800a780:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a782:	6a3b      	ldr	r3, [r7, #32]
 800a784:	3302      	adds	r3, #2
 800a786:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	b2da      	uxtb	r2, r3
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	3301      	adds	r3, #1
 800a794:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	0a1b      	lsrs	r3, r3, #8
 800a79a:	b2da      	uxtb	r2, r3
 800a79c:	69fb      	ldr	r3, [r7, #28]
 800a79e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a7a6:	6a3b      	ldr	r3, [r7, #32]
 800a7a8:	3302      	adds	r3, #2
 800a7aa:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	627b      	str	r3, [r7, #36]	; 0x24
 800a7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d1e0      	bne.n	800a77a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a7b8:	88bb      	ldrh	r3, [r7, #4]
 800a7ba:	f003 0301 	and.w	r3, r3, #1
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d007      	beq.n	800a7d4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a7c4:	6a3b      	ldr	r3, [r7, #32]
 800a7c6:	881b      	ldrh	r3, [r3, #0]
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	b2da      	uxtb	r2, r3
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	701a      	strb	r2, [r3, #0]
  }
}
 800a7d4:	bf00      	nop
 800a7d6:	372c      	adds	r7, #44	; 0x2c
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bc80      	pop	{r7}
 800a7dc:	4770      	bx	lr

0800a7de <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b084      	sub	sp, #16
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	7c1b      	ldrb	r3, [r3, #16]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d115      	bne.n	800a822 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a7f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7fa:	2202      	movs	r2, #2
 800a7fc:	2181      	movs	r1, #129	; 0x81
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f001 fe99 	bl	800c536 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a80a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a80e:	2202      	movs	r2, #2
 800a810:	2101      	movs	r1, #1
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f001 fe8f 	bl	800c536 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a820:	e012      	b.n	800a848 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a822:	2340      	movs	r3, #64	; 0x40
 800a824:	2202      	movs	r2, #2
 800a826:	2181      	movs	r1, #129	; 0x81
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f001 fe84 	bl	800c536 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2201      	movs	r2, #1
 800a832:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a834:	2340      	movs	r3, #64	; 0x40
 800a836:	2202      	movs	r2, #2
 800a838:	2101      	movs	r1, #1
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f001 fe7b 	bl	800c536 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a848:	2308      	movs	r3, #8
 800a84a:	2203      	movs	r2, #3
 800a84c:	2182      	movs	r1, #130	; 0x82
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f001 fe71 	bl	800c536 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2201      	movs	r2, #1
 800a858:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a85a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a85e:	f001 ff91 	bl	800c784 <USBD_static_malloc>
 800a862:	4602      	mov	r2, r0
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a870:	2b00      	cmp	r3, #0
 800a872:	d102      	bne.n	800a87a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a874:	2301      	movs	r3, #1
 800a876:	73fb      	strb	r3, [r7, #15]
 800a878:	e026      	b.n	800a8c8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a880:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	2200      	movs	r2, #0
 800a890:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	2200      	movs	r2, #0
 800a898:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	7c1b      	ldrb	r3, [r3, #16]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d109      	bne.n	800a8b8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8ae:	2101      	movs	r1, #1
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f001 ff31 	bl	800c718 <USBD_LL_PrepareReceive>
 800a8b6:	e007      	b.n	800a8c8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8be:	2340      	movs	r3, #64	; 0x40
 800a8c0:	2101      	movs	r1, #1
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f001 ff28 	bl	800c718 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b084      	sub	sp, #16
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	460b      	mov	r3, r1
 800a8dc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a8e2:	2181      	movs	r1, #129	; 0x81
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f001 fe4c 	bl	800c582 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a8f0:	2101      	movs	r1, #1
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f001 fe45 	bl	800c582 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a900:	2182      	movs	r1, #130	; 0x82
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f001 fe3d 	bl	800c582 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a914:	2b00      	cmp	r3, #0
 800a916:	d00e      	beq.n	800a936 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a928:	4618      	mov	r0, r3
 800a92a:	f001 ff37 	bl	800c79c <USBD_static_free>
    pdev->pClassData = NULL;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a936:	7bfb      	ldrb	r3, [r7, #15]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3710      	adds	r7, #16
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b086      	sub	sp, #24
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a950:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a952:	2300      	movs	r3, #0
 800a954:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a956:	2300      	movs	r3, #0
 800a958:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a95a:	2300      	movs	r3, #0
 800a95c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a966:	2b00      	cmp	r3, #0
 800a968:	d039      	beq.n	800a9de <USBD_CDC_Setup+0x9e>
 800a96a:	2b20      	cmp	r3, #32
 800a96c:	d17f      	bne.n	800aa6e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	88db      	ldrh	r3, [r3, #6]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d029      	beq.n	800a9ca <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	b25b      	sxtb	r3, r3
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	da11      	bge.n	800a9a4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	683a      	ldr	r2, [r7, #0]
 800a98a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a98c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a98e:	683a      	ldr	r2, [r7, #0]
 800a990:	88d2      	ldrh	r2, [r2, #6]
 800a992:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a994:	6939      	ldr	r1, [r7, #16]
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	88db      	ldrh	r3, [r3, #6]
 800a99a:	461a      	mov	r2, r3
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f001 fa0a 	bl	800bdb6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a9a2:	e06b      	b.n	800aa7c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	785a      	ldrb	r2, [r3, #1]
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	88db      	ldrh	r3, [r3, #6]
 800a9b2:	b2da      	uxtb	r2, r3
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a9ba:	6939      	ldr	r1, [r7, #16]
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	88db      	ldrh	r3, [r3, #6]
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f001 fa25 	bl	800be12 <USBD_CtlPrepareRx>
      break;
 800a9c8:	e058      	b.n	800aa7c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	683a      	ldr	r2, [r7, #0]
 800a9d4:	7850      	ldrb	r0, [r2, #1]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	4798      	blx	r3
      break;
 800a9dc:	e04e      	b.n	800aa7c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	785b      	ldrb	r3, [r3, #1]
 800a9e2:	2b0b      	cmp	r3, #11
 800a9e4:	d02e      	beq.n	800aa44 <USBD_CDC_Setup+0x104>
 800a9e6:	2b0b      	cmp	r3, #11
 800a9e8:	dc38      	bgt.n	800aa5c <USBD_CDC_Setup+0x11c>
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d002      	beq.n	800a9f4 <USBD_CDC_Setup+0xb4>
 800a9ee:	2b0a      	cmp	r3, #10
 800a9f0:	d014      	beq.n	800aa1c <USBD_CDC_Setup+0xdc>
 800a9f2:	e033      	b.n	800aa5c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9fa:	2b03      	cmp	r3, #3
 800a9fc:	d107      	bne.n	800aa0e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a9fe:	f107 030c 	add.w	r3, r7, #12
 800aa02:	2202      	movs	r2, #2
 800aa04:	4619      	mov	r1, r3
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f001 f9d5 	bl	800bdb6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa0c:	e02e      	b.n	800aa6c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800aa0e:	6839      	ldr	r1, [r7, #0]
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f001 f966 	bl	800bce2 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa16:	2302      	movs	r3, #2
 800aa18:	75fb      	strb	r3, [r7, #23]
          break;
 800aa1a:	e027      	b.n	800aa6c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa22:	2b03      	cmp	r3, #3
 800aa24:	d107      	bne.n	800aa36 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800aa26:	f107 030f 	add.w	r3, r7, #15
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f001 f9c1 	bl	800bdb6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa34:	e01a      	b.n	800aa6c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800aa36:	6839      	ldr	r1, [r7, #0]
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f001 f952 	bl	800bce2 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa3e:	2302      	movs	r3, #2
 800aa40:	75fb      	strb	r3, [r7, #23]
          break;
 800aa42:	e013      	b.n	800aa6c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa4a:	2b03      	cmp	r3, #3
 800aa4c:	d00d      	beq.n	800aa6a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800aa4e:	6839      	ldr	r1, [r7, #0]
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f001 f946 	bl	800bce2 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa56:	2302      	movs	r3, #2
 800aa58:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa5a:	e006      	b.n	800aa6a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800aa5c:	6839      	ldr	r1, [r7, #0]
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f001 f93f 	bl	800bce2 <USBD_CtlError>
          ret = USBD_FAIL;
 800aa64:	2302      	movs	r3, #2
 800aa66:	75fb      	strb	r3, [r7, #23]
          break;
 800aa68:	e000      	b.n	800aa6c <USBD_CDC_Setup+0x12c>
          break;
 800aa6a:	bf00      	nop
      }
      break;
 800aa6c:	e006      	b.n	800aa7c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aa6e:	6839      	ldr	r1, [r7, #0]
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f001 f936 	bl	800bce2 <USBD_CtlError>
      ret = USBD_FAIL;
 800aa76:	2302      	movs	r3, #2
 800aa78:	75fb      	strb	r3, [r7, #23]
      break;
 800aa7a:	bf00      	nop
  }

  return ret;
 800aa7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3718      	adds	r7, #24
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b084      	sub	sp, #16
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	460b      	mov	r3, r1
 800aa90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa98:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaa0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d03a      	beq.n	800ab22 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800aaac:	78fa      	ldrb	r2, [r7, #3]
 800aaae:	6879      	ldr	r1, [r7, #4]
 800aab0:	4613      	mov	r3, r2
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	4413      	add	r3, r2
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	440b      	add	r3, r1
 800aaba:	331c      	adds	r3, #28
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d029      	beq.n	800ab16 <USBD_CDC_DataIn+0x90>
 800aac2:	78fa      	ldrb	r2, [r7, #3]
 800aac4:	6879      	ldr	r1, [r7, #4]
 800aac6:	4613      	mov	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	4413      	add	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	440b      	add	r3, r1
 800aad0:	331c      	adds	r3, #28
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	78f9      	ldrb	r1, [r7, #3]
 800aad6:	68b8      	ldr	r0, [r7, #8]
 800aad8:	460b      	mov	r3, r1
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	440b      	add	r3, r1
 800aade:	00db      	lsls	r3, r3, #3
 800aae0:	4403      	add	r3, r0
 800aae2:	3338      	adds	r3, #56	; 0x38
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	fbb2 f1f3 	udiv	r1, r2, r3
 800aaea:	fb03 f301 	mul.w	r3, r3, r1
 800aaee:	1ad3      	subs	r3, r2, r3
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d110      	bne.n	800ab16 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800aaf4:	78fa      	ldrb	r2, [r7, #3]
 800aaf6:	6879      	ldr	r1, [r7, #4]
 800aaf8:	4613      	mov	r3, r2
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4413      	add	r3, r2
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	440b      	add	r3, r1
 800ab02:	331c      	adds	r3, #28
 800ab04:	2200      	movs	r2, #0
 800ab06:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ab08:	78f9      	ldrb	r1, [r7, #3]
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f001 fddf 	bl	800c6d2 <USBD_LL_Transmit>
 800ab14:	e003      	b.n	800ab1e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	e000      	b.n	800ab24 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800ab22:	2302      	movs	r3, #2
  }
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3710      	adds	r7, #16
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	460b      	mov	r3, r1
 800ab36:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab3e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ab40:	78fb      	ldrb	r3, [r7, #3]
 800ab42:	4619      	mov	r1, r3
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f001 fe0a 	bl	800c75e <USBD_LL_GetRxDataSize>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00d      	beq.n	800ab78 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab62:	68db      	ldr	r3, [r3, #12]
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ab70:	4611      	mov	r1, r2
 800ab72:	4798      	blx	r3

    return USBD_OK;
 800ab74:	2300      	movs	r3, #0
 800ab76:	e000      	b.n	800ab7a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800ab78:	2302      	movs	r3, #2
  }
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b084      	sub	sp, #16
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab90:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d015      	beq.n	800abc8 <USBD_CDC_EP0_RxReady+0x46>
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aba2:	2bff      	cmp	r3, #255	; 0xff
 800aba4:	d010      	beq.n	800abc8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800abb4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800abbc:	b292      	uxth	r2, r2
 800abbe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	22ff      	movs	r2, #255	; 0xff
 800abc4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
	...

0800abd4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2243      	movs	r2, #67	; 0x43
 800abe0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800abe2:	4b03      	ldr	r3, [pc, #12]	; (800abf0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	bc80      	pop	{r7}
 800abec:	4770      	bx	lr
 800abee:	bf00      	nop
 800abf0:	200000a8 	.word	0x200000a8

0800abf4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2243      	movs	r2, #67	; 0x43
 800ac00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800ac02:	4b03      	ldr	r3, [pc, #12]	; (800ac10 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	370c      	adds	r7, #12
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bc80      	pop	{r7}
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	20000064 	.word	0x20000064

0800ac14 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2243      	movs	r2, #67	; 0x43
 800ac20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800ac22:	4b03      	ldr	r3, [pc, #12]	; (800ac30 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bc80      	pop	{r7}
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	200000ec 	.word	0x200000ec

0800ac34 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	220a      	movs	r2, #10
 800ac40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ac42:	4b03      	ldr	r3, [pc, #12]	; (800ac50 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bc80      	pop	{r7}
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop
 800ac50:	20000020 	.word	0x20000020

0800ac54 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ac5e:	2302      	movs	r3, #2
 800ac60:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d005      	beq.n	800ac74 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800ac70:	2300      	movs	r3, #0
 800ac72:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ac74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3714      	adds	r7, #20
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bc80      	pop	{r7}
 800ac7e:	4770      	bx	lr

0800ac80 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b087      	sub	sp, #28
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac94:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	68ba      	ldr	r2, [r7, #8]
 800ac9a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ac9e:	88fa      	ldrh	r2, [r7, #6]
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800aca6:	2300      	movs	r3, #0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	371c      	adds	r7, #28
 800acac:	46bd      	mov	sp, r7
 800acae:	bc80      	pop	{r7}
 800acb0:	4770      	bx	lr

0800acb2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800acb2:	b480      	push	{r7}
 800acb4:	b085      	sub	sp, #20
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acc2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	683a      	ldr	r2, [r7, #0]
 800acc8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bc80      	pop	{r7}
 800acd6:	4770      	bx	lr

0800acd8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ace6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d01c      	beq.n	800ad2c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d115      	bne.n	800ad28 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2201      	movs	r2, #1
 800ad00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	2181      	movs	r1, #129	; 0x81
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f001 fcd7 	bl	800c6d2 <USBD_LL_Transmit>

      return USBD_OK;
 800ad24:	2300      	movs	r3, #0
 800ad26:	e002      	b.n	800ad2e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e000      	b.n	800ad2e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800ad2c:	2302      	movs	r3, #2
  }
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b084      	sub	sp, #16
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad44:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d017      	beq.n	800ad80 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	7c1b      	ldrb	r3, [r3, #16]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d109      	bne.n	800ad6c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad62:	2101      	movs	r1, #1
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f001 fcd7 	bl	800c718 <USBD_LL_PrepareReceive>
 800ad6a:	e007      	b.n	800ad7c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad72:	2340      	movs	r3, #64	; 0x40
 800ad74:	2101      	movs	r1, #1
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f001 fcce 	bl	800c718 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	e000      	b.n	800ad82 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ad80:	2302      	movs	r3, #2
  }
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3710      	adds	r7, #16
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b084      	sub	sp, #16
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	60f8      	str	r0, [r7, #12]
 800ad92:	60b9      	str	r1, [r7, #8]
 800ad94:	4613      	mov	r3, r2
 800ad96:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d101      	bne.n	800ada2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ad9e:	2302      	movs	r3, #2
 800ada0:	e01a      	b.n	800add8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d003      	beq.n	800adb4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2200      	movs	r2, #0
 800adb0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d003      	beq.n	800adc2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2201      	movs	r2, #1
 800adc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	79fa      	ldrb	r2, [r7, #7]
 800adce:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	f001 fb3b 	bl	800c44c <USBD_LL_Init>

  return USBD_OK;
 800add6:	2300      	movs	r3, #0
}
 800add8:	4618      	mov	r0, r3
 800adda:	3710      	adds	r7, #16
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b085      	sub	sp, #20
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800adea:	2300      	movs	r3, #0
 800adec:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d006      	beq.n	800ae02 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	683a      	ldr	r2, [r7, #0]
 800adf8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	73fb      	strb	r3, [r7, #15]
 800ae00:	e001      	b.n	800ae06 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ae02:	2302      	movs	r3, #2
 800ae04:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ae06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3714      	adds	r7, #20
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bc80      	pop	{r7}
 800ae10:	4770      	bx	lr

0800ae12 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b082      	sub	sp, #8
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f001 fb70 	bl	800c500 <USBD_LL_Start>

  return USBD_OK;
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ae2a:	b480      	push	{r7}
 800ae2c:	b083      	sub	sp, #12
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ae32:	2300      	movs	r3, #0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bc80      	pop	{r7}
 800ae3c:	4770      	bx	lr

0800ae3e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b084      	sub	sp, #16
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
 800ae46:	460b      	mov	r3, r1
 800ae48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ae4a:	2302      	movs	r3, #2
 800ae4c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00c      	beq.n	800ae72 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	78fa      	ldrb	r2, [r7, #3]
 800ae62:	4611      	mov	r1, r2
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	4798      	blx	r3
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d101      	bne.n	800ae72 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ae72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3710      	adds	r7, #16
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	460b      	mov	r3, r1
 800ae86:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	78fa      	ldrb	r2, [r7, #3]
 800ae92:	4611      	mov	r1, r2
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	4798      	blx	r3

  return USBD_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b082      	sub	sp, #8
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aeb2:	6839      	ldr	r1, [r7, #0]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f000 fed8 	bl	800bc6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2201      	movs	r2, #1
 800aebe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aec8:	461a      	mov	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800aed6:	f003 031f 	and.w	r3, r3, #31
 800aeda:	2b02      	cmp	r3, #2
 800aedc:	d016      	beq.n	800af0c <USBD_LL_SetupStage+0x6a>
 800aede:	2b02      	cmp	r3, #2
 800aee0:	d81c      	bhi.n	800af1c <USBD_LL_SetupStage+0x7a>
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d002      	beq.n	800aeec <USBD_LL_SetupStage+0x4a>
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d008      	beq.n	800aefc <USBD_LL_SetupStage+0x5a>
 800aeea:	e017      	b.n	800af1c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aef2:	4619      	mov	r1, r3
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 f9cb 	bl	800b290 <USBD_StdDevReq>
      break;
 800aefa:	e01a      	b.n	800af32 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800af02:	4619      	mov	r1, r3
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 fa2d 	bl	800b364 <USBD_StdItfReq>
      break;
 800af0a:	e012      	b.n	800af32 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800af12:	4619      	mov	r1, r3
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fa6d 	bl	800b3f4 <USBD_StdEPReq>
      break;
 800af1a:	e00a      	b.n	800af32 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800af22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af26:	b2db      	uxtb	r3, r3
 800af28:	4619      	mov	r1, r3
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f001 fb48 	bl	800c5c0 <USBD_LL_StallEP>
      break;
 800af30:	bf00      	nop
  }

  return USBD_OK;
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	460b      	mov	r3, r1
 800af46:	607a      	str	r2, [r7, #4]
 800af48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800af4a:	7afb      	ldrb	r3, [r7, #11]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d14b      	bne.n	800afe8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800af56:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800af5e:	2b03      	cmp	r3, #3
 800af60:	d134      	bne.n	800afcc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	68da      	ldr	r2, [r3, #12]
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	691b      	ldr	r3, [r3, #16]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d919      	bls.n	800afa2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	68da      	ldr	r2, [r3, #12]
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	1ad2      	subs	r2, r2, r3
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	68da      	ldr	r2, [r3, #12]
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800af84:	429a      	cmp	r2, r3
 800af86:	d203      	bcs.n	800af90 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	e002      	b.n	800af96 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800af94:	b29b      	uxth	r3, r3
 800af96:	461a      	mov	r2, r3
 800af98:	6879      	ldr	r1, [r7, #4]
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f000 ff57 	bl	800be4e <USBD_CtlContinueRx>
 800afa0:	e038      	b.n	800b014 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afa8:	691b      	ldr	r3, [r3, #16]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00a      	beq.n	800afc4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800afb4:	2b03      	cmp	r3, #3
 800afb6:	d105      	bne.n	800afc4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800afc4:	68f8      	ldr	r0, [r7, #12]
 800afc6:	f000 ff54 	bl	800be72 <USBD_CtlSendStatus>
 800afca:	e023      	b.n	800b014 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800afd2:	2b05      	cmp	r3, #5
 800afd4:	d11e      	bne.n	800b014 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2200      	movs	r2, #0
 800afda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800afde:	2100      	movs	r1, #0
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f001 faed 	bl	800c5c0 <USBD_LL_StallEP>
 800afe6:	e015      	b.n	800b014 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afee:	699b      	ldr	r3, [r3, #24]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00d      	beq.n	800b010 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800affa:	2b03      	cmp	r3, #3
 800affc:	d108      	bne.n	800b010 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b004:	699b      	ldr	r3, [r3, #24]
 800b006:	7afa      	ldrb	r2, [r7, #11]
 800b008:	4611      	mov	r1, r2
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	4798      	blx	r3
 800b00e:	e001      	b.n	800b014 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b010:	2302      	movs	r3, #2
 800b012:	e000      	b.n	800b016 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b014:	2300      	movs	r3, #0
}
 800b016:	4618      	mov	r0, r3
 800b018:	3718      	adds	r7, #24
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}

0800b01e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b01e:	b580      	push	{r7, lr}
 800b020:	b086      	sub	sp, #24
 800b022:	af00      	add	r7, sp, #0
 800b024:	60f8      	str	r0, [r7, #12]
 800b026:	460b      	mov	r3, r1
 800b028:	607a      	str	r2, [r7, #4]
 800b02a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b02c:	7afb      	ldrb	r3, [r7, #11]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d17f      	bne.n	800b132 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	3314      	adds	r3, #20
 800b036:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b03e:	2b02      	cmp	r3, #2
 800b040:	d15c      	bne.n	800b0fc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	68da      	ldr	r2, [r3, #12]
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d915      	bls.n	800b07a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	68da      	ldr	r2, [r3, #12]
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	691b      	ldr	r3, [r3, #16]
 800b056:	1ad2      	subs	r2, r2, r3
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	b29b      	uxth	r3, r3
 800b062:	461a      	mov	r2, r3
 800b064:	6879      	ldr	r1, [r7, #4]
 800b066:	68f8      	ldr	r0, [r7, #12]
 800b068:	f000 fec1 	bl	800bdee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b06c:	2300      	movs	r3, #0
 800b06e:	2200      	movs	r2, #0
 800b070:	2100      	movs	r1, #0
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f001 fb50 	bl	800c718 <USBD_LL_PrepareReceive>
 800b078:	e04e      	b.n	800b118 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	697a      	ldr	r2, [r7, #20]
 800b080:	6912      	ldr	r2, [r2, #16]
 800b082:	fbb3 f1f2 	udiv	r1, r3, r2
 800b086:	fb02 f201 	mul.w	r2, r2, r1
 800b08a:	1a9b      	subs	r3, r3, r2
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d11c      	bne.n	800b0ca <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	689a      	ldr	r2, [r3, #8]
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b098:	429a      	cmp	r2, r3
 800b09a:	d316      	bcc.n	800b0ca <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	689a      	ldr	r2, [r3, #8]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d20f      	bcs.n	800b0ca <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	68f8      	ldr	r0, [r7, #12]
 800b0b0:	f000 fe9d 	bl	800bdee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0bc:	2300      	movs	r3, #0
 800b0be:	2200      	movs	r2, #0
 800b0c0:	2100      	movs	r1, #0
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	f001 fb28 	bl	800c718 <USBD_LL_PrepareReceive>
 800b0c8:	e026      	b.n	800b118 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0d0:	68db      	ldr	r3, [r3, #12]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00a      	beq.n	800b0ec <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b0dc:	2b03      	cmp	r3, #3
 800b0de:	d105      	bne.n	800b0ec <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	68f8      	ldr	r0, [r7, #12]
 800b0ea:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b0ec:	2180      	movs	r1, #128	; 0x80
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f001 fa66 	bl	800c5c0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	f000 fecf 	bl	800be98 <USBD_CtlReceiveStatus>
 800b0fa:	e00d      	b.n	800b118 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b102:	2b04      	cmp	r3, #4
 800b104:	d004      	beq.n	800b110 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d103      	bne.n	800b118 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b110:	2180      	movs	r1, #128	; 0x80
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	f001 fa54 	bl	800c5c0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d11d      	bne.n	800b15e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f7ff fe81 	bl	800ae2a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b130:	e015      	b.n	800b15e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b138:	695b      	ldr	r3, [r3, #20]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00d      	beq.n	800b15a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b144:	2b03      	cmp	r3, #3
 800b146:	d108      	bne.n	800b15a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b14e:	695b      	ldr	r3, [r3, #20]
 800b150:	7afa      	ldrb	r2, [r7, #11]
 800b152:	4611      	mov	r1, r2
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	4798      	blx	r3
 800b158:	e001      	b.n	800b15e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b15a:	2302      	movs	r3, #2
 800b15c:	e000      	b.n	800b160 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b15e:	2300      	movs	r3, #0
}
 800b160:	4618      	mov	r0, r3
 800b162:	3718      	adds	r7, #24
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b170:	2340      	movs	r3, #64	; 0x40
 800b172:	2200      	movs	r2, #0
 800b174:	2100      	movs	r1, #0
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f001 f9dd 	bl	800c536 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2240      	movs	r2, #64	; 0x40
 800b188:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b18c:	2340      	movs	r3, #64	; 0x40
 800b18e:	2200      	movs	r2, #0
 800b190:	2180      	movs	r1, #128	; 0x80
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f001 f9cf 	bl	800c536 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2240      	movs	r2, #64	; 0x40
 800b1a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d009      	beq.n	800b1e0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	6852      	ldr	r2, [r2, #4]
 800b1d8:	b2d2      	uxtb	r2, r2
 800b1da:	4611      	mov	r1, r2
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	4798      	blx	r3
  }

  return USBD_OK;
 800b1e0:	2300      	movs	r3, #0
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3708      	adds	r7, #8
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b1ea:	b480      	push	{r7}
 800b1ec:	b083      	sub	sp, #12
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	78fa      	ldrb	r2, [r7, #3]
 800b1fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	370c      	adds	r7, #12
 800b202:	46bd      	mov	sp, r7
 800b204:	bc80      	pop	{r7}
 800b206:	4770      	bx	lr

0800b208 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2204      	movs	r2, #4
 800b220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	370c      	adds	r7, #12
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bc80      	pop	{r7}
 800b22e:	4770      	bx	lr

0800b230 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b23e:	2b04      	cmp	r3, #4
 800b240:	d105      	bne.n	800b24e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b24e:	2300      	movs	r3, #0
}
 800b250:	4618      	mov	r0, r3
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	bc80      	pop	{r7}
 800b258:	4770      	bx	lr

0800b25a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b082      	sub	sp, #8
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b268:	2b03      	cmp	r3, #3
 800b26a:	d10b      	bne.n	800b284 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b272:	69db      	ldr	r3, [r3, #28]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d005      	beq.n	800b284 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b27e:	69db      	ldr	r3, [r3, #28]
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b284:	2300      	movs	r3, #0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3708      	adds	r7, #8
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
	...

0800b290 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b29a:	2300      	movs	r3, #0
 800b29c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b2a6:	2b40      	cmp	r3, #64	; 0x40
 800b2a8:	d005      	beq.n	800b2b6 <USBD_StdDevReq+0x26>
 800b2aa:	2b40      	cmp	r3, #64	; 0x40
 800b2ac:	d84f      	bhi.n	800b34e <USBD_StdDevReq+0xbe>
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d009      	beq.n	800b2c6 <USBD_StdDevReq+0x36>
 800b2b2:	2b20      	cmp	r3, #32
 800b2b4:	d14b      	bne.n	800b34e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	6839      	ldr	r1, [r7, #0]
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	4798      	blx	r3
      break;
 800b2c4:	e048      	b.n	800b358 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	785b      	ldrb	r3, [r3, #1]
 800b2ca:	2b09      	cmp	r3, #9
 800b2cc:	d839      	bhi.n	800b342 <USBD_StdDevReq+0xb2>
 800b2ce:	a201      	add	r2, pc, #4	; (adr r2, 800b2d4 <USBD_StdDevReq+0x44>)
 800b2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2d4:	0800b325 	.word	0x0800b325
 800b2d8:	0800b339 	.word	0x0800b339
 800b2dc:	0800b343 	.word	0x0800b343
 800b2e0:	0800b32f 	.word	0x0800b32f
 800b2e4:	0800b343 	.word	0x0800b343
 800b2e8:	0800b307 	.word	0x0800b307
 800b2ec:	0800b2fd 	.word	0x0800b2fd
 800b2f0:	0800b343 	.word	0x0800b343
 800b2f4:	0800b31b 	.word	0x0800b31b
 800b2f8:	0800b311 	.word	0x0800b311
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 f9dc 	bl	800b6bc <USBD_GetDescriptor>
          break;
 800b304:	e022      	b.n	800b34c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b306:	6839      	ldr	r1, [r7, #0]
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 fb3f 	bl	800b98c <USBD_SetAddress>
          break;
 800b30e:	e01d      	b.n	800b34c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b310:	6839      	ldr	r1, [r7, #0]
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 fb7e 	bl	800ba14 <USBD_SetConfig>
          break;
 800b318:	e018      	b.n	800b34c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b31a:	6839      	ldr	r1, [r7, #0]
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 fc07 	bl	800bb30 <USBD_GetConfig>
          break;
 800b322:	e013      	b.n	800b34c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b324:	6839      	ldr	r1, [r7, #0]
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 fc37 	bl	800bb9a <USBD_GetStatus>
          break;
 800b32c:	e00e      	b.n	800b34c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b32e:	6839      	ldr	r1, [r7, #0]
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 fc65 	bl	800bc00 <USBD_SetFeature>
          break;
 800b336:	e009      	b.n	800b34c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b338:	6839      	ldr	r1, [r7, #0]
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 fc74 	bl	800bc28 <USBD_ClrFeature>
          break;
 800b340:	e004      	b.n	800b34c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b342:	6839      	ldr	r1, [r7, #0]
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 fccc 	bl	800bce2 <USBD_CtlError>
          break;
 800b34a:	bf00      	nop
      }
      break;
 800b34c:	e004      	b.n	800b358 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b34e:	6839      	ldr	r1, [r7, #0]
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 fcc6 	bl	800bce2 <USBD_CtlError>
      break;
 800b356:	bf00      	nop
  }

  return ret;
 800b358:	7bfb      	ldrb	r3, [r7, #15]
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3710      	adds	r7, #16
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop

0800b364 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b36e:	2300      	movs	r3, #0
 800b370:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b37a:	2b40      	cmp	r3, #64	; 0x40
 800b37c:	d005      	beq.n	800b38a <USBD_StdItfReq+0x26>
 800b37e:	2b40      	cmp	r3, #64	; 0x40
 800b380:	d82e      	bhi.n	800b3e0 <USBD_StdItfReq+0x7c>
 800b382:	2b00      	cmp	r3, #0
 800b384:	d001      	beq.n	800b38a <USBD_StdItfReq+0x26>
 800b386:	2b20      	cmp	r3, #32
 800b388:	d12a      	bne.n	800b3e0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b390:	3b01      	subs	r3, #1
 800b392:	2b02      	cmp	r3, #2
 800b394:	d81d      	bhi.n	800b3d2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	889b      	ldrh	r3, [r3, #4]
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d813      	bhi.n	800b3c8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	6839      	ldr	r1, [r7, #0]
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	4798      	blx	r3
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	88db      	ldrh	r3, [r3, #6]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d110      	bne.n	800b3dc <USBD_StdItfReq+0x78>
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d10d      	bne.n	800b3dc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 fd56 	bl	800be72 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b3c6:	e009      	b.n	800b3dc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b3c8:	6839      	ldr	r1, [r7, #0]
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 fc89 	bl	800bce2 <USBD_CtlError>
          break;
 800b3d0:	e004      	b.n	800b3dc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b3d2:	6839      	ldr	r1, [r7, #0]
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 fc84 	bl	800bce2 <USBD_CtlError>
          break;
 800b3da:	e000      	b.n	800b3de <USBD_StdItfReq+0x7a>
          break;
 800b3dc:	bf00      	nop
      }
      break;
 800b3de:	e004      	b.n	800b3ea <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b3e0:	6839      	ldr	r1, [r7, #0]
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 fc7d 	bl	800bce2 <USBD_CtlError>
      break;
 800b3e8:	bf00      	nop
  }

  return USBD_OK;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3fe:	2300      	movs	r3, #0
 800b400:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	889b      	ldrh	r3, [r3, #4]
 800b406:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b410:	2b40      	cmp	r3, #64	; 0x40
 800b412:	d007      	beq.n	800b424 <USBD_StdEPReq+0x30>
 800b414:	2b40      	cmp	r3, #64	; 0x40
 800b416:	f200 8146 	bhi.w	800b6a6 <USBD_StdEPReq+0x2b2>
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d00a      	beq.n	800b434 <USBD_StdEPReq+0x40>
 800b41e:	2b20      	cmp	r3, #32
 800b420:	f040 8141 	bne.w	800b6a6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	6839      	ldr	r1, [r7, #0]
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	4798      	blx	r3
      break;
 800b432:	e13d      	b.n	800b6b0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b43c:	2b20      	cmp	r3, #32
 800b43e:	d10a      	bne.n	800b456 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	6839      	ldr	r1, [r7, #0]
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	4798      	blx	r3
 800b44e:	4603      	mov	r3, r0
 800b450:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b452:	7bfb      	ldrb	r3, [r7, #15]
 800b454:	e12d      	b.n	800b6b2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	785b      	ldrb	r3, [r3, #1]
 800b45a:	2b03      	cmp	r3, #3
 800b45c:	d007      	beq.n	800b46e <USBD_StdEPReq+0x7a>
 800b45e:	2b03      	cmp	r3, #3
 800b460:	f300 811b 	bgt.w	800b69a <USBD_StdEPReq+0x2a6>
 800b464:	2b00      	cmp	r3, #0
 800b466:	d072      	beq.n	800b54e <USBD_StdEPReq+0x15a>
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d03a      	beq.n	800b4e2 <USBD_StdEPReq+0xee>
 800b46c:	e115      	b.n	800b69a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b474:	2b02      	cmp	r3, #2
 800b476:	d002      	beq.n	800b47e <USBD_StdEPReq+0x8a>
 800b478:	2b03      	cmp	r3, #3
 800b47a:	d015      	beq.n	800b4a8 <USBD_StdEPReq+0xb4>
 800b47c:	e02b      	b.n	800b4d6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b47e:	7bbb      	ldrb	r3, [r7, #14]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d00c      	beq.n	800b49e <USBD_StdEPReq+0xaa>
 800b484:	7bbb      	ldrb	r3, [r7, #14]
 800b486:	2b80      	cmp	r3, #128	; 0x80
 800b488:	d009      	beq.n	800b49e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b48a:	7bbb      	ldrb	r3, [r7, #14]
 800b48c:	4619      	mov	r1, r3
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f001 f896 	bl	800c5c0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b494:	2180      	movs	r1, #128	; 0x80
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f001 f892 	bl	800c5c0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b49c:	e020      	b.n	800b4e0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b49e:	6839      	ldr	r1, [r7, #0]
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 fc1e 	bl	800bce2 <USBD_CtlError>
              break;
 800b4a6:	e01b      	b.n	800b4e0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	885b      	ldrh	r3, [r3, #2]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d10e      	bne.n	800b4ce <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b4b0:	7bbb      	ldrb	r3, [r7, #14]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d00b      	beq.n	800b4ce <USBD_StdEPReq+0xda>
 800b4b6:	7bbb      	ldrb	r3, [r7, #14]
 800b4b8:	2b80      	cmp	r3, #128	; 0x80
 800b4ba:	d008      	beq.n	800b4ce <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	88db      	ldrh	r3, [r3, #6]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d104      	bne.n	800b4ce <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b4c4:	7bbb      	ldrb	r3, [r7, #14]
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f001 f879 	bl	800c5c0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fccf 	bl	800be72 <USBD_CtlSendStatus>

              break;
 800b4d4:	e004      	b.n	800b4e0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b4d6:	6839      	ldr	r1, [r7, #0]
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 fc02 	bl	800bce2 <USBD_CtlError>
              break;
 800b4de:	bf00      	nop
          }
          break;
 800b4e0:	e0e0      	b.n	800b6a4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d002      	beq.n	800b4f2 <USBD_StdEPReq+0xfe>
 800b4ec:	2b03      	cmp	r3, #3
 800b4ee:	d015      	beq.n	800b51c <USBD_StdEPReq+0x128>
 800b4f0:	e026      	b.n	800b540 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4f2:	7bbb      	ldrb	r3, [r7, #14]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d00c      	beq.n	800b512 <USBD_StdEPReq+0x11e>
 800b4f8:	7bbb      	ldrb	r3, [r7, #14]
 800b4fa:	2b80      	cmp	r3, #128	; 0x80
 800b4fc:	d009      	beq.n	800b512 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b4fe:	7bbb      	ldrb	r3, [r7, #14]
 800b500:	4619      	mov	r1, r3
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f001 f85c 	bl	800c5c0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b508:	2180      	movs	r1, #128	; 0x80
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f001 f858 	bl	800c5c0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b510:	e01c      	b.n	800b54c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b512:	6839      	ldr	r1, [r7, #0]
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 fbe4 	bl	800bce2 <USBD_CtlError>
              break;
 800b51a:	e017      	b.n	800b54c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	885b      	ldrh	r3, [r3, #2]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d112      	bne.n	800b54a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b524:	7bbb      	ldrb	r3, [r7, #14]
 800b526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d004      	beq.n	800b538 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b52e:	7bbb      	ldrb	r3, [r7, #14]
 800b530:	4619      	mov	r1, r3
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f001 f863 	bl	800c5fe <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 fc9a 	bl	800be72 <USBD_CtlSendStatus>
              }
              break;
 800b53e:	e004      	b.n	800b54a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b540:	6839      	ldr	r1, [r7, #0]
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 fbcd 	bl	800bce2 <USBD_CtlError>
              break;
 800b548:	e000      	b.n	800b54c <USBD_StdEPReq+0x158>
              break;
 800b54a:	bf00      	nop
          }
          break;
 800b54c:	e0aa      	b.n	800b6a4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b554:	2b02      	cmp	r3, #2
 800b556:	d002      	beq.n	800b55e <USBD_StdEPReq+0x16a>
 800b558:	2b03      	cmp	r3, #3
 800b55a:	d032      	beq.n	800b5c2 <USBD_StdEPReq+0x1ce>
 800b55c:	e097      	b.n	800b68e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b55e:	7bbb      	ldrb	r3, [r7, #14]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d007      	beq.n	800b574 <USBD_StdEPReq+0x180>
 800b564:	7bbb      	ldrb	r3, [r7, #14]
 800b566:	2b80      	cmp	r3, #128	; 0x80
 800b568:	d004      	beq.n	800b574 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b56a:	6839      	ldr	r1, [r7, #0]
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 fbb8 	bl	800bce2 <USBD_CtlError>
                break;
 800b572:	e091      	b.n	800b698 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	da0b      	bge.n	800b594 <USBD_StdEPReq+0x1a0>
 800b57c:	7bbb      	ldrb	r3, [r7, #14]
 800b57e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b582:	4613      	mov	r3, r2
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	4413      	add	r3, r2
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	3310      	adds	r3, #16
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	4413      	add	r3, r2
 800b590:	3304      	adds	r3, #4
 800b592:	e00b      	b.n	800b5ac <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b594:	7bbb      	ldrb	r3, [r7, #14]
 800b596:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b59a:	4613      	mov	r3, r2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	4413      	add	r3, r2
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	3304      	adds	r3, #4
 800b5ac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	2202      	movs	r2, #2
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 fbfb 	bl	800bdb6 <USBD_CtlSendData>
              break;
 800b5c0:	e06a      	b.n	800b698 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b5c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	da11      	bge.n	800b5ee <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b5ca:	7bbb      	ldrb	r3, [r7, #14]
 800b5cc:	f003 020f 	and.w	r2, r3, #15
 800b5d0:	6879      	ldr	r1, [r7, #4]
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	4413      	add	r3, r2
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	440b      	add	r3, r1
 800b5dc:	3318      	adds	r3, #24
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d117      	bne.n	800b614 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b5e4:	6839      	ldr	r1, [r7, #0]
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 fb7b 	bl	800bce2 <USBD_CtlError>
                  break;
 800b5ec:	e054      	b.n	800b698 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b5ee:	7bbb      	ldrb	r3, [r7, #14]
 800b5f0:	f003 020f 	and.w	r2, r3, #15
 800b5f4:	6879      	ldr	r1, [r7, #4]
 800b5f6:	4613      	mov	r3, r2
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	4413      	add	r3, r2
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	440b      	add	r3, r1
 800b600:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d104      	bne.n	800b614 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b60a:	6839      	ldr	r1, [r7, #0]
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 fb68 	bl	800bce2 <USBD_CtlError>
                  break;
 800b612:	e041      	b.n	800b698 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b614:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	da0b      	bge.n	800b634 <USBD_StdEPReq+0x240>
 800b61c:	7bbb      	ldrb	r3, [r7, #14]
 800b61e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b622:	4613      	mov	r3, r2
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	4413      	add	r3, r2
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	3310      	adds	r3, #16
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	4413      	add	r3, r2
 800b630:	3304      	adds	r3, #4
 800b632:	e00b      	b.n	800b64c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b634:	7bbb      	ldrb	r3, [r7, #14]
 800b636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b63a:	4613      	mov	r3, r2
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	4413      	add	r3, r2
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	4413      	add	r3, r2
 800b64a:	3304      	adds	r3, #4
 800b64c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b64e:	7bbb      	ldrb	r3, [r7, #14]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d002      	beq.n	800b65a <USBD_StdEPReq+0x266>
 800b654:	7bbb      	ldrb	r3, [r7, #14]
 800b656:	2b80      	cmp	r3, #128	; 0x80
 800b658:	d103      	bne.n	800b662 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	2200      	movs	r2, #0
 800b65e:	601a      	str	r2, [r3, #0]
 800b660:	e00e      	b.n	800b680 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b662:	7bbb      	ldrb	r3, [r7, #14]
 800b664:	4619      	mov	r1, r3
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 ffe8 	bl	800c63c <USBD_LL_IsStallEP>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d003      	beq.n	800b67a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	2201      	movs	r2, #1
 800b676:	601a      	str	r2, [r3, #0]
 800b678:	e002      	b.n	800b680 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	2200      	movs	r2, #0
 800b67e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	2202      	movs	r2, #2
 800b684:	4619      	mov	r1, r3
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 fb95 	bl	800bdb6 <USBD_CtlSendData>
              break;
 800b68c:	e004      	b.n	800b698 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b68e:	6839      	ldr	r1, [r7, #0]
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 fb26 	bl	800bce2 <USBD_CtlError>
              break;
 800b696:	bf00      	nop
          }
          break;
 800b698:	e004      	b.n	800b6a4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b69a:	6839      	ldr	r1, [r7, #0]
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 fb20 	bl	800bce2 <USBD_CtlError>
          break;
 800b6a2:	bf00      	nop
      }
      break;
 800b6a4:	e004      	b.n	800b6b0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b6a6:	6839      	ldr	r1, [r7, #0]
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 fb1a 	bl	800bce2 <USBD_CtlError>
      break;
 800b6ae:	bf00      	nop
  }

  return ret;
 800b6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
	...

0800b6bc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	885b      	ldrh	r3, [r3, #2]
 800b6d6:	0a1b      	lsrs	r3, r3, #8
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	2b06      	cmp	r3, #6
 800b6de:	f200 8128 	bhi.w	800b932 <USBD_GetDescriptor+0x276>
 800b6e2:	a201      	add	r2, pc, #4	; (adr r2, 800b6e8 <USBD_GetDescriptor+0x2c>)
 800b6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e8:	0800b705 	.word	0x0800b705
 800b6ec:	0800b71d 	.word	0x0800b71d
 800b6f0:	0800b75d 	.word	0x0800b75d
 800b6f4:	0800b933 	.word	0x0800b933
 800b6f8:	0800b933 	.word	0x0800b933
 800b6fc:	0800b8d3 	.word	0x0800b8d3
 800b700:	0800b8ff 	.word	0x0800b8ff
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	7c12      	ldrb	r2, [r2, #16]
 800b710:	f107 0108 	add.w	r1, r7, #8
 800b714:	4610      	mov	r0, r2
 800b716:	4798      	blx	r3
 800b718:	60f8      	str	r0, [r7, #12]
      break;
 800b71a:	e112      	b.n	800b942 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	7c1b      	ldrb	r3, [r3, #16]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10d      	bne.n	800b740 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b72a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b72c:	f107 0208 	add.w	r2, r7, #8
 800b730:	4610      	mov	r0, r2
 800b732:	4798      	blx	r3
 800b734:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	3301      	adds	r3, #1
 800b73a:	2202      	movs	r2, #2
 800b73c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b73e:	e100      	b.n	800b942 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b748:	f107 0208 	add.w	r2, r7, #8
 800b74c:	4610      	mov	r0, r2
 800b74e:	4798      	blx	r3
 800b750:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	3301      	adds	r3, #1
 800b756:	2202      	movs	r2, #2
 800b758:	701a      	strb	r2, [r3, #0]
      break;
 800b75a:	e0f2      	b.n	800b942 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	885b      	ldrh	r3, [r3, #2]
 800b760:	b2db      	uxtb	r3, r3
 800b762:	2b05      	cmp	r3, #5
 800b764:	f200 80ac 	bhi.w	800b8c0 <USBD_GetDescriptor+0x204>
 800b768:	a201      	add	r2, pc, #4	; (adr r2, 800b770 <USBD_GetDescriptor+0xb4>)
 800b76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b76e:	bf00      	nop
 800b770:	0800b789 	.word	0x0800b789
 800b774:	0800b7bd 	.word	0x0800b7bd
 800b778:	0800b7f1 	.word	0x0800b7f1
 800b77c:	0800b825 	.word	0x0800b825
 800b780:	0800b859 	.word	0x0800b859
 800b784:	0800b88d 	.word	0x0800b88d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d00b      	beq.n	800b7ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	7c12      	ldrb	r2, [r2, #16]
 800b7a0:	f107 0108 	add.w	r1, r7, #8
 800b7a4:	4610      	mov	r0, r2
 800b7a6:	4798      	blx	r3
 800b7a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7aa:	e091      	b.n	800b8d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7ac:	6839      	ldr	r1, [r7, #0]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fa97 	bl	800bce2 <USBD_CtlError>
            err++;
 800b7b4:	7afb      	ldrb	r3, [r7, #11]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b7ba:	e089      	b.n	800b8d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d00b      	beq.n	800b7e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	7c12      	ldrb	r2, [r2, #16]
 800b7d4:	f107 0108 	add.w	r1, r7, #8
 800b7d8:	4610      	mov	r0, r2
 800b7da:	4798      	blx	r3
 800b7dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7de:	e077      	b.n	800b8d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7e0:	6839      	ldr	r1, [r7, #0]
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 fa7d 	bl	800bce2 <USBD_CtlError>
            err++;
 800b7e8:	7afb      	ldrb	r3, [r7, #11]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b7ee:	e06f      	b.n	800b8d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00b      	beq.n	800b814 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	7c12      	ldrb	r2, [r2, #16]
 800b808:	f107 0108 	add.w	r1, r7, #8
 800b80c:	4610      	mov	r0, r2
 800b80e:	4798      	blx	r3
 800b810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b812:	e05d      	b.n	800b8d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b814:	6839      	ldr	r1, [r7, #0]
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fa63 	bl	800bce2 <USBD_CtlError>
            err++;
 800b81c:	7afb      	ldrb	r3, [r7, #11]
 800b81e:	3301      	adds	r3, #1
 800b820:	72fb      	strb	r3, [r7, #11]
          break;
 800b822:	e055      	b.n	800b8d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b82a:	691b      	ldr	r3, [r3, #16]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d00b      	beq.n	800b848 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	7c12      	ldrb	r2, [r2, #16]
 800b83c:	f107 0108 	add.w	r1, r7, #8
 800b840:	4610      	mov	r0, r2
 800b842:	4798      	blx	r3
 800b844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b846:	e043      	b.n	800b8d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b848:	6839      	ldr	r1, [r7, #0]
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 fa49 	bl	800bce2 <USBD_CtlError>
            err++;
 800b850:	7afb      	ldrb	r3, [r7, #11]
 800b852:	3301      	adds	r3, #1
 800b854:	72fb      	strb	r3, [r7, #11]
          break;
 800b856:	e03b      	b.n	800b8d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b85e:	695b      	ldr	r3, [r3, #20]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d00b      	beq.n	800b87c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b86a:	695b      	ldr	r3, [r3, #20]
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	7c12      	ldrb	r2, [r2, #16]
 800b870:	f107 0108 	add.w	r1, r7, #8
 800b874:	4610      	mov	r0, r2
 800b876:	4798      	blx	r3
 800b878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b87a:	e029      	b.n	800b8d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b87c:	6839      	ldr	r1, [r7, #0]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 fa2f 	bl	800bce2 <USBD_CtlError>
            err++;
 800b884:	7afb      	ldrb	r3, [r7, #11]
 800b886:	3301      	adds	r3, #1
 800b888:	72fb      	strb	r3, [r7, #11]
          break;
 800b88a:	e021      	b.n	800b8d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b892:	699b      	ldr	r3, [r3, #24]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d00b      	beq.n	800b8b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b89e:	699b      	ldr	r3, [r3, #24]
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	7c12      	ldrb	r2, [r2, #16]
 800b8a4:	f107 0108 	add.w	r1, r7, #8
 800b8a8:	4610      	mov	r0, r2
 800b8aa:	4798      	blx	r3
 800b8ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8ae:	e00f      	b.n	800b8d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8b0:	6839      	ldr	r1, [r7, #0]
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 fa15 	bl	800bce2 <USBD_CtlError>
            err++;
 800b8b8:	7afb      	ldrb	r3, [r7, #11]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	72fb      	strb	r3, [r7, #11]
          break;
 800b8be:	e007      	b.n	800b8d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b8c0:	6839      	ldr	r1, [r7, #0]
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fa0d 	bl	800bce2 <USBD_CtlError>
          err++;
 800b8c8:	7afb      	ldrb	r3, [r7, #11]
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b8ce:	e038      	b.n	800b942 <USBD_GetDescriptor+0x286>
 800b8d0:	e037      	b.n	800b942 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	7c1b      	ldrb	r3, [r3, #16]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d109      	bne.n	800b8ee <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8e2:	f107 0208 	add.w	r2, r7, #8
 800b8e6:	4610      	mov	r0, r2
 800b8e8:	4798      	blx	r3
 800b8ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8ec:	e029      	b.n	800b942 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b8ee:	6839      	ldr	r1, [r7, #0]
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 f9f6 	bl	800bce2 <USBD_CtlError>
        err++;
 800b8f6:	7afb      	ldrb	r3, [r7, #11]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	72fb      	strb	r3, [r7, #11]
      break;
 800b8fc:	e021      	b.n	800b942 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	7c1b      	ldrb	r3, [r3, #16]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d10d      	bne.n	800b922 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b90e:	f107 0208 	add.w	r2, r7, #8
 800b912:	4610      	mov	r0, r2
 800b914:	4798      	blx	r3
 800b916:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	3301      	adds	r3, #1
 800b91c:	2207      	movs	r2, #7
 800b91e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b920:	e00f      	b.n	800b942 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b922:	6839      	ldr	r1, [r7, #0]
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 f9dc 	bl	800bce2 <USBD_CtlError>
        err++;
 800b92a:	7afb      	ldrb	r3, [r7, #11]
 800b92c:	3301      	adds	r3, #1
 800b92e:	72fb      	strb	r3, [r7, #11]
      break;
 800b930:	e007      	b.n	800b942 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b932:	6839      	ldr	r1, [r7, #0]
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 f9d4 	bl	800bce2 <USBD_CtlError>
      err++;
 800b93a:	7afb      	ldrb	r3, [r7, #11]
 800b93c:	3301      	adds	r3, #1
 800b93e:	72fb      	strb	r3, [r7, #11]
      break;
 800b940:	bf00      	nop
  }

  if (err != 0U)
 800b942:	7afb      	ldrb	r3, [r7, #11]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d11c      	bne.n	800b982 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b948:	893b      	ldrh	r3, [r7, #8]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d011      	beq.n	800b972 <USBD_GetDescriptor+0x2b6>
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	88db      	ldrh	r3, [r3, #6]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00d      	beq.n	800b972 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	88da      	ldrh	r2, [r3, #6]
 800b95a:	893b      	ldrh	r3, [r7, #8]
 800b95c:	4293      	cmp	r3, r2
 800b95e:	bf28      	it	cs
 800b960:	4613      	movcs	r3, r2
 800b962:	b29b      	uxth	r3, r3
 800b964:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b966:	893b      	ldrh	r3, [r7, #8]
 800b968:	461a      	mov	r2, r3
 800b96a:	68f9      	ldr	r1, [r7, #12]
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f000 fa22 	bl	800bdb6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	88db      	ldrh	r3, [r3, #6]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d104      	bne.n	800b984 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 fa79 	bl	800be72 <USBD_CtlSendStatus>
 800b980:	e000      	b.n	800b984 <USBD_GetDescriptor+0x2c8>
    return;
 800b982:	bf00      	nop
    }
  }
}
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop

0800b98c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	889b      	ldrh	r3, [r3, #4]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d130      	bne.n	800ba00 <USBD_SetAddress+0x74>
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	88db      	ldrh	r3, [r3, #6]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d12c      	bne.n	800ba00 <USBD_SetAddress+0x74>
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	885b      	ldrh	r3, [r3, #2]
 800b9aa:	2b7f      	cmp	r3, #127	; 0x7f
 800b9ac:	d828      	bhi.n	800ba00 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	885b      	ldrh	r3, [r3, #2]
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9c0:	2b03      	cmp	r3, #3
 800b9c2:	d104      	bne.n	800b9ce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b9c4:	6839      	ldr	r1, [r7, #0]
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 f98b 	bl	800bce2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9cc:	e01d      	b.n	800ba0a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	7bfa      	ldrb	r2, [r7, #15]
 800b9d2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b9d6:	7bfb      	ldrb	r3, [r7, #15]
 800b9d8:	4619      	mov	r1, r3
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 fe5a 	bl	800c694 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 fa46 	bl	800be72 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b9e6:	7bfb      	ldrb	r3, [r7, #15]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d004      	beq.n	800b9f6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2202      	movs	r2, #2
 800b9f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9f4:	e009      	b.n	800ba0a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9fe:	e004      	b.n	800ba0a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ba00:	6839      	ldr	r1, [r7, #0]
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 f96d 	bl	800bce2 <USBD_CtlError>
  }
}
 800ba08:	bf00      	nop
 800ba0a:	bf00      	nop
 800ba0c:	3710      	adds	r7, #16
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
	...

0800ba14 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	885b      	ldrh	r3, [r3, #2]
 800ba22:	b2da      	uxtb	r2, r3
 800ba24:	4b41      	ldr	r3, [pc, #260]	; (800bb2c <USBD_SetConfig+0x118>)
 800ba26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba28:	4b40      	ldr	r3, [pc, #256]	; (800bb2c <USBD_SetConfig+0x118>)
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d904      	bls.n	800ba3a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ba30:	6839      	ldr	r1, [r7, #0]
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f955 	bl	800bce2 <USBD_CtlError>
 800ba38:	e075      	b.n	800bb26 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba40:	2b02      	cmp	r3, #2
 800ba42:	d002      	beq.n	800ba4a <USBD_SetConfig+0x36>
 800ba44:	2b03      	cmp	r3, #3
 800ba46:	d023      	beq.n	800ba90 <USBD_SetConfig+0x7c>
 800ba48:	e062      	b.n	800bb10 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ba4a:	4b38      	ldr	r3, [pc, #224]	; (800bb2c <USBD_SetConfig+0x118>)
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d01a      	beq.n	800ba88 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ba52:	4b36      	ldr	r3, [pc, #216]	; (800bb2c <USBD_SetConfig+0x118>)
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	461a      	mov	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2203      	movs	r2, #3
 800ba60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ba64:	4b31      	ldr	r3, [pc, #196]	; (800bb2c <USBD_SetConfig+0x118>)
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	4619      	mov	r1, r3
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f7ff f9e7 	bl	800ae3e <USBD_SetClassConfig>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b02      	cmp	r3, #2
 800ba74:	d104      	bne.n	800ba80 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ba76:	6839      	ldr	r1, [r7, #0]
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 f932 	bl	800bce2 <USBD_CtlError>
            return;
 800ba7e:	e052      	b.n	800bb26 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 f9f6 	bl	800be72 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ba86:	e04e      	b.n	800bb26 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 f9f2 	bl	800be72 <USBD_CtlSendStatus>
        break;
 800ba8e:	e04a      	b.n	800bb26 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ba90:	4b26      	ldr	r3, [pc, #152]	; (800bb2c <USBD_SetConfig+0x118>)
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d112      	bne.n	800babe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2202      	movs	r2, #2
 800ba9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800baa0:	4b22      	ldr	r3, [pc, #136]	; (800bb2c <USBD_SetConfig+0x118>)
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	461a      	mov	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800baaa:	4b20      	ldr	r3, [pc, #128]	; (800bb2c <USBD_SetConfig+0x118>)
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	4619      	mov	r1, r3
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f7ff f9e3 	bl	800ae7c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 f9db 	bl	800be72 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800babc:	e033      	b.n	800bb26 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800babe:	4b1b      	ldr	r3, [pc, #108]	; (800bb2c <USBD_SetConfig+0x118>)
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	461a      	mov	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d01d      	beq.n	800bb08 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	4619      	mov	r1, r3
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f7ff f9d1 	bl	800ae7c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bada:	4b14      	ldr	r3, [pc, #80]	; (800bb2c <USBD_SetConfig+0x118>)
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	461a      	mov	r2, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bae4:	4b11      	ldr	r3, [pc, #68]	; (800bb2c <USBD_SetConfig+0x118>)
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	4619      	mov	r1, r3
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f7ff f9a7 	bl	800ae3e <USBD_SetClassConfig>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	d104      	bne.n	800bb00 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800baf6:	6839      	ldr	r1, [r7, #0]
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 f8f2 	bl	800bce2 <USBD_CtlError>
            return;
 800bafe:	e012      	b.n	800bb26 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 f9b6 	bl	800be72 <USBD_CtlSendStatus>
        break;
 800bb06:	e00e      	b.n	800bb26 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 f9b2 	bl	800be72 <USBD_CtlSendStatus>
        break;
 800bb0e:	e00a      	b.n	800bb26 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800bb10:	6839      	ldr	r1, [r7, #0]
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 f8e5 	bl	800bce2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bb18:	4b04      	ldr	r3, [pc, #16]	; (800bb2c <USBD_SetConfig+0x118>)
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f7ff f9ac 	bl	800ae7c <USBD_ClrClassConfig>
        break;
 800bb24:	bf00      	nop
    }
  }
}
 800bb26:	3708      	adds	r7, #8
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}
 800bb2c:	200002d8 	.word	0x200002d8

0800bb30 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	88db      	ldrh	r3, [r3, #6]
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d004      	beq.n	800bb4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bb42:	6839      	ldr	r1, [r7, #0]
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 f8cc 	bl	800bce2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bb4a:	e022      	b.n	800bb92 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb52:	2b02      	cmp	r3, #2
 800bb54:	dc02      	bgt.n	800bb5c <USBD_GetConfig+0x2c>
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	dc03      	bgt.n	800bb62 <USBD_GetConfig+0x32>
 800bb5a:	e015      	b.n	800bb88 <USBD_GetConfig+0x58>
 800bb5c:	2b03      	cmp	r3, #3
 800bb5e:	d00b      	beq.n	800bb78 <USBD_GetConfig+0x48>
 800bb60:	e012      	b.n	800bb88 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	3308      	adds	r3, #8
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	4619      	mov	r1, r3
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 f920 	bl	800bdb6 <USBD_CtlSendData>
        break;
 800bb76:	e00c      	b.n	800bb92 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	3304      	adds	r3, #4
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	4619      	mov	r1, r3
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 f918 	bl	800bdb6 <USBD_CtlSendData>
        break;
 800bb86:	e004      	b.n	800bb92 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bb88:	6839      	ldr	r1, [r7, #0]
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 f8a9 	bl	800bce2 <USBD_CtlError>
        break;
 800bb90:	bf00      	nop
}
 800bb92:	bf00      	nop
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b082      	sub	sp, #8
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbaa:	3b01      	subs	r3, #1
 800bbac:	2b02      	cmp	r3, #2
 800bbae:	d81e      	bhi.n	800bbee <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	88db      	ldrh	r3, [r3, #6]
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d004      	beq.n	800bbc2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bbb8:	6839      	ldr	r1, [r7, #0]
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 f891 	bl	800bce2 <USBD_CtlError>
        break;
 800bbc0:	e01a      	b.n	800bbf8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d005      	beq.n	800bbde <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	f043 0202 	orr.w	r2, r3, #2
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	330c      	adds	r3, #12
 800bbe2:	2202      	movs	r2, #2
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 f8e5 	bl	800bdb6 <USBD_CtlSendData>
      break;
 800bbec:	e004      	b.n	800bbf8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bbee:	6839      	ldr	r1, [r7, #0]
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 f876 	bl	800bce2 <USBD_CtlError>
      break;
 800bbf6:	bf00      	nop
  }
}
 800bbf8:	bf00      	nop
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	885b      	ldrh	r3, [r3, #2]
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d106      	bne.n	800bc20 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2201      	movs	r2, #1
 800bc16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 f929 	bl	800be72 <USBD_CtlSendStatus>
  }
}
 800bc20:	bf00      	nop
 800bc22:	3708      	adds	r7, #8
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	d80b      	bhi.n	800bc56 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	885b      	ldrh	r3, [r3, #2]
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d10c      	bne.n	800bc60 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 f90f 	bl	800be72 <USBD_CtlSendStatus>
      }
      break;
 800bc54:	e004      	b.n	800bc60 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bc56:	6839      	ldr	r1, [r7, #0]
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 f842 	bl	800bce2 <USBD_CtlError>
      break;
 800bc5e:	e000      	b.n	800bc62 <USBD_ClrFeature+0x3a>
      break;
 800bc60:	bf00      	nop
  }
}
 800bc62:	bf00      	nop
 800bc64:	3708      	adds	r7, #8
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bc6a:	b480      	push	{r7}
 800bc6c:	b083      	sub	sp, #12
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
 800bc72:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	781a      	ldrb	r2, [r3, #0]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	785a      	ldrb	r2, [r3, #1]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	3302      	adds	r3, #2
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	b29a      	uxth	r2, r3
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	3303      	adds	r3, #3
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	021b      	lsls	r3, r3, #8
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	4413      	add	r3, r2
 800bc9a:	b29a      	uxth	r2, r3
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	3304      	adds	r3, #4
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	b29a      	uxth	r2, r3
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	3305      	adds	r3, #5
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	021b      	lsls	r3, r3, #8
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	4413      	add	r3, r2
 800bcb6:	b29a      	uxth	r2, r3
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	3306      	adds	r3, #6
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	b29a      	uxth	r2, r3
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	3307      	adds	r3, #7
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	021b      	lsls	r3, r3, #8
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	4413      	add	r3, r2
 800bcd2:	b29a      	uxth	r2, r3
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	80da      	strh	r2, [r3, #6]

}
 800bcd8:	bf00      	nop
 800bcda:	370c      	adds	r7, #12
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bc80      	pop	{r7}
 800bce0:	4770      	bx	lr

0800bce2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b082      	sub	sp, #8
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
 800bcea:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bcec:	2180      	movs	r1, #128	; 0x80
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 fc66 	bl	800c5c0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bcf4:	2100      	movs	r1, #0
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 fc62 	bl	800c5c0 <USBD_LL_StallEP>
}
 800bcfc:	bf00      	nop
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b086      	sub	sp, #24
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bd10:	2300      	movs	r3, #0
 800bd12:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d032      	beq.n	800bd80 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bd1a:	68f8      	ldr	r0, [r7, #12]
 800bd1c:	f000 f834 	bl	800bd88 <USBD_GetLen>
 800bd20:	4603      	mov	r3, r0
 800bd22:	3301      	adds	r3, #1
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	005b      	lsls	r3, r3, #1
 800bd28:	b29a      	uxth	r2, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bd2e:	7dfb      	ldrb	r3, [r7, #23]
 800bd30:	1c5a      	adds	r2, r3, #1
 800bd32:	75fa      	strb	r2, [r7, #23]
 800bd34:	461a      	mov	r2, r3
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	4413      	add	r3, r2
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	7812      	ldrb	r2, [r2, #0]
 800bd3e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bd40:	7dfb      	ldrb	r3, [r7, #23]
 800bd42:	1c5a      	adds	r2, r3, #1
 800bd44:	75fa      	strb	r2, [r7, #23]
 800bd46:	461a      	mov	r2, r3
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	4413      	add	r3, r2
 800bd4c:	2203      	movs	r2, #3
 800bd4e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bd50:	e012      	b.n	800bd78 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	1c5a      	adds	r2, r3, #1
 800bd56:	60fa      	str	r2, [r7, #12]
 800bd58:	7dfa      	ldrb	r2, [r7, #23]
 800bd5a:	1c51      	adds	r1, r2, #1
 800bd5c:	75f9      	strb	r1, [r7, #23]
 800bd5e:	4611      	mov	r1, r2
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	440a      	add	r2, r1
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bd68:	7dfb      	ldrb	r3, [r7, #23]
 800bd6a:	1c5a      	adds	r2, r3, #1
 800bd6c:	75fa      	strb	r2, [r7, #23]
 800bd6e:	461a      	mov	r2, r3
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	4413      	add	r3, r2
 800bd74:	2200      	movs	r2, #0
 800bd76:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d1e8      	bne.n	800bd52 <USBD_GetString+0x4e>
    }
  }
}
 800bd80:	bf00      	nop
 800bd82:	3718      	adds	r7, #24
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bd90:	2300      	movs	r3, #0
 800bd92:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800bd94:	e005      	b.n	800bda2 <USBD_GetLen+0x1a>
  {
    len++;
 800bd96:	7bfb      	ldrb	r3, [r7, #15]
 800bd98:	3301      	adds	r3, #1
 800bd9a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d1f5      	bne.n	800bd96 <USBD_GetLen+0xe>
  }

  return len;
 800bdaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3714      	adds	r7, #20
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bc80      	pop	{r7}
 800bdb4:	4770      	bx	lr

0800bdb6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b084      	sub	sp, #16
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	60f8      	str	r0, [r7, #12]
 800bdbe:	60b9      	str	r1, [r7, #8]
 800bdc0:	4613      	mov	r3, r2
 800bdc2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2202      	movs	r2, #2
 800bdc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bdcc:	88fa      	ldrh	r2, [r7, #6]
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bdd2:	88fa      	ldrh	r2, [r7, #6]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bdd8:	88fb      	ldrh	r3, [r7, #6]
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	2100      	movs	r1, #0
 800bdde:	68f8      	ldr	r0, [r7, #12]
 800bde0:	f000 fc77 	bl	800c6d2 <USBD_LL_Transmit>

  return USBD_OK;
 800bde4:	2300      	movs	r3, #0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b084      	sub	sp, #16
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	60f8      	str	r0, [r7, #12]
 800bdf6:	60b9      	str	r1, [r7, #8]
 800bdf8:	4613      	mov	r3, r2
 800bdfa:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bdfc:	88fb      	ldrh	r3, [r7, #6]
 800bdfe:	68ba      	ldr	r2, [r7, #8]
 800be00:	2100      	movs	r1, #0
 800be02:	68f8      	ldr	r0, [r7, #12]
 800be04:	f000 fc65 	bl	800c6d2 <USBD_LL_Transmit>

  return USBD_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b084      	sub	sp, #16
 800be16:	af00      	add	r7, sp, #0
 800be18:	60f8      	str	r0, [r7, #12]
 800be1a:	60b9      	str	r1, [r7, #8]
 800be1c:	4613      	mov	r3, r2
 800be1e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2203      	movs	r2, #3
 800be24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800be28:	88fa      	ldrh	r2, [r7, #6]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800be30:	88fa      	ldrh	r2, [r7, #6]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be38:	88fb      	ldrh	r3, [r7, #6]
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	2100      	movs	r1, #0
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	f000 fc6a 	bl	800c718 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be44:	2300      	movs	r3, #0
}
 800be46:	4618      	mov	r0, r3
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800be4e:	b580      	push	{r7, lr}
 800be50:	b084      	sub	sp, #16
 800be52:	af00      	add	r7, sp, #0
 800be54:	60f8      	str	r0, [r7, #12]
 800be56:	60b9      	str	r1, [r7, #8]
 800be58:	4613      	mov	r3, r2
 800be5a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be5c:	88fb      	ldrh	r3, [r7, #6]
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	2100      	movs	r1, #0
 800be62:	68f8      	ldr	r0, [r7, #12]
 800be64:	f000 fc58 	bl	800c718 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3710      	adds	r7, #16
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}

0800be72 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800be72:	b580      	push	{r7, lr}
 800be74:	b082      	sub	sp, #8
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2204      	movs	r2, #4
 800be7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800be82:	2300      	movs	r3, #0
 800be84:	2200      	movs	r2, #0
 800be86:	2100      	movs	r1, #0
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 fc22 	bl	800c6d2 <USBD_LL_Transmit>

  return USBD_OK;
 800be8e:	2300      	movs	r3, #0
}
 800be90:	4618      	mov	r0, r3
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2205      	movs	r2, #5
 800bea4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bea8:	2300      	movs	r3, #0
 800beaa:	2200      	movs	r2, #0
 800beac:	2100      	movs	r1, #0
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 fc32 	bl	800c718 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3708      	adds	r7, #8
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
	...

0800bec0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bec4:	2200      	movs	r2, #0
 800bec6:	4912      	ldr	r1, [pc, #72]	; (800bf10 <MX_USB_DEVICE_Init+0x50>)
 800bec8:	4812      	ldr	r0, [pc, #72]	; (800bf14 <MX_USB_DEVICE_Init+0x54>)
 800beca:	f7fe ff5e 	bl	800ad8a <USBD_Init>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d001      	beq.n	800bed8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bed4:	f7f5 fae2 	bl	800149c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bed8:	490f      	ldr	r1, [pc, #60]	; (800bf18 <MX_USB_DEVICE_Init+0x58>)
 800beda:	480e      	ldr	r0, [pc, #56]	; (800bf14 <MX_USB_DEVICE_Init+0x54>)
 800bedc:	f7fe ff80 	bl	800ade0 <USBD_RegisterClass>
 800bee0:	4603      	mov	r3, r0
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d001      	beq.n	800beea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bee6:	f7f5 fad9 	bl	800149c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800beea:	490c      	ldr	r1, [pc, #48]	; (800bf1c <MX_USB_DEVICE_Init+0x5c>)
 800beec:	4809      	ldr	r0, [pc, #36]	; (800bf14 <MX_USB_DEVICE_Init+0x54>)
 800beee:	f7fe feb1 	bl	800ac54 <USBD_CDC_RegisterInterface>
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d001      	beq.n	800befc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bef8:	f7f5 fad0 	bl	800149c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800befc:	4805      	ldr	r0, [pc, #20]	; (800bf14 <MX_USB_DEVICE_Init+0x54>)
 800befe:	f7fe ff88 	bl	800ae12 <USBD_Start>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d001      	beq.n	800bf0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bf08:	f7f5 fac8 	bl	800149c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bf0c:	bf00      	nop
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	20000140 	.word	0x20000140
 800bf14:	20000828 	.word	0x20000828
 800bf18:	2000002c 	.word	0x2000002c
 800bf1c:	20000130 	.word	0x20000130

0800bf20 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bf24:	2200      	movs	r2, #0
 800bf26:	4905      	ldr	r1, [pc, #20]	; (800bf3c <CDC_Init_FS+0x1c>)
 800bf28:	4805      	ldr	r0, [pc, #20]	; (800bf40 <CDC_Init_FS+0x20>)
 800bf2a:	f7fe fea9 	bl	800ac80 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bf2e:	4905      	ldr	r1, [pc, #20]	; (800bf44 <CDC_Init_FS+0x24>)
 800bf30:	4803      	ldr	r0, [pc, #12]	; (800bf40 <CDC_Init_FS+0x20>)
 800bf32:	f7fe febe 	bl	800acb2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bf36:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	20000ed4 	.word	0x20000ed4
 800bf40:	20000828 	.word	0x20000828
 800bf44:	20000aec 	.word	0x20000aec

0800bf48 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bf4c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bc80      	pop	{r7}
 800bf54:	4770      	bx	lr
	...

0800bf58 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b083      	sub	sp, #12
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	4603      	mov	r3, r0
 800bf60:	6039      	str	r1, [r7, #0]
 800bf62:	71fb      	strb	r3, [r7, #7]
 800bf64:	4613      	mov	r3, r2
 800bf66:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bf68:	79fb      	ldrb	r3, [r7, #7]
 800bf6a:	2b23      	cmp	r3, #35	; 0x23
 800bf6c:	d84a      	bhi.n	800c004 <CDC_Control_FS+0xac>
 800bf6e:	a201      	add	r2, pc, #4	; (adr r2, 800bf74 <CDC_Control_FS+0x1c>)
 800bf70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf74:	0800c005 	.word	0x0800c005
 800bf78:	0800c005 	.word	0x0800c005
 800bf7c:	0800c005 	.word	0x0800c005
 800bf80:	0800c005 	.word	0x0800c005
 800bf84:	0800c005 	.word	0x0800c005
 800bf88:	0800c005 	.word	0x0800c005
 800bf8c:	0800c005 	.word	0x0800c005
 800bf90:	0800c005 	.word	0x0800c005
 800bf94:	0800c005 	.word	0x0800c005
 800bf98:	0800c005 	.word	0x0800c005
 800bf9c:	0800c005 	.word	0x0800c005
 800bfa0:	0800c005 	.word	0x0800c005
 800bfa4:	0800c005 	.word	0x0800c005
 800bfa8:	0800c005 	.word	0x0800c005
 800bfac:	0800c005 	.word	0x0800c005
 800bfb0:	0800c005 	.word	0x0800c005
 800bfb4:	0800c005 	.word	0x0800c005
 800bfb8:	0800c005 	.word	0x0800c005
 800bfbc:	0800c005 	.word	0x0800c005
 800bfc0:	0800c005 	.word	0x0800c005
 800bfc4:	0800c005 	.word	0x0800c005
 800bfc8:	0800c005 	.word	0x0800c005
 800bfcc:	0800c005 	.word	0x0800c005
 800bfd0:	0800c005 	.word	0x0800c005
 800bfd4:	0800c005 	.word	0x0800c005
 800bfd8:	0800c005 	.word	0x0800c005
 800bfdc:	0800c005 	.word	0x0800c005
 800bfe0:	0800c005 	.word	0x0800c005
 800bfe4:	0800c005 	.word	0x0800c005
 800bfe8:	0800c005 	.word	0x0800c005
 800bfec:	0800c005 	.word	0x0800c005
 800bff0:	0800c005 	.word	0x0800c005
 800bff4:	0800c005 	.word	0x0800c005
 800bff8:	0800c005 	.word	0x0800c005
 800bffc:	0800c005 	.word	0x0800c005
 800c000:	0800c005 	.word	0x0800c005
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c004:	bf00      	nop
  }

  return (USBD_OK);
 800c006:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c008:	4618      	mov	r0, r3
 800c00a:	370c      	adds	r7, #12
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bc80      	pop	{r7}
 800c010:	4770      	bx	lr
 800c012:	bf00      	nop

0800c014 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	for (int i = 0; i < (*Len); i++)
 800c01e:	2300      	movs	r3, #0
 800c020:	60fb      	str	r3, [r7, #12]
 800c022:	e009      	b.n	800c038 <CDC_Receive_FS+0x24>
		fifo_push(Buf[i]);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	4413      	add	r3, r2
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7f4 f89f 	bl	8000170 <fifo_push>
	for (int i = 0; i < (*Len); i++)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	3301      	adds	r3, #1
 800c036:	60fb      	str	r3, [r7, #12]
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d8f0      	bhi.n	800c024 <CDC_Receive_FS+0x10>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c042:	6879      	ldr	r1, [r7, #4]
 800c044:	4805      	ldr	r0, [pc, #20]	; (800c05c <CDC_Receive_FS+0x48>)
 800c046:	f7fe fe34 	bl	800acb2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c04a:	4804      	ldr	r0, [pc, #16]	; (800c05c <CDC_Receive_FS+0x48>)
 800c04c:	f7fe fe73 	bl	800ad36 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c050:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	20000828 	.word	0x20000828

0800c060 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	460b      	mov	r3, r1
 800c06a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c06c:	2300      	movs	r3, #0
 800c06e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c070:	4b0d      	ldr	r3, [pc, #52]	; (800c0a8 <CDC_Transmit_FS+0x48>)
 800c072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c076:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d001      	beq.n	800c086 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c082:	2301      	movs	r3, #1
 800c084:	e00b      	b.n	800c09e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c086:	887b      	ldrh	r3, [r7, #2]
 800c088:	461a      	mov	r2, r3
 800c08a:	6879      	ldr	r1, [r7, #4]
 800c08c:	4806      	ldr	r0, [pc, #24]	; (800c0a8 <CDC_Transmit_FS+0x48>)
 800c08e:	f7fe fdf7 	bl	800ac80 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c092:	4805      	ldr	r0, [pc, #20]	; (800c0a8 <CDC_Transmit_FS+0x48>)
 800c094:	f7fe fe20 	bl	800acd8 <USBD_CDC_TransmitPacket>
 800c098:	4603      	mov	r3, r0
 800c09a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	20000828 	.word	0x20000828

0800c0ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	6039      	str	r1, [r7, #0]
 800c0b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	2212      	movs	r2, #18
 800c0bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c0be:	4b03      	ldr	r3, [pc, #12]	; (800c0cc <USBD_FS_DeviceDescriptor+0x20>)
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bc80      	pop	{r7}
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	2000015c 	.word	0x2000015c

0800c0d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b083      	sub	sp, #12
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	6039      	str	r1, [r7, #0]
 800c0da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	2204      	movs	r2, #4
 800c0e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c0e2:	4b03      	ldr	r3, [pc, #12]	; (800c0f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	370c      	adds	r7, #12
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bc80      	pop	{r7}
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop
 800c0f0:	20000170 	.word	0x20000170

0800c0f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	6039      	str	r1, [r7, #0]
 800c0fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c100:	79fb      	ldrb	r3, [r7, #7]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d105      	bne.n	800c112 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c106:	683a      	ldr	r2, [r7, #0]
 800c108:	4907      	ldr	r1, [pc, #28]	; (800c128 <USBD_FS_ProductStrDescriptor+0x34>)
 800c10a:	4808      	ldr	r0, [pc, #32]	; (800c12c <USBD_FS_ProductStrDescriptor+0x38>)
 800c10c:	f7ff fdfa 	bl	800bd04 <USBD_GetString>
 800c110:	e004      	b.n	800c11c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c112:	683a      	ldr	r2, [r7, #0]
 800c114:	4904      	ldr	r1, [pc, #16]	; (800c128 <USBD_FS_ProductStrDescriptor+0x34>)
 800c116:	4805      	ldr	r0, [pc, #20]	; (800c12c <USBD_FS_ProductStrDescriptor+0x38>)
 800c118:	f7ff fdf4 	bl	800bd04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c11c:	4b02      	ldr	r3, [pc, #8]	; (800c128 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3708      	adds	r7, #8
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	200012bc 	.word	0x200012bc
 800c12c:	0800d4c4 	.word	0x0800d4c4

0800c130 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	4603      	mov	r3, r0
 800c138:	6039      	str	r1, [r7, #0]
 800c13a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c13c:	683a      	ldr	r2, [r7, #0]
 800c13e:	4904      	ldr	r1, [pc, #16]	; (800c150 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c140:	4804      	ldr	r0, [pc, #16]	; (800c154 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c142:	f7ff fddf 	bl	800bd04 <USBD_GetString>
  return USBD_StrDesc;
 800c146:	4b02      	ldr	r3, [pc, #8]	; (800c150 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3708      	adds	r7, #8
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	200012bc 	.word	0x200012bc
 800c154:	0800d4dc 	.word	0x0800d4dc

0800c158 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	4603      	mov	r3, r0
 800c160:	6039      	str	r1, [r7, #0]
 800c162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	221a      	movs	r2, #26
 800c168:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c16a:	f000 f843 	bl	800c1f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c16e:	4b02      	ldr	r3, [pc, #8]	; (800c178 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c170:	4618      	mov	r0, r3
 800c172:	3708      	adds	r7, #8
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}
 800c178:	20000174 	.word	0x20000174

0800c17c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	4603      	mov	r3, r0
 800c184:	6039      	str	r1, [r7, #0]
 800c186:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c188:	79fb      	ldrb	r3, [r7, #7]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d105      	bne.n	800c19a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c18e:	683a      	ldr	r2, [r7, #0]
 800c190:	4907      	ldr	r1, [pc, #28]	; (800c1b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c192:	4808      	ldr	r0, [pc, #32]	; (800c1b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c194:	f7ff fdb6 	bl	800bd04 <USBD_GetString>
 800c198:	e004      	b.n	800c1a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c19a:	683a      	ldr	r2, [r7, #0]
 800c19c:	4904      	ldr	r1, [pc, #16]	; (800c1b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c19e:	4805      	ldr	r0, [pc, #20]	; (800c1b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c1a0:	f7ff fdb0 	bl	800bd04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1a4:	4b02      	ldr	r3, [pc, #8]	; (800c1b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3708      	adds	r7, #8
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	200012bc 	.word	0x200012bc
 800c1b4:	0800d4f0 	.word	0x0800d4f0

0800c1b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	4603      	mov	r3, r0
 800c1c0:	6039      	str	r1, [r7, #0]
 800c1c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c1c4:	79fb      	ldrb	r3, [r7, #7]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d105      	bne.n	800c1d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	4907      	ldr	r1, [pc, #28]	; (800c1ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c1ce:	4808      	ldr	r0, [pc, #32]	; (800c1f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1d0:	f7ff fd98 	bl	800bd04 <USBD_GetString>
 800c1d4:	e004      	b.n	800c1e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c1d6:	683a      	ldr	r2, [r7, #0]
 800c1d8:	4904      	ldr	r1, [pc, #16]	; (800c1ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c1da:	4805      	ldr	r0, [pc, #20]	; (800c1f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1dc:	f7ff fd92 	bl	800bd04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1e0:	4b02      	ldr	r3, [pc, #8]	; (800c1ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3708      	adds	r7, #8
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	200012bc 	.word	0x200012bc
 800c1f0:	0800d4fc 	.word	0x0800d4fc

0800c1f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c1fa:	4b0f      	ldr	r3, [pc, #60]	; (800c238 <Get_SerialNum+0x44>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c200:	4b0e      	ldr	r3, [pc, #56]	; (800c23c <Get_SerialNum+0x48>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c206:	4b0e      	ldr	r3, [pc, #56]	; (800c240 <Get_SerialNum+0x4c>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4413      	add	r3, r2
 800c212:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d009      	beq.n	800c22e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c21a:	2208      	movs	r2, #8
 800c21c:	4909      	ldr	r1, [pc, #36]	; (800c244 <Get_SerialNum+0x50>)
 800c21e:	68f8      	ldr	r0, [r7, #12]
 800c220:	f000 f814 	bl	800c24c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c224:	2204      	movs	r2, #4
 800c226:	4908      	ldr	r1, [pc, #32]	; (800c248 <Get_SerialNum+0x54>)
 800c228:	68b8      	ldr	r0, [r7, #8]
 800c22a:	f000 f80f 	bl	800c24c <IntToUnicode>
  }
}
 800c22e:	bf00      	nop
 800c230:	3710      	adds	r7, #16
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	1ffff7e8 	.word	0x1ffff7e8
 800c23c:	1ffff7ec 	.word	0x1ffff7ec
 800c240:	1ffff7f0 	.word	0x1ffff7f0
 800c244:	20000176 	.word	0x20000176
 800c248:	20000186 	.word	0x20000186

0800c24c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b087      	sub	sp, #28
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	4613      	mov	r3, r2
 800c258:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c25a:	2300      	movs	r3, #0
 800c25c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c25e:	2300      	movs	r3, #0
 800c260:	75fb      	strb	r3, [r7, #23]
 800c262:	e027      	b.n	800c2b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	0f1b      	lsrs	r3, r3, #28
 800c268:	2b09      	cmp	r3, #9
 800c26a:	d80b      	bhi.n	800c284 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	0f1b      	lsrs	r3, r3, #28
 800c270:	b2da      	uxtb	r2, r3
 800c272:	7dfb      	ldrb	r3, [r7, #23]
 800c274:	005b      	lsls	r3, r3, #1
 800c276:	4619      	mov	r1, r3
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	440b      	add	r3, r1
 800c27c:	3230      	adds	r2, #48	; 0x30
 800c27e:	b2d2      	uxtb	r2, r2
 800c280:	701a      	strb	r2, [r3, #0]
 800c282:	e00a      	b.n	800c29a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	0f1b      	lsrs	r3, r3, #28
 800c288:	b2da      	uxtb	r2, r3
 800c28a:	7dfb      	ldrb	r3, [r7, #23]
 800c28c:	005b      	lsls	r3, r3, #1
 800c28e:	4619      	mov	r1, r3
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	440b      	add	r3, r1
 800c294:	3237      	adds	r2, #55	; 0x37
 800c296:	b2d2      	uxtb	r2, r2
 800c298:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	011b      	lsls	r3, r3, #4
 800c29e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c2a0:	7dfb      	ldrb	r3, [r7, #23]
 800c2a2:	005b      	lsls	r3, r3, #1
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	68ba      	ldr	r2, [r7, #8]
 800c2a8:	4413      	add	r3, r2
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c2ae:	7dfb      	ldrb	r3, [r7, #23]
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	75fb      	strb	r3, [r7, #23]
 800c2b4:	7dfa      	ldrb	r2, [r7, #23]
 800c2b6:	79fb      	ldrb	r3, [r7, #7]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d3d3      	bcc.n	800c264 <IntToUnicode+0x18>
  }
}
 800c2bc:	bf00      	nop
 800c2be:	bf00      	nop
 800c2c0:	371c      	adds	r7, #28
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bc80      	pop	{r7}
 800c2c6:	4770      	bx	lr

0800c2c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	4a0d      	ldr	r2, [pc, #52]	; (800c30c <HAL_PCD_MspInit+0x44>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d113      	bne.n	800c302 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c2da:	4b0d      	ldr	r3, [pc, #52]	; (800c310 <HAL_PCD_MspInit+0x48>)
 800c2dc:	69db      	ldr	r3, [r3, #28]
 800c2de:	4a0c      	ldr	r2, [pc, #48]	; (800c310 <HAL_PCD_MspInit+0x48>)
 800c2e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c2e4:	61d3      	str	r3, [r2, #28]
 800c2e6:	4b0a      	ldr	r3, [pc, #40]	; (800c310 <HAL_PCD_MspInit+0x48>)
 800c2e8:	69db      	ldr	r3, [r3, #28]
 800c2ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2ee:	60fb      	str	r3, [r7, #12]
 800c2f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	2014      	movs	r0, #20
 800c2f8:	f7f7 fda3 	bl	8003e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c2fc:	2014      	movs	r0, #20
 800c2fe:	f7f7 fdbc 	bl	8003e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c302:	bf00      	nop
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	40005c00 	.word	0x40005c00
 800c310:	40021000 	.word	0x40021000

0800c314 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c328:	4619      	mov	r1, r3
 800c32a:	4610      	mov	r0, r2
 800c32c:	f7fe fdb9 	bl	800aea2 <USBD_LL_SetupStage>
}
 800c330:	bf00      	nop
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	460b      	mov	r3, r1
 800c342:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c34a:	78fa      	ldrb	r2, [r7, #3]
 800c34c:	6879      	ldr	r1, [r7, #4]
 800c34e:	4613      	mov	r3, r2
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	4413      	add	r3, r2
 800c354:	00db      	lsls	r3, r3, #3
 800c356:	440b      	add	r3, r1
 800c358:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	78fb      	ldrb	r3, [r7, #3]
 800c360:	4619      	mov	r1, r3
 800c362:	f7fe fdeb 	bl	800af3c <USBD_LL_DataOutStage>
}
 800c366:	bf00      	nop
 800c368:	3708      	adds	r7, #8
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}

0800c36e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c36e:	b580      	push	{r7, lr}
 800c370:	b082      	sub	sp, #8
 800c372:	af00      	add	r7, sp, #0
 800c374:	6078      	str	r0, [r7, #4]
 800c376:	460b      	mov	r3, r1
 800c378:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c380:	78fa      	ldrb	r2, [r7, #3]
 800c382:	6879      	ldr	r1, [r7, #4]
 800c384:	4613      	mov	r3, r2
 800c386:	009b      	lsls	r3, r3, #2
 800c388:	4413      	add	r3, r2
 800c38a:	00db      	lsls	r3, r3, #3
 800c38c:	440b      	add	r3, r1
 800c38e:	333c      	adds	r3, #60	; 0x3c
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	78fb      	ldrb	r3, [r7, #3]
 800c394:	4619      	mov	r1, r3
 800c396:	f7fe fe42 	bl	800b01e <USBD_LL_DataInStage>
}
 800c39a:	bf00      	nop
 800c39c:	3708      	adds	r7, #8
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}

0800c3a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3a2:	b580      	push	{r7, lr}
 800c3a4:	b082      	sub	sp, #8
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7fe ff52 	bl	800b25a <USBD_LL_SOF>
}
 800c3b6:	bf00      	nop
 800c3b8:	3708      	adds	r7, #8
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b084      	sub	sp, #16
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	689b      	ldr	r3, [r3, #8]
 800c3ce:	2b02      	cmp	r3, #2
 800c3d0:	d001      	beq.n	800c3d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c3d2:	f7f5 f863 	bl	800149c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c3dc:	7bfa      	ldrb	r2, [r7, #15]
 800c3de:	4611      	mov	r1, r2
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7fe ff02 	bl	800b1ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7fe febb 	bl	800b168 <USBD_LL_Reset>
}
 800c3f2:	bf00      	nop
 800c3f4:	3710      	adds	r7, #16
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
	...

0800c3fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7fe fefc 	bl	800b208 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	699b      	ldr	r3, [r3, #24]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d005      	beq.n	800c424 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c418:	4b04      	ldr	r3, [pc, #16]	; (800c42c <HAL_PCD_SuspendCallback+0x30>)
 800c41a:	691b      	ldr	r3, [r3, #16]
 800c41c:	4a03      	ldr	r2, [pc, #12]	; (800c42c <HAL_PCD_SuspendCallback+0x30>)
 800c41e:	f043 0306 	orr.w	r3, r3, #6
 800c422:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c424:	bf00      	nop
 800c426:	3708      	adds	r7, #8
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	e000ed00 	.word	0xe000ed00

0800c430 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c43e:	4618      	mov	r0, r3
 800c440:	f7fe fef6 	bl	800b230 <USBD_LL_Resume>
}
 800c444:	bf00      	nop
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c454:	4a28      	ldr	r2, [pc, #160]	; (800c4f8 <USBD_LL_Init+0xac>)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	4a26      	ldr	r2, [pc, #152]	; (800c4f8 <USBD_LL_Init+0xac>)
 800c460:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c464:	4b24      	ldr	r3, [pc, #144]	; (800c4f8 <USBD_LL_Init+0xac>)
 800c466:	4a25      	ldr	r2, [pc, #148]	; (800c4fc <USBD_LL_Init+0xb0>)
 800c468:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c46a:	4b23      	ldr	r3, [pc, #140]	; (800c4f8 <USBD_LL_Init+0xac>)
 800c46c:	2208      	movs	r2, #8
 800c46e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c470:	4b21      	ldr	r3, [pc, #132]	; (800c4f8 <USBD_LL_Init+0xac>)
 800c472:	2202      	movs	r2, #2
 800c474:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c476:	4b20      	ldr	r3, [pc, #128]	; (800c4f8 <USBD_LL_Init+0xac>)
 800c478:	2200      	movs	r2, #0
 800c47a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c47c:	4b1e      	ldr	r3, [pc, #120]	; (800c4f8 <USBD_LL_Init+0xac>)
 800c47e:	2200      	movs	r2, #0
 800c480:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c482:	4b1d      	ldr	r3, [pc, #116]	; (800c4f8 <USBD_LL_Init+0xac>)
 800c484:	2200      	movs	r2, #0
 800c486:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c488:	481b      	ldr	r0, [pc, #108]	; (800c4f8 <USBD_LL_Init+0xac>)
 800c48a:	f7f8 fedd 	bl	8005248 <HAL_PCD_Init>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d001      	beq.n	800c498 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c494:	f7f5 f802 	bl	800149c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c49e:	2318      	movs	r3, #24
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	f7fa fb53 	bl	8006b4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c4ae:	2358      	movs	r3, #88	; 0x58
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	2180      	movs	r1, #128	; 0x80
 800c4b4:	f7fa fb4b 	bl	8006b4e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c4be:	23c0      	movs	r3, #192	; 0xc0
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	2181      	movs	r1, #129	; 0x81
 800c4c4:	f7fa fb43 	bl	8006b4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c4ce:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	2101      	movs	r1, #1
 800c4d6:	f7fa fb3a 	bl	8006b4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c4e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	2182      	movs	r1, #130	; 0x82
 800c4e8:	f7fa fb31 	bl	8006b4e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c4ec:	2300      	movs	r3, #0
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3708      	adds	r7, #8
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	200014bc 	.word	0x200014bc
 800c4fc:	40005c00 	.word	0x40005c00

0800c500 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b084      	sub	sp, #16
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c508:	2300      	movs	r3, #0
 800c50a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c50c:	2300      	movs	r3, #0
 800c50e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c516:	4618      	mov	r0, r3
 800c518:	f7f8 ffa1 	bl	800545e <HAL_PCD_Start>
 800c51c:	4603      	mov	r3, r0
 800c51e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c520:	7bfb      	ldrb	r3, [r7, #15]
 800c522:	4618      	mov	r0, r3
 800c524:	f000 f94e 	bl	800c7c4 <USBD_Get_USB_Status>
 800c528:	4603      	mov	r3, r0
 800c52a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c52c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c536:	b580      	push	{r7, lr}
 800c538:	b084      	sub	sp, #16
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
 800c53e:	4608      	mov	r0, r1
 800c540:	4611      	mov	r1, r2
 800c542:	461a      	mov	r2, r3
 800c544:	4603      	mov	r3, r0
 800c546:	70fb      	strb	r3, [r7, #3]
 800c548:	460b      	mov	r3, r1
 800c54a:	70bb      	strb	r3, [r7, #2]
 800c54c:	4613      	mov	r3, r2
 800c54e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c550:	2300      	movs	r3, #0
 800c552:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c554:	2300      	movs	r3, #0
 800c556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c55e:	78bb      	ldrb	r3, [r7, #2]
 800c560:	883a      	ldrh	r2, [r7, #0]
 800c562:	78f9      	ldrb	r1, [r7, #3]
 800c564:	f7f9 f91b 	bl	800579e <HAL_PCD_EP_Open>
 800c568:	4603      	mov	r3, r0
 800c56a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c56c:	7bfb      	ldrb	r3, [r7, #15]
 800c56e:	4618      	mov	r0, r3
 800c570:	f000 f928 	bl	800c7c4 <USBD_Get_USB_Status>
 800c574:	4603      	mov	r3, r0
 800c576:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c578:	7bbb      	ldrb	r3, [r7, #14]
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3710      	adds	r7, #16
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b084      	sub	sp, #16
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
 800c58a:	460b      	mov	r3, r1
 800c58c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c58e:	2300      	movs	r3, #0
 800c590:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c592:	2300      	movs	r3, #0
 800c594:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c59c:	78fa      	ldrb	r2, [r7, #3]
 800c59e:	4611      	mov	r1, r2
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7f9 f962 	bl	800586a <HAL_PCD_EP_Close>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5aa:	7bfb      	ldrb	r3, [r7, #15]
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f000 f909 	bl	800c7c4 <USBD_Get_USB_Status>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3710      	adds	r7, #16
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5da:	78fa      	ldrb	r2, [r7, #3]
 800c5dc:	4611      	mov	r1, r2
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7f9 fa22 	bl	8005a28 <HAL_PCD_EP_SetStall>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5e8:	7bfb      	ldrb	r3, [r7, #15]
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f000 f8ea 	bl	800c7c4 <USBD_Get_USB_Status>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3710      	adds	r7, #16
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b084      	sub	sp, #16
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
 800c606:	460b      	mov	r3, r1
 800c608:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c60a:	2300      	movs	r3, #0
 800c60c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c60e:	2300      	movs	r3, #0
 800c610:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c618:	78fa      	ldrb	r2, [r7, #3]
 800c61a:	4611      	mov	r1, r2
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7f9 fa63 	bl	8005ae8 <HAL_PCD_EP_ClrStall>
 800c622:	4603      	mov	r3, r0
 800c624:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c626:	7bfb      	ldrb	r3, [r7, #15]
 800c628:	4618      	mov	r0, r3
 800c62a:	f000 f8cb 	bl	800c7c4 <USBD_Get_USB_Status>
 800c62e:	4603      	mov	r3, r0
 800c630:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c632:	7bbb      	ldrb	r3, [r7, #14]
}
 800c634:	4618      	mov	r0, r3
 800c636:	3710      	adds	r7, #16
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b085      	sub	sp, #20
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	460b      	mov	r3, r1
 800c646:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c64e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c650:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c654:	2b00      	cmp	r3, #0
 800c656:	da0c      	bge.n	800c672 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c658:	78fb      	ldrb	r3, [r7, #3]
 800c65a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c65e:	68f9      	ldr	r1, [r7, #12]
 800c660:	1c5a      	adds	r2, r3, #1
 800c662:	4613      	mov	r3, r2
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	4413      	add	r3, r2
 800c668:	00db      	lsls	r3, r3, #3
 800c66a:	440b      	add	r3, r1
 800c66c:	3302      	adds	r3, #2
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	e00b      	b.n	800c68a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c672:	78fb      	ldrb	r3, [r7, #3]
 800c674:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c678:	68f9      	ldr	r1, [r7, #12]
 800c67a:	4613      	mov	r3, r2
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	4413      	add	r3, r2
 800c680:	00db      	lsls	r3, r3, #3
 800c682:	440b      	add	r3, r1
 800c684:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c688:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3714      	adds	r7, #20
 800c68e:	46bd      	mov	sp, r7
 800c690:	bc80      	pop	{r7}
 800c692:	4770      	bx	lr

0800c694 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	460b      	mov	r3, r1
 800c69e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c6ae:	78fa      	ldrb	r2, [r7, #3]
 800c6b0:	4611      	mov	r1, r2
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7f9 f84e 	bl	8005754 <HAL_PCD_SetAddress>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6bc:	7bfb      	ldrb	r3, [r7, #15]
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f000 f880 	bl	800c7c4 <USBD_Get_USB_Status>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b086      	sub	sp, #24
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	60f8      	str	r0, [r7, #12]
 800c6da:	607a      	str	r2, [r7, #4]
 800c6dc:	461a      	mov	r2, r3
 800c6de:	460b      	mov	r3, r1
 800c6e0:	72fb      	strb	r3, [r7, #11]
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c6f4:	893b      	ldrh	r3, [r7, #8]
 800c6f6:	7af9      	ldrb	r1, [r7, #11]
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	f7f9 f952 	bl	80059a2 <HAL_PCD_EP_Transmit>
 800c6fe:	4603      	mov	r3, r0
 800c700:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c702:	7dfb      	ldrb	r3, [r7, #23]
 800c704:	4618      	mov	r0, r3
 800c706:	f000 f85d 	bl	800c7c4 <USBD_Get_USB_Status>
 800c70a:	4603      	mov	r3, r0
 800c70c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c70e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c710:	4618      	mov	r0, r3
 800c712:	3718      	adds	r7, #24
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b086      	sub	sp, #24
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	607a      	str	r2, [r7, #4]
 800c722:	461a      	mov	r2, r3
 800c724:	460b      	mov	r3, r1
 800c726:	72fb      	strb	r3, [r7, #11]
 800c728:	4613      	mov	r3, r2
 800c72a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c72c:	2300      	movs	r3, #0
 800c72e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c730:	2300      	movs	r3, #0
 800c732:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c73a:	893b      	ldrh	r3, [r7, #8]
 800c73c:	7af9      	ldrb	r1, [r7, #11]
 800c73e:	687a      	ldr	r2, [r7, #4]
 800c740:	f7f9 f8db 	bl	80058fa <HAL_PCD_EP_Receive>
 800c744:	4603      	mov	r3, r0
 800c746:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c748:	7dfb      	ldrb	r3, [r7, #23]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f000 f83a 	bl	800c7c4 <USBD_Get_USB_Status>
 800c750:	4603      	mov	r3, r0
 800c752:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c754:	7dbb      	ldrb	r3, [r7, #22]
}
 800c756:	4618      	mov	r0, r3
 800c758:	3718      	adds	r7, #24
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c75e:	b580      	push	{r7, lr}
 800c760:	b082      	sub	sp, #8
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
 800c766:	460b      	mov	r3, r1
 800c768:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c770:	78fa      	ldrb	r2, [r7, #3]
 800c772:	4611      	mov	r1, r2
 800c774:	4618      	mov	r0, r3
 800c776:	f7f9 f8fd 	bl	8005974 <HAL_PCD_EP_GetRxCount>
 800c77a:	4603      	mov	r3, r0
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3708      	adds	r7, #8
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c784:	b480      	push	{r7}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c78c:	4b02      	ldr	r3, [pc, #8]	; (800c798 <USBD_static_malloc+0x14>)
}
 800c78e:	4618      	mov	r0, r3
 800c790:	370c      	adds	r7, #12
 800c792:	46bd      	mov	sp, r7
 800c794:	bc80      	pop	{r7}
 800c796:	4770      	bx	lr
 800c798:	200002dc 	.word	0x200002dc

0800c79c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]

}
 800c7a4:	bf00      	nop
 800c7a6:	370c      	adds	r7, #12
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bc80      	pop	{r7}
 800c7ac:	4770      	bx	lr

0800c7ae <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7ae:	b480      	push	{r7}
 800c7b0:	b083      	sub	sp, #12
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c7ba:	bf00      	nop
 800c7bc:	370c      	adds	r7, #12
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bc80      	pop	{r7}
 800c7c2:	4770      	bx	lr

0800c7c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b085      	sub	sp, #20
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c7d2:	79fb      	ldrb	r3, [r7, #7]
 800c7d4:	2b03      	cmp	r3, #3
 800c7d6:	d817      	bhi.n	800c808 <USBD_Get_USB_Status+0x44>
 800c7d8:	a201      	add	r2, pc, #4	; (adr r2, 800c7e0 <USBD_Get_USB_Status+0x1c>)
 800c7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7de:	bf00      	nop
 800c7e0:	0800c7f1 	.word	0x0800c7f1
 800c7e4:	0800c7f7 	.word	0x0800c7f7
 800c7e8:	0800c7fd 	.word	0x0800c7fd
 800c7ec:	0800c803 	.word	0x0800c803
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	73fb      	strb	r3, [r7, #15]
    break;
 800c7f4:	e00b      	b.n	800c80e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c7f6:	2302      	movs	r3, #2
 800c7f8:	73fb      	strb	r3, [r7, #15]
    break;
 800c7fa:	e008      	b.n	800c80e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	73fb      	strb	r3, [r7, #15]
    break;
 800c800:	e005      	b.n	800c80e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c802:	2302      	movs	r3, #2
 800c804:	73fb      	strb	r3, [r7, #15]
    break;
 800c806:	e002      	b.n	800c80e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c808:	2302      	movs	r3, #2
 800c80a:	73fb      	strb	r3, [r7, #15]
    break;
 800c80c:	bf00      	nop
  }
  return usb_status;
 800c80e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c810:	4618      	mov	r0, r3
 800c812:	3714      	adds	r7, #20
 800c814:	46bd      	mov	sp, r7
 800c816:	bc80      	pop	{r7}
 800c818:	4770      	bx	lr
 800c81a:	bf00      	nop

0800c81c <__errno>:
 800c81c:	4b01      	ldr	r3, [pc, #4]	; (800c824 <__errno+0x8>)
 800c81e:	6818      	ldr	r0, [r3, #0]
 800c820:	4770      	bx	lr
 800c822:	bf00      	nop
 800c824:	20000190 	.word	0x20000190

0800c828 <__libc_init_array>:
 800c828:	b570      	push	{r4, r5, r6, lr}
 800c82a:	2600      	movs	r6, #0
 800c82c:	4d0c      	ldr	r5, [pc, #48]	; (800c860 <__libc_init_array+0x38>)
 800c82e:	4c0d      	ldr	r4, [pc, #52]	; (800c864 <__libc_init_array+0x3c>)
 800c830:	1b64      	subs	r4, r4, r5
 800c832:	10a4      	asrs	r4, r4, #2
 800c834:	42a6      	cmp	r6, r4
 800c836:	d109      	bne.n	800c84c <__libc_init_array+0x24>
 800c838:	f000 fc86 	bl	800d148 <_init>
 800c83c:	2600      	movs	r6, #0
 800c83e:	4d0a      	ldr	r5, [pc, #40]	; (800c868 <__libc_init_array+0x40>)
 800c840:	4c0a      	ldr	r4, [pc, #40]	; (800c86c <__libc_init_array+0x44>)
 800c842:	1b64      	subs	r4, r4, r5
 800c844:	10a4      	asrs	r4, r4, #2
 800c846:	42a6      	cmp	r6, r4
 800c848:	d105      	bne.n	800c856 <__libc_init_array+0x2e>
 800c84a:	bd70      	pop	{r4, r5, r6, pc}
 800c84c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c850:	4798      	blx	r3
 800c852:	3601      	adds	r6, #1
 800c854:	e7ee      	b.n	800c834 <__libc_init_array+0xc>
 800c856:	f855 3b04 	ldr.w	r3, [r5], #4
 800c85a:	4798      	blx	r3
 800c85c:	3601      	adds	r6, #1
 800c85e:	e7f2      	b.n	800c846 <__libc_init_array+0x1e>
 800c860:	0800d908 	.word	0x0800d908
 800c864:	0800d908 	.word	0x0800d908
 800c868:	0800d908 	.word	0x0800d908
 800c86c:	0800d90c 	.word	0x0800d90c

0800c870 <memcpy>:
 800c870:	440a      	add	r2, r1
 800c872:	4291      	cmp	r1, r2
 800c874:	f100 33ff 	add.w	r3, r0, #4294967295
 800c878:	d100      	bne.n	800c87c <memcpy+0xc>
 800c87a:	4770      	bx	lr
 800c87c:	b510      	push	{r4, lr}
 800c87e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c882:	4291      	cmp	r1, r2
 800c884:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c888:	d1f9      	bne.n	800c87e <memcpy+0xe>
 800c88a:	bd10      	pop	{r4, pc}

0800c88c <memmove>:
 800c88c:	4288      	cmp	r0, r1
 800c88e:	b510      	push	{r4, lr}
 800c890:	eb01 0402 	add.w	r4, r1, r2
 800c894:	d902      	bls.n	800c89c <memmove+0x10>
 800c896:	4284      	cmp	r4, r0
 800c898:	4623      	mov	r3, r4
 800c89a:	d807      	bhi.n	800c8ac <memmove+0x20>
 800c89c:	1e43      	subs	r3, r0, #1
 800c89e:	42a1      	cmp	r1, r4
 800c8a0:	d008      	beq.n	800c8b4 <memmove+0x28>
 800c8a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8aa:	e7f8      	b.n	800c89e <memmove+0x12>
 800c8ac:	4601      	mov	r1, r0
 800c8ae:	4402      	add	r2, r0
 800c8b0:	428a      	cmp	r2, r1
 800c8b2:	d100      	bne.n	800c8b6 <memmove+0x2a>
 800c8b4:	bd10      	pop	{r4, pc}
 800c8b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8be:	e7f7      	b.n	800c8b0 <memmove+0x24>

0800c8c0 <memset>:
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	4402      	add	r2, r0
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d100      	bne.n	800c8ca <memset+0xa>
 800c8c8:	4770      	bx	lr
 800c8ca:	f803 1b01 	strb.w	r1, [r3], #1
 800c8ce:	e7f9      	b.n	800c8c4 <memset+0x4>

0800c8d0 <sniprintf>:
 800c8d0:	b40c      	push	{r2, r3}
 800c8d2:	b530      	push	{r4, r5, lr}
 800c8d4:	4b17      	ldr	r3, [pc, #92]	; (800c934 <sniprintf+0x64>)
 800c8d6:	1e0c      	subs	r4, r1, #0
 800c8d8:	681d      	ldr	r5, [r3, #0]
 800c8da:	b09d      	sub	sp, #116	; 0x74
 800c8dc:	da08      	bge.n	800c8f0 <sniprintf+0x20>
 800c8de:	238b      	movs	r3, #139	; 0x8b
 800c8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e4:	602b      	str	r3, [r5, #0]
 800c8e6:	b01d      	add	sp, #116	; 0x74
 800c8e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c8ec:	b002      	add	sp, #8
 800c8ee:	4770      	bx	lr
 800c8f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c8f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c8f8:	bf0c      	ite	eq
 800c8fa:	4623      	moveq	r3, r4
 800c8fc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c900:	9304      	str	r3, [sp, #16]
 800c902:	9307      	str	r3, [sp, #28]
 800c904:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c908:	9002      	str	r0, [sp, #8]
 800c90a:	9006      	str	r0, [sp, #24]
 800c90c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c910:	4628      	mov	r0, r5
 800c912:	ab21      	add	r3, sp, #132	; 0x84
 800c914:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c916:	a902      	add	r1, sp, #8
 800c918:	9301      	str	r3, [sp, #4]
 800c91a:	f000 f87f 	bl	800ca1c <_svfiprintf_r>
 800c91e:	1c43      	adds	r3, r0, #1
 800c920:	bfbc      	itt	lt
 800c922:	238b      	movlt	r3, #139	; 0x8b
 800c924:	602b      	strlt	r3, [r5, #0]
 800c926:	2c00      	cmp	r4, #0
 800c928:	d0dd      	beq.n	800c8e6 <sniprintf+0x16>
 800c92a:	2200      	movs	r2, #0
 800c92c:	9b02      	ldr	r3, [sp, #8]
 800c92e:	701a      	strb	r2, [r3, #0]
 800c930:	e7d9      	b.n	800c8e6 <sniprintf+0x16>
 800c932:	bf00      	nop
 800c934:	20000190 	.word	0x20000190

0800c938 <strstr>:
 800c938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c93a:	780c      	ldrb	r4, [r1, #0]
 800c93c:	b164      	cbz	r4, 800c958 <strstr+0x20>
 800c93e:	4603      	mov	r3, r0
 800c940:	781a      	ldrb	r2, [r3, #0]
 800c942:	4618      	mov	r0, r3
 800c944:	1c5e      	adds	r6, r3, #1
 800c946:	b90a      	cbnz	r2, 800c94c <strstr+0x14>
 800c948:	4610      	mov	r0, r2
 800c94a:	e005      	b.n	800c958 <strstr+0x20>
 800c94c:	4294      	cmp	r4, r2
 800c94e:	d108      	bne.n	800c962 <strstr+0x2a>
 800c950:	460d      	mov	r5, r1
 800c952:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800c956:	b902      	cbnz	r2, 800c95a <strstr+0x22>
 800c958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c95a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800c95e:	4297      	cmp	r7, r2
 800c960:	d0f7      	beq.n	800c952 <strstr+0x1a>
 800c962:	4633      	mov	r3, r6
 800c964:	e7ec      	b.n	800c940 <strstr+0x8>

0800c966 <__ssputs_r>:
 800c966:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c96a:	688e      	ldr	r6, [r1, #8]
 800c96c:	4682      	mov	sl, r0
 800c96e:	429e      	cmp	r6, r3
 800c970:	460c      	mov	r4, r1
 800c972:	4690      	mov	r8, r2
 800c974:	461f      	mov	r7, r3
 800c976:	d838      	bhi.n	800c9ea <__ssputs_r+0x84>
 800c978:	898a      	ldrh	r2, [r1, #12]
 800c97a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c97e:	d032      	beq.n	800c9e6 <__ssputs_r+0x80>
 800c980:	6825      	ldr	r5, [r4, #0]
 800c982:	6909      	ldr	r1, [r1, #16]
 800c984:	3301      	adds	r3, #1
 800c986:	eba5 0901 	sub.w	r9, r5, r1
 800c98a:	6965      	ldr	r5, [r4, #20]
 800c98c:	444b      	add	r3, r9
 800c98e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c992:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c996:	106d      	asrs	r5, r5, #1
 800c998:	429d      	cmp	r5, r3
 800c99a:	bf38      	it	cc
 800c99c:	461d      	movcc	r5, r3
 800c99e:	0553      	lsls	r3, r2, #21
 800c9a0:	d531      	bpl.n	800ca06 <__ssputs_r+0xa0>
 800c9a2:	4629      	mov	r1, r5
 800c9a4:	f000 fb2a 	bl	800cffc <_malloc_r>
 800c9a8:	4606      	mov	r6, r0
 800c9aa:	b950      	cbnz	r0, 800c9c2 <__ssputs_r+0x5c>
 800c9ac:	230c      	movs	r3, #12
 800c9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b2:	f8ca 3000 	str.w	r3, [sl]
 800c9b6:	89a3      	ldrh	r3, [r4, #12]
 800c9b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9bc:	81a3      	strh	r3, [r4, #12]
 800c9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9c2:	464a      	mov	r2, r9
 800c9c4:	6921      	ldr	r1, [r4, #16]
 800c9c6:	f7ff ff53 	bl	800c870 <memcpy>
 800c9ca:	89a3      	ldrh	r3, [r4, #12]
 800c9cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c9d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9d4:	81a3      	strh	r3, [r4, #12]
 800c9d6:	6126      	str	r6, [r4, #16]
 800c9d8:	444e      	add	r6, r9
 800c9da:	6026      	str	r6, [r4, #0]
 800c9dc:	463e      	mov	r6, r7
 800c9de:	6165      	str	r5, [r4, #20]
 800c9e0:	eba5 0509 	sub.w	r5, r5, r9
 800c9e4:	60a5      	str	r5, [r4, #8]
 800c9e6:	42be      	cmp	r6, r7
 800c9e8:	d900      	bls.n	800c9ec <__ssputs_r+0x86>
 800c9ea:	463e      	mov	r6, r7
 800c9ec:	4632      	mov	r2, r6
 800c9ee:	4641      	mov	r1, r8
 800c9f0:	6820      	ldr	r0, [r4, #0]
 800c9f2:	f7ff ff4b 	bl	800c88c <memmove>
 800c9f6:	68a3      	ldr	r3, [r4, #8]
 800c9f8:	6822      	ldr	r2, [r4, #0]
 800c9fa:	1b9b      	subs	r3, r3, r6
 800c9fc:	4432      	add	r2, r6
 800c9fe:	2000      	movs	r0, #0
 800ca00:	60a3      	str	r3, [r4, #8]
 800ca02:	6022      	str	r2, [r4, #0]
 800ca04:	e7db      	b.n	800c9be <__ssputs_r+0x58>
 800ca06:	462a      	mov	r2, r5
 800ca08:	f000 fb52 	bl	800d0b0 <_realloc_r>
 800ca0c:	4606      	mov	r6, r0
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	d1e1      	bne.n	800c9d6 <__ssputs_r+0x70>
 800ca12:	4650      	mov	r0, sl
 800ca14:	6921      	ldr	r1, [r4, #16]
 800ca16:	f000 faa5 	bl	800cf64 <_free_r>
 800ca1a:	e7c7      	b.n	800c9ac <__ssputs_r+0x46>

0800ca1c <_svfiprintf_r>:
 800ca1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca20:	4698      	mov	r8, r3
 800ca22:	898b      	ldrh	r3, [r1, #12]
 800ca24:	4607      	mov	r7, r0
 800ca26:	061b      	lsls	r3, r3, #24
 800ca28:	460d      	mov	r5, r1
 800ca2a:	4614      	mov	r4, r2
 800ca2c:	b09d      	sub	sp, #116	; 0x74
 800ca2e:	d50e      	bpl.n	800ca4e <_svfiprintf_r+0x32>
 800ca30:	690b      	ldr	r3, [r1, #16]
 800ca32:	b963      	cbnz	r3, 800ca4e <_svfiprintf_r+0x32>
 800ca34:	2140      	movs	r1, #64	; 0x40
 800ca36:	f000 fae1 	bl	800cffc <_malloc_r>
 800ca3a:	6028      	str	r0, [r5, #0]
 800ca3c:	6128      	str	r0, [r5, #16]
 800ca3e:	b920      	cbnz	r0, 800ca4a <_svfiprintf_r+0x2e>
 800ca40:	230c      	movs	r3, #12
 800ca42:	603b      	str	r3, [r7, #0]
 800ca44:	f04f 30ff 	mov.w	r0, #4294967295
 800ca48:	e0d1      	b.n	800cbee <_svfiprintf_r+0x1d2>
 800ca4a:	2340      	movs	r3, #64	; 0x40
 800ca4c:	616b      	str	r3, [r5, #20]
 800ca4e:	2300      	movs	r3, #0
 800ca50:	9309      	str	r3, [sp, #36]	; 0x24
 800ca52:	2320      	movs	r3, #32
 800ca54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca58:	2330      	movs	r3, #48	; 0x30
 800ca5a:	f04f 0901 	mov.w	r9, #1
 800ca5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cc08 <_svfiprintf_r+0x1ec>
 800ca66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca6a:	4623      	mov	r3, r4
 800ca6c:	469a      	mov	sl, r3
 800ca6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca72:	b10a      	cbz	r2, 800ca78 <_svfiprintf_r+0x5c>
 800ca74:	2a25      	cmp	r2, #37	; 0x25
 800ca76:	d1f9      	bne.n	800ca6c <_svfiprintf_r+0x50>
 800ca78:	ebba 0b04 	subs.w	fp, sl, r4
 800ca7c:	d00b      	beq.n	800ca96 <_svfiprintf_r+0x7a>
 800ca7e:	465b      	mov	r3, fp
 800ca80:	4622      	mov	r2, r4
 800ca82:	4629      	mov	r1, r5
 800ca84:	4638      	mov	r0, r7
 800ca86:	f7ff ff6e 	bl	800c966 <__ssputs_r>
 800ca8a:	3001      	adds	r0, #1
 800ca8c:	f000 80aa 	beq.w	800cbe4 <_svfiprintf_r+0x1c8>
 800ca90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca92:	445a      	add	r2, fp
 800ca94:	9209      	str	r2, [sp, #36]	; 0x24
 800ca96:	f89a 3000 	ldrb.w	r3, [sl]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	f000 80a2 	beq.w	800cbe4 <_svfiprintf_r+0x1c8>
 800caa0:	2300      	movs	r3, #0
 800caa2:	f04f 32ff 	mov.w	r2, #4294967295
 800caa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800caaa:	f10a 0a01 	add.w	sl, sl, #1
 800caae:	9304      	str	r3, [sp, #16]
 800cab0:	9307      	str	r3, [sp, #28]
 800cab2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cab6:	931a      	str	r3, [sp, #104]	; 0x68
 800cab8:	4654      	mov	r4, sl
 800caba:	2205      	movs	r2, #5
 800cabc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cac0:	4851      	ldr	r0, [pc, #324]	; (800cc08 <_svfiprintf_r+0x1ec>)
 800cac2:	f000 fa41 	bl	800cf48 <memchr>
 800cac6:	9a04      	ldr	r2, [sp, #16]
 800cac8:	b9d8      	cbnz	r0, 800cb02 <_svfiprintf_r+0xe6>
 800caca:	06d0      	lsls	r0, r2, #27
 800cacc:	bf44      	itt	mi
 800cace:	2320      	movmi	r3, #32
 800cad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cad4:	0711      	lsls	r1, r2, #28
 800cad6:	bf44      	itt	mi
 800cad8:	232b      	movmi	r3, #43	; 0x2b
 800cada:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cade:	f89a 3000 	ldrb.w	r3, [sl]
 800cae2:	2b2a      	cmp	r3, #42	; 0x2a
 800cae4:	d015      	beq.n	800cb12 <_svfiprintf_r+0xf6>
 800cae6:	4654      	mov	r4, sl
 800cae8:	2000      	movs	r0, #0
 800caea:	f04f 0c0a 	mov.w	ip, #10
 800caee:	9a07      	ldr	r2, [sp, #28]
 800caf0:	4621      	mov	r1, r4
 800caf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800caf6:	3b30      	subs	r3, #48	; 0x30
 800caf8:	2b09      	cmp	r3, #9
 800cafa:	d94e      	bls.n	800cb9a <_svfiprintf_r+0x17e>
 800cafc:	b1b0      	cbz	r0, 800cb2c <_svfiprintf_r+0x110>
 800cafe:	9207      	str	r2, [sp, #28]
 800cb00:	e014      	b.n	800cb2c <_svfiprintf_r+0x110>
 800cb02:	eba0 0308 	sub.w	r3, r0, r8
 800cb06:	fa09 f303 	lsl.w	r3, r9, r3
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	46a2      	mov	sl, r4
 800cb0e:	9304      	str	r3, [sp, #16]
 800cb10:	e7d2      	b.n	800cab8 <_svfiprintf_r+0x9c>
 800cb12:	9b03      	ldr	r3, [sp, #12]
 800cb14:	1d19      	adds	r1, r3, #4
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	9103      	str	r1, [sp, #12]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	bfbb      	ittet	lt
 800cb1e:	425b      	neglt	r3, r3
 800cb20:	f042 0202 	orrlt.w	r2, r2, #2
 800cb24:	9307      	strge	r3, [sp, #28]
 800cb26:	9307      	strlt	r3, [sp, #28]
 800cb28:	bfb8      	it	lt
 800cb2a:	9204      	strlt	r2, [sp, #16]
 800cb2c:	7823      	ldrb	r3, [r4, #0]
 800cb2e:	2b2e      	cmp	r3, #46	; 0x2e
 800cb30:	d10c      	bne.n	800cb4c <_svfiprintf_r+0x130>
 800cb32:	7863      	ldrb	r3, [r4, #1]
 800cb34:	2b2a      	cmp	r3, #42	; 0x2a
 800cb36:	d135      	bne.n	800cba4 <_svfiprintf_r+0x188>
 800cb38:	9b03      	ldr	r3, [sp, #12]
 800cb3a:	3402      	adds	r4, #2
 800cb3c:	1d1a      	adds	r2, r3, #4
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	9203      	str	r2, [sp, #12]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	bfb8      	it	lt
 800cb46:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb4a:	9305      	str	r3, [sp, #20]
 800cb4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cc18 <_svfiprintf_r+0x1fc>
 800cb50:	2203      	movs	r2, #3
 800cb52:	4650      	mov	r0, sl
 800cb54:	7821      	ldrb	r1, [r4, #0]
 800cb56:	f000 f9f7 	bl	800cf48 <memchr>
 800cb5a:	b140      	cbz	r0, 800cb6e <_svfiprintf_r+0x152>
 800cb5c:	2340      	movs	r3, #64	; 0x40
 800cb5e:	eba0 000a 	sub.w	r0, r0, sl
 800cb62:	fa03 f000 	lsl.w	r0, r3, r0
 800cb66:	9b04      	ldr	r3, [sp, #16]
 800cb68:	3401      	adds	r4, #1
 800cb6a:	4303      	orrs	r3, r0
 800cb6c:	9304      	str	r3, [sp, #16]
 800cb6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb72:	2206      	movs	r2, #6
 800cb74:	4825      	ldr	r0, [pc, #148]	; (800cc0c <_svfiprintf_r+0x1f0>)
 800cb76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb7a:	f000 f9e5 	bl	800cf48 <memchr>
 800cb7e:	2800      	cmp	r0, #0
 800cb80:	d038      	beq.n	800cbf4 <_svfiprintf_r+0x1d8>
 800cb82:	4b23      	ldr	r3, [pc, #140]	; (800cc10 <_svfiprintf_r+0x1f4>)
 800cb84:	bb1b      	cbnz	r3, 800cbce <_svfiprintf_r+0x1b2>
 800cb86:	9b03      	ldr	r3, [sp, #12]
 800cb88:	3307      	adds	r3, #7
 800cb8a:	f023 0307 	bic.w	r3, r3, #7
 800cb8e:	3308      	adds	r3, #8
 800cb90:	9303      	str	r3, [sp, #12]
 800cb92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb94:	4433      	add	r3, r6
 800cb96:	9309      	str	r3, [sp, #36]	; 0x24
 800cb98:	e767      	b.n	800ca6a <_svfiprintf_r+0x4e>
 800cb9a:	460c      	mov	r4, r1
 800cb9c:	2001      	movs	r0, #1
 800cb9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cba2:	e7a5      	b.n	800caf0 <_svfiprintf_r+0xd4>
 800cba4:	2300      	movs	r3, #0
 800cba6:	f04f 0c0a 	mov.w	ip, #10
 800cbaa:	4619      	mov	r1, r3
 800cbac:	3401      	adds	r4, #1
 800cbae:	9305      	str	r3, [sp, #20]
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbb6:	3a30      	subs	r2, #48	; 0x30
 800cbb8:	2a09      	cmp	r2, #9
 800cbba:	d903      	bls.n	800cbc4 <_svfiprintf_r+0x1a8>
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d0c5      	beq.n	800cb4c <_svfiprintf_r+0x130>
 800cbc0:	9105      	str	r1, [sp, #20]
 800cbc2:	e7c3      	b.n	800cb4c <_svfiprintf_r+0x130>
 800cbc4:	4604      	mov	r4, r0
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbcc:	e7f0      	b.n	800cbb0 <_svfiprintf_r+0x194>
 800cbce:	ab03      	add	r3, sp, #12
 800cbd0:	9300      	str	r3, [sp, #0]
 800cbd2:	462a      	mov	r2, r5
 800cbd4:	4638      	mov	r0, r7
 800cbd6:	4b0f      	ldr	r3, [pc, #60]	; (800cc14 <_svfiprintf_r+0x1f8>)
 800cbd8:	a904      	add	r1, sp, #16
 800cbda:	f3af 8000 	nop.w
 800cbde:	1c42      	adds	r2, r0, #1
 800cbe0:	4606      	mov	r6, r0
 800cbe2:	d1d6      	bne.n	800cb92 <_svfiprintf_r+0x176>
 800cbe4:	89ab      	ldrh	r3, [r5, #12]
 800cbe6:	065b      	lsls	r3, r3, #25
 800cbe8:	f53f af2c 	bmi.w	800ca44 <_svfiprintf_r+0x28>
 800cbec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbee:	b01d      	add	sp, #116	; 0x74
 800cbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbf4:	ab03      	add	r3, sp, #12
 800cbf6:	9300      	str	r3, [sp, #0]
 800cbf8:	462a      	mov	r2, r5
 800cbfa:	4638      	mov	r0, r7
 800cbfc:	4b05      	ldr	r3, [pc, #20]	; (800cc14 <_svfiprintf_r+0x1f8>)
 800cbfe:	a904      	add	r1, sp, #16
 800cc00:	f000 f87c 	bl	800ccfc <_printf_i>
 800cc04:	e7eb      	b.n	800cbde <_svfiprintf_r+0x1c2>
 800cc06:	bf00      	nop
 800cc08:	0800d8d2 	.word	0x0800d8d2
 800cc0c:	0800d8dc 	.word	0x0800d8dc
 800cc10:	00000000 	.word	0x00000000
 800cc14:	0800c967 	.word	0x0800c967
 800cc18:	0800d8d8 	.word	0x0800d8d8

0800cc1c <_printf_common>:
 800cc1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc20:	4616      	mov	r6, r2
 800cc22:	4699      	mov	r9, r3
 800cc24:	688a      	ldr	r2, [r1, #8]
 800cc26:	690b      	ldr	r3, [r1, #16]
 800cc28:	4607      	mov	r7, r0
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	bfb8      	it	lt
 800cc2e:	4613      	movlt	r3, r2
 800cc30:	6033      	str	r3, [r6, #0]
 800cc32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc36:	460c      	mov	r4, r1
 800cc38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc3c:	b10a      	cbz	r2, 800cc42 <_printf_common+0x26>
 800cc3e:	3301      	adds	r3, #1
 800cc40:	6033      	str	r3, [r6, #0]
 800cc42:	6823      	ldr	r3, [r4, #0]
 800cc44:	0699      	lsls	r1, r3, #26
 800cc46:	bf42      	ittt	mi
 800cc48:	6833      	ldrmi	r3, [r6, #0]
 800cc4a:	3302      	addmi	r3, #2
 800cc4c:	6033      	strmi	r3, [r6, #0]
 800cc4e:	6825      	ldr	r5, [r4, #0]
 800cc50:	f015 0506 	ands.w	r5, r5, #6
 800cc54:	d106      	bne.n	800cc64 <_printf_common+0x48>
 800cc56:	f104 0a19 	add.w	sl, r4, #25
 800cc5a:	68e3      	ldr	r3, [r4, #12]
 800cc5c:	6832      	ldr	r2, [r6, #0]
 800cc5e:	1a9b      	subs	r3, r3, r2
 800cc60:	42ab      	cmp	r3, r5
 800cc62:	dc28      	bgt.n	800ccb6 <_printf_common+0x9a>
 800cc64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc68:	1e13      	subs	r3, r2, #0
 800cc6a:	6822      	ldr	r2, [r4, #0]
 800cc6c:	bf18      	it	ne
 800cc6e:	2301      	movne	r3, #1
 800cc70:	0692      	lsls	r2, r2, #26
 800cc72:	d42d      	bmi.n	800ccd0 <_printf_common+0xb4>
 800cc74:	4649      	mov	r1, r9
 800cc76:	4638      	mov	r0, r7
 800cc78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc7c:	47c0      	blx	r8
 800cc7e:	3001      	adds	r0, #1
 800cc80:	d020      	beq.n	800ccc4 <_printf_common+0xa8>
 800cc82:	6823      	ldr	r3, [r4, #0]
 800cc84:	68e5      	ldr	r5, [r4, #12]
 800cc86:	f003 0306 	and.w	r3, r3, #6
 800cc8a:	2b04      	cmp	r3, #4
 800cc8c:	bf18      	it	ne
 800cc8e:	2500      	movne	r5, #0
 800cc90:	6832      	ldr	r2, [r6, #0]
 800cc92:	f04f 0600 	mov.w	r6, #0
 800cc96:	68a3      	ldr	r3, [r4, #8]
 800cc98:	bf08      	it	eq
 800cc9a:	1aad      	subeq	r5, r5, r2
 800cc9c:	6922      	ldr	r2, [r4, #16]
 800cc9e:	bf08      	it	eq
 800cca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cca4:	4293      	cmp	r3, r2
 800cca6:	bfc4      	itt	gt
 800cca8:	1a9b      	subgt	r3, r3, r2
 800ccaa:	18ed      	addgt	r5, r5, r3
 800ccac:	341a      	adds	r4, #26
 800ccae:	42b5      	cmp	r5, r6
 800ccb0:	d11a      	bne.n	800cce8 <_printf_common+0xcc>
 800ccb2:	2000      	movs	r0, #0
 800ccb4:	e008      	b.n	800ccc8 <_printf_common+0xac>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	4652      	mov	r2, sl
 800ccba:	4649      	mov	r1, r9
 800ccbc:	4638      	mov	r0, r7
 800ccbe:	47c0      	blx	r8
 800ccc0:	3001      	adds	r0, #1
 800ccc2:	d103      	bne.n	800cccc <_printf_common+0xb0>
 800ccc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cccc:	3501      	adds	r5, #1
 800ccce:	e7c4      	b.n	800cc5a <_printf_common+0x3e>
 800ccd0:	2030      	movs	r0, #48	; 0x30
 800ccd2:	18e1      	adds	r1, r4, r3
 800ccd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ccd8:	1c5a      	adds	r2, r3, #1
 800ccda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ccde:	4422      	add	r2, r4
 800cce0:	3302      	adds	r3, #2
 800cce2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cce6:	e7c5      	b.n	800cc74 <_printf_common+0x58>
 800cce8:	2301      	movs	r3, #1
 800ccea:	4622      	mov	r2, r4
 800ccec:	4649      	mov	r1, r9
 800ccee:	4638      	mov	r0, r7
 800ccf0:	47c0      	blx	r8
 800ccf2:	3001      	adds	r0, #1
 800ccf4:	d0e6      	beq.n	800ccc4 <_printf_common+0xa8>
 800ccf6:	3601      	adds	r6, #1
 800ccf8:	e7d9      	b.n	800ccae <_printf_common+0x92>
	...

0800ccfc <_printf_i>:
 800ccfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd00:	460c      	mov	r4, r1
 800cd02:	7e27      	ldrb	r7, [r4, #24]
 800cd04:	4691      	mov	r9, r2
 800cd06:	2f78      	cmp	r7, #120	; 0x78
 800cd08:	4680      	mov	r8, r0
 800cd0a:	469a      	mov	sl, r3
 800cd0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cd0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd12:	d807      	bhi.n	800cd24 <_printf_i+0x28>
 800cd14:	2f62      	cmp	r7, #98	; 0x62
 800cd16:	d80a      	bhi.n	800cd2e <_printf_i+0x32>
 800cd18:	2f00      	cmp	r7, #0
 800cd1a:	f000 80d9 	beq.w	800ced0 <_printf_i+0x1d4>
 800cd1e:	2f58      	cmp	r7, #88	; 0x58
 800cd20:	f000 80a4 	beq.w	800ce6c <_printf_i+0x170>
 800cd24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cd28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd2c:	e03a      	b.n	800cda4 <_printf_i+0xa8>
 800cd2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd32:	2b15      	cmp	r3, #21
 800cd34:	d8f6      	bhi.n	800cd24 <_printf_i+0x28>
 800cd36:	a001      	add	r0, pc, #4	; (adr r0, 800cd3c <_printf_i+0x40>)
 800cd38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cd3c:	0800cd95 	.word	0x0800cd95
 800cd40:	0800cda9 	.word	0x0800cda9
 800cd44:	0800cd25 	.word	0x0800cd25
 800cd48:	0800cd25 	.word	0x0800cd25
 800cd4c:	0800cd25 	.word	0x0800cd25
 800cd50:	0800cd25 	.word	0x0800cd25
 800cd54:	0800cda9 	.word	0x0800cda9
 800cd58:	0800cd25 	.word	0x0800cd25
 800cd5c:	0800cd25 	.word	0x0800cd25
 800cd60:	0800cd25 	.word	0x0800cd25
 800cd64:	0800cd25 	.word	0x0800cd25
 800cd68:	0800ceb7 	.word	0x0800ceb7
 800cd6c:	0800cdd9 	.word	0x0800cdd9
 800cd70:	0800ce99 	.word	0x0800ce99
 800cd74:	0800cd25 	.word	0x0800cd25
 800cd78:	0800cd25 	.word	0x0800cd25
 800cd7c:	0800ced9 	.word	0x0800ced9
 800cd80:	0800cd25 	.word	0x0800cd25
 800cd84:	0800cdd9 	.word	0x0800cdd9
 800cd88:	0800cd25 	.word	0x0800cd25
 800cd8c:	0800cd25 	.word	0x0800cd25
 800cd90:	0800cea1 	.word	0x0800cea1
 800cd94:	680b      	ldr	r3, [r1, #0]
 800cd96:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cd9a:	1d1a      	adds	r2, r3, #4
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	600a      	str	r2, [r1, #0]
 800cda0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cda4:	2301      	movs	r3, #1
 800cda6:	e0a4      	b.n	800cef2 <_printf_i+0x1f6>
 800cda8:	6825      	ldr	r5, [r4, #0]
 800cdaa:	6808      	ldr	r0, [r1, #0]
 800cdac:	062e      	lsls	r6, r5, #24
 800cdae:	f100 0304 	add.w	r3, r0, #4
 800cdb2:	d50a      	bpl.n	800cdca <_printf_i+0xce>
 800cdb4:	6805      	ldr	r5, [r0, #0]
 800cdb6:	600b      	str	r3, [r1, #0]
 800cdb8:	2d00      	cmp	r5, #0
 800cdba:	da03      	bge.n	800cdc4 <_printf_i+0xc8>
 800cdbc:	232d      	movs	r3, #45	; 0x2d
 800cdbe:	426d      	negs	r5, r5
 800cdc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdc4:	230a      	movs	r3, #10
 800cdc6:	485e      	ldr	r0, [pc, #376]	; (800cf40 <_printf_i+0x244>)
 800cdc8:	e019      	b.n	800cdfe <_printf_i+0x102>
 800cdca:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cdce:	6805      	ldr	r5, [r0, #0]
 800cdd0:	600b      	str	r3, [r1, #0]
 800cdd2:	bf18      	it	ne
 800cdd4:	b22d      	sxthne	r5, r5
 800cdd6:	e7ef      	b.n	800cdb8 <_printf_i+0xbc>
 800cdd8:	680b      	ldr	r3, [r1, #0]
 800cdda:	6825      	ldr	r5, [r4, #0]
 800cddc:	1d18      	adds	r0, r3, #4
 800cdde:	6008      	str	r0, [r1, #0]
 800cde0:	0628      	lsls	r0, r5, #24
 800cde2:	d501      	bpl.n	800cde8 <_printf_i+0xec>
 800cde4:	681d      	ldr	r5, [r3, #0]
 800cde6:	e002      	b.n	800cdee <_printf_i+0xf2>
 800cde8:	0669      	lsls	r1, r5, #25
 800cdea:	d5fb      	bpl.n	800cde4 <_printf_i+0xe8>
 800cdec:	881d      	ldrh	r5, [r3, #0]
 800cdee:	2f6f      	cmp	r7, #111	; 0x6f
 800cdf0:	bf0c      	ite	eq
 800cdf2:	2308      	moveq	r3, #8
 800cdf4:	230a      	movne	r3, #10
 800cdf6:	4852      	ldr	r0, [pc, #328]	; (800cf40 <_printf_i+0x244>)
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cdfe:	6866      	ldr	r6, [r4, #4]
 800ce00:	2e00      	cmp	r6, #0
 800ce02:	bfa8      	it	ge
 800ce04:	6821      	ldrge	r1, [r4, #0]
 800ce06:	60a6      	str	r6, [r4, #8]
 800ce08:	bfa4      	itt	ge
 800ce0a:	f021 0104 	bicge.w	r1, r1, #4
 800ce0e:	6021      	strge	r1, [r4, #0]
 800ce10:	b90d      	cbnz	r5, 800ce16 <_printf_i+0x11a>
 800ce12:	2e00      	cmp	r6, #0
 800ce14:	d04d      	beq.n	800ceb2 <_printf_i+0x1b6>
 800ce16:	4616      	mov	r6, r2
 800ce18:	fbb5 f1f3 	udiv	r1, r5, r3
 800ce1c:	fb03 5711 	mls	r7, r3, r1, r5
 800ce20:	5dc7      	ldrb	r7, [r0, r7]
 800ce22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ce26:	462f      	mov	r7, r5
 800ce28:	42bb      	cmp	r3, r7
 800ce2a:	460d      	mov	r5, r1
 800ce2c:	d9f4      	bls.n	800ce18 <_printf_i+0x11c>
 800ce2e:	2b08      	cmp	r3, #8
 800ce30:	d10b      	bne.n	800ce4a <_printf_i+0x14e>
 800ce32:	6823      	ldr	r3, [r4, #0]
 800ce34:	07df      	lsls	r7, r3, #31
 800ce36:	d508      	bpl.n	800ce4a <_printf_i+0x14e>
 800ce38:	6923      	ldr	r3, [r4, #16]
 800ce3a:	6861      	ldr	r1, [r4, #4]
 800ce3c:	4299      	cmp	r1, r3
 800ce3e:	bfde      	ittt	le
 800ce40:	2330      	movle	r3, #48	; 0x30
 800ce42:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ce46:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ce4a:	1b92      	subs	r2, r2, r6
 800ce4c:	6122      	str	r2, [r4, #16]
 800ce4e:	464b      	mov	r3, r9
 800ce50:	4621      	mov	r1, r4
 800ce52:	4640      	mov	r0, r8
 800ce54:	f8cd a000 	str.w	sl, [sp]
 800ce58:	aa03      	add	r2, sp, #12
 800ce5a:	f7ff fedf 	bl	800cc1c <_printf_common>
 800ce5e:	3001      	adds	r0, #1
 800ce60:	d14c      	bne.n	800cefc <_printf_i+0x200>
 800ce62:	f04f 30ff 	mov.w	r0, #4294967295
 800ce66:	b004      	add	sp, #16
 800ce68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce6c:	4834      	ldr	r0, [pc, #208]	; (800cf40 <_printf_i+0x244>)
 800ce6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ce72:	680e      	ldr	r6, [r1, #0]
 800ce74:	6823      	ldr	r3, [r4, #0]
 800ce76:	f856 5b04 	ldr.w	r5, [r6], #4
 800ce7a:	061f      	lsls	r7, r3, #24
 800ce7c:	600e      	str	r6, [r1, #0]
 800ce7e:	d514      	bpl.n	800ceaa <_printf_i+0x1ae>
 800ce80:	07d9      	lsls	r1, r3, #31
 800ce82:	bf44      	itt	mi
 800ce84:	f043 0320 	orrmi.w	r3, r3, #32
 800ce88:	6023      	strmi	r3, [r4, #0]
 800ce8a:	b91d      	cbnz	r5, 800ce94 <_printf_i+0x198>
 800ce8c:	6823      	ldr	r3, [r4, #0]
 800ce8e:	f023 0320 	bic.w	r3, r3, #32
 800ce92:	6023      	str	r3, [r4, #0]
 800ce94:	2310      	movs	r3, #16
 800ce96:	e7af      	b.n	800cdf8 <_printf_i+0xfc>
 800ce98:	6823      	ldr	r3, [r4, #0]
 800ce9a:	f043 0320 	orr.w	r3, r3, #32
 800ce9e:	6023      	str	r3, [r4, #0]
 800cea0:	2378      	movs	r3, #120	; 0x78
 800cea2:	4828      	ldr	r0, [pc, #160]	; (800cf44 <_printf_i+0x248>)
 800cea4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cea8:	e7e3      	b.n	800ce72 <_printf_i+0x176>
 800ceaa:	065e      	lsls	r6, r3, #25
 800ceac:	bf48      	it	mi
 800ceae:	b2ad      	uxthmi	r5, r5
 800ceb0:	e7e6      	b.n	800ce80 <_printf_i+0x184>
 800ceb2:	4616      	mov	r6, r2
 800ceb4:	e7bb      	b.n	800ce2e <_printf_i+0x132>
 800ceb6:	680b      	ldr	r3, [r1, #0]
 800ceb8:	6826      	ldr	r6, [r4, #0]
 800ceba:	1d1d      	adds	r5, r3, #4
 800cebc:	6960      	ldr	r0, [r4, #20]
 800cebe:	600d      	str	r5, [r1, #0]
 800cec0:	0635      	lsls	r5, r6, #24
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	d501      	bpl.n	800ceca <_printf_i+0x1ce>
 800cec6:	6018      	str	r0, [r3, #0]
 800cec8:	e002      	b.n	800ced0 <_printf_i+0x1d4>
 800ceca:	0671      	lsls	r1, r6, #25
 800cecc:	d5fb      	bpl.n	800cec6 <_printf_i+0x1ca>
 800cece:	8018      	strh	r0, [r3, #0]
 800ced0:	2300      	movs	r3, #0
 800ced2:	4616      	mov	r6, r2
 800ced4:	6123      	str	r3, [r4, #16]
 800ced6:	e7ba      	b.n	800ce4e <_printf_i+0x152>
 800ced8:	680b      	ldr	r3, [r1, #0]
 800ceda:	1d1a      	adds	r2, r3, #4
 800cedc:	600a      	str	r2, [r1, #0]
 800cede:	681e      	ldr	r6, [r3, #0]
 800cee0:	2100      	movs	r1, #0
 800cee2:	4630      	mov	r0, r6
 800cee4:	6862      	ldr	r2, [r4, #4]
 800cee6:	f000 f82f 	bl	800cf48 <memchr>
 800ceea:	b108      	cbz	r0, 800cef0 <_printf_i+0x1f4>
 800ceec:	1b80      	subs	r0, r0, r6
 800ceee:	6060      	str	r0, [r4, #4]
 800cef0:	6863      	ldr	r3, [r4, #4]
 800cef2:	6123      	str	r3, [r4, #16]
 800cef4:	2300      	movs	r3, #0
 800cef6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cefa:	e7a8      	b.n	800ce4e <_printf_i+0x152>
 800cefc:	4632      	mov	r2, r6
 800cefe:	4649      	mov	r1, r9
 800cf00:	4640      	mov	r0, r8
 800cf02:	6923      	ldr	r3, [r4, #16]
 800cf04:	47d0      	blx	sl
 800cf06:	3001      	adds	r0, #1
 800cf08:	d0ab      	beq.n	800ce62 <_printf_i+0x166>
 800cf0a:	6823      	ldr	r3, [r4, #0]
 800cf0c:	079b      	lsls	r3, r3, #30
 800cf0e:	d413      	bmi.n	800cf38 <_printf_i+0x23c>
 800cf10:	68e0      	ldr	r0, [r4, #12]
 800cf12:	9b03      	ldr	r3, [sp, #12]
 800cf14:	4298      	cmp	r0, r3
 800cf16:	bfb8      	it	lt
 800cf18:	4618      	movlt	r0, r3
 800cf1a:	e7a4      	b.n	800ce66 <_printf_i+0x16a>
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	4632      	mov	r2, r6
 800cf20:	4649      	mov	r1, r9
 800cf22:	4640      	mov	r0, r8
 800cf24:	47d0      	blx	sl
 800cf26:	3001      	adds	r0, #1
 800cf28:	d09b      	beq.n	800ce62 <_printf_i+0x166>
 800cf2a:	3501      	adds	r5, #1
 800cf2c:	68e3      	ldr	r3, [r4, #12]
 800cf2e:	9903      	ldr	r1, [sp, #12]
 800cf30:	1a5b      	subs	r3, r3, r1
 800cf32:	42ab      	cmp	r3, r5
 800cf34:	dcf2      	bgt.n	800cf1c <_printf_i+0x220>
 800cf36:	e7eb      	b.n	800cf10 <_printf_i+0x214>
 800cf38:	2500      	movs	r5, #0
 800cf3a:	f104 0619 	add.w	r6, r4, #25
 800cf3e:	e7f5      	b.n	800cf2c <_printf_i+0x230>
 800cf40:	0800d8e3 	.word	0x0800d8e3
 800cf44:	0800d8f4 	.word	0x0800d8f4

0800cf48 <memchr>:
 800cf48:	4603      	mov	r3, r0
 800cf4a:	b510      	push	{r4, lr}
 800cf4c:	b2c9      	uxtb	r1, r1
 800cf4e:	4402      	add	r2, r0
 800cf50:	4293      	cmp	r3, r2
 800cf52:	4618      	mov	r0, r3
 800cf54:	d101      	bne.n	800cf5a <memchr+0x12>
 800cf56:	2000      	movs	r0, #0
 800cf58:	e003      	b.n	800cf62 <memchr+0x1a>
 800cf5a:	7804      	ldrb	r4, [r0, #0]
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	428c      	cmp	r4, r1
 800cf60:	d1f6      	bne.n	800cf50 <memchr+0x8>
 800cf62:	bd10      	pop	{r4, pc}

0800cf64 <_free_r>:
 800cf64:	b538      	push	{r3, r4, r5, lr}
 800cf66:	4605      	mov	r5, r0
 800cf68:	2900      	cmp	r1, #0
 800cf6a:	d043      	beq.n	800cff4 <_free_r+0x90>
 800cf6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf70:	1f0c      	subs	r4, r1, #4
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	bfb8      	it	lt
 800cf76:	18e4      	addlt	r4, r4, r3
 800cf78:	f000 f8d0 	bl	800d11c <__malloc_lock>
 800cf7c:	4a1e      	ldr	r2, [pc, #120]	; (800cff8 <_free_r+0x94>)
 800cf7e:	6813      	ldr	r3, [r2, #0]
 800cf80:	4610      	mov	r0, r2
 800cf82:	b933      	cbnz	r3, 800cf92 <_free_r+0x2e>
 800cf84:	6063      	str	r3, [r4, #4]
 800cf86:	6014      	str	r4, [r2, #0]
 800cf88:	4628      	mov	r0, r5
 800cf8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf8e:	f000 b8cb 	b.w	800d128 <__malloc_unlock>
 800cf92:	42a3      	cmp	r3, r4
 800cf94:	d90a      	bls.n	800cfac <_free_r+0x48>
 800cf96:	6821      	ldr	r1, [r4, #0]
 800cf98:	1862      	adds	r2, r4, r1
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	bf01      	itttt	eq
 800cf9e:	681a      	ldreq	r2, [r3, #0]
 800cfa0:	685b      	ldreq	r3, [r3, #4]
 800cfa2:	1852      	addeq	r2, r2, r1
 800cfa4:	6022      	streq	r2, [r4, #0]
 800cfa6:	6063      	str	r3, [r4, #4]
 800cfa8:	6004      	str	r4, [r0, #0]
 800cfaa:	e7ed      	b.n	800cf88 <_free_r+0x24>
 800cfac:	461a      	mov	r2, r3
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	b10b      	cbz	r3, 800cfb6 <_free_r+0x52>
 800cfb2:	42a3      	cmp	r3, r4
 800cfb4:	d9fa      	bls.n	800cfac <_free_r+0x48>
 800cfb6:	6811      	ldr	r1, [r2, #0]
 800cfb8:	1850      	adds	r0, r2, r1
 800cfba:	42a0      	cmp	r0, r4
 800cfbc:	d10b      	bne.n	800cfd6 <_free_r+0x72>
 800cfbe:	6820      	ldr	r0, [r4, #0]
 800cfc0:	4401      	add	r1, r0
 800cfc2:	1850      	adds	r0, r2, r1
 800cfc4:	4283      	cmp	r3, r0
 800cfc6:	6011      	str	r1, [r2, #0]
 800cfc8:	d1de      	bne.n	800cf88 <_free_r+0x24>
 800cfca:	6818      	ldr	r0, [r3, #0]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	4401      	add	r1, r0
 800cfd0:	6011      	str	r1, [r2, #0]
 800cfd2:	6053      	str	r3, [r2, #4]
 800cfd4:	e7d8      	b.n	800cf88 <_free_r+0x24>
 800cfd6:	d902      	bls.n	800cfde <_free_r+0x7a>
 800cfd8:	230c      	movs	r3, #12
 800cfda:	602b      	str	r3, [r5, #0]
 800cfdc:	e7d4      	b.n	800cf88 <_free_r+0x24>
 800cfde:	6820      	ldr	r0, [r4, #0]
 800cfe0:	1821      	adds	r1, r4, r0
 800cfe2:	428b      	cmp	r3, r1
 800cfe4:	bf01      	itttt	eq
 800cfe6:	6819      	ldreq	r1, [r3, #0]
 800cfe8:	685b      	ldreq	r3, [r3, #4]
 800cfea:	1809      	addeq	r1, r1, r0
 800cfec:	6021      	streq	r1, [r4, #0]
 800cfee:	6063      	str	r3, [r4, #4]
 800cff0:	6054      	str	r4, [r2, #4]
 800cff2:	e7c9      	b.n	800cf88 <_free_r+0x24>
 800cff4:	bd38      	pop	{r3, r4, r5, pc}
 800cff6:	bf00      	nop
 800cff8:	200004fc 	.word	0x200004fc

0800cffc <_malloc_r>:
 800cffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cffe:	1ccd      	adds	r5, r1, #3
 800d000:	f025 0503 	bic.w	r5, r5, #3
 800d004:	3508      	adds	r5, #8
 800d006:	2d0c      	cmp	r5, #12
 800d008:	bf38      	it	cc
 800d00a:	250c      	movcc	r5, #12
 800d00c:	2d00      	cmp	r5, #0
 800d00e:	4606      	mov	r6, r0
 800d010:	db01      	blt.n	800d016 <_malloc_r+0x1a>
 800d012:	42a9      	cmp	r1, r5
 800d014:	d903      	bls.n	800d01e <_malloc_r+0x22>
 800d016:	230c      	movs	r3, #12
 800d018:	6033      	str	r3, [r6, #0]
 800d01a:	2000      	movs	r0, #0
 800d01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d01e:	f000 f87d 	bl	800d11c <__malloc_lock>
 800d022:	4921      	ldr	r1, [pc, #132]	; (800d0a8 <_malloc_r+0xac>)
 800d024:	680a      	ldr	r2, [r1, #0]
 800d026:	4614      	mov	r4, r2
 800d028:	b99c      	cbnz	r4, 800d052 <_malloc_r+0x56>
 800d02a:	4f20      	ldr	r7, [pc, #128]	; (800d0ac <_malloc_r+0xb0>)
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	b923      	cbnz	r3, 800d03a <_malloc_r+0x3e>
 800d030:	4621      	mov	r1, r4
 800d032:	4630      	mov	r0, r6
 800d034:	f000 f862 	bl	800d0fc <_sbrk_r>
 800d038:	6038      	str	r0, [r7, #0]
 800d03a:	4629      	mov	r1, r5
 800d03c:	4630      	mov	r0, r6
 800d03e:	f000 f85d 	bl	800d0fc <_sbrk_r>
 800d042:	1c43      	adds	r3, r0, #1
 800d044:	d123      	bne.n	800d08e <_malloc_r+0x92>
 800d046:	230c      	movs	r3, #12
 800d048:	4630      	mov	r0, r6
 800d04a:	6033      	str	r3, [r6, #0]
 800d04c:	f000 f86c 	bl	800d128 <__malloc_unlock>
 800d050:	e7e3      	b.n	800d01a <_malloc_r+0x1e>
 800d052:	6823      	ldr	r3, [r4, #0]
 800d054:	1b5b      	subs	r3, r3, r5
 800d056:	d417      	bmi.n	800d088 <_malloc_r+0x8c>
 800d058:	2b0b      	cmp	r3, #11
 800d05a:	d903      	bls.n	800d064 <_malloc_r+0x68>
 800d05c:	6023      	str	r3, [r4, #0]
 800d05e:	441c      	add	r4, r3
 800d060:	6025      	str	r5, [r4, #0]
 800d062:	e004      	b.n	800d06e <_malloc_r+0x72>
 800d064:	6863      	ldr	r3, [r4, #4]
 800d066:	42a2      	cmp	r2, r4
 800d068:	bf0c      	ite	eq
 800d06a:	600b      	streq	r3, [r1, #0]
 800d06c:	6053      	strne	r3, [r2, #4]
 800d06e:	4630      	mov	r0, r6
 800d070:	f000 f85a 	bl	800d128 <__malloc_unlock>
 800d074:	f104 000b 	add.w	r0, r4, #11
 800d078:	1d23      	adds	r3, r4, #4
 800d07a:	f020 0007 	bic.w	r0, r0, #7
 800d07e:	1ac2      	subs	r2, r0, r3
 800d080:	d0cc      	beq.n	800d01c <_malloc_r+0x20>
 800d082:	1a1b      	subs	r3, r3, r0
 800d084:	50a3      	str	r3, [r4, r2]
 800d086:	e7c9      	b.n	800d01c <_malloc_r+0x20>
 800d088:	4622      	mov	r2, r4
 800d08a:	6864      	ldr	r4, [r4, #4]
 800d08c:	e7cc      	b.n	800d028 <_malloc_r+0x2c>
 800d08e:	1cc4      	adds	r4, r0, #3
 800d090:	f024 0403 	bic.w	r4, r4, #3
 800d094:	42a0      	cmp	r0, r4
 800d096:	d0e3      	beq.n	800d060 <_malloc_r+0x64>
 800d098:	1a21      	subs	r1, r4, r0
 800d09a:	4630      	mov	r0, r6
 800d09c:	f000 f82e 	bl	800d0fc <_sbrk_r>
 800d0a0:	3001      	adds	r0, #1
 800d0a2:	d1dd      	bne.n	800d060 <_malloc_r+0x64>
 800d0a4:	e7cf      	b.n	800d046 <_malloc_r+0x4a>
 800d0a6:	bf00      	nop
 800d0a8:	200004fc 	.word	0x200004fc
 800d0ac:	20000500 	.word	0x20000500

0800d0b0 <_realloc_r>:
 800d0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0b2:	4607      	mov	r7, r0
 800d0b4:	4614      	mov	r4, r2
 800d0b6:	460e      	mov	r6, r1
 800d0b8:	b921      	cbnz	r1, 800d0c4 <_realloc_r+0x14>
 800d0ba:	4611      	mov	r1, r2
 800d0bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d0c0:	f7ff bf9c 	b.w	800cffc <_malloc_r>
 800d0c4:	b922      	cbnz	r2, 800d0d0 <_realloc_r+0x20>
 800d0c6:	f7ff ff4d 	bl	800cf64 <_free_r>
 800d0ca:	4625      	mov	r5, r4
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0d0:	f000 f830 	bl	800d134 <_malloc_usable_size_r>
 800d0d4:	42a0      	cmp	r0, r4
 800d0d6:	d20f      	bcs.n	800d0f8 <_realloc_r+0x48>
 800d0d8:	4621      	mov	r1, r4
 800d0da:	4638      	mov	r0, r7
 800d0dc:	f7ff ff8e 	bl	800cffc <_malloc_r>
 800d0e0:	4605      	mov	r5, r0
 800d0e2:	2800      	cmp	r0, #0
 800d0e4:	d0f2      	beq.n	800d0cc <_realloc_r+0x1c>
 800d0e6:	4631      	mov	r1, r6
 800d0e8:	4622      	mov	r2, r4
 800d0ea:	f7ff fbc1 	bl	800c870 <memcpy>
 800d0ee:	4631      	mov	r1, r6
 800d0f0:	4638      	mov	r0, r7
 800d0f2:	f7ff ff37 	bl	800cf64 <_free_r>
 800d0f6:	e7e9      	b.n	800d0cc <_realloc_r+0x1c>
 800d0f8:	4635      	mov	r5, r6
 800d0fa:	e7e7      	b.n	800d0cc <_realloc_r+0x1c>

0800d0fc <_sbrk_r>:
 800d0fc:	b538      	push	{r3, r4, r5, lr}
 800d0fe:	2300      	movs	r3, #0
 800d100:	4d05      	ldr	r5, [pc, #20]	; (800d118 <_sbrk_r+0x1c>)
 800d102:	4604      	mov	r4, r0
 800d104:	4608      	mov	r0, r1
 800d106:	602b      	str	r3, [r5, #0]
 800d108:	f7f6 fa92 	bl	8003630 <_sbrk>
 800d10c:	1c43      	adds	r3, r0, #1
 800d10e:	d102      	bne.n	800d116 <_sbrk_r+0x1a>
 800d110:	682b      	ldr	r3, [r5, #0]
 800d112:	b103      	cbz	r3, 800d116 <_sbrk_r+0x1a>
 800d114:	6023      	str	r3, [r4, #0]
 800d116:	bd38      	pop	{r3, r4, r5, pc}
 800d118:	200017a8 	.word	0x200017a8

0800d11c <__malloc_lock>:
 800d11c:	4801      	ldr	r0, [pc, #4]	; (800d124 <__malloc_lock+0x8>)
 800d11e:	f000 b811 	b.w	800d144 <__retarget_lock_acquire_recursive>
 800d122:	bf00      	nop
 800d124:	200017b0 	.word	0x200017b0

0800d128 <__malloc_unlock>:
 800d128:	4801      	ldr	r0, [pc, #4]	; (800d130 <__malloc_unlock+0x8>)
 800d12a:	f000 b80c 	b.w	800d146 <__retarget_lock_release_recursive>
 800d12e:	bf00      	nop
 800d130:	200017b0 	.word	0x200017b0

0800d134 <_malloc_usable_size_r>:
 800d134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d138:	1f18      	subs	r0, r3, #4
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	bfbc      	itt	lt
 800d13e:	580b      	ldrlt	r3, [r1, r0]
 800d140:	18c0      	addlt	r0, r0, r3
 800d142:	4770      	bx	lr

0800d144 <__retarget_lock_acquire_recursive>:
 800d144:	4770      	bx	lr

0800d146 <__retarget_lock_release_recursive>:
 800d146:	4770      	bx	lr

0800d148 <_init>:
 800d148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d14a:	bf00      	nop
 800d14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d14e:	bc08      	pop	{r3}
 800d150:	469e      	mov	lr, r3
 800d152:	4770      	bx	lr

0800d154 <_fini>:
 800d154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d156:	bf00      	nop
 800d158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d15a:	bc08      	pop	{r3}
 800d15c:	469e      	mov	lr, r3
 800d15e:	4770      	bx	lr
