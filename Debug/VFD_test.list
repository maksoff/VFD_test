
VFD_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  0800a1e8  0800a1e8  0001a1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a42c  0800a42c  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  0800a42c  0800a42c  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a42c  0800a42c  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a42c  0800a42c  0001a42c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a430  0800a430  0001a430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013b0  20000184  0800a5b8  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001534  0800a5b8  00021534  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188c8  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000388e  00000000  00000000  00038a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  0003c308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  0003d540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a656  00000000  00000000  0003e608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015dca  00000000  00000000  00058c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a8b0  00000000  00000000  0006ea28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f92d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000494c  00000000  00000000  000f932c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000184 	.word	0x20000184
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a1d0 	.word	0x0800a1d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000188 	.word	0x20000188
 8000148:	0800a1d0 	.word	0x0800a1d0

0800014c <fifo_push>:
buff_t fifo_buffer[BUFF_SIZE];
uint32_t head_index = 0;
uint32_t tail_index = 0;

bool fifo_push(buff_t data)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	if (fifo_length() >= BUFF_SIZE - 1)
 8000156:	f000 f821 	bl	800019c <fifo_length>
 800015a:	4603      	mov	r3, r0
 800015c:	2bfe      	cmp	r3, #254	; 0xfe
 800015e:	d901      	bls.n	8000164 <fifo_push+0x18>
		return 1; // too much data!
 8000160:	2301      	movs	r3, #1
 8000162:	e012      	b.n	800018a <fifo_push+0x3e>
	if (++tail_index == BUFF_SIZE)
 8000164:	4b0b      	ldr	r3, [pc, #44]	; (8000194 <fifo_push+0x48>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	3301      	adds	r3, #1
 800016a:	4a0a      	ldr	r2, [pc, #40]	; (8000194 <fifo_push+0x48>)
 800016c:	6013      	str	r3, [r2, #0]
 800016e:	4b09      	ldr	r3, [pc, #36]	; (8000194 <fifo_push+0x48>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000176:	d102      	bne.n	800017e <fifo_push+0x32>
		tail_index = 0;
 8000178:	4b06      	ldr	r3, [pc, #24]	; (8000194 <fifo_push+0x48>)
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
	fifo_buffer[tail_index] = data;
 800017e:	4b05      	ldr	r3, [pc, #20]	; (8000194 <fifo_push+0x48>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	4905      	ldr	r1, [pc, #20]	; (8000198 <fifo_push+0x4c>)
 8000184:	79fa      	ldrb	r2, [r7, #7]
 8000186:	54ca      	strb	r2, [r1, r3]
	return 0;
 8000188:	2300      	movs	r3, #0
}
 800018a:	4618      	mov	r0, r3
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	200001a4 	.word	0x200001a4
 8000198:	200003e0 	.word	0x200003e0

0800019c <fifo_length>:
{
	return head_index == tail_index;
}

uint32_t fifo_length(void)
{
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
	if (tail_index >= head_index)
 80001a0:	4b0b      	ldr	r3, [pc, #44]	; (80001d0 <fifo_length+0x34>)
 80001a2:	681a      	ldr	r2, [r3, #0]
 80001a4:	4b0b      	ldr	r3, [pc, #44]	; (80001d4 <fifo_length+0x38>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	429a      	cmp	r2, r3
 80001aa:	d305      	bcc.n	80001b8 <fifo_length+0x1c>
		return tail_index - head_index;
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <fifo_length+0x34>)
 80001ae:	681a      	ldr	r2, [r3, #0]
 80001b0:	4b08      	ldr	r3, [pc, #32]	; (80001d4 <fifo_length+0x38>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	1ad3      	subs	r3, r2, r3
 80001b6:	e006      	b.n	80001c6 <fifo_length+0x2a>
	else
		return tail_index + BUFF_SIZE - head_index;
 80001b8:	4b05      	ldr	r3, [pc, #20]	; (80001d0 <fifo_length+0x34>)
 80001ba:	681a      	ldr	r2, [r3, #0]
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <fifo_length+0x38>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	1ad3      	subs	r3, r2, r3
 80001c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
}
 80001c6:	4618      	mov	r0, r3
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	200001a4 	.word	0x200001a4
 80001d4:	200001a0 	.word	0x200001a0

080001d8 <delay>:

#define PB1 (HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin))
#define PB2 (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin))

void delay(uint32_t delay)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 80001e0:	6878      	ldr	r0, [r7, #4]
 80001e2:	f001 fceb 	bl	8001bbc <HAL_Delay>
}
 80001e6:	bf00      	nop
 80001e8:	3708      	adds	r7, #8
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}

080001ee <nrf_init_tx>:

void nrf_init_tx(uint8_t *address)
{
 80001ee:	b580      	push	{r7, lr}
 80001f0:	b082      	sub	sp, #8
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
    nrf24l01p_get_clear_irq_flags();
 80001f6:	f000 fe2a 	bl	8000e4e <nrf24l01p_get_clear_irq_flags>
    nrf24l01p_close_pipe(NRF24L01P_ALL);
 80001fa:	20ff      	movs	r0, #255	; 0xff
 80001fc:	f000 fec1 	bl	8000f82 <nrf24l01p_close_pipe>
    nrf24l01p_open_pipe(NRF24L01P_TX, true);
 8000200:	2101      	movs	r1, #1
 8000202:	2006      	movs	r0, #6
 8000204:	f000 fe66 	bl	8000ed4 <nrf24l01p_open_pipe>

    nrf24l01p_set_auto_retr(NRF_RETRANSMITS, NRF_RETRANSMIT_DELAY);
 8000208:	21fa      	movs	r1, #250	; 0xfa
 800020a:	2005      	movs	r0, #5
 800020c:	f000 ff26 	bl	800105c <nrf24l01p_set_auto_retr>
    nrf24l01p_open_pipe(NRF24L01P_PIPE0, true);
 8000210:	2101      	movs	r1, #1
 8000212:	2000      	movs	r0, #0
 8000214:	f000 fe5e 	bl	8000ed4 <nrf24l01p_open_pipe>
    nrf24l01p_set_address(NRF24L01P_PIPE0, address);
 8000218:	6879      	ldr	r1, [r7, #4]
 800021a:	2000      	movs	r0, #0
 800021c:	f000 fef3 	bl	8001006 <nrf24l01p_set_address>

    nrf24l01p_set_crc_mode(NRF24L01P_CRC_16BIT);
 8000220:	2003      	movs	r0, #3
 8000222:	f000 fe3c 	bl	8000e9e <nrf24l01p_set_crc_mode>
    nrf24l01p_set_address_width(NRF24L01P_AW_5BYTES);
 8000226:	2005      	movs	r0, #5
 8000228:	f000 ff38 	bl	800109c <nrf24l01p_set_address_width>
    nrf24l01p_set_address(NRF24L01P_TX, address);
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	2006      	movs	r0, #6
 8000230:	f000 fee9 	bl	8001006 <nrf24l01p_set_address>
    nrf24l01p_set_operation_mode(NRF24L01P_PTX);
 8000234:	2000      	movs	r0, #0
 8000236:	f000 ff5f 	bl	80010f8 <nrf24l01p_set_operation_mode>
    nrf24l01p_set_rf_channel(NRF_CHANNEL);
 800023a:	207b      	movs	r0, #123	; 0x7b
 800023c:	f000 ff99 	bl	8001172 <nrf24l01p_set_rf_channel>

    nrf24l01p_set_power_mode(NRF24L01P_PWR_UP);
 8000240:	2001      	movs	r0, #1
 8000242:	f000 ff78 	bl	8001136 <nrf24l01p_set_power_mode>
    delay(NRF_POWER_UP_DELAY);
 8000246:	2002      	movs	r0, #2
 8000248:	f7ff ffc6 	bl	80001d8 <delay>
}
 800024c:	bf00      	nop
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}

08000254 <nrf_init_rx>:

void nrf_init_rx(uint8_t *address)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
    nrf24l01p_get_clear_irq_flags();
 800025c:	f000 fdf7 	bl	8000e4e <nrf24l01p_get_clear_irq_flags>
    nrf24l01p_close_pipe(NRF24L01P_ALL);
 8000260:	20ff      	movs	r0, #255	; 0xff
 8000262:	f000 fe8e 	bl	8000f82 <nrf24l01p_close_pipe>
    nrf24l01p_open_pipe(NRF24L01P_PIPE0, true);
 8000266:	2101      	movs	r1, #1
 8000268:	2000      	movs	r0, #0
 800026a:	f000 fe33 	bl	8000ed4 <nrf24l01p_open_pipe>
    nrf24l01p_set_crc_mode(NRF24L01P_CRC_16BIT);
 800026e:	2003      	movs	r0, #3
 8000270:	f000 fe15 	bl	8000e9e <nrf24l01p_set_crc_mode>
    nrf24l01p_set_address_width(NRF24L01P_AW_5BYTES);
 8000274:	2005      	movs	r0, #5
 8000276:	f000 ff11 	bl	800109c <nrf24l01p_set_address_width>
    nrf24l01p_set_address(NRF24L01P_PIPE0, address);
 800027a:	6879      	ldr	r1, [r7, #4]
 800027c:	2000      	movs	r0, #0
 800027e:	f000 fec2 	bl	8001006 <nrf24l01p_set_address>
    nrf24l01p_set_operation_mode(NRF24L01P_PRX);
 8000282:	2001      	movs	r0, #1
 8000284:	f000 ff38 	bl	80010f8 <nrf24l01p_set_operation_mode>
    nrf24l01p_set_rx_payload_width(NRF24L01P_PIPE0, NRF_PAYLOAD_LENGTH);
 8000288:	210a      	movs	r1, #10
 800028a:	2000      	movs	r0, #0
 800028c:	f000 ff16 	bl	80010bc <nrf24l01p_set_rx_payload_width>
    nrf24l01p_set_rf_channel(NRF_CHANNEL);
 8000290:	207b      	movs	r0, #123	; 0x7b
 8000292:	f000 ff6e 	bl	8001172 <nrf24l01p_set_rf_channel>

    nrf24l01p_set_power_mode(NRF24L01P_PWR_UP);
 8000296:	2001      	movs	r0, #1
 8000298:	f000 ff4d 	bl	8001136 <nrf24l01p_set_power_mode>
    delay(NRF_POWER_UP_DELAY);
 800029c:	2002      	movs	r0, #2
 800029e:	f7ff ff9b 	bl	80001d8 <delay>
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <nrf24l01p_spi_ss>:

void nrf24l01p_spi_ss(nrf24l01p_spi_ss_level_t level)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	71fb      	strb	r3, [r7, #7]
	// we will transmit data to nRF, MSB FIRST
	if (!level)
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d107      	bne.n	80002cc <nrf24l01p_spi_ss+0x20>
		hspi2.Instance->CR1 &= ~(SPI_CR1_LSBFIRST);
 80002bc:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <nrf24l01p_spi_ss+0x4c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <nrf24l01p_spi_ss+0x4c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80002ca:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(SPI2_nRF_CSn_GPIO_Port, SPI2_nRF_CSn_Pin, level);
 80002cc:	79fb      	ldrb	r3, [r7, #7]
 80002ce:	461a      	mov	r2, r3
 80002d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002d4:	4809      	ldr	r0, [pc, #36]	; (80002fc <nrf24l01p_spi_ss+0x50>)
 80002d6:	f001 ff3e 	bl	8002156 <HAL_GPIO_WritePin>
	// we will transmit data to VFD, LSB FIRST
	if (level)
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d007      	beq.n	80002f0 <nrf24l01p_spi_ss+0x44>
		hspi2.Instance->CR1 |= SPI_CR1_LSBFIRST;
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <nrf24l01p_spi_ss+0x4c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	4b04      	ldr	r3, [pc, #16]	; (80002f8 <nrf24l01p_spi_ss+0x4c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80002ee:	601a      	str	r2, [r3, #0]
}
 80002f0:	bf00      	nop
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	200004e0 	.word	0x200004e0
 80002fc:	40010c00 	.word	0x40010c00

08000300 <nrf24l01p_spi_rw>:

uint8_t nrf24l01p_spi_rw(uint8_t value)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af02      	add	r7, sp, #8
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	HAL_SPI_TransmitReceive(&hspi2, &value, &data, 1, 100);
 800030a:	f107 020f 	add.w	r2, r7, #15
 800030e:	1df9      	adds	r1, r7, #7
 8000310:	2364      	movs	r3, #100	; 0x64
 8000312:	9300      	str	r3, [sp, #0]
 8000314:	2301      	movs	r3, #1
 8000316:	4804      	ldr	r0, [pc, #16]	; (8000328 <nrf24l01p_spi_rw+0x28>)
 8000318:	f005 fa92 	bl	8005840 <HAL_SPI_TransmitReceive>
	return data;
 800031c:	7bfb      	ldrb	r3, [r7, #15]
}
 800031e:	4618      	mov	r0, r3
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	200004e0 	.word	0x200004e0

0800032c <vfd_spi_cs>:


void vfd_spi_cs(vfd_cs_t cs)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, cs);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	461a      	mov	r2, r3
 800033a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800033e:	4803      	ldr	r0, [pc, #12]	; (800034c <vfd_spi_cs+0x20>)
 8000340:	f001 ff09 	bl	8002156 <HAL_GPIO_WritePin>
}
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	40010c00 	.word	0x40010c00

08000350 <vfd_spi_tx>:

void vfd_spi_tx(uint8_t *pData, uint16_t Size)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi2, pData, Size, 100);
 800035c:	887a      	ldrh	r2, [r7, #2]
 800035e:	2364      	movs	r3, #100	; 0x64
 8000360:	6879      	ldr	r1, [r7, #4]
 8000362:	4803      	ldr	r0, [pc, #12]	; (8000370 <vfd_spi_tx+0x20>)
 8000364:	f005 f930 	bl	80055c8 <HAL_SPI_Transmit>
}
 8000368:	bf00      	nop
 800036a:	3708      	adds	r7, #8
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	200004e0 	.word	0x200004e0

08000374 <do_microrl>:


void do_microrl(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
	return;
 8000378:	bf00      	nop
}
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr

08000380 <do_vfd_init>:


void do_vfd_init(void)
{
 8000380:	b5b0      	push	{r4, r5, r7, lr}
 8000382:	b090      	sub	sp, #64	; 0x40
 8000384:	af00      	add	r7, sp, #0
#define FULL_DEMO (0)
	vfd_spi_cs(VFD_CS_HIGH);
 8000386:	2001      	movs	r0, #1
 8000388:	f7ff ffd0 	bl	800032c <vfd_spi_cs>
	HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 800038c:	2201      	movs	r2, #1
 800038e:	2120      	movs	r1, #32
 8000390:	4853      	ldr	r0, [pc, #332]	; (80004e0 <do_vfd_init+0x160>)
 8000392:	f001 fee0 	bl	8002156 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000396:	200a      	movs	r0, #10
 8000398:	f001 fc10 	bl	8001bbc <HAL_Delay>

	vfd_init(); // init display, 11 digits 17 segments
 800039c:	f001 fb48 	bl	8001a30 <vfd_init>
	vfd_leds(0); // disable leds
 80003a0:	2000      	movs	r0, #0
 80003a2:	f001 fb21 	bl	80019e8 <vfd_leds>

	for (int i = 0; i < sizeof(vfd.arr1); i++) {
 80003a6:	2300      	movs	r3, #0
 80003a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80003aa:	e007      	b.n	80003bc <do_vfd_init+0x3c>
		vfd.arr1[i] = 0xFF;
 80003ac:	4a4d      	ldr	r2, [pc, #308]	; (80004e4 <do_vfd_init+0x164>)
 80003ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003b0:	4413      	add	r3, r2
 80003b2:	22ff      	movs	r2, #255	; 0xff
 80003b4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(vfd.arr1); i++) {
 80003b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003b8:	3301      	adds	r3, #1
 80003ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80003bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003be:	2b20      	cmp	r3, #32
 80003c0:	d9f4      	bls.n	80003ac <do_vfd_init+0x2c>
	}

	vfd_update();
 80003c2:	f001 fae9 	bl	8001998 <vfd_update>
	vfd_control(true, 0b111);
 80003c6:	2107      	movs	r1, #7
 80003c8:	2001      	movs	r0, #1
 80003ca:	f001 fb45 	bl	8001a58 <vfd_control>
		HAL_Delay(500);
		do_microrl();
	}

	//erase everything... just in case
	vfd_clear_buf();
 80003ce:	f001 fac9 	bl	8001964 <vfd_clear_buf>

	// fill everything
	for (int j = 1; j < 15; j++) {
 80003d2:	2301      	movs	r3, #1
 80003d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80003d6:	e03b      	b.n	8000450 <do_vfd_init+0xd0>
		uint32_t temp = 1 << j;
 80003d8:	2201      	movs	r2, #1
 80003da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80003dc:	fa02 f303 	lsl.w	r3, r2, r3
 80003e0:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i = 1; i < 11; i++) {
 80003e2:	2301      	movs	r3, #1
 80003e4:	637b      	str	r3, [r7, #52]	; 0x34
 80003e6:	e026      	b.n	8000436 <do_vfd_init+0xb6>
			for (int b = 0; b < 3; b++) {
 80003e8:	2300      	movs	r3, #0
 80003ea:	633b      	str	r3, [r7, #48]	; 0x30
 80003ec:	e01d      	b.n	800042a <do_vfd_init+0xaa>
				vfd.arr2[i][b] |= (temp >> (b << 3)) & 0xFF;
 80003ee:	493d      	ldr	r1, [pc, #244]	; (80004e4 <do_vfd_init+0x164>)
 80003f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80003f2:	4613      	mov	r3, r2
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	4413      	add	r3, r2
 80003f8:	18ca      	adds	r2, r1, r3
 80003fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003fc:	4413      	add	r3, r2
 80003fe:	781a      	ldrb	r2, [r3, #0]
 8000400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000402:	00db      	lsls	r3, r3, #3
 8000404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000406:	fa21 f303 	lsr.w	r3, r1, r3
 800040a:	b2db      	uxtb	r3, r3
 800040c:	4313      	orrs	r3, r2
 800040e:	b2d8      	uxtb	r0, r3
 8000410:	4934      	ldr	r1, [pc, #208]	; (80004e4 <do_vfd_init+0x164>)
 8000412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000414:	4613      	mov	r3, r2
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	4413      	add	r3, r2
 800041a:	18ca      	adds	r2, r1, r3
 800041c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800041e:	4413      	add	r3, r2
 8000420:	4602      	mov	r2, r0
 8000422:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++) {
 8000424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000426:	3301      	adds	r3, #1
 8000428:	633b      	str	r3, [r7, #48]	; 0x30
 800042a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800042c:	2b02      	cmp	r3, #2
 800042e:	ddde      	ble.n	80003ee <do_vfd_init+0x6e>
		for (int i = 1; i < 11; i++) {
 8000430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000432:	3301      	adds	r3, #1
 8000434:	637b      	str	r3, [r7, #52]	; 0x34
 8000436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000438:	2b0a      	cmp	r3, #10
 800043a:	ddd5      	ble.n	80003e8 <do_vfd_init+0x68>
			}
		}
		vfd_update();
 800043c:	f001 faac 	bl	8001998 <vfd_update>
		HAL_Delay(100);
 8000440:	2064      	movs	r0, #100	; 0x64
 8000442:	f001 fbbb 	bl	8001bbc <HAL_Delay>
		do_microrl();
 8000446:	f7ff ff95 	bl	8000374 <do_microrl>
	for (int j = 1; j < 15; j++) {
 800044a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800044c:	3301      	adds	r3, #1
 800044e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000452:	2b0e      	cmp	r3, #14
 8000454:	ddc0      	ble.n	80003d8 <do_vfd_init+0x58>
	}

	const uint32_t arr[] = {
 8000456:	4b24      	ldr	r3, [pc, #144]	; (80004e8 <do_vfd_init+0x168>)
 8000458:	1d3c      	adds	r4, r7, #4
 800045a:	461d      	mov	r5, r3
 800045c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800045e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000460:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000464:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			VFD_SYM_BRACKET_LEFT,
			VFD_SYM_SMALL_ARROW_RIGHT,
			VFD_SYM_DCC,
	};

	for (int j = 0; j < sizeof(arr)/sizeof(arr[0]); j++) {
 8000468:	2300      	movs	r3, #0
 800046a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800046c:	e013      	b.n	8000496 <do_vfd_init+0x116>
		vfd_set_symbols(arr[j]);
 800046e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000476:	4413      	add	r3, r2
 8000478:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800047c:	4618      	mov	r0, r3
 800047e:	f001 f9bf 	bl	8001800 <vfd_set_symbols>
		vfd_update();
 8000482:	f001 fa89 	bl	8001998 <vfd_update>
		HAL_Delay(50);
 8000486:	2032      	movs	r0, #50	; 0x32
 8000488:	f001 fb98 	bl	8001bbc <HAL_Delay>
		do_microrl();
 800048c:	f7ff ff72 	bl	8000374 <do_microrl>
	for (int j = 0; j < sizeof(arr)/sizeof(arr[0]); j++) {
 8000490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000492:	3301      	adds	r3, #1
 8000494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000498:	2b07      	cmp	r3, #7
 800049a:	d9e8      	bls.n	800046e <do_vfd_init+0xee>
	}

	for (int j = 0; j < 17; j++) {
 800049c:	2300      	movs	r3, #0
 800049e:	62bb      	str	r3, [r7, #40]	; 0x28
 80004a0:	e010      	b.n	80004c4 <do_vfd_init+0x144>
		vfd_set_symbols(1<<j);
 80004a2:	2201      	movs	r2, #1
 80004a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004a6:	fa02 f303 	lsl.w	r3, r2, r3
 80004aa:	4618      	mov	r0, r3
 80004ac:	f001 f9a8 	bl	8001800 <vfd_set_symbols>
		vfd_update();
 80004b0:	f001 fa72 	bl	8001998 <vfd_update>
		HAL_Delay(50);
 80004b4:	2032      	movs	r0, #50	; 0x32
 80004b6:	f001 fb81 	bl	8001bbc <HAL_Delay>
		do_microrl();
 80004ba:	f7ff ff5b 	bl	8000374 <do_microrl>
	for (int j = 0; j < 17; j++) {
 80004be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004c0:	3301      	adds	r3, #1
 80004c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80004c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004c6:	2b10      	cmp	r3, #16
 80004c8:	ddeb      	ble.n	80004a2 <do_vfd_init+0x122>
	}

	vfd_clear_buf();
 80004ca:	f001 fa4b 	bl	8001964 <vfd_clear_buf>
	HAL_Delay(500);
 80004ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004d2:	f001 fb73 	bl	8001bbc <HAL_Delay>
}
 80004d6:	bf00      	nop
 80004d8:	3740      	adds	r7, #64	; 0x40
 80004da:	46bd      	mov	sp, r7
 80004dc:	bdb0      	pop	{r4, r5, r7, pc}
 80004de:	bf00      	nop
 80004e0:	40010c00 	.word	0x40010c00
 80004e4:	2000058c 	.word	0x2000058c
 80004e8:	0800a1e8 	.word	0x0800a1e8

080004ec <do_led>:

void do_led(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 500)
 80004f0:	f001 fb5a 	bl	8001ba8 <HAL_GetTick>
 80004f4:	4602      	mov	r2, r0
 80004f6:	4b09      	ldr	r3, [pc, #36]	; (800051c <do_led+0x30>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	1ad3      	subs	r3, r2, r3
 80004fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000500:	d30a      	bcc.n	8000518 <do_led+0x2c>
		return;
	last_time = HAL_GetTick();
 8000502:	f001 fb51 	bl	8001ba8 <HAL_GetTick>
 8000506:	4603      	mov	r3, r0
 8000508:	4a04      	ldr	r2, [pc, #16]	; (800051c <do_led+0x30>)
 800050a:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800050c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000510:	4803      	ldr	r0, [pc, #12]	; (8000520 <do_led+0x34>)
 8000512:	f001 fe38 	bl	8002186 <HAL_GPIO_TogglePin>
 8000516:	e000      	b.n	800051a <do_led+0x2e>
		return;
 8000518:	bf00      	nop
}
 800051a:	bd80      	pop	{r7, pc}
 800051c:	200001a8 	.word	0x200001a8
 8000520:	40011000 	.word	0x40011000

08000524 <read.8469>:

void do_fram_test(void)
{
	bool read(void)
	{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af04      	add	r7, sp, #16
 800052a:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t temp;
		HAL_I2C_Mem_Read(&hi2c1, 0b10100000, 0x42, 1, &temp, 1, 10);
 800052e:	230a      	movs	r3, #10
 8000530:	9302      	str	r3, [sp, #8]
 8000532:	2301      	movs	r3, #1
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	f107 030f 	add.w	r3, r7, #15
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	2301      	movs	r3, #1
 800053e:	2242      	movs	r2, #66	; 0x42
 8000540:	21a0      	movs	r1, #160	; 0xa0
 8000542:	480f      	ldr	r0, [pc, #60]	; (8000580 <read.8469+0x5c>)
 8000544:	f002 f876 	bl	8002634 <HAL_I2C_Mem_Read>
		if (temp != 0x42)
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	2b42      	cmp	r3, #66	; 0x42
 800054c:	d001      	beq.n	8000552 <read.8469+0x2e>
			return false;
 800054e:	2300      	movs	r3, #0
 8000550:	e012      	b.n	8000578 <read.8469+0x54>
		HAL_I2C_Mem_Read(&hi2c1, 0b10100010, 0x5A, 1, &temp, 1, 10);
 8000552:	230a      	movs	r3, #10
 8000554:	9302      	str	r3, [sp, #8]
 8000556:	2301      	movs	r3, #1
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	f107 030f 	add.w	r3, r7, #15
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2301      	movs	r3, #1
 8000562:	225a      	movs	r2, #90	; 0x5a
 8000564:	21a2      	movs	r1, #162	; 0xa2
 8000566:	4806      	ldr	r0, [pc, #24]	; (8000580 <read.8469+0x5c>)
 8000568:	f002 f864 	bl	8002634 <HAL_I2C_Mem_Read>
		if (temp != 0xA5)
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	2ba5      	cmp	r3, #165	; 0xa5
 8000570:	d001      	beq.n	8000576 <read.8469+0x52>
			return false;
 8000572:	2300      	movs	r3, #0
 8000574:	e000      	b.n	8000578 <read.8469+0x54>
		return true;
 8000576:	2301      	movs	r3, #1
	}
 8000578:	4618      	mov	r0, r3
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000538 	.word	0x20000538

08000584 <do_fram_test>:
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b0c6      	sub	sp, #280	; 0x118
 8000588:	af04      	add	r7, sp, #16
void do_fram_test(void)
 800058a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800058e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		HAL_I2C_Mem_Write(&hi2c1, 0b10100000, 0x42, 1, &temp, 1, 10);
		temp = 0xA5;
		HAL_I2C_Mem_Write(&hi2c1, 0b10100010, 0x5A, 1, &temp, 1, 10);
	}
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 200)
 8000592:	f001 fb09 	bl	8001ba8 <HAL_GetTick>
 8000596:	4602      	mov	r2, r0
 8000598:	4b63      	ldr	r3, [pc, #396]	; (8000728 <do_fram_test+0x1a4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	2bc7      	cmp	r3, #199	; 0xc7
 80005a0:	f240 80bd 	bls.w	800071e <do_fram_test+0x19a>
		return;
	if (PB1 && PB2)
 80005a4:	2102      	movs	r1, #2
 80005a6:	4861      	ldr	r0, [pc, #388]	; (800072c <do_fram_test+0x1a8>)
 80005a8:	f001 fdbe 	bl	8002128 <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	f000 80af 	beq.w	8000712 <do_fram_test+0x18e>
 80005b4:	2104      	movs	r1, #4
 80005b6:	485d      	ldr	r0, [pc, #372]	; (800072c <do_fram_test+0x1a8>)
 80005b8:	f001 fdb6 	bl	8002128 <HAL_GPIO_ReadPin>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	f000 80a7 	beq.w	8000712 <do_fram_test+0x18e>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0); // turn led on
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ca:	4859      	ldr	r0, [pc, #356]	; (8000730 <do_fram_test+0x1ac>)
 80005cc:	f001 fdc3 	bl	8002156 <HAL_GPIO_WritePin>
		vfd_put_string("FRAM TEST");
 80005d0:	4858      	ldr	r0, [pc, #352]	; (8000734 <do_fram_test+0x1b0>)
 80005d2:	f001 f88f 	bl	80016f4 <vfd_put_string>
		vfd_update();
 80005d6:	f001 f9df 	bl	8001998 <vfd_update>
		for (int i = 0; i < 3; i++)
 80005da:	2300      	movs	r3, #0
 80005dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80005e0:	e012      	b.n	8000608 <do_fram_test+0x84>
		{
			vfd_leds(~(1<<i));
 80005e2:	2201      	movs	r2, #1
 80005e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80005e8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	43db      	mvns	r3, r3
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 f9f8 	bl	80019e8 <vfd_leds>
			HAL_Delay(250);
 80005f8:	20fa      	movs	r0, #250	; 0xfa
 80005fa:	f001 fadf 	bl	8001bbc <HAL_Delay>
		for (int i = 0; i < 3; i++)
 80005fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000602:	3301      	adds	r3, #1
 8000604:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800060c:	2b02      	cmp	r3, #2
 800060e:	dde8      	ble.n	80005e2 <do_fram_test+0x5e>
		}
		vfd_leds(0b1111);
 8000610:	200f      	movs	r0, #15
 8000612:	f001 f9e9 	bl	80019e8 <vfd_leds>
		HAL_Delay(500);
 8000616:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800061a:	f001 facf 	bl	8001bbc <HAL_Delay>
		if (read())
 800061e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000622:	469c      	mov	ip, r3
 8000624:	f7ff ff7e 	bl	8000524 <read.8469>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d008      	beq.n	8000640 <do_fram_test+0xbc>
		{
			vfd_leds(0b0100);
 800062e:	2004      	movs	r0, #4
 8000630:	f001 f9da 	bl	80019e8 <vfd_leds>
			vfd_put_string("FRAM FOUND");
 8000634:	4840      	ldr	r0, [pc, #256]	; (8000738 <do_fram_test+0x1b4>)
 8000636:	f001 f85d 	bl	80016f4 <vfd_put_string>
			vfd_update();
 800063a:	f001 f9ad 	bl	8001998 <vfd_update>
 800063e:	e024      	b.n	800068a <do_fram_test+0x106>
		}
		else
		{
			vfd_leds(0b0001);
 8000640:	2001      	movs	r0, #1
 8000642:	f001 f9d1 	bl	80019e8 <vfd_leds>
			write();
 8000646:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800064a:	469c      	mov	ip, r3
 800064c:	f000 f87c 	bl	8000748 <write.8473>
			HAL_Delay(500);
 8000650:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000654:	f001 fab2 	bl	8001bbc <HAL_Delay>
			if (read())
 8000658:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800065c:	469c      	mov	ip, r3
 800065e:	f7ff ff61 	bl	8000524 <read.8469>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d008      	beq.n	800067a <do_fram_test+0xf6>
			{
				vfd_leds(0b0011);
 8000668:	2003      	movs	r0, #3
 800066a:	f001 f9bd 	bl	80019e8 <vfd_leds>
				vfd_put_string("FRAM OKAY");
 800066e:	4833      	ldr	r0, [pc, #204]	; (800073c <do_fram_test+0x1b8>)
 8000670:	f001 f840 	bl	80016f4 <vfd_put_string>
				vfd_update();
 8000674:	f001 f990 	bl	8001998 <vfd_update>
 8000678:	e007      	b.n	800068a <do_fram_test+0x106>
			}
			else
			{
				vfd_leds(0b1000);
 800067a:	2008      	movs	r0, #8
 800067c:	f001 f9b4 	bl	80019e8 <vfd_leds>
				vfd_put_string("NO FRAM!");
 8000680:	482f      	ldr	r0, [pc, #188]	; (8000740 <do_fram_test+0x1bc>)
 8000682:	f001 f837 	bl	80016f4 <vfd_put_string>
				vfd_update();
 8000686:	f001 f987 	bl	8001998 <vfd_update>
			}
		}

		while(PB1);
 800068a:	bf00      	nop
 800068c:	2102      	movs	r1, #2
 800068e:	4827      	ldr	r0, [pc, #156]	; (800072c <do_fram_test+0x1a8>)
 8000690:	f001 fd4a 	bl	8002128 <HAL_GPIO_ReadPin>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d1f8      	bne.n	800068c <do_fram_test+0x108>
		if (PB2)
 800069a:	2104      	movs	r1, #4
 800069c:	4823      	ldr	r0, [pc, #140]	; (800072c <do_fram_test+0x1a8>)
 800069e:	f001 fd43 	bl	8002128 <HAL_GPIO_ReadPin>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d034      	beq.n	8000712 <do_fram_test+0x18e>
		{
			// PB2 still pressed, erase RAM
			vfd_leds(0b1001);
 80006a8:	2009      	movs	r0, #9
 80006aa:	f001 f99d 	bl	80019e8 <vfd_leds>
			uint8_t zero[256] = {0};
 80006ae:	463b      	mov	r3, r7
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	3304      	adds	r3, #4
 80006b6:	22fc      	movs	r2, #252	; 0xfc
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f009 fd80 	bl	800a1c0 <memset>
			//first half
			HAL_I2C_Mem_Write(&hi2c1, 0b10100000, 0, 1, zero, sizeof(zero), 200);
 80006c0:	23c8      	movs	r3, #200	; 0xc8
 80006c2:	9302      	str	r3, [sp, #8]
 80006c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	463b      	mov	r3, r7
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2301      	movs	r3, #1
 80006d0:	2200      	movs	r2, #0
 80006d2:	21a0      	movs	r1, #160	; 0xa0
 80006d4:	481b      	ldr	r0, [pc, #108]	; (8000744 <do_fram_test+0x1c0>)
 80006d6:	f001 feb3 	bl	8002440 <HAL_I2C_Mem_Write>
			//second half
			HAL_I2C_Mem_Write(&hi2c1, 0b10100010, 0, 1, zero, sizeof(zero), 200);
 80006da:	23c8      	movs	r3, #200	; 0xc8
 80006dc:	9302      	str	r3, [sp, #8]
 80006de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e2:	9301      	str	r3, [sp, #4]
 80006e4:	463b      	mov	r3, r7
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2301      	movs	r3, #1
 80006ea:	2200      	movs	r2, #0
 80006ec:	21a2      	movs	r1, #162	; 0xa2
 80006ee:	4815      	ldr	r0, [pc, #84]	; (8000744 <do_fram_test+0x1c0>)
 80006f0:	f001 fea6 	bl	8002440 <HAL_I2C_Mem_Write>
			HAL_Delay(500);
 80006f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f8:	f001 fa60 	bl	8001bbc <HAL_Delay>
			vfd_leds(0b1010);
 80006fc:	200a      	movs	r0, #10
 80006fe:	f001 f973 	bl	80019e8 <vfd_leds>
			while (PB2);
 8000702:	bf00      	nop
 8000704:	2104      	movs	r1, #4
 8000706:	4809      	ldr	r0, [pc, #36]	; (800072c <do_fram_test+0x1a8>)
 8000708:	f001 fd0e 	bl	8002128 <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d1f8      	bne.n	8000704 <do_fram_test+0x180>
		}
	}
	last_time = HAL_GetTick();
 8000712:	f001 fa49 	bl	8001ba8 <HAL_GetTick>
 8000716:	4603      	mov	r3, r0
 8000718:	4a03      	ldr	r2, [pc, #12]	; (8000728 <do_fram_test+0x1a4>)
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	e000      	b.n	8000720 <do_fram_test+0x19c>
		return;
 800071e:	bf00      	nop
}
 8000720:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200001ac 	.word	0x200001ac
 800072c:	40010c00 	.word	0x40010c00
 8000730:	40011000 	.word	0x40011000
 8000734:	0800a208 	.word	0x0800a208
 8000738:	0800a214 	.word	0x0800a214
 800073c:	0800a220 	.word	0x0800a220
 8000740:	0800a22c 	.word	0x0800a22c
 8000744:	20000538 	.word	0x20000538

08000748 <write.8473>:
	{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af04      	add	r7, sp, #16
 800074e:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t temp = 0x42;
 8000752:	2342      	movs	r3, #66	; 0x42
 8000754:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, 0b10100000, 0x42, 1, &temp, 1, 10);
 8000756:	230a      	movs	r3, #10
 8000758:	9302      	str	r3, [sp, #8]
 800075a:	2301      	movs	r3, #1
 800075c:	9301      	str	r3, [sp, #4]
 800075e:	f107 030f 	add.w	r3, r7, #15
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	2301      	movs	r3, #1
 8000766:	2242      	movs	r2, #66	; 0x42
 8000768:	21a0      	movs	r1, #160	; 0xa0
 800076a:	480b      	ldr	r0, [pc, #44]	; (8000798 <write.8473+0x50>)
 800076c:	f001 fe68 	bl	8002440 <HAL_I2C_Mem_Write>
		temp = 0xA5;
 8000770:	23a5      	movs	r3, #165	; 0xa5
 8000772:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, 0b10100010, 0x5A, 1, &temp, 1, 10);
 8000774:	230a      	movs	r3, #10
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	2301      	movs	r3, #1
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	f107 030f 	add.w	r3, r7, #15
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	2301      	movs	r3, #1
 8000784:	225a      	movs	r2, #90	; 0x5a
 8000786:	21a2      	movs	r1, #162	; 0xa2
 8000788:	4803      	ldr	r0, [pc, #12]	; (8000798 <write.8473+0x50>)
 800078a:	f001 fe59 	bl	8002440 <HAL_I2C_Mem_Write>
	}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000538 	.word	0x20000538

0800079c <do_buttons_and_nrf>:

bool do_buttons_and_nrf(void)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
	static bool set_rx = true;
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < (set_rx?90:70))
 80007a2:	f001 fa01 	bl	8001ba8 <HAL_GetTick>
 80007a6:	4602      	mov	r2, r0
 80007a8:	4b96      	ldr	r3, [pc, #600]	; (8000a04 <do_buttons_and_nrf+0x268>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	4a96      	ldr	r2, [pc, #600]	; (8000a08 <do_buttons_and_nrf+0x26c>)
 80007b0:	7812      	ldrb	r2, [r2, #0]
 80007b2:	2a00      	cmp	r2, #0
 80007b4:	d001      	beq.n	80007ba <do_buttons_and_nrf+0x1e>
 80007b6:	225a      	movs	r2, #90	; 0x5a
 80007b8:	e000      	b.n	80007bc <do_buttons_and_nrf+0x20>
 80007ba:	2246      	movs	r2, #70	; 0x46
 80007bc:	429a      	cmp	r2, r3
 80007be:	d901      	bls.n	80007c4 <do_buttons_and_nrf+0x28>
		return false;
 80007c0:	2300      	movs	r3, #0
 80007c2:	e11a      	b.n	80009fa <do_buttons_and_nrf+0x25e>
	last_time = HAL_GetTick();
 80007c4:	f001 f9f0 	bl	8001ba8 <HAL_GetTick>
 80007c8:	4603      	mov	r3, r0
 80007ca:	4a8e      	ldr	r2, [pc, #568]	; (8000a04 <do_buttons_and_nrf+0x268>)
 80007cc:	6013      	str	r3, [r2, #0]

	if (PB1 ^ PB2)
 80007ce:	2102      	movs	r1, #2
 80007d0:	488e      	ldr	r0, [pc, #568]	; (8000a0c <do_buttons_and_nrf+0x270>)
 80007d2:	f001 fca9 	bl	8002128 <HAL_GPIO_ReadPin>
 80007d6:	4603      	mov	r3, r0
 80007d8:	461c      	mov	r4, r3
 80007da:	2104      	movs	r1, #4
 80007dc:	488b      	ldr	r0, [pc, #556]	; (8000a0c <do_buttons_and_nrf+0x270>)
 80007de:	f001 fca3 	bl	8002128 <HAL_GPIO_ReadPin>
 80007e2:	4603      	mov	r3, r0
 80007e4:	429c      	cmp	r4, r3
 80007e6:	f000 80c0 	beq.w	800096a <do_buttons_and_nrf+0x1ce>
	{
		// we need to transmit
		set_rx = true;
 80007ea:	4b87      	ldr	r3, [pc, #540]	; (8000a08 <do_buttons_and_nrf+0x26c>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2101      	movs	r1, #1
 80007f4:	4885      	ldr	r0, [pc, #532]	; (8000a0c <do_buttons_and_nrf+0x270>)
 80007f6:	f001 fcae 	bl	8002156 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80007fa:	200a      	movs	r0, #10
 80007fc:	f001 f9de 	bl	8001bbc <HAL_Delay>
		nrf_init_tx(address);
 8000800:	4883      	ldr	r0, [pc, #524]	; (8000a10 <do_buttons_and_nrf+0x274>)
 8000802:	f7ff fcf4 	bl	80001ee <nrf_init_tx>

		static uint8_t payload[NRF_PAYLOAD_LENGTH];
		memset(payload, 0x44, sizeof(payload));
 8000806:	220a      	movs	r2, #10
 8000808:	2144      	movs	r1, #68	; 0x44
 800080a:	4882      	ldr	r0, [pc, #520]	; (8000a14 <do_buttons_and_nrf+0x278>)
 800080c:	f009 fcd8 	bl	800a1c0 <memset>
		if (PB1)
 8000810:	2102      	movs	r1, #2
 8000812:	487e      	ldr	r0, [pc, #504]	; (8000a0c <do_buttons_and_nrf+0x270>)
 8000814:	f001 fc88 	bl	8002128 <HAL_GPIO_ReadPin>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d003      	beq.n	8000826 <do_buttons_and_nrf+0x8a>
			payload[0] = 1;
 800081e:	4b7d      	ldr	r3, [pc, #500]	; (8000a14 <do_buttons_and_nrf+0x278>)
 8000820:	2201      	movs	r2, #1
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	e00c      	b.n	8000840 <do_buttons_and_nrf+0xa4>
		else if (PB2)
 8000826:	2104      	movs	r1, #4
 8000828:	4878      	ldr	r0, [pc, #480]	; (8000a0c <do_buttons_and_nrf+0x270>)
 800082a:	f001 fc7d 	bl	8002128 <HAL_GPIO_ReadPin>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d003      	beq.n	800083c <do_buttons_and_nrf+0xa0>
			payload[0] = 2;
 8000834:	4b77      	ldr	r3, [pc, #476]	; (8000a14 <do_buttons_and_nrf+0x278>)
 8000836:	2202      	movs	r2, #2
 8000838:	701a      	strb	r2, [r3, #0]
 800083a:	e001      	b.n	8000840 <do_buttons_and_nrf+0xa4>
		else
			return false;
 800083c:	2300      	movs	r3, #0
 800083e:	e0dc      	b.n	80009fa <do_buttons_and_nrf+0x25e>
		nrf24l01p_write_tx_payload(payload, sizeof(payload));
 8000840:	210a      	movs	r1, #10
 8000842:	4874      	ldr	r0, [pc, #464]	; (8000a14 <do_buttons_and_nrf+0x278>)
 8000844:	f000 fcaf 	bl	80011a6 <nrf24l01p_write_tx_payload>

		HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 1);
 8000848:	2201      	movs	r2, #1
 800084a:	2101      	movs	r1, #1
 800084c:	486f      	ldr	r0, [pc, #444]	; (8000a0c <do_buttons_and_nrf+0x270>)
 800084e:	f001 fc82 	bl	8002156 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000852:	2001      	movs	r0, #1
 8000854:	f001 f9b2 	bl	8001bbc <HAL_Delay>
		HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2101      	movs	r1, #1
 800085c:	486b      	ldr	r0, [pc, #428]	; (8000a0c <do_buttons_and_nrf+0x270>)
 800085e:	f001 fc7a 	bl	8002156 <HAL_GPIO_WritePin>

		if (payload[0] == 1)
 8000862:	4b6c      	ldr	r3, [pc, #432]	; (8000a14 <do_buttons_and_nrf+0x278>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d106      	bne.n	8000878 <do_buttons_and_nrf+0xdc>
		{
			vfd_leds(0b0001);
 800086a:	2001      	movs	r0, #1
 800086c:	f001 f8bc 	bl	80019e8 <vfd_leds>
			vfd_put_string("PB1");
 8000870:	4869      	ldr	r0, [pc, #420]	; (8000a18 <do_buttons_and_nrf+0x27c>)
 8000872:	f000 ff3f 	bl	80016f4 <vfd_put_string>
 8000876:	e005      	b.n	8000884 <do_buttons_and_nrf+0xe8>
		}
		else
		{
			vfd_leds(0b0010);
 8000878:	2002      	movs	r0, #2
 800087a:	f001 f8b5 	bl	80019e8 <vfd_leds>
			vfd_put_string("PB2");
 800087e:	4867      	ldr	r0, [pc, #412]	; (8000a1c <do_buttons_and_nrf+0x280>)
 8000880:	f000 ff38 	bl	80016f4 <vfd_put_string>
		}
		vfd_update();
 8000884:	f001 f888 	bl	8001998 <vfd_update>

		uint32_t timeout_cnt = HAL_GetTick();
 8000888:	f001 f98e 	bl	8001ba8 <HAL_GetTick>
 800088c:	60f8      	str	r0, [r7, #12]

		do {
			if (nrf24l01p_get_irq_flags() & (1 << NRF24L01P_IRQ_TX_DS))
 800088e:	f000 fafc 	bl	8000e8a <nrf24l01p_get_irq_flags>
 8000892:	4603      	mov	r3, r0
 8000894:	f003 0320 	and.w	r3, r3, #32
 8000898:	2b00      	cmp	r3, #0
 800089a:	d010      	beq.n	80008be <do_buttons_and_nrf+0x122>
			{
				//successfully transmitted
				if (payload[0] == 1)
 800089c:	4b5d      	ldr	r3, [pc, #372]	; (8000a14 <do_buttons_and_nrf+0x278>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d103      	bne.n	80008ac <do_buttons_and_nrf+0x110>
					vfd_put_string("PB1 TX");
 80008a4:	485e      	ldr	r0, [pc, #376]	; (8000a20 <do_buttons_and_nrf+0x284>)
 80008a6:	f000 ff25 	bl	80016f4 <vfd_put_string>
 80008aa:	e002      	b.n	80008b2 <do_buttons_and_nrf+0x116>
				else
					vfd_put_string("PB2 TX");
 80008ac:	485d      	ldr	r0, [pc, #372]	; (8000a24 <do_buttons_and_nrf+0x288>)
 80008ae:	f000 ff21 	bl	80016f4 <vfd_put_string>
				vfd_update();
 80008b2:	f001 f871 	bl	8001998 <vfd_update>
				nrf24l01p_clear_irq_flag(NRF24L01P_IRQ_TX_DS);
 80008b6:	2005      	movs	r0, #5
 80008b8:	f000 fad5 	bl	8000e66 <nrf24l01p_clear_irq_flag>
				break;
 80008bc:	e053      	b.n	8000966 <do_buttons_and_nrf+0x1ca>
			}
			if (nrf24l01p_get_irq_flags() & (1 << NRF24L01P_IRQ_MAX_RT))
 80008be:	f000 fae4 	bl	8000e8a <nrf24l01p_get_irq_flags>
 80008c2:	4603      	mov	r3, r0
 80008c4:	f003 0310 	and.w	r3, r3, #16
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d024      	beq.n	8000916 <do_buttons_and_nrf+0x17a>
			{
				// not send
				vfd_leds(0b1000);
 80008cc:	2008      	movs	r0, #8
 80008ce:	f001 f88b 	bl	80019e8 <vfd_leds>
				if (payload[0] == 1)
 80008d2:	4b50      	ldr	r3, [pc, #320]	; (8000a14 <do_buttons_and_nrf+0x278>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d103      	bne.n	80008e2 <do_buttons_and_nrf+0x146>
					vfd_put_string("PB1 MAX RT");
 80008da:	4853      	ldr	r0, [pc, #332]	; (8000a28 <do_buttons_and_nrf+0x28c>)
 80008dc:	f000 ff0a 	bl	80016f4 <vfd_put_string>
 80008e0:	e002      	b.n	80008e8 <do_buttons_and_nrf+0x14c>
				else
					vfd_put_string("PB2 MAX RT");
 80008e2:	4852      	ldr	r0, [pc, #328]	; (8000a2c <do_buttons_and_nrf+0x290>)
 80008e4:	f000 ff06 	bl	80016f4 <vfd_put_string>
				vfd_update();
 80008e8:	f001 f856 	bl	8001998 <vfd_update>
				nrf24l01p_clear_irq_flag(NRF24L01P_IRQ_MAX_RT);
 80008ec:	2004      	movs	r0, #4
 80008ee:	f000 faba 	bl	8000e66 <nrf24l01p_clear_irq_flag>
				nrf24l01p_flush_tx();
 80008f2:	f000 fc97 	bl	8001224 <nrf24l01p_flush_tx>
				while(PB1||PB2);
 80008f6:	bf00      	nop
 80008f8:	2102      	movs	r1, #2
 80008fa:	4844      	ldr	r0, [pc, #272]	; (8000a0c <do_buttons_and_nrf+0x270>)
 80008fc:	f001 fc14 	bl	8002128 <HAL_GPIO_ReadPin>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1f8      	bne.n	80008f8 <do_buttons_and_nrf+0x15c>
 8000906:	2104      	movs	r1, #4
 8000908:	4840      	ldr	r0, [pc, #256]	; (8000a0c <do_buttons_and_nrf+0x270>)
 800090a:	f001 fc0d 	bl	8002128 <HAL_GPIO_ReadPin>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1f1      	bne.n	80008f8 <do_buttons_and_nrf+0x15c>
				break;
 8000914:	e027      	b.n	8000966 <do_buttons_and_nrf+0x1ca>
			}
			if (HAL_GetTick() - timeout_cnt > 200)
 8000916:	f001 f947 	bl	8001ba8 <HAL_GetTick>
 800091a:	4602      	mov	r2, r0
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	2bc8      	cmp	r3, #200	; 0xc8
 8000922:	d9b4      	bls.n	800088e <do_buttons_and_nrf+0xf2>
			{
				// timeout error
				vfd_leds(0b1011);
 8000924:	200b      	movs	r0, #11
 8000926:	f001 f85f 	bl	80019e8 <vfd_leds>
				if (payload[0] == 1)
 800092a:	4b3a      	ldr	r3, [pc, #232]	; (8000a14 <do_buttons_and_nrf+0x278>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d103      	bne.n	800093a <do_buttons_and_nrf+0x19e>
					vfd_put_string("PB1 T/OUT");
 8000932:	483f      	ldr	r0, [pc, #252]	; (8000a30 <do_buttons_and_nrf+0x294>)
 8000934:	f000 fede 	bl	80016f4 <vfd_put_string>
 8000938:	e002      	b.n	8000940 <do_buttons_and_nrf+0x1a4>
				else
					vfd_put_string("PB2 T/OUT");
 800093a:	483e      	ldr	r0, [pc, #248]	; (8000a34 <do_buttons_and_nrf+0x298>)
 800093c:	f000 feda 	bl	80016f4 <vfd_put_string>
				vfd_update();
 8000940:	f001 f82a 	bl	8001998 <vfd_update>
				nrf24l01p_flush_tx();
 8000944:	f000 fc6e 	bl	8001224 <nrf24l01p_flush_tx>
				while(PB1||PB2);
 8000948:	bf00      	nop
 800094a:	2102      	movs	r1, #2
 800094c:	482f      	ldr	r0, [pc, #188]	; (8000a0c <do_buttons_and_nrf+0x270>)
 800094e:	f001 fbeb 	bl	8002128 <HAL_GPIO_ReadPin>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1f8      	bne.n	800094a <do_buttons_and_nrf+0x1ae>
 8000958:	2104      	movs	r1, #4
 800095a:	482c      	ldr	r0, [pc, #176]	; (8000a0c <do_buttons_and_nrf+0x270>)
 800095c:	f001 fbe4 	bl	8002128 <HAL_GPIO_ReadPin>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1f1      	bne.n	800094a <do_buttons_and_nrf+0x1ae>
				break;
			}

		} while (1);
		return true; // we where active
 8000966:	2301      	movs	r3, #1
 8000968:	e047      	b.n	80009fa <do_buttons_and_nrf+0x25e>
	}
	else
	{
		// we need to receive
		if (set_rx)
 800096a:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <do_buttons_and_nrf+0x26c>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d00a      	beq.n	8000988 <do_buttons_and_nrf+0x1ec>
		{
			set_rx = false;
 8000972:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <do_buttons_and_nrf+0x26c>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
			nrf_init_rx(address);
 8000978:	4825      	ldr	r0, [pc, #148]	; (8000a10 <do_buttons_and_nrf+0x274>)
 800097a:	f7ff fc6b 	bl	8000254 <nrf_init_rx>
			HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, 1);
 800097e:	2201      	movs	r2, #1
 8000980:	2101      	movs	r1, #1
 8000982:	4822      	ldr	r0, [pc, #136]	; (8000a0c <do_buttons_and_nrf+0x270>)
 8000984:	f001 fbe7 	bl	8002156 <HAL_GPIO_WritePin>
		}

		if (nrf24l01p_get_irq_flags() & (1 << NRF24L01P_IRQ_RX_DR))
 8000988:	f000 fa7f 	bl	8000e8a <nrf24l01p_get_irq_flags>
 800098c:	4603      	mov	r3, r0
 800098e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000992:	2b00      	cmp	r3, #0
 8000994:	d030      	beq.n	80009f8 <do_buttons_and_nrf+0x25c>
		{
			nrf24l01p_clear_irq_flag(NRF24L01P_IRQ_RX_DR);
 8000996:	2006      	movs	r0, #6
 8000998:	f000 fa65 	bl	8000e66 <nrf24l01p_clear_irq_flag>

			uint8_t payload[NRF_PAYLOAD_LENGTH];

			while (!nrf24l01p_rx_fifo_empty())
 800099c:	e003      	b.n	80009a6 <do_buttons_and_nrf+0x20a>
				nrf24l01p_read_rx_payload(payload);
 800099e:	463b      	mov	r3, r7
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 fc32 	bl	800120a <nrf24l01p_read_rx_payload>
			while (!nrf24l01p_rx_fifo_empty())
 80009a6:	f000 fbf2 	bl	800118e <nrf24l01p_rx_fifo_empty>
 80009aa:	4603      	mov	r3, r0
 80009ac:	f083 0301 	eor.w	r3, r3, #1
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d1f3      	bne.n	800099e <do_buttons_and_nrf+0x202>

			if (payload[0] == 1)
 80009b6:	783b      	ldrb	r3, [r7, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d10c      	bne.n	80009d6 <do_buttons_and_nrf+0x23a>
			{
				vfd_leds(0b0101);
 80009bc:	2005      	movs	r0, #5
 80009be:	f001 f813 	bl	80019e8 <vfd_leds>
				vfd_put_string("* RX PB1 *");
 80009c2:	481d      	ldr	r0, [pc, #116]	; (8000a38 <do_buttons_and_nrf+0x29c>)
 80009c4:	f000 fe96 	bl	80016f4 <vfd_put_string>
				vfd_set_symbols(VFD_SYM_ARROW_LEFT);
 80009c8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80009cc:	f000 ff18 	bl	8001800 <vfd_set_symbols>
				vfd_update();
 80009d0:	f000 ffe2 	bl	8001998 <vfd_update>
 80009d4:	e00e      	b.n	80009f4 <do_buttons_and_nrf+0x258>
			}
			else if (payload[0] == 2)
 80009d6:	783b      	ldrb	r3, [r7, #0]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d10b      	bne.n	80009f4 <do_buttons_and_nrf+0x258>
			{
				vfd_leds(0b0110);
 80009dc:	2006      	movs	r0, #6
 80009de:	f001 f803 	bl	80019e8 <vfd_leds>
				vfd_put_string("* RX PB2 *");
 80009e2:	4816      	ldr	r0, [pc, #88]	; (8000a3c <do_buttons_and_nrf+0x2a0>)
 80009e4:	f000 fe86 	bl	80016f4 <vfd_put_string>
				vfd_set_symbols(VFD_SYM_ARROW_RIGHT);
 80009e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80009ec:	f000 ff08 	bl	8001800 <vfd_set_symbols>
				vfd_update();
 80009f0:	f000 ffd2 	bl	8001998 <vfd_update>
			}
			return true; // we have something received
 80009f4:	2301      	movs	r3, #1
 80009f6:	e000      	b.n	80009fa <do_buttons_and_nrf+0x25e>
		}
		else
		{
			// no buttons pressed and nothing received
			return false;
 80009f8:	2300      	movs	r3, #0
		}
	}
	return false;
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd90      	pop	{r4, r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200001b0 	.word	0x200001b0
 8000a08:	20000005 	.word	0x20000005
 8000a0c:	40010c00 	.word	0x40010c00
 8000a10:	20000000 	.word	0x20000000
 8000a14:	200001b4 	.word	0x200001b4
 8000a18:	0800a238 	.word	0x0800a238
 8000a1c:	0800a23c 	.word	0x0800a23c
 8000a20:	0800a240 	.word	0x0800a240
 8000a24:	0800a248 	.word	0x0800a248
 8000a28:	0800a250 	.word	0x0800a250
 8000a2c:	0800a25c 	.word	0x0800a25c
 8000a30:	0800a268 	.word	0x0800a268
 8000a34:	0800a274 	.word	0x0800a274
 8000a38:	0800a280 	.word	0x0800a280
 8000a3c:	0800a28c 	.word	0x0800a28c

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a46:	f001 f857 	bl	8001af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4a:	f000 f8a3 	bl	8000b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4e:	f000 f961 	bl	8000d14 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000a52:	f000 f929 	bl	8000ca8 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000a56:	f000 f8f9 	bl	8000c4c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000a5a:	f008 ff05 	bl	8009868 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  __HAL_SPI_ENABLE(&hspi2);
 8000a5e:	4b46      	ldr	r3, [pc, #280]	; (8000b78 <main+0x138>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b44      	ldr	r3, [pc, #272]	; (8000b78 <main+0x138>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a6c:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, 1);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a74:	4841      	ldr	r0, [pc, #260]	; (8000b7c <main+0x13c>)
 8000a76:	f001 fb6e 	bl	8002156 <HAL_GPIO_WritePin>

  uint8_t test;
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f7ff fc16 	bl	80002ac <nrf24l01p_spi_ss>

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a86:	483e      	ldr	r0, [pc, #248]	; (8000b80 <main+0x140>)
 8000a88:	f001 fb65 	bl	8002156 <HAL_GPIO_WritePin>

  do_vfd_init();
 8000a8c:	f7ff fc78 	bl	8000380 <do_vfd_init>

  test = nrf24l01p_nop();
 8000a90:	f000 fbd0 	bl	8001234 <nrf24l01p_nop>
 8000a94:	4603      	mov	r3, r0
 8000a96:	72fb      	strb	r3, [r7, #11]
  if ((test&0b1110) == 0b1110)
 8000a98:	7afb      	ldrb	r3, [r7, #11]
 8000a9a:	f003 030e 	and.w	r3, r3, #14
 8000a9e:	2b0e      	cmp	r3, #14
 8000aa0:	d107      	bne.n	8000ab2 <main+0x72>
  {
	  vfd_put_string("NRF24L01+");
 8000aa2:	4838      	ldr	r0, [pc, #224]	; (8000b84 <main+0x144>)
 8000aa4:	f000 fe26 	bl	80016f4 <vfd_put_string>
	  vfd_set_symbols(VFD_SYM_DIGITAL);
 8000aa8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000aac:	f000 fea8 	bl	8001800 <vfd_set_symbols>
 8000ab0:	e002      	b.n	8000ab8 <main+0x78>
  }
  else
  {
	  vfd_put_string("-NO NRF-");
 8000ab2:	4835      	ldr	r0, [pc, #212]	; (8000b88 <main+0x148>)
 8000ab4:	f000 fe1e 	bl	80016f4 <vfd_put_string>
  }
  vfd_update();
 8000ab8:	f000 ff6e 	bl	8001998 <vfd_update>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t last_active_time = HAL_GetTick();
 8000abc:	f001 f874 	bl	8001ba8 <HAL_GetTick>
 8000ac0:	60f8      	str	r0, [r7, #12]
  while (1)
  {
	  do_led();
 8000ac2:	f7ff fd13 	bl	80004ec <do_led>
	  do_fram_test();
 8000ac6:	f7ff fd5d 	bl	8000584 <do_fram_test>
	  if (do_buttons_and_nrf())
 8000aca:	f7ff fe67 	bl	800079c <do_buttons_and_nrf>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <main+0x9a>
		  last_active_time = HAL_GetTick();
 8000ad4:	f001 f868 	bl	8001ba8 <HAL_GetTick>
 8000ad8:	60f8      	str	r0, [r7, #12]

	  // disable if inactive

	  if (HAL_GetTick() - last_active_time > 200)
 8000ada:	f001 f865 	bl	8001ba8 <HAL_GetTick>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	2bc8      	cmp	r3, #200	; 0xc8
 8000ae6:	d90c      	bls.n	8000b02 <main+0xc2>
	  {
		  vfd_leds(0);
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f000 ff7d 	bl	80019e8 <vfd_leds>
		  vfd_clr_symbols(VFD_SYM_ARROW_LEFT);
 8000aee:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000af2:	f000 fedd 	bl	80018b0 <vfd_clr_symbols>
		  vfd_clr_symbols(VFD_SYM_ARROW_RIGHT);
 8000af6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000afa:	f000 fed9 	bl	80018b0 <vfd_clr_symbols>
		  vfd_update();
 8000afe:	f000 ff4b 	bl	8001998 <vfd_update>
	  }

	  if (HAL_GetTick() - last_active_time > 10000)
 8000b02:	f001 f851 	bl	8001ba8 <HAL_GetTick>
 8000b06:	4602      	mov	r2, r0
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d905      	bls.n	8000b20 <main+0xe0>
		  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2120      	movs	r1, #32
 8000b18:	481c      	ldr	r0, [pc, #112]	; (8000b8c <main+0x14c>)
 8000b1a:	f001 fb1c 	bl	8002156 <HAL_GPIO_WritePin>
 8000b1e:	e7d0      	b.n	8000ac2 <main+0x82>
	  else
	  {
		  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2120      	movs	r1, #32
 8000b24:	4819      	ldr	r0, [pc, #100]	; (8000b8c <main+0x14c>)
 8000b26:	f001 fb16 	bl	8002156 <HAL_GPIO_WritePin>
		  if (HAL_GetTick() - last_active_time > 3000)
 8000b2a:	f001 f83d 	bl	8001ba8 <HAL_GetTick>
 8000b2e:	4602      	mov	r2, r0
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d9c2      	bls.n	8000ac2 <main+0x82>
		  {
			  char buf [11];
			  memset(buf, '\0', sizeof(buf));
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	220b      	movs	r2, #11
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f009 fb3c 	bl	800a1c0 <memset>
			  memset(buf, '_', 10-((HAL_GetTick() - last_active_time)/1000));
 8000b48:	f001 f82e 	bl	8001ba8 <HAL_GetTick>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <main+0x150>)
 8000b54:	fba2 2303 	umull	r2, r3, r2, r3
 8000b58:	099b      	lsrs	r3, r3, #6
 8000b5a:	f1c3 020a 	rsb	r2, r3, #10
 8000b5e:	463b      	mov	r3, r7
 8000b60:	215f      	movs	r1, #95	; 0x5f
 8000b62:	4618      	mov	r0, r3
 8000b64:	f009 fb2c 	bl	800a1c0 <memset>
			  vfd_put_string(buf);
 8000b68:	463b      	mov	r3, r7
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 fdc2 	bl	80016f4 <vfd_put_string>
			  vfd_update();
 8000b70:	f000 ff12 	bl	8001998 <vfd_update>
	  do_led();
 8000b74:	e7a5      	b.n	8000ac2 <main+0x82>
 8000b76:	bf00      	nop
 8000b78:	200004e0 	.word	0x200004e0
 8000b7c:	40010800 	.word	0x40010800
 8000b80:	40011000 	.word	0x40011000
 8000b84:	0800a298 	.word	0x0800a298
 8000b88:	0800a2a4 	.word	0x0800a2a4
 8000b8c:	40010c00 	.word	0x40010c00
 8000b90:	10624dd3 	.word	0x10624dd3

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b094      	sub	sp, #80	; 0x50
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b9e:	2228      	movs	r2, #40	; 0x28
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f009 fb0c 	bl	800a1c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000bce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bd2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000be2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000be6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bec:	4618      	mov	r0, r3
 8000bee:	f003 ffa9 	bl	8004b44 <HAL_RCC_OscConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000bf8:	f000 f924 	bl	8000e44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	2102      	movs	r1, #2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f004 fa13 	bl	8005044 <HAL_RCC_ClockConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c24:	f000 f90e 	bl	8000e44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c28:	2310      	movs	r3, #16
 8000c2a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4618      	mov	r0, r3
 8000c34:	f004 fb8e 	bl	8005354 <HAL_RCCEx_PeriphCLKConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c3e:	f000 f901 	bl	8000e44 <Error_Handler>
  }
}
 8000c42:	bf00      	nop
 8000c44:	3750      	adds	r7, #80	; 0x50
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c52:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <MX_I2C1_Init+0x54>)
 8000c54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c58:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <MX_I2C1_Init+0x58>)
 8000c5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c88:	4804      	ldr	r0, [pc, #16]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c8a:	f001 fa95 	bl	80021b8 <HAL_I2C_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c94:	f000 f8d6 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000538 	.word	0x20000538
 8000ca0:	40005400 	.word	0x40005400
 8000ca4:	000186a0 	.word	0x000186a0

08000ca8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cae:	4a18      	ldr	r2, [pc, #96]	; (8000d10 <MX_SPI2_Init+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cb8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cdc:	2218      	movs	r2, #24
 8000cde:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000ce2:	2280      	movs	r2, #128	; 0x80
 8000ce4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cf4:	220a      	movs	r2, #10
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <MX_SPI2_Init+0x64>)
 8000cfa:	f004 fbe1 	bl	80054c0 <HAL_SPI_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d04:	f000 f89e 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200004e0 	.word	0x200004e0
 8000d10:	40003800 	.word	0x40003800

08000d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	f107 0310 	add.w	r3, r7, #16
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d28:	4b42      	ldr	r3, [pc, #264]	; (8000e34 <MX_GPIO_Init+0x120>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a41      	ldr	r2, [pc, #260]	; (8000e34 <MX_GPIO_Init+0x120>)
 8000d2e:	f043 0310 	orr.w	r3, r3, #16
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b3f      	ldr	r3, [pc, #252]	; (8000e34 <MX_GPIO_Init+0x120>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0310 	and.w	r3, r3, #16
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d40:	4b3c      	ldr	r3, [pc, #240]	; (8000e34 <MX_GPIO_Init+0x120>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a3b      	ldr	r2, [pc, #236]	; (8000e34 <MX_GPIO_Init+0x120>)
 8000d46:	f043 0320 	orr.w	r3, r3, #32
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b39      	ldr	r3, [pc, #228]	; (8000e34 <MX_GPIO_Init+0x120>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0320 	and.w	r3, r3, #32
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d58:	4b36      	ldr	r3, [pc, #216]	; (8000e34 <MX_GPIO_Init+0x120>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a35      	ldr	r2, [pc, #212]	; (8000e34 <MX_GPIO_Init+0x120>)
 8000d5e:	f043 0308 	orr.w	r3, r3, #8
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b33      	ldr	r3, [pc, #204]	; (8000e34 <MX_GPIO_Init+0x120>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0308 	and.w	r3, r3, #8
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d70:	4b30      	ldr	r3, [pc, #192]	; (8000e34 <MX_GPIO_Init+0x120>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a2f      	ldr	r2, [pc, #188]	; (8000e34 <MX_GPIO_Init+0x120>)
 8000d76:	f043 0304 	orr.w	r3, r3, #4
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <MX_GPIO_Init+0x120>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f003 0304 	and.w	r3, r3, #4
 8000d84:	603b      	str	r3, [r7, #0]
 8000d86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8e:	482a      	ldr	r0, [pc, #168]	; (8000e38 <MX_GPIO_Init+0x124>)
 8000d90:	f001 f9e1 	bl	8002156 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|SPI2_nRF_CSn_Pin|HV_EN_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f241 0121 	movw	r1, #4129	; 0x1021
 8000d9a:	4828      	ldr	r0, [pc, #160]	; (8000e3c <MX_GPIO_Init+0x128>)
 8000d9c:	f001 f9db 	bl	8002156 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da6:	4826      	ldr	r0, [pc, #152]	; (8000e40 <MX_GPIO_Init+0x12c>)
 8000da8:	f001 f9d5 	bl	8002156 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, GPIO_PIN_SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db2:	4822      	ldr	r0, [pc, #136]	; (8000e3c <MX_GPIO_Init+0x128>)
 8000db4:	f001 f9cf 	bl	8002156 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000db8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 0310 	add.w	r3, r7, #16
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4819      	ldr	r0, [pc, #100]	; (8000e38 <MX_GPIO_Init+0x124>)
 8000dd2:	f001 f825 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : nRF_CE_Pin SPI2_nRF_CSn_Pin HV_EN_Pin PT6315_STB_Pin */
  GPIO_InitStruct.Pin = nRF_CE_Pin|SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 8000dd6:	f241 1321 	movw	r3, #4385	; 0x1121
 8000dda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	4619      	mov	r1, r3
 8000dee:	4813      	ldr	r0, [pc, #76]	; (8000e3c <MX_GPIO_Init+0x128>)
 8000df0:	f001 f816 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1_Pin PB2_Pin */
  GPIO_InitStruct.Pin = PB1_Pin|PB2_Pin;
 8000df4:	2306      	movs	r3, #6
 8000df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	4619      	mov	r1, r3
 8000e06:	480d      	ldr	r0, [pc, #52]	; (8000e3c <MX_GPIO_Init+0x128>)
 8000e08:	f001 f80a 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PU_Pin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000e0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4619      	mov	r1, r3
 8000e24:	4806      	ldr	r0, [pc, #24]	; (8000e40 <MX_GPIO_Init+0x12c>)
 8000e26:	f000 fffb 	bl	8001e20 <HAL_GPIO_Init>

}
 8000e2a:	bf00      	nop
 8000e2c:	3720      	adds	r7, #32
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40011000 	.word	0x40011000
 8000e3c:	40010c00 	.word	0x40010c00
 8000e40:	40010800 	.word	0x40010800

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
}
 8000e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <Error_Handler+0x8>

08000e4e <nrf24l01p_get_clear_irq_flags>:
{
  nrf24l01p_write_reg(NRF24L01P_CONFIG, BIT_COND(nrf24l01p_read_reg(NRF24L01P_CONFIG), int_source, !irq_state));
}

uint8_t nrf24l01p_get_clear_irq_flags(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	af00      	add	r7, sp, #0
  enum { IRQ_FLAGS = BIT(NRF24L01P_IRQ_MAX_RT) | BIT(NRF24L01P_IRQ_TX_DS) | BIT(NRF24L01P_IRQ_RX_DR) };
  return nrf24l01p_write_reg(NRF24L01P_STATUS, IRQ_FLAGS) & IRQ_FLAGS;
 8000e52:	2170      	movs	r1, #112	; 0x70
 8000e54:	2007      	movs	r0, #7
 8000e56:	f000 fa0f 	bl	8001278 <nrf24l01p_write_reg>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000e60:	b2db      	uxtb	r3, r3
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <nrf24l01p_clear_irq_flag>:

void nrf24l01p_clear_irq_flag(nrf24l01p_irq_source_t int_source)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_STATUS, BIT(int_source));
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	2201      	movs	r2, #1
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	2007      	movs	r0, #7
 8000e7e:	f000 f9fb 	bl	8001278 <nrf24l01p_write_reg>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <nrf24l01p_get_irq_flags>:
{
  return !(nrf24l01p_read_reg(NRF24L01P_CONFIG) & BIT(int_type));
}

uint8_t nrf24l01p_get_irq_flags(void)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	af00      	add	r7, sp, #0
  return nrf24l01p_nop() & (BIT(6)|BIT(5)|BIT(4));
 8000e8e:	f000 f9d1 	bl	8001234 <nrf24l01p_nop>
 8000e92:	4603      	mov	r3, r0
 8000e94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000e98:	b2db      	uxtb	r3, r3
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <nrf24l01p_set_crc_mode>:

void nrf24l01p_set_crc_mode(nrf24l01p_crc_mode_t crc_mode)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_CONFIG, (nrf24l01p_read_reg(NRF24L01P_CONFIG) & ~(BIT(3)|BIT(2))) | ((uint8_t)crc_mode<<2u));
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f000 f9cc 	bl	8001246 <nrf24l01p_read_reg>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	f023 030c 	bic.w	r3, r3, #12
 8000eb6:	b25a      	sxtb	r2, r3
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f000 f9d6 	bl	8001278 <nrf24l01p_write_reg>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <nrf24l01p_open_pipe>:

void nrf24l01p_open_pipe(nrf24l01p_address_t pipe_num, bool auto_ack)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	460a      	mov	r2, r1
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	71bb      	strb	r3, [r7, #6]
  switch(pipe_num)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b05      	cmp	r3, #5
 8000ee8:	dc02      	bgt.n	8000ef0 <nrf24l01p_open_pipe+0x1c>
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	da03      	bge.n	8000ef6 <nrf24l01p_open_pipe+0x22>
      else
        nrf24l01p_write_reg(NRF24L01P_EN_AA, 0);
      break;
      
    default:
      break;
 8000eee:	e044      	b.n	8000f7a <nrf24l01p_open_pipe+0xa6>
  switch(pipe_num)
 8000ef0:	2bff      	cmp	r3, #255	; 0xff
 8000ef2:	d031      	beq.n	8000f58 <nrf24l01p_open_pipe+0x84>
      break;
 8000ef4:	e041      	b.n	8000f7a <nrf24l01p_open_pipe+0xa6>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, nrf24l01p_read_reg(NRF24L01P_EN_RXADDR) | BIT(pipe_num));
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	f000 f9a5 	bl	8001246 <nrf24l01p_read_reg>
 8000efc:	4603      	mov	r3, r0
 8000efe:	b25a      	sxtb	r2, r3
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	2101      	movs	r1, #1
 8000f04:	fa01 f303 	lsl.w	r3, r1, r3
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4619      	mov	r1, r3
 8000f12:	2002      	movs	r0, #2
 8000f14:	f000 f9b0 	bl	8001278 <nrf24l01p_write_reg>
      nrf24l01p_write_reg(NRF24L01P_EN_AA, BIT_COND(nrf24l01p_read_reg(NRF24L01P_EN_AA), pipe_num, auto_ack));
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f000 f994 	bl	8001246 <nrf24l01p_read_reg>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b25a      	sxtb	r2, r3
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2101      	movs	r1, #1
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	b25b      	sxtb	r3, r3
 8000f30:	4013      	ands	r3, r2
 8000f32:	b25a      	sxtb	r2, r3
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d005      	beq.n	8000f46 <nrf24l01p_open_pipe+0x72>
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	e000      	b.n	8000f48 <nrf24l01p_open_pipe+0x74>
 8000f46:	2300      	movs	r3, #0
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4619      	mov	r1, r3
 8000f50:	2001      	movs	r0, #1
 8000f52:	f000 f991 	bl	8001278 <nrf24l01p_write_reg>
      break;
 8000f56:	e010      	b.n	8000f7a <nrf24l01p_open_pipe+0xa6>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, (uint8_t)~(BIT(7)|BIT(6)));
 8000f58:	213f      	movs	r1, #63	; 0x3f
 8000f5a:	2002      	movs	r0, #2
 8000f5c:	f000 f98c 	bl	8001278 <nrf24l01p_write_reg>
      if(auto_ack)
 8000f60:	79bb      	ldrb	r3, [r7, #6]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d004      	beq.n	8000f70 <nrf24l01p_open_pipe+0x9c>
        nrf24l01p_write_reg(NRF24L01P_EN_AA, (uint8_t)~(BIT(7)|BIT(6)));
 8000f66:	213f      	movs	r1, #63	; 0x3f
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f000 f985 	bl	8001278 <nrf24l01p_write_reg>
      break;
 8000f6e:	e003      	b.n	8000f78 <nrf24l01p_open_pipe+0xa4>
        nrf24l01p_write_reg(NRF24L01P_EN_AA, 0);
 8000f70:	2100      	movs	r1, #0
 8000f72:	2001      	movs	r0, #1
 8000f74:	f000 f980 	bl	8001278 <nrf24l01p_write_reg>
      break;
 8000f78:	bf00      	nop
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <nrf24l01p_close_pipe>:

void nrf24l01p_close_pipe(nrf24l01p_address_t pipe_num)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	71fb      	strb	r3, [r7, #7]
  switch(pipe_num)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	2b05      	cmp	r3, #5
 8000f90:	dc02      	bgt.n	8000f98 <nrf24l01p_close_pipe+0x16>
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	da03      	bge.n	8000f9e <nrf24l01p_close_pipe+0x1c>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, 0);
      nrf24l01p_write_reg(NRF24L01P_EN_AA, 0);
      break;
      
    default:
      break;
 8000f96:	e032      	b.n	8000ffe <nrf24l01p_close_pipe+0x7c>
  switch(pipe_num)
 8000f98:	2bff      	cmp	r3, #255	; 0xff
 8000f9a:	d027      	beq.n	8000fec <nrf24l01p_close_pipe+0x6a>
      break;
 8000f9c:	e02f      	b.n	8000ffe <nrf24l01p_close_pipe+0x7c>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, nrf24l01p_read_reg(NRF24L01P_EN_RXADDR) & ~BIT(pipe_num));
 8000f9e:	2002      	movs	r0, #2
 8000fa0:	f000 f951 	bl	8001246 <nrf24l01p_read_reg>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	b25a      	sxtb	r2, r3
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2101      	movs	r1, #1
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	2002      	movs	r0, #2
 8000fc0:	f000 f95a 	bl	8001278 <nrf24l01p_write_reg>
      nrf24l01p_write_reg(NRF24L01P_EN_AA, nrf24l01p_read_reg(NRF24L01P_EN_AA) & ~BIT(pipe_num));
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f000 f93e 	bl	8001246 <nrf24l01p_read_reg>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	b25a      	sxtb	r2, r3
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	b25b      	sxtb	r3, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	b25b      	sxtb	r3, r3
 8000fdc:	4013      	ands	r3, r2
 8000fde:	b25b      	sxtb	r3, r3
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f000 f947 	bl	8001278 <nrf24l01p_write_reg>
      break;
 8000fea:	e008      	b.n	8000ffe <nrf24l01p_close_pipe+0x7c>
      nrf24l01p_write_reg(NRF24L01P_EN_RXADDR, 0);
 8000fec:	2100      	movs	r1, #0
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f000 f942 	bl	8001278 <nrf24l01p_write_reg>
      nrf24l01p_write_reg(NRF24L01P_EN_AA, 0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f000 f93e 	bl	8001278 <nrf24l01p_write_reg>
      break;
 8000ffc:	bf00      	nop
  }
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <nrf24l01p_set_address>:

void nrf24l01p_set_address(nrf24l01p_address_t address, const uint8_t *addr)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	6039      	str	r1, [r7, #0]
 8001010:	71fb      	strb	r3, [r7, #7]
  switch(address)
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b06      	cmp	r3, #6
 8001016:	d00a      	beq.n	800102e <nrf24l01p_set_address+0x28>
 8001018:	2b06      	cmp	r3, #6
 800101a:	dc19      	bgt.n	8001050 <nrf24l01p_set_address+0x4a>
 800101c:	2b01      	cmp	r3, #1
 800101e:	dc02      	bgt.n	8001026 <nrf24l01p_set_address+0x20>
 8001020:	2b00      	cmp	r3, #0
 8001022:	da04      	bge.n	800102e <nrf24l01p_set_address+0x28>
    case NRF24L01P_PIPE5:
      nrf24l01p_write_reg(NRF24L01P_RX_ADDR_P0 + (uint8_t)address, *addr);
      break;

    default:
      break;
 8001024:	e014      	b.n	8001050 <nrf24l01p_set_address+0x4a>
 8001026:	3b02      	subs	r3, #2
  switch(address)
 8001028:	2b03      	cmp	r3, #3
 800102a:	d811      	bhi.n	8001050 <nrf24l01p_set_address+0x4a>
 800102c:	e006      	b.n	800103c <nrf24l01p_set_address+0x36>
      nrf24l01p_write_multibyte_reg((uint8_t) address, addr, 0);
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2200      	movs	r2, #0
 8001032:	6839      	ldr	r1, [r7, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f000 f9bc 	bl	80013b2 <nrf24l01p_write_multibyte_reg>
      break;
 800103a:	e00a      	b.n	8001052 <nrf24l01p_set_address+0x4c>
      nrf24l01p_write_reg(NRF24L01P_RX_ADDR_P0 + (uint8_t)address, *addr);
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	330a      	adds	r3, #10
 8001040:	b2da      	uxtb	r2, r3
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	4619      	mov	r1, r3
 8001048:	4610      	mov	r0, r2
 800104a:	f000 f915 	bl	8001278 <nrf24l01p_write_reg>
      break;
 800104e:	e000      	b.n	8001052 <nrf24l01p_set_address+0x4c>
      break;
 8001050:	bf00      	nop
  }
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <nrf24l01p_set_auto_retr>:

void nrf24l01p_set_auto_retr(uint8_t retr, uint16_t delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	460a      	mov	r2, r1
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	4613      	mov	r3, r2
 800106a:	80bb      	strh	r3, [r7, #4]
  nrf24l01p_write_reg(NRF24L01P_SETUP_RETR, (((delay/250)-1)<<4) | retr);
 800106c:	88bb      	ldrh	r3, [r7, #4]
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <nrf24l01p_set_auto_retr+0x3c>)
 8001070:	fba2 2303 	umull	r2, r3, r2, r3
 8001074:	091b      	lsrs	r3, r3, #4
 8001076:	b29b      	uxth	r3, r3
 8001078:	3b01      	subs	r3, #1
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	b25a      	sxtb	r2, r3
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	4313      	orrs	r3, r2
 8001084:	b25b      	sxtb	r3, r3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	4619      	mov	r1, r3
 800108a:	2004      	movs	r0, #4
 800108c:	f000 f8f4 	bl	8001278 <nrf24l01p_write_reg>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	10624dd3 	.word	0x10624dd3

0800109c <nrf24l01p_set_address_width>:

void nrf24l01p_set_address_width(nrf24l01p_address_width_t address_width)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_SETUP_AW, (uint8_t)address_width - 2);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	3b02      	subs	r3, #2
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	4619      	mov	r1, r3
 80010ae:	2003      	movs	r0, #3
 80010b0:	f000 f8e2 	bl	8001278 <nrf24l01p_write_reg>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <nrf24l01p_set_rx_payload_width>:

void nrf24l01p_set_rx_payload_width(uint8_t pipe_num, uint8_t payload_width)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	460a      	mov	r2, r1
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	71bb      	strb	r3, [r7, #6]
  nrf24l01p_write_reg(NRF24L01P_RX_PW_P0 + pipe_num, payload_width);
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	3311      	adds	r3, #17
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	79ba      	ldrb	r2, [r7, #6]
 80010d4:	4611      	mov	r1, r2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 f8ce 	bl	8001278 <nrf24l01p_write_reg>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <nrf24l01p_get_address_width>:
{
  return (nrf24l01p_read_reg(NRF24L01P_OBSERVE_TX) & (BIT(7)|BIT(6)|BIT(5)|BIT(4))) >> 4;
}

uint8_t nrf24l01p_get_address_width(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  return (nrf24l01p_read_reg(NRF24L01P_SETUP_AW) + 2);
 80010e8:	2003      	movs	r0, #3
 80010ea:	f000 f8ac 	bl	8001246 <nrf24l01p_read_reg>
 80010ee:	4603      	mov	r3, r0
 80010f0:	3302      	adds	r3, #2
 80010f2:	b2db      	uxtb	r3, r3
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <nrf24l01p_set_operation_mode>:
{
  return nrf24l01p_read_reg(NRF24L01P_RX_PW_P0 + pipe_num);
}

void nrf24l01p_set_operation_mode(nrf24l01p_operation_mode_t op_mode)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_CONFIG, BIT_COND(nrf24l01p_read_reg(NRF24L01P_CONFIG), NRF24L01P_CONFIG_PRIM_RX, op_mode == NRF24L01P_PRX));
 8001102:	2000      	movs	r0, #0
 8001104:	f000 f89f 	bl	8001246 <nrf24l01p_read_reg>
 8001108:	4603      	mov	r3, r0
 800110a:	b25b      	sxtb	r3, r3
 800110c:	f023 0301 	bic.w	r3, r3, #1
 8001110:	b25a      	sxtb	r2, r3
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2b01      	cmp	r3, #1
 8001116:	bf0c      	ite	eq
 8001118:	2301      	moveq	r3, #1
 800111a:	2300      	movne	r3, #0
 800111c:	b2db      	uxtb	r3, r3
 800111e:	b25b      	sxtb	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b25b      	sxtb	r3, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4619      	mov	r1, r3
 8001128:	2000      	movs	r0, #0
 800112a:	f000 f8a5 	bl	8001278 <nrf24l01p_write_reg>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <nrf24l01p_set_power_mode>:

void nrf24l01p_set_power_mode(nrf24l01p_pwr_mode_t pwr_mode)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_CONFIG, BIT_COND(nrf24l01p_read_reg(NRF24L01P_CONFIG), NRF24L01P_CONFIG_PWR_UP, pwr_mode == NRF24L01P_PWR_UP));
 8001140:	2000      	movs	r0, #0
 8001142:	f000 f880 	bl	8001246 <nrf24l01p_read_reg>
 8001146:	4603      	mov	r3, r0
 8001148:	b25b      	sxtb	r3, r3
 800114a:	f023 0302 	bic.w	r3, r3, #2
 800114e:	b25b      	sxtb	r3, r3
 8001150:	79fa      	ldrb	r2, [r7, #7]
 8001152:	2a01      	cmp	r2, #1
 8001154:	d101      	bne.n	800115a <nrf24l01p_set_power_mode+0x24>
 8001156:	2202      	movs	r2, #2
 8001158:	e000      	b.n	800115c <nrf24l01p_set_power_mode+0x26>
 800115a:	2200      	movs	r2, #0
 800115c:	4313      	orrs	r3, r2
 800115e:	b25b      	sxtb	r3, r3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	4619      	mov	r1, r3
 8001164:	2000      	movs	r0, #0
 8001166:	f000 f887 	bl	8001278 <nrf24l01p_write_reg>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(uint8_t channel)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_write_reg(NRF24L01P_RF_CH, channel);
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	4619      	mov	r1, r3
 8001180:	2005      	movs	r0, #5
 8001182:	f000 f879 	bl	8001278 <nrf24l01p_write_reg>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <nrf24l01p_rx_fifo_empty>:
{
  return (nrf24l01p_read_reg(NRF24L01P_RF_SETUP) & (1<<NRF24L01P_RF_SETUP_RF_DR)) >> NRF24L01P_RF_SETUP_RF_DR;
}

bool nrf24l01p_rx_fifo_empty(void)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	af00      	add	r7, sp, #0
  return nrf24l01p_get_rx_data_source() == 7;
 8001192:	f000 f82e 	bl	80011f2 <nrf24l01p_get_rx_data_source>
 8001196:	4603      	mov	r3, r0
 8001198:	2b07      	cmp	r3, #7
 800119a:	bf0c      	ite	eq
 800119c:	2301      	moveq	r3, #1
 800119e:	2300      	movne	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <nrf24l01p_write_tx_payload>:
{
  return nrf24l01p_read_reg(NRF24L01P_CD) & 1;
}

void nrf24l01p_write_tx_payload(const uint8_t *tx_payload, uint8_t length)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	460b      	mov	r3, r1
 80011b0:	70fb      	strb	r3, [r7, #3]
  nrf24l01p_write_multibyte_reg(NRF24L01P_TX_PAYLOAD, tx_payload, length);
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	461a      	mov	r2, r3
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	2007      	movs	r0, #7
 80011ba:	f000 f8fa 	bl	80013b2 <nrf24l01p_write_multibyte_reg>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <nrf24l01p_read_rx_fifo_payload_width>:

  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
}

uint8_t nrf24l01p_read_rx_fifo_payload_width()
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
  uint8_t temp;
  
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff f86d 	bl	80002ac <nrf24l01p_spi_ss>

  nrf24l01p_spi_rw(NRF24L01P_RD_RX_PAYLOAD_WIDTH);
 80011d2:	2060      	movs	r0, #96	; 0x60
 80011d4:	f7ff f894 	bl	8000300 <nrf24l01p_spi_rw>
  temp = nrf24l01p_spi_rw(0);
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff f891 	bl	8000300 <nrf24l01p_spi_rw>
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f7ff f862 	bl	80002ac <nrf24l01p_spi_ss>

  return temp;
 80011e8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <nrf24l01p_get_rx_data_source>:

  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
}

uint8_t nrf24l01p_get_rx_data_source(void)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	af00      	add	r7, sp, #0
  return ((nrf24l01p_nop() & (BIT(3)|BIT(2)|BIT(1))) >> 1);
 80011f6:	f000 f81d 	bl	8001234 <nrf24l01p_nop>
 80011fa:	4603      	mov	r3, r0
 80011fc:	105b      	asrs	r3, r3, #1
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	b2db      	uxtb	r3, r3
}
 8001206:	4618      	mov	r0, r3
 8001208:	bd80      	pop	{r7, pc}

0800120a <nrf24l01p_read_rx_payload>:

// Fixed: returns length==0 and pipe==7 means FIFO empty

uint16_t nrf24l01p_read_rx_payload(uint8_t *rx_payload)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  return nrf24l01p_read_multibyte_reg(NRF24L01P_RX_PAYLOAD, rx_payload);
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	2008      	movs	r0, #8
 8001216:	f000 f86f 	bl	80012f8 <nrf24l01p_read_multibyte_reg>
 800121a:	4603      	mov	r3, r0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <nrf24l01p_flush_tx>:
{
  nrf24l01p_write_reg(NRF24L01P_FLUSH_RX, 0);
}

void nrf24l01p_flush_tx(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  nrf24l01p_write_reg(NRF24L01P_FLUSH_TX, 0);
 8001228:	2100      	movs	r1, #0
 800122a:	20e1      	movs	r0, #225	; 0xe1
 800122c:	f000 f824 	bl	8001278 <nrf24l01p_write_reg>
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <nrf24l01p_nop>:

uint8_t nrf24l01p_nop(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  return nrf24l01p_write_reg(NRF24L01P_NOP,0);
 8001238:	2100      	movs	r1, #0
 800123a:	20ff      	movs	r0, #255	; 0xff
 800123c:	f000 f81c 	bl	8001278 <nrf24l01p_write_reg>
 8001240:	4603      	mov	r3, r0
}
 8001242:	4618      	mov	r0, r3
 8001244:	bd80      	pop	{r7, pc}

08001246 <nrf24l01p_read_reg>:
{
  return (nrf24l01p_lna_mode_t) ( (nrf24l01p_read_reg(NRF24L01P_RF_SETUP) & (1<<NRF24L01P_LNA_HCURR)) >> NRF24L01P_LNA_HCURR );
}

uint8_t nrf24l01p_read_reg(uint8_t reg)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b084      	sub	sp, #16
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	71fb      	strb	r3, [r7, #7]
uint8_t temp;
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff f82b 	bl	80002ac <nrf24l01p_spi_ss>
  nrf24l01p_spi_rw(reg);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f851 	bl	8000300 <nrf24l01p_spi_rw>
  temp = nrf24l01p_spi_rw(0);
 800125e:	2000      	movs	r0, #0
 8001260:	f7ff f84e 	bl	8000300 <nrf24l01p_spi_rw>
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 8001268:	2001      	movs	r0, #1
 800126a:	f7ff f81f 	bl	80002ac <nrf24l01p_spi_ss>

  return temp;
 800126e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <nrf24l01p_write_reg>:

uint8_t nrf24l01p_write_reg(uint8_t reg, uint8_t value)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	460a      	mov	r2, r1
 8001282:	71fb      	strb	r3, [r7, #7]
 8001284:	4613      	mov	r3, r2
 8001286:	71bb      	strb	r3, [r7, #6]
  uint8_t retval;
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff f80f 	bl	80002ac <nrf24l01p_spi_ss>
  if(reg < NRF24L01P_NRF_WRITE_REG)   // i.e. this is a register access
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b1f      	cmp	r3, #31
 8001292:	d80c      	bhi.n	80012ae <nrf24l01p_write_reg+0x36>
  {
    retval = nrf24l01p_spi_rw(NRF24L01P_NRF_WRITE_REG + reg);
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	3320      	adds	r3, #32
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f830 	bl	8000300 <nrf24l01p_spi_rw>
 80012a0:	4603      	mov	r3, r0
 80012a2:	73fb      	strb	r3, [r7, #15]
    nrf24l01p_spi_rw(value);
 80012a4:	79bb      	ldrb	r3, [r7, #6]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f82a 	bl	8000300 <nrf24l01p_spi_rw>
 80012ac:	e01c      	b.n	80012e8 <nrf24l01p_write_reg+0x70>
  }
  else            // single byte cmd OR future command/register access
  {
    if(!(reg == NRF24L01P_FLUSH_TX) && !(reg == NRF24L01P_FLUSH_RX) && !(reg == NRF24L01P_REUSE_TX_PL) && !(reg == NRF24L01P_NOP))
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2be1      	cmp	r3, #225	; 0xe1
 80012b2:	d013      	beq.n	80012dc <nrf24l01p_write_reg+0x64>
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2be2      	cmp	r3, #226	; 0xe2
 80012b8:	d010      	beq.n	80012dc <nrf24l01p_write_reg+0x64>
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	2be3      	cmp	r3, #227	; 0xe3
 80012be:	d00d      	beq.n	80012dc <nrf24l01p_write_reg+0x64>
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2bff      	cmp	r3, #255	; 0xff
 80012c4:	d00a      	beq.n	80012dc <nrf24l01p_write_reg+0x64>
    {
      retval = nrf24l01p_spi_rw(reg);
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f819 	bl	8000300 <nrf24l01p_spi_rw>
 80012ce:	4603      	mov	r3, r0
 80012d0:	73fb      	strb	r3, [r7, #15]
      nrf24l01p_spi_rw(value);
 80012d2:	79bb      	ldrb	r3, [r7, #6]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f813 	bl	8000300 <nrf24l01p_spi_rw>
 80012da:	e005      	b.n	80012e8 <nrf24l01p_write_reg+0x70>
    }
    else          // single byte L01 command
    {
      retval = nrf24l01p_spi_rw(reg);
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f80e 	bl	8000300 <nrf24l01p_spi_rw>
 80012e4:	4603      	mov	r3, r0
 80012e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 80012e8:	2001      	movs	r0, #1
 80012ea:	f7fe ffdf 	bl	80002ac <nrf24l01p_spi_ss>

  return retval;
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <nrf24l01p_read_multibyte_reg>:

uint16_t nrf24l01p_read_multibyte_reg(uint8_t reg, uint8_t *pbuf)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
uint8_t ctr, length;
  switch(reg)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	2b08      	cmp	r3, #8
 8001308:	d018      	beq.n	800133c <nrf24l01p_read_multibyte_reg+0x44>
 800130a:	2b08      	cmp	r3, #8
 800130c:	dc2f      	bgt.n	800136e <nrf24l01p_read_multibyte_reg+0x76>
 800130e:	2b01      	cmp	r3, #1
 8001310:	dc02      	bgt.n	8001318 <nrf24l01p_read_multibyte_reg+0x20>
 8001312:	2b00      	cmp	r3, #0
 8001314:	da02      	bge.n	800131c <nrf24l01p_read_multibyte_reg+0x24>
 8001316:	e02a      	b.n	800136e <nrf24l01p_read_multibyte_reg+0x76>
 8001318:	2b06      	cmp	r3, #6
 800131a:	d128      	bne.n	800136e <nrf24l01p_read_multibyte_reg+0x76>
  {
    case NRF24L01P_PIPE0:
    case NRF24L01P_PIPE1:
    case NRF24L01P_TX:
      length = ctr = nrf24l01p_get_address_width();
 800131c:	f7ff fee2 	bl	80010e4 <nrf24l01p_get_address_width>
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	73bb      	strb	r3, [r7, #14]
      nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 8001328:	2000      	movs	r0, #0
 800132a:	f7fe ffbf 	bl	80002ac <nrf24l01p_spi_ss>
      nrf24l01p_spi_rw(NRF24L01P_RX_ADDR_P0 + reg);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	330a      	adds	r3, #10
 8001332:	b2db      	uxtb	r3, r3
 8001334:	4618      	mov	r0, r3
 8001336:	f7fe ffe3 	bl	8000300 <nrf24l01p_spi_rw>
      break;
 800133a:	e01d      	b.n	8001378 <nrf24l01p_read_multibyte_reg+0x80>
      
    case NRF24L01P_RX_PAYLOAD:
      if( (reg = nrf24l01p_get_rx_data_source()) < 7)
 800133c:	f7ff ff59 	bl	80011f2 <nrf24l01p_get_rx_data_source>
 8001340:	4603      	mov	r3, r0
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	2b06      	cmp	r3, #6
 8001348:	d80c      	bhi.n	8001364 <nrf24l01p_read_multibyte_reg+0x6c>
      {
        length = ctr = nrf24l01p_read_rx_fifo_payload_width();
 800134a:	f7ff ff3c 	bl	80011c6 <nrf24l01p_read_rx_fifo_payload_width>
 800134e:	4603      	mov	r3, r0
 8001350:	73fb      	strb	r3, [r7, #15]
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	73bb      	strb	r3, [r7, #14]

        nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 8001356:	2000      	movs	r0, #0
 8001358:	f7fe ffa8 	bl	80002ac <nrf24l01p_spi_ss>
        nrf24l01p_spi_rw(NRF24L01P_RD_RX_PAYLOAD);
 800135c:	2061      	movs	r0, #97	; 0x61
 800135e:	f7fe ffcf 	bl	8000300 <nrf24l01p_spi_rw>
      }
      else
      {
       ctr = length = 0;
      }
      break;
 8001362:	e009      	b.n	8001378 <nrf24l01p_read_multibyte_reg+0x80>
       ctr = length = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	73bb      	strb	r3, [r7, #14]
 8001368:	7bbb      	ldrb	r3, [r7, #14]
 800136a:	73fb      	strb	r3, [r7, #15]
      break;
 800136c:	e004      	b.n	8001378 <nrf24l01p_read_multibyte_reg+0x80>

    default:
      ctr = length = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	73bb      	strb	r3, [r7, #14]
 8001372:	7bbb      	ldrb	r3, [r7, #14]
 8001374:	73fb      	strb	r3, [r7, #15]
      break;
 8001376:	bf00      	nop
  }

  while(ctr--)
 8001378:	e007      	b.n	800138a <nrf24l01p_read_multibyte_reg+0x92>
  {
    *pbuf++ = nrf24l01p_spi_rw(0);
 800137a:	683c      	ldr	r4, [r7, #0]
 800137c:	1c63      	adds	r3, r4, #1
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	2000      	movs	r0, #0
 8001382:	f7fe ffbd 	bl	8000300 <nrf24l01p_spi_rw>
 8001386:	4603      	mov	r3, r0
 8001388:	7023      	strb	r3, [r4, #0]
  while(ctr--)
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	1e5a      	subs	r2, r3, #1
 800138e:	73fa      	strb	r2, [r7, #15]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f2      	bne.n	800137a <nrf24l01p_read_multibyte_reg+0x82>
  }

  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 8001394:	2001      	movs	r0, #1
 8001396:	f7fe ff89 	bl	80002ac <nrf24l01p_spi_ss>

  return (((uint16_t) reg << 8) | length);
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	b21a      	sxth	r2, r3
 80013a0:	7bbb      	ldrb	r3, [r7, #14]
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	4313      	orrs	r3, r2
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	b29b      	uxth	r3, r3
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd90      	pop	{r4, r7, pc}

080013b2 <nrf24l01p_write_multibyte_reg>:

void nrf24l01p_write_multibyte_reg(uint8_t reg, const uint8_t *pbuf, uint8_t length)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	6039      	str	r1, [r7, #0]
 80013bc:	71fb      	strb	r3, [r7, #7]
 80013be:	4613      	mov	r3, r2
 80013c0:	71bb      	strb	r3, [r7, #6]
  switch(reg)
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	2b07      	cmp	r3, #7
 80013c6:	d016      	beq.n	80013f6 <nrf24l01p_write_multibyte_reg+0x44>
 80013c8:	2b07      	cmp	r3, #7
 80013ca:	dc1b      	bgt.n	8001404 <nrf24l01p_write_multibyte_reg+0x52>
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	dc02      	bgt.n	80013d6 <nrf24l01p_write_multibyte_reg+0x24>
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	da02      	bge.n	80013da <nrf24l01p_write_multibyte_reg+0x28>
    case NRF24L01P_TX_PAYLOAD:
      nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
      nrf24l01p_spi_rw(NRF24L01P_WR_TX_PAYLOAD);
      break;      
    default:
      break;
 80013d4:	e016      	b.n	8001404 <nrf24l01p_write_multibyte_reg+0x52>
  switch(reg)
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d114      	bne.n	8001404 <nrf24l01p_write_multibyte_reg+0x52>
      length = nrf24l01p_get_address_width();
 80013da:	f7ff fe83 	bl	80010e4 <nrf24l01p_get_address_width>
 80013de:	4603      	mov	r3, r0
 80013e0:	71bb      	strb	r3, [r7, #6]
      nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7fe ff62 	bl	80002ac <nrf24l01p_spi_ss>
      nrf24l01p_spi_rw(NRF24L01P_NRF_WRITE_REG + NRF24L01P_RX_ADDR_P0 + reg);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	332a      	adds	r3, #42	; 0x2a
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7fe ff86 	bl	8000300 <nrf24l01p_spi_rw>
      break;
 80013f4:	e007      	b.n	8001406 <nrf24l01p_write_multibyte_reg+0x54>
      nrf24l01p_spi_ss(NRF24L01P_SPI_SS_LOW);
 80013f6:	2000      	movs	r0, #0
 80013f8:	f7fe ff58 	bl	80002ac <nrf24l01p_spi_ss>
      nrf24l01p_spi_rw(NRF24L01P_WR_TX_PAYLOAD);
 80013fc:	20a0      	movs	r0, #160	; 0xa0
 80013fe:	f7fe ff7f 	bl	8000300 <nrf24l01p_spi_rw>
      break;      
 8001402:	e000      	b.n	8001406 <nrf24l01p_write_multibyte_reg+0x54>
      break;
 8001404:	bf00      	nop
  }

  while(length--)
 8001406:	e006      	b.n	8001416 <nrf24l01p_write_multibyte_reg+0x64>
    nrf24l01p_spi_rw(*pbuf++);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	603a      	str	r2, [r7, #0]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7fe ff75 	bl	8000300 <nrf24l01p_spi_rw>
  while(length--)
 8001416:	79bb      	ldrb	r3, [r7, #6]
 8001418:	1e5a      	subs	r2, r3, #1
 800141a:	71ba      	strb	r2, [r7, #6]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f3      	bne.n	8001408 <nrf24l01p_write_multibyte_reg+0x56>

  nrf24l01p_spi_ss(NRF24L01P_SPI_SS_HIGH);
 8001420:	2001      	movs	r0, #1
 8001422:	f7fe ff43 	bl	80002ac <nrf24l01p_spi_ss>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_MspInit+0x5c>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	4a14      	ldr	r2, [pc, #80]	; (800148c <HAL_MspInit+0x5c>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6193      	str	r3, [r2, #24]
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_MspInit+0x5c>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <HAL_MspInit+0x5c>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	4a0e      	ldr	r2, [pc, #56]	; (800148c <HAL_MspInit+0x5c>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	61d3      	str	r3, [r2, #28]
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <HAL_MspInit+0x5c>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <HAL_MspInit+0x60>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	4a04      	ldr	r2, [pc, #16]	; (8001490 <HAL_MspInit+0x60>)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	40021000 	.word	0x40021000
 8001490:	40010000 	.word	0x40010000

08001494 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a15      	ldr	r2, [pc, #84]	; (8001504 <HAL_I2C_MspInit+0x70>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d123      	bne.n	80014fc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <HAL_I2C_MspInit+0x74>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	4a13      	ldr	r2, [pc, #76]	; (8001508 <HAL_I2C_MspInit+0x74>)
 80014ba:	f043 0308 	orr.w	r3, r3, #8
 80014be:	6193      	str	r3, [r2, #24]
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_I2C_MspInit+0x74>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014cc:	23c0      	movs	r3, #192	; 0xc0
 80014ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d0:	2312      	movs	r3, #18
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	4619      	mov	r1, r3
 80014de:	480b      	ldr	r0, [pc, #44]	; (800150c <HAL_I2C_MspInit+0x78>)
 80014e0:	f000 fc9e 	bl	8001e20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_I2C_MspInit+0x74>)
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	4a07      	ldr	r2, [pc, #28]	; (8001508 <HAL_I2C_MspInit+0x74>)
 80014ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ee:	61d3      	str	r3, [r2, #28]
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <HAL_I2C_MspInit+0x74>)
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014fc:	bf00      	nop
 80014fe:	3720      	adds	r7, #32
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40005400 	.word	0x40005400
 8001508:	40021000 	.word	0x40021000
 800150c:	40010c00 	.word	0x40010c00

08001510 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a1c      	ldr	r2, [pc, #112]	; (800159c <HAL_SPI_MspInit+0x8c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d131      	bne.n	8001594 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_SPI_MspInit+0x90>)
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	4a1a      	ldr	r2, [pc, #104]	; (80015a0 <HAL_SPI_MspInit+0x90>)
 8001536:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153a:	61d3      	str	r3, [r2, #28]
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_SPI_MspInit+0x90>)
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_SPI_MspInit+0x90>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <HAL_SPI_MspInit+0x90>)
 800154e:	f043 0308 	orr.w	r3, r3, #8
 8001552:	6193      	str	r3, [r2, #24]
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_SPI_MspInit+0x90>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001560:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001564:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	4619      	mov	r1, r3
 8001574:	480b      	ldr	r0, [pc, #44]	; (80015a4 <HAL_SPI_MspInit+0x94>)
 8001576:	f000 fc53 	bl	8001e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800157a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800157e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	4619      	mov	r1, r3
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <HAL_SPI_MspInit+0x94>)
 8001590:	f000 fc46 	bl	8001e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001594:	bf00      	nop
 8001596:	3720      	adds	r7, #32
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40003800 	.word	0x40003800
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40010c00 	.word	0x40010c00

080015a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <NMI_Handler+0x4>

080015ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <HardFault_Handler+0x4>

080015b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <MemManage_Handler+0x4>

080015ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <BusFault_Handler+0x4>

080015c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <UsageFault_Handler+0x4>

080015c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr

080015d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr

080015de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ee:	f000 fac9 	bl	8001b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80015fe:	f001 ff0c 	bl	800341a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20001248 	.word	0x20001248

0800160c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <_vfd_get_char_code>:

/**
 * Returns code for display from character code
 */
uint16_t _vfd_get_char_code(char code)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
	if ('0' <= code && code <= '9')
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	2b2f      	cmp	r3, #47	; 0x2f
 8001626:	d908      	bls.n	800163a <_vfd_get_char_code+0x22>
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b39      	cmp	r3, #57	; 0x39
 800162c:	d805      	bhi.n	800163a <_vfd_get_char_code+0x22>
		return _VFD_MAP_DIGITS[code - '0'];
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	3b30      	subs	r3, #48	; 0x30
 8001632:	4a2b      	ldr	r2, [pc, #172]	; (80016e0 <_vfd_get_char_code+0xc8>)
 8001634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001638:	e04c      	b.n	80016d4 <_vfd_get_char_code+0xbc>
	if (0 <= code && code <= 9)
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2b09      	cmp	r3, #9
 800163e:	d804      	bhi.n	800164a <_vfd_get_char_code+0x32>
		return _VFD_MAP_DIGITS[(uint8_t)code];
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	4a27      	ldr	r2, [pc, #156]	; (80016e0 <_vfd_get_char_code+0xc8>)
 8001644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001648:	e044      	b.n	80016d4 <_vfd_get_char_code+0xbc>
	for (int i = 0; i < _VFD_SIZE_SPECIAL; i++)
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	e00e      	b.n	800166e <_vfd_get_char_code+0x56>
		if (_VFD_MAP_SPECIAL_CHAR[i] == code)
 8001650:	4a24      	ldr	r2, [pc, #144]	; (80016e4 <_vfd_get_char_code+0xcc>)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4413      	add	r3, r2
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	79fa      	ldrb	r2, [r7, #7]
 800165a:	429a      	cmp	r2, r3
 800165c:	d104      	bne.n	8001668 <_vfd_get_char_code+0x50>
			return _VFD_MAP_SPECIAL[i];
 800165e:	4a22      	ldr	r2, [pc, #136]	; (80016e8 <_vfd_get_char_code+0xd0>)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001666:	e035      	b.n	80016d4 <_vfd_get_char_code+0xbc>
	for (int i = 0; i < _VFD_SIZE_SPECIAL; i++)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	3301      	adds	r3, #1
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	231a      	movs	r3, #26
 8001670:	461a      	mov	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4293      	cmp	r3, r2
 8001676:	dbeb      	blt.n	8001650 <_vfd_get_char_code+0x38>
	if ('a' <= code && code <= 'z')
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	2b60      	cmp	r3, #96	; 0x60
 800167c:	d908      	bls.n	8001690 <_vfd_get_char_code+0x78>
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b7a      	cmp	r3, #122	; 0x7a
 8001682:	d805      	bhi.n	8001690 <_vfd_get_char_code+0x78>
		return _VFD_MAP_ALPHA[code - 'a'];
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	3b61      	subs	r3, #97	; 0x61
 8001688:	4a18      	ldr	r2, [pc, #96]	; (80016ec <_vfd_get_char_code+0xd4>)
 800168a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800168e:	e021      	b.n	80016d4 <_vfd_get_char_code+0xbc>
	if ('A' <= code && code <= 'Z')
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	2b40      	cmp	r3, #64	; 0x40
 8001694:	d908      	bls.n	80016a8 <_vfd_get_char_code+0x90>
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2b5a      	cmp	r3, #90	; 0x5a
 800169a:	d805      	bhi.n	80016a8 <_vfd_get_char_code+0x90>
		return _VFD_MAP_ALPHA[code - 'A'];
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	3b41      	subs	r3, #65	; 0x41
 80016a0:	4a12      	ldr	r2, [pc, #72]	; (80016ec <_vfd_get_char_code+0xd4>)
 80016a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016a6:	e015      	b.n	80016d4 <_vfd_get_char_code+0xbc>
	if (192 <= code && code <= 223) // russian upper letters
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	2bbf      	cmp	r3, #191	; 0xbf
 80016ac:	d908      	bls.n	80016c0 <_vfd_get_char_code+0xa8>
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	2bdf      	cmp	r3, #223	; 0xdf
 80016b2:	d805      	bhi.n	80016c0 <_vfd_get_char_code+0xa8>
		return _VFD_MAP_ALPHA_RU[code - 192];
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	3bc0      	subs	r3, #192	; 0xc0
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <_vfd_get_char_code+0xd8>)
 80016ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016be:	e009      	b.n	80016d4 <_vfd_get_char_code+0xbc>
	if (224 <= code && code <= 255) // russian lower letters
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	2bdf      	cmp	r3, #223	; 0xdf
 80016c4:	d905      	bls.n	80016d2 <_vfd_get_char_code+0xba>
		return _VFD_MAP_ALPHA_RU[code - 224];
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	3be0      	subs	r3, #224	; 0xe0
 80016ca:	4a09      	ldr	r2, [pc, #36]	; (80016f0 <_vfd_get_char_code+0xd8>)
 80016cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016d0:	e000      	b.n	80016d4 <_vfd_get_char_code+0xbc>
	return 0;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	0800a320 	.word	0x0800a320
 80016e4:	0800a3dc 	.word	0x0800a3dc
 80016e8:	0800a3a8 	.word	0x0800a3a8
 80016ec:	0800a334 	.word	0x0800a334
 80016f0:	0800a368 	.word	0x0800a368

080016f4 <vfd_put_string>:

/**
 * put string in buffer
 */
void vfd_put_string(char * str)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	uint16_t buf;
	// erase letters only
	for (int i = 10; i > 0; i --)
 80016fc:	230a      	movs	r3, #10
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	e028      	b.n	8001754 <vfd_put_string+0x60>
	{
		 vfd.arr2[i][0] &= 1<<0;
 8001702:	493e      	ldr	r1, [pc, #248]	; (80017fc <vfd_put_string+0x108>)
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	440b      	add	r3, r1
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	b2d8      	uxtb	r0, r3
 8001716:	4939      	ldr	r1, [pc, #228]	; (80017fc <vfd_put_string+0x108>)
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	4613      	mov	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	440b      	add	r3, r1
 8001722:	4602      	mov	r2, r0
 8001724:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] &= 1<<7;
 8001726:	4935      	ldr	r1, [pc, #212]	; (80017fc <vfd_put_string+0x108>)
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	440b      	add	r3, r1
 8001732:	3301      	adds	r3, #1
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800173a:	b2d8      	uxtb	r0, r3
 800173c:	492f      	ldr	r1, [pc, #188]	; (80017fc <vfd_put_string+0x108>)
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	440b      	add	r3, r1
 8001748:	3301      	adds	r3, #1
 800174a:	4602      	mov	r2, r0
 800174c:	701a      	strb	r2, [r3, #0]
	for (int i = 10; i > 0; i --)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3b01      	subs	r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	dcd3      	bgt.n	8001702 <vfd_put_string+0xe>
	}
	uint8_t i = 10;
 800175a:	230a      	movs	r3, #10
 800175c:	72fb      	strb	r3, [r7, #11]
	while (*str)
 800175e:	e042      	b.n	80017e6 <vfd_put_string+0xf2>
	{
		 buf = _vfd_get_char_code(*(str++));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff55 	bl	8001618 <_vfd_get_char_code>
 800176e:	4603      	mov	r3, r0
 8001770:	813b      	strh	r3, [r7, #8]
		 vfd.arr2[i][0] |= buf & (~(1<<0));
 8001772:	7afa      	ldrb	r2, [r7, #11]
 8001774:	4921      	ldr	r1, [pc, #132]	; (80017fc <vfd_put_string+0x108>)
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	440b      	add	r3, r1
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b25a      	sxtb	r2, r3
 8001782:	893b      	ldrh	r3, [r7, #8]
 8001784:	b25b      	sxtb	r3, r3
 8001786:	f023 0301 	bic.w	r3, r3, #1
 800178a:	b25b      	sxtb	r3, r3
 800178c:	4313      	orrs	r3, r2
 800178e:	b25b      	sxtb	r3, r3
 8001790:	7afa      	ldrb	r2, [r7, #11]
 8001792:	b2d8      	uxtb	r0, r3
 8001794:	4919      	ldr	r1, [pc, #100]	; (80017fc <vfd_put_string+0x108>)
 8001796:	4613      	mov	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	440b      	add	r3, r1
 800179e:	4602      	mov	r2, r0
 80017a0:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] |= (buf>>8)&(~(1<<7));
 80017a2:	7afa      	ldrb	r2, [r7, #11]
 80017a4:	4915      	ldr	r1, [pc, #84]	; (80017fc <vfd_put_string+0x108>)
 80017a6:	4613      	mov	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	3301      	adds	r3, #1
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b25a      	sxtb	r2, r3
 80017b4:	893b      	ldrh	r3, [r7, #8]
 80017b6:	0a1b      	lsrs	r3, r3, #8
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	b25b      	sxtb	r3, r3
 80017bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017c0:	b25b      	sxtb	r3, r3
 80017c2:	4313      	orrs	r3, r2
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	7afa      	ldrb	r2, [r7, #11]
 80017c8:	b2d8      	uxtb	r0, r3
 80017ca:	490c      	ldr	r1, [pc, #48]	; (80017fc <vfd_put_string+0x108>)
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	440b      	add	r3, r1
 80017d4:	3301      	adds	r3, #1
 80017d6:	4602      	mov	r2, r0
 80017d8:	701a      	strb	r2, [r3, #0]
		 if (!--i)
 80017da:	7afb      	ldrb	r3, [r7, #11]
 80017dc:	3b01      	subs	r3, #1
 80017de:	72fb      	strb	r3, [r7, #11]
 80017e0:	7afb      	ldrb	r3, [r7, #11]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d004      	beq.n	80017f0 <vfd_put_string+0xfc>
	while (*str)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1b8      	bne.n	8001760 <vfd_put_string+0x6c>
			 break;
	}
}
 80017ee:	e000      	b.n	80017f2 <vfd_put_string+0xfe>
			 break;
 80017f0:	bf00      	nop
}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	2000058c 	.word	0x2000058c

08001800 <vfd_set_symbols>:

/**
 * set symbols mask in buffer
 */
void vfd_set_symbols(uint32_t symbols)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < _VFD_SIZE_SYMBOLS; i++)
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e041      	b.n	8001892 <vfd_set_symbols+0x92>
	{
		if (symbols & (1<<i))
 800180e:	2201      	movs	r2, #1
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	461a      	mov	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4013      	ands	r3, r2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d035      	beq.n	800188c <vfd_set_symbols+0x8c>
		{
			// set symbol
			for (int b = 0; b < 3; b++)
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	e02f      	b.n	8001886 <vfd_set_symbols+0x86>
			  vfd.arr2[_VFD_MAP_SYMBOLS[i][0]][b] |= ((1<<_VFD_MAP_SYMBOLS[i][1])>>(b<<3))&0xFF;
 8001826:	4a20      	ldr	r2, [pc, #128]	; (80018a8 <vfd_set_symbols+0xa8>)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800182e:	4619      	mov	r1, r3
 8001830:	4a1e      	ldr	r2, [pc, #120]	; (80018ac <vfd_set_symbols+0xac>)
 8001832:	460b      	mov	r3, r1
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	440b      	add	r3, r1
 8001838:	441a      	add	r2, r3
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	4413      	add	r3, r2
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	b25a      	sxtb	r2, r3
 8001842:	4919      	ldr	r1, [pc, #100]	; (80018a8 <vfd_set_symbols+0xa8>)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	440b      	add	r3, r1
 800184a:	785b      	ldrb	r3, [r3, #1]
 800184c:	4619      	mov	r1, r3
 800184e:	2301      	movs	r3, #1
 8001850:	fa03 f101 	lsl.w	r1, r3, r1
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	fa41 f303 	asr.w	r3, r1, r3
 800185c:	b25b      	sxtb	r3, r3
 800185e:	4313      	orrs	r3, r2
 8001860:	b258      	sxtb	r0, r3
 8001862:	4a11      	ldr	r2, [pc, #68]	; (80018a8 <vfd_set_symbols+0xa8>)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800186a:	4619      	mov	r1, r3
 800186c:	b2c0      	uxtb	r0, r0
 800186e:	4a0f      	ldr	r2, [pc, #60]	; (80018ac <vfd_set_symbols+0xac>)
 8001870:	460b      	mov	r3, r1
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	440b      	add	r3, r1
 8001876:	441a      	add	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4413      	add	r3, r2
 800187c:	4602      	mov	r2, r0
 800187e:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	3301      	adds	r3, #1
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2b02      	cmp	r3, #2
 800188a:	ddcc      	ble.n	8001826 <vfd_set_symbols+0x26>
	for (int i = 0; i < _VFD_SIZE_SYMBOLS; i++)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	3301      	adds	r3, #1
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	2319      	movs	r3, #25
 8001894:	461a      	mov	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4293      	cmp	r3, r2
 800189a:	dbb8      	blt.n	800180e <vfd_set_symbols+0xe>
		}
	}
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	0800a3f8 	.word	0x0800a3f8
 80018ac:	2000058c 	.word	0x2000058c

080018b0 <vfd_clr_symbols>:

/**
 * put symbols mask in buffer
 */
void vfd_clr_symbols(uint32_t symbols)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < _VFD_SIZE_SYMBOLS; i++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	e043      	b.n	8001946 <vfd_clr_symbols+0x96>
	{
		if (symbols & (1<<i))
 80018be:	2201      	movs	r2, #1
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	461a      	mov	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d037      	beq.n	8001940 <vfd_clr_symbols+0x90>
		{
			// reset symbol
			for (int b = 0; b < 3; b++)
 80018d0:	2300      	movs	r3, #0
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	e031      	b.n	800193a <vfd_clr_symbols+0x8a>
			  vfd.arr2[_VFD_MAP_SYMBOLS[i][0]][b] &= ~(((1<<_VFD_MAP_SYMBOLS[i][1])>>(b<<3))&0xFF);
 80018d6:	4a21      	ldr	r2, [pc, #132]	; (800195c <vfd_clr_symbols+0xac>)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80018de:	4619      	mov	r1, r3
 80018e0:	4a1f      	ldr	r2, [pc, #124]	; (8001960 <vfd_clr_symbols+0xb0>)
 80018e2:	460b      	mov	r3, r1
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	440b      	add	r3, r1
 80018e8:	441a      	add	r2, r3
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	4413      	add	r3, r2
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	b25a      	sxtb	r2, r3
 80018f2:	491a      	ldr	r1, [pc, #104]	; (800195c <vfd_clr_symbols+0xac>)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	440b      	add	r3, r1
 80018fa:	785b      	ldrb	r3, [r3, #1]
 80018fc:	4619      	mov	r1, r3
 80018fe:	2301      	movs	r3, #1
 8001900:	fa03 f101 	lsl.w	r1, r3, r1
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	fa41 f303 	asr.w	r3, r1, r3
 800190c:	b25b      	sxtb	r3, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	b25b      	sxtb	r3, r3
 8001912:	4013      	ands	r3, r2
 8001914:	b258      	sxtb	r0, r3
 8001916:	4a11      	ldr	r2, [pc, #68]	; (800195c <vfd_clr_symbols+0xac>)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800191e:	4619      	mov	r1, r3
 8001920:	b2c0      	uxtb	r0, r0
 8001922:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <vfd_clr_symbols+0xb0>)
 8001924:	460b      	mov	r3, r1
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	440b      	add	r3, r1
 800192a:	441a      	add	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	4413      	add	r3, r2
 8001930:	4602      	mov	r2, r0
 8001932:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	3301      	adds	r3, #1
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2b02      	cmp	r3, #2
 800193e:	ddca      	ble.n	80018d6 <vfd_clr_symbols+0x26>
	for (int i = 0; i < _VFD_SIZE_SYMBOLS; i++)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3301      	adds	r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	2319      	movs	r3, #25
 8001948:	461a      	mov	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4293      	cmp	r3, r2
 800194e:	dbb6      	blt.n	80018be <vfd_clr_symbols+0xe>
		}
	}
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	0800a3f8 	.word	0x0800a3f8
 8001960:	2000058c 	.word	0x2000058c

08001964 <vfd_clear_buf>:

/**
 * clear buffer
 */
void vfd_clear_buf(void)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	e007      	b.n	8001980 <vfd_clear_buf+0x1c>
		  vfd.arr1[a] = 0;
 8001970:	4a08      	ldr	r2, [pc, #32]	; (8001994 <vfd_clear_buf+0x30>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3301      	adds	r3, #1
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b20      	cmp	r3, #32
 8001984:	d9f4      	bls.n	8001970 <vfd_clear_buf+0xc>
}
 8001986:	bf00      	nop
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	2000058c 	.word	0x2000058c

08001998 <vfd_update>:
}

/**
 * update data on VFD display
 */
void vfd_update(void) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
	uint8_t data;

	vfd_spi_cs(VFD_CS_LOW);
 800199e:	2000      	movs	r0, #0
 80019a0:	f7fe fcc4 	bl	800032c <vfd_spi_cs>
	data = VFD_COM_DATA_SETTING|VFD_DS_WRITE_DISP; // command 2, write display
 80019a4:	2340      	movs	r3, #64	; 0x40
 80019a6:	71fb      	strb	r3, [r7, #7]
	vfd_spi_tx(&data, 1);
 80019a8:	1dfb      	adds	r3, r7, #7
 80019aa:	2101      	movs	r1, #1
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fccf 	bl	8000350 <vfd_spi_tx>
	vfd_spi_cs(VFD_CS_HIGH);
 80019b2:	2001      	movs	r0, #1
 80019b4:	f7fe fcba 	bl	800032c <vfd_spi_cs>

	vfd_spi_cs(VFD_CS_LOW);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f7fe fcb7 	bl	800032c <vfd_spi_cs>
	data = VFD_COM_ADDRESS_SETTING; // command 3, set address to 0
 80019be:	23c0      	movs	r3, #192	; 0xc0
 80019c0:	71fb      	strb	r3, [r7, #7]
	vfd_spi_tx(&data, 1);
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	2101      	movs	r1, #1
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fcc2 	bl	8000350 <vfd_spi_tx>
	vfd_spi_tx(vfd.arr1, sizeof(vfd.arr1)); // transmit data
 80019cc:	2121      	movs	r1, #33	; 0x21
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <vfd_update+0x4c>)
 80019d0:	f7fe fcbe 	bl	8000350 <vfd_spi_tx>
	vfd_spi_cs(VFD_CS_HIGH);
 80019d4:	2001      	movs	r0, #1
 80019d6:	f7fe fca9 	bl	800032c <vfd_spi_cs>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2000058c 	.word	0x2000058c

080019e8 <vfd_leds>:

/**
 * enable disable leds mask (4 leds available)
 */
void vfd_leds(uint8_t leds)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = VFD_COM_DATA_SETTING|VFD_DS_WRITE_LED; // command 2, write to LED port
 80019f2:	2341      	movs	r3, #65	; 0x41
 80019f4:	73fb      	strb	r3, [r7, #15]
	vfd_spi_cs(VFD_CS_LOW);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f7fe fc98 	bl	800032c <vfd_spi_cs>
	vfd_spi_tx(&data, 1);
 80019fc:	f107 030f 	add.w	r3, r7, #15
 8001a00:	2101      	movs	r1, #1
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fca4 	bl	8000350 <vfd_spi_tx>
	data = (~leds)&0b1111;
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	73fb      	strb	r3, [r7, #15]
	vfd_spi_tx(&data, 1);
 8001a16:	f107 030f 	add.w	r3, r7, #15
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fc97 	bl	8000350 <vfd_spi_tx>
	vfd_spi_cs(VFD_CS_HIGH);
 8001a22:	2001      	movs	r0, #1
 8001a24:	f7fe fc82 	bl	800032c <vfd_spi_cs>
}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <vfd_init>:

/**
 * sets correct grid & segments count
 */
void vfd_init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
	uint8_t data;

	vfd_spi_cs(VFD_CS_LOW);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f7fe fc78 	bl	800032c <vfd_spi_cs>
	data = VFD_COM_DISPLAY_MODE_SETTING|VFD_DMS_11dig_17seg; // command 2, write display
 8001a3c:	2307      	movs	r3, #7
 8001a3e:	71fb      	strb	r3, [r7, #7]
	vfd_spi_tx(&data, 1);
 8001a40:	1dfb      	adds	r3, r7, #7
 8001a42:	2101      	movs	r1, #1
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fc83 	bl	8000350 <vfd_spi_tx>
	vfd_spi_cs(VFD_CS_HIGH);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f7fe fc6e 	bl	800032c <vfd_spi_cs>

}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <vfd_control>:

/**
 * enable/disable display and set dimming (0..7)
 */
void vfd_control(bool enable, uint8_t dimm)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	460a      	mov	r2, r1
 8001a62:	71fb      	strb	r3, [r7, #7]
 8001a64:	4613      	mov	r3, r2
 8001a66:	71bb      	strb	r3, [r7, #6]
	uint8_t data;

	vfd_spi_cs(VFD_CS_LOW);
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7fe fc5f 	bl	800032c <vfd_spi_cs>
	data = VFD_COM_DISPLAY_CONTROL|(enable?VFD_DC_DISP_ON:0)|(dimm&0b111); // command 4
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <vfd_control+0x22>
 8001a74:	f06f 0277 	mvn.w	r2, #119	; 0x77
 8001a78:	e001      	b.n	8001a7e <vfd_control+0x26>
 8001a7a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8001a7e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	b25b      	sxtb	r3, r3
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	73fb      	strb	r3, [r7, #15]
	vfd_spi_tx(&data, 1);
 8001a90:	f107 030f 	add.w	r3, r7, #15
 8001a94:	2101      	movs	r1, #1
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fc5a 	bl	8000350 <vfd_spi_tx>
	vfd_spi_cs(VFD_CS_HIGH);
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f7fe fc45 	bl	800032c <vfd_spi_cs>
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aac:	480c      	ldr	r0, [pc, #48]	; (8001ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aae:	490d      	ldr	r1, [pc, #52]	; (8001ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab4:	e002      	b.n	8001abc <LoopCopyDataInit>

08001ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aba:	3304      	adds	r3, #4

08001abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac0:	d3f9      	bcc.n	8001ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ac4:	4c0a      	ldr	r4, [pc, #40]	; (8001af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac8:	e001      	b.n	8001ace <LoopFillZerobss>

08001aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001acc:	3204      	adds	r2, #4

08001ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad0:	d3fb      	bcc.n	8001aca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ad2:	f7ff fd9b 	bl	800160c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad6:	f008 fb4f 	bl	800a178 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ada:	f7fe ffb1 	bl	8000a40 <main>
  bx lr
 8001ade:	4770      	bx	lr
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae4:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001ae8:	0800a434 	.word	0x0800a434
  ldr r2, =_sbss
 8001aec:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001af0:	20001534 	.word	0x20001534

08001af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC1_2_IRQHandler>
	...

08001af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_Init+0x28>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <HAL_Init+0x28>)
 8001b02:	f043 0310 	orr.w	r3, r3, #16
 8001b06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b08:	2003      	movs	r0, #3
 8001b0a:	f000 f947 	bl	8001d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0e:	200f      	movs	r0, #15
 8001b10:	f000 f808 	bl	8001b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b14:	f7ff fc8c 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40022000 	.word	0x40022000

08001b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_InitTick+0x54>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_InitTick+0x58>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f95f 	bl	8001e06 <HAL_SYSTICK_Config>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00e      	b.n	8001b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	d80a      	bhi.n	8001b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f000 f927 	bl	8001db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b64:	4a06      	ldr	r2, [pc, #24]	; (8001b80 <HAL_InitTick+0x5c>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000008 	.word	0x20000008
 8001b7c:	20000010 	.word	0x20000010
 8001b80:	2000000c 	.word	0x2000000c

08001b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_IncTick+0x1c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_IncTick+0x20>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	4a03      	ldr	r2, [pc, #12]	; (8001ba4 <HAL_IncTick+0x20>)
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	20000010 	.word	0x20000010
 8001ba4:	200005b0 	.word	0x200005b0

08001ba8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bac:	4b02      	ldr	r3, [pc, #8]	; (8001bb8 <HAL_GetTick+0x10>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	200005b0 	.word	0x200005b0

08001bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc4:	f7ff fff0 	bl	8001ba8 <HAL_GetTick>
 8001bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd4:	d005      	beq.n	8001be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_Delay+0x44>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001be2:	bf00      	nop
 8001be4:	f7ff ffe0 	bl	8001ba8 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d8f7      	bhi.n	8001be4 <HAL_Delay+0x28>
  {
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000010 	.word	0x20000010

08001c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c36:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	60d3      	str	r3, [r2, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <__NVIC_GetPriorityGrouping+0x18>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f003 0307 	and.w	r3, r3, #7
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	db0b      	blt.n	8001c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	f003 021f 	and.w	r2, r3, #31
 8001c80:	4906      	ldr	r1, [pc, #24]	; (8001c9c <__NVIC_EnableIRQ+0x34>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	2001      	movs	r0, #1
 8001c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	e000e100 	.word	0xe000e100

08001ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	6039      	str	r1, [r7, #0]
 8001caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	db0a      	blt.n	8001cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	490c      	ldr	r1, [pc, #48]	; (8001cec <__NVIC_SetPriority+0x4c>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	0112      	lsls	r2, r2, #4
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc8:	e00a      	b.n	8001ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4908      	ldr	r1, [pc, #32]	; (8001cf0 <__NVIC_SetPriority+0x50>)
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	3b04      	subs	r3, #4
 8001cd8:	0112      	lsls	r2, r2, #4
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	440b      	add	r3, r1
 8001cde:	761a      	strb	r2, [r3, #24]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b089      	sub	sp, #36	; 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f1c3 0307 	rsb	r3, r3, #7
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	bf28      	it	cs
 8001d12:	2304      	movcs	r3, #4
 8001d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	2b06      	cmp	r3, #6
 8001d1c:	d902      	bls.n	8001d24 <NVIC_EncodePriority+0x30>
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3b03      	subs	r3, #3
 8001d22:	e000      	b.n	8001d26 <NVIC_EncodePriority+0x32>
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43da      	mvns	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	401a      	ands	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	43d9      	mvns	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	4313      	orrs	r3, r2
         );
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3724      	adds	r7, #36	; 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d68:	d301      	bcc.n	8001d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e00f      	b.n	8001d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <SysTick_Config+0x40>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d76:	210f      	movs	r1, #15
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	f7ff ff90 	bl	8001ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <SysTick_Config+0x40>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d86:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <SysTick_Config+0x40>)
 8001d88:	2207      	movs	r2, #7
 8001d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	e000e010 	.word	0xe000e010

08001d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ff2d 	bl	8001c04 <__NVIC_SetPriorityGrouping>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc4:	f7ff ff42 	bl	8001c4c <__NVIC_GetPriorityGrouping>
 8001dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	6978      	ldr	r0, [r7, #20]
 8001dd0:	f7ff ff90 	bl	8001cf4 <NVIC_EncodePriority>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff5f 	bl	8001ca0 <__NVIC_SetPriority>
}
 8001de2:	bf00      	nop
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff35 	bl	8001c68 <__NVIC_EnableIRQ>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ffa2 	bl	8001d58 <SysTick_Config>
 8001e14:	4603      	mov	r3, r0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b08b      	sub	sp, #44	; 0x2c
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e32:	e169      	b.n	8002108 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e34:	2201      	movs	r2, #1
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	f040 8158 	bne.w	8002102 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4a9a      	ldr	r2, [pc, #616]	; (80020c0 <HAL_GPIO_Init+0x2a0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d05e      	beq.n	8001f1a <HAL_GPIO_Init+0xfa>
 8001e5c:	4a98      	ldr	r2, [pc, #608]	; (80020c0 <HAL_GPIO_Init+0x2a0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d875      	bhi.n	8001f4e <HAL_GPIO_Init+0x12e>
 8001e62:	4a98      	ldr	r2, [pc, #608]	; (80020c4 <HAL_GPIO_Init+0x2a4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d058      	beq.n	8001f1a <HAL_GPIO_Init+0xfa>
 8001e68:	4a96      	ldr	r2, [pc, #600]	; (80020c4 <HAL_GPIO_Init+0x2a4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d86f      	bhi.n	8001f4e <HAL_GPIO_Init+0x12e>
 8001e6e:	4a96      	ldr	r2, [pc, #600]	; (80020c8 <HAL_GPIO_Init+0x2a8>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d052      	beq.n	8001f1a <HAL_GPIO_Init+0xfa>
 8001e74:	4a94      	ldr	r2, [pc, #592]	; (80020c8 <HAL_GPIO_Init+0x2a8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d869      	bhi.n	8001f4e <HAL_GPIO_Init+0x12e>
 8001e7a:	4a94      	ldr	r2, [pc, #592]	; (80020cc <HAL_GPIO_Init+0x2ac>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d04c      	beq.n	8001f1a <HAL_GPIO_Init+0xfa>
 8001e80:	4a92      	ldr	r2, [pc, #584]	; (80020cc <HAL_GPIO_Init+0x2ac>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d863      	bhi.n	8001f4e <HAL_GPIO_Init+0x12e>
 8001e86:	4a92      	ldr	r2, [pc, #584]	; (80020d0 <HAL_GPIO_Init+0x2b0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d046      	beq.n	8001f1a <HAL_GPIO_Init+0xfa>
 8001e8c:	4a90      	ldr	r2, [pc, #576]	; (80020d0 <HAL_GPIO_Init+0x2b0>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d85d      	bhi.n	8001f4e <HAL_GPIO_Init+0x12e>
 8001e92:	2b12      	cmp	r3, #18
 8001e94:	d82a      	bhi.n	8001eec <HAL_GPIO_Init+0xcc>
 8001e96:	2b12      	cmp	r3, #18
 8001e98:	d859      	bhi.n	8001f4e <HAL_GPIO_Init+0x12e>
 8001e9a:	a201      	add	r2, pc, #4	; (adr r2, 8001ea0 <HAL_GPIO_Init+0x80>)
 8001e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea0:	08001f1b 	.word	0x08001f1b
 8001ea4:	08001ef5 	.word	0x08001ef5
 8001ea8:	08001f07 	.word	0x08001f07
 8001eac:	08001f49 	.word	0x08001f49
 8001eb0:	08001f4f 	.word	0x08001f4f
 8001eb4:	08001f4f 	.word	0x08001f4f
 8001eb8:	08001f4f 	.word	0x08001f4f
 8001ebc:	08001f4f 	.word	0x08001f4f
 8001ec0:	08001f4f 	.word	0x08001f4f
 8001ec4:	08001f4f 	.word	0x08001f4f
 8001ec8:	08001f4f 	.word	0x08001f4f
 8001ecc:	08001f4f 	.word	0x08001f4f
 8001ed0:	08001f4f 	.word	0x08001f4f
 8001ed4:	08001f4f 	.word	0x08001f4f
 8001ed8:	08001f4f 	.word	0x08001f4f
 8001edc:	08001f4f 	.word	0x08001f4f
 8001ee0:	08001f4f 	.word	0x08001f4f
 8001ee4:	08001efd 	.word	0x08001efd
 8001ee8:	08001f11 	.word	0x08001f11
 8001eec:	4a79      	ldr	r2, [pc, #484]	; (80020d4 <HAL_GPIO_Init+0x2b4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d013      	beq.n	8001f1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ef2:	e02c      	b.n	8001f4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	623b      	str	r3, [r7, #32]
          break;
 8001efa:	e029      	b.n	8001f50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	3304      	adds	r3, #4
 8001f02:	623b      	str	r3, [r7, #32]
          break;
 8001f04:	e024      	b.n	8001f50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	3308      	adds	r3, #8
 8001f0c:	623b      	str	r3, [r7, #32]
          break;
 8001f0e:	e01f      	b.n	8001f50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	330c      	adds	r3, #12
 8001f16:	623b      	str	r3, [r7, #32]
          break;
 8001f18:	e01a      	b.n	8001f50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d102      	bne.n	8001f28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f22:	2304      	movs	r3, #4
 8001f24:	623b      	str	r3, [r7, #32]
          break;
 8001f26:	e013      	b.n	8001f50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d105      	bne.n	8001f3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f30:	2308      	movs	r3, #8
 8001f32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	611a      	str	r2, [r3, #16]
          break;
 8001f3a:	e009      	b.n	8001f50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	615a      	str	r2, [r3, #20]
          break;
 8001f46:	e003      	b.n	8001f50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
          break;
 8001f4c:	e000      	b.n	8001f50 <HAL_GPIO_Init+0x130>
          break;
 8001f4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2bff      	cmp	r3, #255	; 0xff
 8001f54:	d801      	bhi.n	8001f5a <HAL_GPIO_Init+0x13a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	e001      	b.n	8001f5e <HAL_GPIO_Init+0x13e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	2bff      	cmp	r3, #255	; 0xff
 8001f64:	d802      	bhi.n	8001f6c <HAL_GPIO_Init+0x14c>
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	e002      	b.n	8001f72 <HAL_GPIO_Init+0x152>
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	3b08      	subs	r3, #8
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	210f      	movs	r1, #15
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	401a      	ands	r2, r3
 8001f84:	6a39      	ldr	r1, [r7, #32]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 80b1 	beq.w	8002102 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fa0:	4b4d      	ldr	r3, [pc, #308]	; (80020d8 <HAL_GPIO_Init+0x2b8>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	4a4c      	ldr	r2, [pc, #304]	; (80020d8 <HAL_GPIO_Init+0x2b8>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6193      	str	r3, [r2, #24]
 8001fac:	4b4a      	ldr	r3, [pc, #296]	; (80020d8 <HAL_GPIO_Init+0x2b8>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fb8:	4a48      	ldr	r2, [pc, #288]	; (80020dc <HAL_GPIO_Init+0x2bc>)
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	089b      	lsrs	r3, r3, #2
 8001fbe:	3302      	adds	r3, #2
 8001fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	220f      	movs	r2, #15
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a40      	ldr	r2, [pc, #256]	; (80020e0 <HAL_GPIO_Init+0x2c0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d013      	beq.n	800200c <HAL_GPIO_Init+0x1ec>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a3f      	ldr	r2, [pc, #252]	; (80020e4 <HAL_GPIO_Init+0x2c4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d00d      	beq.n	8002008 <HAL_GPIO_Init+0x1e8>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a3e      	ldr	r2, [pc, #248]	; (80020e8 <HAL_GPIO_Init+0x2c8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d007      	beq.n	8002004 <HAL_GPIO_Init+0x1e4>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a3d      	ldr	r2, [pc, #244]	; (80020ec <HAL_GPIO_Init+0x2cc>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d101      	bne.n	8002000 <HAL_GPIO_Init+0x1e0>
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e006      	b.n	800200e <HAL_GPIO_Init+0x1ee>
 8002000:	2304      	movs	r3, #4
 8002002:	e004      	b.n	800200e <HAL_GPIO_Init+0x1ee>
 8002004:	2302      	movs	r3, #2
 8002006:	e002      	b.n	800200e <HAL_GPIO_Init+0x1ee>
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <HAL_GPIO_Init+0x1ee>
 800200c:	2300      	movs	r3, #0
 800200e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002010:	f002 0203 	and.w	r2, r2, #3
 8002014:	0092      	lsls	r2, r2, #2
 8002016:	4093      	lsls	r3, r2
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4313      	orrs	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800201e:	492f      	ldr	r1, [pc, #188]	; (80020dc <HAL_GPIO_Init+0x2bc>)
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	3302      	adds	r3, #2
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d006      	beq.n	8002046 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002038:	4b2d      	ldr	r3, [pc, #180]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	492c      	ldr	r1, [pc, #176]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	4313      	orrs	r3, r2
 8002042:	600b      	str	r3, [r1, #0]
 8002044:	e006      	b.n	8002054 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002046:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	43db      	mvns	r3, r3
 800204e:	4928      	ldr	r1, [pc, #160]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 8002050:	4013      	ands	r3, r2
 8002052:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d006      	beq.n	800206e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002060:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	4922      	ldr	r1, [pc, #136]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
 800206c:	e006      	b.n	800207c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800206e:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	43db      	mvns	r3, r3
 8002076:	491e      	ldr	r1, [pc, #120]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 8002078:	4013      	ands	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d006      	beq.n	8002096 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	4918      	ldr	r1, [pc, #96]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	608b      	str	r3, [r1, #8]
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002096:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	43db      	mvns	r3, r3
 800209e:	4914      	ldr	r1, [pc, #80]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d021      	beq.n	80020f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	490e      	ldr	r1, [pc, #56]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60cb      	str	r3, [r1, #12]
 80020bc:	e021      	b.n	8002102 <HAL_GPIO_Init+0x2e2>
 80020be:	bf00      	nop
 80020c0:	10320000 	.word	0x10320000
 80020c4:	10310000 	.word	0x10310000
 80020c8:	10220000 	.word	0x10220000
 80020cc:	10210000 	.word	0x10210000
 80020d0:	10120000 	.word	0x10120000
 80020d4:	10110000 	.word	0x10110000
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40010000 	.word	0x40010000
 80020e0:	40010800 	.word	0x40010800
 80020e4:	40010c00 	.word	0x40010c00
 80020e8:	40011000 	.word	0x40011000
 80020ec:	40011400 	.word	0x40011400
 80020f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_GPIO_Init+0x304>)
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	4909      	ldr	r1, [pc, #36]	; (8002124 <HAL_GPIO_Init+0x304>)
 80020fe:	4013      	ands	r3, r2
 8002100:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	3301      	adds	r3, #1
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	fa22 f303 	lsr.w	r3, r2, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	f47f ae8e 	bne.w	8001e34 <HAL_GPIO_Init+0x14>
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	372c      	adds	r7, #44	; 0x2c
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	40010400 	.word	0x40010400

08002128 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	887b      	ldrh	r3, [r7, #2]
 800213a:	4013      	ands	r3, r2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
 8002144:	e001      	b.n	800214a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002146:	2300      	movs	r3, #0
 8002148:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800214a:	7bfb      	ldrb	r3, [r7, #15]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr

08002156 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	460b      	mov	r3, r1
 8002160:	807b      	strh	r3, [r7, #2]
 8002162:	4613      	mov	r3, r2
 8002164:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002166:	787b      	ldrb	r3, [r7, #1]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800216c:	887a      	ldrh	r2, [r7, #2]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002172:	e003      	b.n	800217c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002174:	887b      	ldrh	r3, [r7, #2]
 8002176:	041a      	lsls	r2, r3, #16
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	611a      	str	r2, [r3, #16]
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr

08002186 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002186:	b480      	push	{r7}
 8002188:	b085      	sub	sp, #20
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	460b      	mov	r3, r1
 8002190:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002198:	887a      	ldrh	r2, [r7, #2]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4013      	ands	r3, r2
 800219e:	041a      	lsls	r2, r3, #16
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	43d9      	mvns	r1, r3
 80021a4:	887b      	ldrh	r3, [r7, #2]
 80021a6:	400b      	ands	r3, r1
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	611a      	str	r2, [r3, #16]
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e12b      	b.n	8002422 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d106      	bne.n	80021e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff f958 	bl	8001494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2224      	movs	r2, #36	; 0x24
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0201 	bic.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800220a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800221a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800221c:	f003 f868 	bl	80052f0 <HAL_RCC_GetPCLK1Freq>
 8002220:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4a81      	ldr	r2, [pc, #516]	; (800242c <HAL_I2C_Init+0x274>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d807      	bhi.n	800223c <HAL_I2C_Init+0x84>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4a80      	ldr	r2, [pc, #512]	; (8002430 <HAL_I2C_Init+0x278>)
 8002230:	4293      	cmp	r3, r2
 8002232:	bf94      	ite	ls
 8002234:	2301      	movls	r3, #1
 8002236:	2300      	movhi	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	e006      	b.n	800224a <HAL_I2C_Init+0x92>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4a7d      	ldr	r2, [pc, #500]	; (8002434 <HAL_I2C_Init+0x27c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	bf94      	ite	ls
 8002244:	2301      	movls	r3, #1
 8002246:	2300      	movhi	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e0e7      	b.n	8002422 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4a78      	ldr	r2, [pc, #480]	; (8002438 <HAL_I2C_Init+0x280>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	0c9b      	lsrs	r3, r3, #18
 800225c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	430a      	orrs	r2, r1
 8002270:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4a6a      	ldr	r2, [pc, #424]	; (800242c <HAL_I2C_Init+0x274>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d802      	bhi.n	800228c <HAL_I2C_Init+0xd4>
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	3301      	adds	r3, #1
 800228a:	e009      	b.n	80022a0 <HAL_I2C_Init+0xe8>
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002292:	fb02 f303 	mul.w	r3, r2, r3
 8002296:	4a69      	ldr	r2, [pc, #420]	; (800243c <HAL_I2C_Init+0x284>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	099b      	lsrs	r3, r3, #6
 800229e:	3301      	adds	r3, #1
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	430b      	orrs	r3, r1
 80022a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	495c      	ldr	r1, [pc, #368]	; (800242c <HAL_I2C_Init+0x274>)
 80022bc:	428b      	cmp	r3, r1
 80022be:	d819      	bhi.n	80022f4 <HAL_I2C_Init+0x13c>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1e59      	subs	r1, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ce:	1c59      	adds	r1, r3, #1
 80022d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022d4:	400b      	ands	r3, r1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_I2C_Init+0x138>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1e59      	subs	r1, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022e8:	3301      	adds	r3, #1
 80022ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ee:	e051      	b.n	8002394 <HAL_I2C_Init+0x1dc>
 80022f0:	2304      	movs	r3, #4
 80022f2:	e04f      	b.n	8002394 <HAL_I2C_Init+0x1dc>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d111      	bne.n	8002320 <HAL_I2C_Init+0x168>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1e58      	subs	r0, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	440b      	add	r3, r1
 800230a:	fbb0 f3f3 	udiv	r3, r0, r3
 800230e:	3301      	adds	r3, #1
 8002310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002314:	2b00      	cmp	r3, #0
 8002316:	bf0c      	ite	eq
 8002318:	2301      	moveq	r3, #1
 800231a:	2300      	movne	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	e012      	b.n	8002346 <HAL_I2C_Init+0x18e>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1e58      	subs	r0, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	0099      	lsls	r1, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	fbb0 f3f3 	udiv	r3, r0, r3
 8002336:	3301      	adds	r3, #1
 8002338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf0c      	ite	eq
 8002340:	2301      	moveq	r3, #1
 8002342:	2300      	movne	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_I2C_Init+0x196>
 800234a:	2301      	movs	r3, #1
 800234c:	e022      	b.n	8002394 <HAL_I2C_Init+0x1dc>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10e      	bne.n	8002374 <HAL_I2C_Init+0x1bc>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1e58      	subs	r0, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6859      	ldr	r1, [r3, #4]
 800235e:	460b      	mov	r3, r1
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	440b      	add	r3, r1
 8002364:	fbb0 f3f3 	udiv	r3, r0, r3
 8002368:	3301      	adds	r3, #1
 800236a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002372:	e00f      	b.n	8002394 <HAL_I2C_Init+0x1dc>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1e58      	subs	r0, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	0099      	lsls	r1, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	fbb0 f3f3 	udiv	r3, r0, r3
 800238a:	3301      	adds	r3, #1
 800238c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002390:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	6809      	ldr	r1, [r1, #0]
 8002398:	4313      	orrs	r3, r2
 800239a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69da      	ldr	r2, [r3, #28]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6911      	ldr	r1, [r2, #16]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68d2      	ldr	r2, [r2, #12]
 80023ce:	4311      	orrs	r1, r2
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	430b      	orrs	r3, r1
 80023d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2220      	movs	r2, #32
 800240e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	000186a0 	.word	0x000186a0
 8002430:	001e847f 	.word	0x001e847f
 8002434:	003d08ff 	.word	0x003d08ff
 8002438:	431bde83 	.word	0x431bde83
 800243c:	10624dd3 	.word	0x10624dd3

08002440 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af02      	add	r7, sp, #8
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	4608      	mov	r0, r1
 800244a:	4611      	mov	r1, r2
 800244c:	461a      	mov	r2, r3
 800244e:	4603      	mov	r3, r0
 8002450:	817b      	strh	r3, [r7, #10]
 8002452:	460b      	mov	r3, r1
 8002454:	813b      	strh	r3, [r7, #8]
 8002456:	4613      	mov	r3, r2
 8002458:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800245a:	f7ff fba5 	bl	8001ba8 <HAL_GetTick>
 800245e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b20      	cmp	r3, #32
 800246a:	f040 80d9 	bne.w	8002620 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2319      	movs	r3, #25
 8002474:	2201      	movs	r2, #1
 8002476:	496d      	ldr	r1, [pc, #436]	; (800262c <HAL_I2C_Mem_Write+0x1ec>)
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fcc1 	bl	8002e00 <I2C_WaitOnFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002484:	2302      	movs	r3, #2
 8002486:	e0cc      	b.n	8002622 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_I2C_Mem_Write+0x56>
 8002492:	2302      	movs	r3, #2
 8002494:	e0c5      	b.n	8002622 <HAL_I2C_Mem_Write+0x1e2>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d007      	beq.n	80024bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2221      	movs	r2, #33	; 0x21
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2240      	movs	r2, #64	; 0x40
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a3a      	ldr	r2, [r7, #32]
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4a4d      	ldr	r2, [pc, #308]	; (8002630 <HAL_I2C_Mem_Write+0x1f0>)
 80024fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024fe:	88f8      	ldrh	r0, [r7, #6]
 8002500:	893a      	ldrh	r2, [r7, #8]
 8002502:	8979      	ldrh	r1, [r7, #10]
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	4603      	mov	r3, r0
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 faf8 	bl	8002b04 <I2C_RequestMemoryWrite>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d052      	beq.n	80025c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e081      	b.n	8002622 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 fd42 	bl	8002fac <I2C_WaitOnTXEFlagUntilTimeout>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00d      	beq.n	800254a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	2b04      	cmp	r3, #4
 8002534:	d107      	bne.n	8002546 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002544:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e06b      	b.n	8002622 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	781a      	ldrb	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b04      	cmp	r3, #4
 8002586:	d11b      	bne.n	80025c0 <HAL_I2C_Mem_Write+0x180>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	2b00      	cmp	r3, #0
 800258e:	d017      	beq.n	80025c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	781a      	ldrb	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1aa      	bne.n	800251e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 fd2e 	bl	800302e <I2C_WaitOnBTFFlagUntilTimeout>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00d      	beq.n	80025f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d107      	bne.n	80025f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e016      	b.n	8002622 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	e000      	b.n	8002622 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002620:	2302      	movs	r3, #2
  }
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	00100002 	.word	0x00100002
 8002630:	ffff0000 	.word	0xffff0000

08002634 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08c      	sub	sp, #48	; 0x30
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	4608      	mov	r0, r1
 800263e:	4611      	mov	r1, r2
 8002640:	461a      	mov	r2, r3
 8002642:	4603      	mov	r3, r0
 8002644:	817b      	strh	r3, [r7, #10]
 8002646:	460b      	mov	r3, r1
 8002648:	813b      	strh	r3, [r7, #8]
 800264a:	4613      	mov	r3, r2
 800264c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002652:	f7ff faa9 	bl	8001ba8 <HAL_GetTick>
 8002656:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b20      	cmp	r3, #32
 8002662:	f040 8244 	bne.w	8002aee <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	2319      	movs	r3, #25
 800266c:	2201      	movs	r2, #1
 800266e:	4982      	ldr	r1, [pc, #520]	; (8002878 <HAL_I2C_Mem_Read+0x244>)
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 fbc5 	bl	8002e00 <I2C_WaitOnFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800267c:	2302      	movs	r3, #2
 800267e:	e237      	b.n	8002af0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_I2C_Mem_Read+0x5a>
 800268a:	2302      	movs	r3, #2
 800268c:	e230      	b.n	8002af0 <HAL_I2C_Mem_Read+0x4bc>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d007      	beq.n	80026b4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2222      	movs	r2, #34	; 0x22
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2240      	movs	r2, #64	; 0x40
 80026d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80026e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4a62      	ldr	r2, [pc, #392]	; (800287c <HAL_I2C_Mem_Read+0x248>)
 80026f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026f6:	88f8      	ldrh	r0, [r7, #6]
 80026f8:	893a      	ldrh	r2, [r7, #8]
 80026fa:	8979      	ldrh	r1, [r7, #10]
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	9301      	str	r3, [sp, #4]
 8002700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	4603      	mov	r3, r0
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 fa92 	bl	8002c30 <I2C_RequestMemoryRead>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e1ec      	b.n	8002af0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271a:	2b00      	cmp	r3, #0
 800271c:	d113      	bne.n	8002746 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	61fb      	str	r3, [r7, #28]
 8002732:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	e1c0      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274a:	2b01      	cmp	r3, #1
 800274c:	d11e      	bne.n	800278c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800275c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800275e:	b672      	cpsid	i
}
 8002760:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	61bb      	str	r3, [r7, #24]
 8002776:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002786:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002788:	b662      	cpsie	i
}
 800278a:	e035      	b.n	80027f8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002790:	2b02      	cmp	r3, #2
 8002792:	d11e      	bne.n	80027d2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027a4:	b672      	cpsid	i
}
 80027a6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027ce:	b662      	cpsie	i
}
 80027d0:	e012      	b.n	80027f8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027e0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e2:	2300      	movs	r3, #0
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80027f8:	e166      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fe:	2b03      	cmp	r3, #3
 8002800:	f200 811f 	bhi.w	8002a42 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002808:	2b01      	cmp	r3, #1
 800280a:	d123      	bne.n	8002854 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800280c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 fc4d 	bl	80030b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e167      	b.n	8002af0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002852:	e139      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002858:	2b02      	cmp	r3, #2
 800285a:	d152      	bne.n	8002902 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002862:	2200      	movs	r2, #0
 8002864:	4906      	ldr	r1, [pc, #24]	; (8002880 <HAL_I2C_Mem_Read+0x24c>)
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 faca 	bl	8002e00 <I2C_WaitOnFlagUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d008      	beq.n	8002884 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e13c      	b.n	8002af0 <HAL_I2C_Mem_Read+0x4bc>
 8002876:	bf00      	nop
 8002878:	00100002 	.word	0x00100002
 800287c:	ffff0000 	.word	0xffff0000
 8002880:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002884:	b672      	cpsid	i
}
 8002886:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002896:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691a      	ldr	r2, [r3, #16]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028ca:	b662      	cpsie	i
}
 80028cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002900:	e0e2      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002908:	2200      	movs	r2, #0
 800290a:	497b      	ldr	r1, [pc, #492]	; (8002af8 <HAL_I2C_Mem_Read+0x4c4>)
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fa77 	bl	8002e00 <I2C_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0e9      	b.n	8002af0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800292a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800292c:	b672      	cpsid	i
}
 800292e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002962:	4b66      	ldr	r3, [pc, #408]	; (8002afc <HAL_I2C_Mem_Read+0x4c8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	08db      	lsrs	r3, r3, #3
 8002968:	4a65      	ldr	r2, [pc, #404]	; (8002b00 <HAL_I2C_Mem_Read+0x4cc>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	0a1a      	lsrs	r2, r3, #8
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00da      	lsls	r2, r3, #3
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	3b01      	subs	r3, #1
 8002980:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d118      	bne.n	80029ba <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f043 0220 	orr.w	r2, r3, #32
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80029aa:	b662      	cpsie	i
}
 80029ac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e09a      	b.n	8002af0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d1d9      	bne.n	800297c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691a      	ldr	r2, [r3, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a0a:	b662      	cpsie	i
}
 8002a0c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a40:	e042      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 fb32 	bl	80030b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e04c      	b.n	8002af0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d118      	bne.n	8002ac8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f47f ae94 	bne.w	80027fa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e000      	b.n	8002af0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
  }
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3728      	adds	r7, #40	; 0x28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	00010004 	.word	0x00010004
 8002afc:	20000008 	.word	0x20000008
 8002b00:	14f8b589 	.word	0x14f8b589

08002b04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	4608      	mov	r0, r1
 8002b0e:	4611      	mov	r1, r2
 8002b10:	461a      	mov	r2, r3
 8002b12:	4603      	mov	r3, r0
 8002b14:	817b      	strh	r3, [r7, #10]
 8002b16:	460b      	mov	r3, r1
 8002b18:	813b      	strh	r3, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f960 	bl	8002e00 <I2C_WaitOnFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b54:	d103      	bne.n	8002b5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e05f      	b.n	8002c22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b62:	897b      	ldrh	r3, [r7, #10]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	6a3a      	ldr	r2, [r7, #32]
 8002b76:	492d      	ldr	r1, [pc, #180]	; (8002c2c <I2C_RequestMemoryWrite+0x128>)
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f998 	bl	8002eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e04c      	b.n	8002c22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba0:	6a39      	ldr	r1, [r7, #32]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fa02 	bl	8002fac <I2C_WaitOnTXEFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00d      	beq.n	8002bca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d107      	bne.n	8002bc6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e02b      	b.n	8002c22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d105      	bne.n	8002bdc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bd0:	893b      	ldrh	r3, [r7, #8]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	611a      	str	r2, [r3, #16]
 8002bda:	e021      	b.n	8002c20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bdc:	893b      	ldrh	r3, [r7, #8]
 8002bde:	0a1b      	lsrs	r3, r3, #8
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bec:	6a39      	ldr	r1, [r7, #32]
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f9dc 	bl	8002fac <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00d      	beq.n	8002c16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d107      	bne.n	8002c12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e005      	b.n	8002c22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c16:	893b      	ldrh	r3, [r7, #8]
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	00010002 	.word	0x00010002

08002c30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	4608      	mov	r0, r1
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4603      	mov	r3, r0
 8002c40:	817b      	strh	r3, [r7, #10]
 8002c42:	460b      	mov	r3, r1
 8002c44:	813b      	strh	r3, [r7, #8]
 8002c46:	4613      	mov	r3, r2
 8002c48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f8c2 	bl	8002e00 <I2C_WaitOnFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00d      	beq.n	8002c9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c90:	d103      	bne.n	8002c9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e0aa      	b.n	8002df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c9e:	897b      	ldrh	r3, [r7, #10]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	6a3a      	ldr	r2, [r7, #32]
 8002cb2:	4952      	ldr	r1, [pc, #328]	; (8002dfc <I2C_RequestMemoryRead+0x1cc>)
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f8fa 	bl	8002eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e097      	b.n	8002df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cdc:	6a39      	ldr	r1, [r7, #32]
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f964 	bl	8002fac <I2C_WaitOnTXEFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00d      	beq.n	8002d06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d107      	bne.n	8002d02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e076      	b.n	8002df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d105      	bne.n	8002d18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d0c:	893b      	ldrh	r3, [r7, #8]
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	611a      	str	r2, [r3, #16]
 8002d16:	e021      	b.n	8002d5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d18:	893b      	ldrh	r3, [r7, #8]
 8002d1a:	0a1b      	lsrs	r3, r3, #8
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d28:	6a39      	ldr	r1, [r7, #32]
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f93e 	bl	8002fac <I2C_WaitOnTXEFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00d      	beq.n	8002d52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d107      	bne.n	8002d4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e050      	b.n	8002df4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d52:	893b      	ldrh	r3, [r7, #8]
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5e:	6a39      	ldr	r1, [r7, #32]
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 f923 	bl	8002fac <I2C_WaitOnTXEFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00d      	beq.n	8002d88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d107      	bne.n	8002d84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e035      	b.n	8002df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f82b 	bl	8002e00 <I2C_WaitOnFlagUntilTimeout>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00d      	beq.n	8002dcc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dbe:	d103      	bne.n	8002dc8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e013      	b.n	8002df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002dcc:	897b      	ldrh	r3, [r7, #10]
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	6a3a      	ldr	r2, [r7, #32]
 8002de0:	4906      	ldr	r1, [pc, #24]	; (8002dfc <I2C_RequestMemoryRead+0x1cc>)
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f863 	bl	8002eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	00010002 	.word	0x00010002

08002e00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e10:	e025      	b.n	8002e5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e18:	d021      	beq.n	8002e5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1a:	f7fe fec5 	bl	8001ba8 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d302      	bcc.n	8002e30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d116      	bne.n	8002e5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f043 0220 	orr.w	r2, r3, #32
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e023      	b.n	8002ea6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	0c1b      	lsrs	r3, r3, #16
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d10d      	bne.n	8002e84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4013      	ands	r3, r2
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	bf0c      	ite	eq
 8002e7a:	2301      	moveq	r3, #1
 8002e7c:	2300      	movne	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	e00c      	b.n	8002e9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	43da      	mvns	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	bf0c      	ite	eq
 8002e96:	2301      	moveq	r3, #1
 8002e98:	2300      	movne	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d0b6      	beq.n	8002e12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ebc:	e051      	b.n	8002f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ecc:	d123      	bne.n	8002f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002edc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ee6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f043 0204 	orr.w	r2, r3, #4
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e046      	b.n	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1c:	d021      	beq.n	8002f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1e:	f7fe fe43 	bl	8001ba8 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d302      	bcc.n	8002f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d116      	bne.n	8002f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f043 0220 	orr.w	r2, r3, #32
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e020      	b.n	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	0c1b      	lsrs	r3, r3, #16
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d10c      	bne.n	8002f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	43da      	mvns	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4013      	ands	r3, r2
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bf14      	ite	ne
 8002f7e:	2301      	movne	r3, #1
 8002f80:	2300      	moveq	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	e00b      	b.n	8002f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	43da      	mvns	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4013      	ands	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d18d      	bne.n	8002ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fb8:	e02d      	b.n	8003016 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f8ce 	bl	800315c <I2C_IsAcknowledgeFailed>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e02d      	b.n	8003026 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d021      	beq.n	8003016 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd2:	f7fe fde9 	bl	8001ba8 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d302      	bcc.n	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d116      	bne.n	8003016 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f043 0220 	orr.w	r2, r3, #32
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e007      	b.n	8003026 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003020:	2b80      	cmp	r3, #128	; 0x80
 8003022:	d1ca      	bne.n	8002fba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800303a:	e02d      	b.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 f88d 	bl	800315c <I2C_IsAcknowledgeFailed>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e02d      	b.n	80030a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003052:	d021      	beq.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003054:	f7fe fda8 	bl	8001ba8 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	429a      	cmp	r2, r3
 8003062:	d302      	bcc.n	800306a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d116      	bne.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f043 0220 	orr.w	r2, r3, #32
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e007      	b.n	80030a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d1ca      	bne.n	800303c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030bc:	e042      	b.n	8003144 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d119      	bne.n	8003100 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0210 	mvn.w	r2, #16
 80030d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e029      	b.n	8003154 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003100:	f7fe fd52 	bl	8001ba8 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	429a      	cmp	r2, r3
 800310e:	d302      	bcc.n	8003116 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d116      	bne.n	8003144 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	f043 0220 	orr.w	r2, r3, #32
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e007      	b.n	8003154 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314e:	2b40      	cmp	r3, #64	; 0x40
 8003150:	d1b5      	bne.n	80030be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003172:	d11b      	bne.n	80031ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800317c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	f043 0204 	orr.w	r2, r3, #4
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr

080031b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ba:	b08b      	sub	sp, #44	; 0x2c
 80031bc:	af06      	add	r7, sp, #24
 80031be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e0fd      	b.n	80033c6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f006 fd20 	bl	8009c24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2203      	movs	r2, #3
 80031e8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f002 fd93 	bl	8005d1c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	603b      	str	r3, [r7, #0]
 80031fc:	687e      	ldr	r6, [r7, #4]
 80031fe:	466d      	mov	r5, sp
 8003200:	f106 0410 	add.w	r4, r6, #16
 8003204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	602b      	str	r3, [r5, #0]
 800320c:	1d33      	adds	r3, r6, #4
 800320e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003210:	6838      	ldr	r0, [r7, #0]
 8003212:	f002 fd5d 	bl	8005cd0 <USB_CoreInit>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0ce      	b.n	80033c6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2100      	movs	r1, #0
 800322e:	4618      	mov	r0, r3
 8003230:	f002 fd8e 	bl	8005d50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003234:	2300      	movs	r3, #0
 8003236:	73fb      	strb	r3, [r7, #15]
 8003238:	e04c      	b.n	80032d4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	3301      	adds	r3, #1
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	440b      	add	r3, r1
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	b298      	uxth	r0, r3
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	440b      	add	r3, r1
 8003276:	3336      	adds	r3, #54	; 0x36
 8003278:	4602      	mov	r2, r0
 800327a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	440b      	add	r3, r1
 800328c:	3303      	adds	r3, #3
 800328e:	2200      	movs	r2, #0
 8003290:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003292:	7bfa      	ldrb	r2, [r7, #15]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	440b      	add	r3, r1
 80032a0:	3338      	adds	r3, #56	; 0x38
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	440b      	add	r3, r1
 80032b4:	333c      	adds	r3, #60	; 0x3c
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032ba:	7bfa      	ldrb	r2, [r7, #15]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	440b      	add	r3, r1
 80032c8:	3340      	adds	r3, #64	; 0x40
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	3301      	adds	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
 80032d4:	7bfa      	ldrb	r2, [r7, #15]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d3ad      	bcc.n	800323a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032de:	2300      	movs	r3, #0
 80032e0:	73fb      	strb	r3, [r7, #15]
 80032e2:	e044      	b.n	800336e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032e4:	7bfa      	ldrb	r2, [r7, #15]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	440b      	add	r3, r1
 80032f2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032fa:	7bfa      	ldrb	r2, [r7, #15]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	440b      	add	r3, r1
 8003308:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003310:	7bfa      	ldrb	r2, [r7, #15]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	440b      	add	r3, r1
 800331e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003322:	2200      	movs	r2, #0
 8003324:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003326:	7bfa      	ldrb	r2, [r7, #15]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	440b      	add	r3, r1
 8003334:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800333c:	7bfa      	ldrb	r2, [r7, #15]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	440b      	add	r3, r1
 800334a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003352:	7bfa      	ldrb	r2, [r7, #15]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	440b      	add	r3, r1
 8003360:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	3301      	adds	r3, #1
 800336c:	73fb      	strb	r3, [r7, #15]
 800336e:	7bfa      	ldrb	r2, [r7, #15]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	429a      	cmp	r2, r3
 8003376:	d3b5      	bcc.n	80032e4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	603b      	str	r3, [r7, #0]
 800337e:	687e      	ldr	r6, [r7, #4]
 8003380:	466d      	mov	r5, sp
 8003382:	f106 0410 	add.w	r4, r6, #16
 8003386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	602b      	str	r3, [r5, #0]
 800338e:	1d33      	adds	r3, r6, #4
 8003390:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003392:	6838      	ldr	r0, [r7, #0]
 8003394:	f002 fce8 	bl	8005d68 <USB_DevInit>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2202      	movs	r2, #2
 80033a2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e00d      	b.n	80033c6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f004 fe59 	bl	8008076 <USB_DevDisconnect>

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_PCD_Start+0x16>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e016      	b.n	8003412 <HAL_PCD_Start+0x44>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f002 fc7d 	bl	8005cf0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80033f6:	2101      	movs	r1, #1
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f006 fe86 	bl	800a10a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f004 fe2d 	bl	8008062 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b088      	sub	sp, #32
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f004 fe2f 	bl	800808a <USB_ReadInterrupts>
 800342c:	4603      	mov	r3, r0
 800342e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003436:	d102      	bne.n	800343e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fb61 	bl	8003b00 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f004 fe21 	bl	800808a <USB_ReadInterrupts>
 8003448:	4603      	mov	r3, r0
 800344a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003452:	d112      	bne.n	800347a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800345c:	b29a      	uxth	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003466:	b292      	uxth	r2, r2
 8003468:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f006 fc54 	bl	8009d1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003472:	2100      	movs	r1, #0
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f925 	bl	80036c4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f004 fe03 	bl	800808a <USB_ReadInterrupts>
 8003484:	4603      	mov	r3, r0
 8003486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800348a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800348e:	d10b      	bne.n	80034a8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003498:	b29a      	uxth	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034a2:	b292      	uxth	r2, r2
 80034a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f004 fdec 	bl	800808a <USB_ReadInterrupts>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034bc:	d10b      	bne.n	80034d6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034d0:	b292      	uxth	r2, r2
 80034d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f004 fdd5 	bl	800808a <USB_ReadInterrupts>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ea:	d126      	bne.n	800353a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0204 	bic.w	r2, r2, #4
 80034fe:	b292      	uxth	r2, r2
 8003500:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800350c:	b29a      	uxth	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0208 	bic.w	r2, r2, #8
 8003516:	b292      	uxth	r2, r2
 8003518:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f006 fc35 	bl	8009d8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800352a:	b29a      	uxth	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003534:	b292      	uxth	r2, r2
 8003536:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f004 fda3 	bl	800808a <USB_ReadInterrupts>
 8003544:	4603      	mov	r3, r0
 8003546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800354a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800354e:	f040 8084 	bne.w	800365a <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003552:	2300      	movs	r3, #0
 8003554:	77fb      	strb	r3, [r7, #31]
 8003556:	e011      	b.n	800357c <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	7ffb      	ldrb	r3, [r7, #31]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	441a      	add	r2, r3
 8003564:	7ffb      	ldrb	r3, [r7, #31]
 8003566:	8812      	ldrh	r2, [r2, #0]
 8003568:	b292      	uxth	r2, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	f107 0120 	add.w	r1, r7, #32
 8003570:	440b      	add	r3, r1
 8003572:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003576:	7ffb      	ldrb	r3, [r7, #31]
 8003578:	3301      	adds	r3, #1
 800357a:	77fb      	strb	r3, [r7, #31]
 800357c:	7ffb      	ldrb	r3, [r7, #31]
 800357e:	2b07      	cmp	r3, #7
 8003580:	d9ea      	bls.n	8003558 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800358a:	b29a      	uxth	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	b292      	uxth	r2, r2
 8003596:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0201 	bic.w	r2, r2, #1
 80035ac:	b292      	uxth	r2, r2
 80035ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80035b2:	bf00      	nop
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035bc:	b29b      	uxth	r3, r3
 80035be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f6      	beq.n	80035b4 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d8:	b292      	uxth	r2, r2
 80035da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80035de:	2300      	movs	r3, #0
 80035e0:	77fb      	strb	r3, [r7, #31]
 80035e2:	e010      	b.n	8003606 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80035e4:	7ffb      	ldrb	r3, [r7, #31]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	4611      	mov	r1, r2
 80035ec:	7ffa      	ldrb	r2, [r7, #31]
 80035ee:	0092      	lsls	r2, r2, #2
 80035f0:	440a      	add	r2, r1
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	f107 0120 	add.w	r1, r7, #32
 80035f8:	440b      	add	r3, r1
 80035fa:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80035fe:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003600:	7ffb      	ldrb	r3, [r7, #31]
 8003602:	3301      	adds	r3, #1
 8003604:	77fb      	strb	r3, [r7, #31]
 8003606:	7ffb      	ldrb	r3, [r7, #31]
 8003608:	2b07      	cmp	r3, #7
 800360a:	d9eb      	bls.n	80035e4 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003614:	b29a      	uxth	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0208 	orr.w	r2, r2, #8
 800361e:	b292      	uxth	r2, r2
 8003620:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800362c:	b29a      	uxth	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003636:	b292      	uxth	r2, r2
 8003638:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003644:	b29a      	uxth	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0204 	orr.w	r2, r2, #4
 800364e:	b292      	uxth	r2, r2
 8003650:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f006 fb7f 	bl	8009d58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f004 fd13 	bl	800808a <USB_ReadInterrupts>
 8003664:	4603      	mov	r3, r0
 8003666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800366a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800366e:	d10e      	bne.n	800368e <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003678:	b29a      	uxth	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003682:	b292      	uxth	r2, r2
 8003684:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f006 fb38 	bl	8009cfe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f004 fcf9 	bl	800808a <USB_ReadInterrupts>
 8003698:	4603      	mov	r3, r0
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a2:	d10b      	bne.n	80036bc <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036b6:	b292      	uxth	r2, r2
 80036b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80036bc:	bf00      	nop
 80036be:	3720      	adds	r7, #32
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_PCD_SetAddress+0x1a>
 80036da:	2302      	movs	r3, #2
 80036dc:	e013      	b.n	8003706 <HAL_PCD_SetAddress+0x42>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	4611      	mov	r1, r2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f004 fca0 	bl	800803c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	4608      	mov	r0, r1
 8003718:	4611      	mov	r1, r2
 800371a:	461a      	mov	r2, r3
 800371c:	4603      	mov	r3, r0
 800371e:	70fb      	strb	r3, [r7, #3]
 8003720:	460b      	mov	r3, r1
 8003722:	803b      	strh	r3, [r7, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800372c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003730:	2b00      	cmp	r3, #0
 8003732:	da0e      	bge.n	8003752 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	4413      	add	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	705a      	strb	r2, [r3, #1]
 8003750:	e00e      	b.n	8003770 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003752:	78fb      	ldrb	r3, [r7, #3]
 8003754:	f003 0207 	and.w	r2, r3, #7
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	4413      	add	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	b2da      	uxtb	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800377c:	883a      	ldrh	r2, [r7, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	78ba      	ldrb	r2, [r7, #2]
 8003786:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	785b      	ldrb	r3, [r3, #1]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d004      	beq.n	800379a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800379a:	78bb      	ldrb	r3, [r7, #2]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d102      	bne.n	80037a6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_PCD_EP_Open+0xa6>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e00e      	b.n	80037d2 <HAL_PCD_EP_Open+0xc4>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68f9      	ldr	r1, [r7, #12]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f002 faf0 	bl	8005da8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80037d0:	7afb      	ldrb	r3, [r7, #11]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b084      	sub	sp, #16
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	460b      	mov	r3, r1
 80037e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	da0e      	bge.n	800380c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ee:	78fb      	ldrb	r3, [r7, #3]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2201      	movs	r2, #1
 8003808:	705a      	strb	r2, [r3, #1]
 800380a:	e00e      	b.n	800382a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	f003 0207 	and.w	r2, r3, #7
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	4413      	add	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	b2da      	uxtb	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_PCD_EP_Close+0x6a>
 8003840:	2302      	movs	r3, #2
 8003842:	e00e      	b.n	8003862 <HAL_PCD_EP_Close+0x88>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68f9      	ldr	r1, [r7, #12]
 8003852:	4618      	mov	r0, r3
 8003854:	f002 fe12 	bl	800647c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b086      	sub	sp, #24
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	460b      	mov	r3, r1
 8003878:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800387a:	7afb      	ldrb	r3, [r7, #11]
 800387c:	f003 0207 	and.w	r2, r3, #7
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4413      	add	r3, r2
 8003890:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2200      	movs	r2, #0
 80038a2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2200      	movs	r2, #0
 80038a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038aa:	7afb      	ldrb	r3, [r7, #11]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038b6:	7afb      	ldrb	r3, [r7, #11]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d106      	bne.n	80038ce <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6979      	ldr	r1, [r7, #20]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f002 ffc4 	bl	8006854 <USB_EPStartXfer>
 80038cc:	e005      	b.n	80038da <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6979      	ldr	r1, [r7, #20]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f002 ffbd 	bl	8006854 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	f003 0207 	and.w	r2, r3, #7
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	440b      	add	r3, r1
 8003902:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003906:	681b      	ldr	r3, [r3, #0]
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	607a      	str	r2, [r7, #4]
 800391c:	603b      	str	r3, [r7, #0]
 800391e:	460b      	mov	r3, r1
 8003920:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003922:	7afb      	ldrb	r3, [r7, #11]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4413      	add	r3, r2
 8003936:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2200      	movs	r2, #0
 8003956:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	2201      	movs	r2, #1
 800395c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800395e:	7afb      	ldrb	r3, [r7, #11]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	b2da      	uxtb	r2, r3
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800396a:	7afb      	ldrb	r3, [r7, #11]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	2b00      	cmp	r3, #0
 8003972:	d106      	bne.n	8003982 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6979      	ldr	r1, [r7, #20]
 800397a:	4618      	mov	r0, r3
 800397c:	f002 ff6a 	bl	8006854 <USB_EPStartXfer>
 8003980:	e005      	b.n	800398e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6979      	ldr	r1, [r7, #20]
 8003988:	4618      	mov	r0, r3
 800398a:	f002 ff63 	bl	8006854 <USB_EPStartXfer>
  }

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	f003 0207 	and.w	r2, r3, #7
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d901      	bls.n	80039b6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e04c      	b.n	8003a50 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	da0e      	bge.n	80039dc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	4413      	add	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2201      	movs	r2, #1
 80039d8:	705a      	strb	r2, [r3, #1]
 80039da:	e00c      	b.n	80039f6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	4413      	add	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_PCD_EP_SetStall+0x7e>
 8003a12:	2302      	movs	r3, #2
 8003a14:	e01c      	b.n	8003a50 <HAL_PCD_EP_SetStall+0xb8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68f9      	ldr	r1, [r7, #12]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f004 fa0c 	bl	8007e42 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d108      	bne.n	8003a46 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4610      	mov	r0, r2
 8003a42:	f004 fb31 	bl	80080a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	f003 020f 	and.w	r2, r3, #15
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d901      	bls.n	8003a76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e040      	b.n	8003af8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	da0e      	bge.n	8003a9c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	4413      	add	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	705a      	strb	r2, [r3, #1]
 8003a9a:	e00e      	b.n	8003aba <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	f003 0207 	and.w	r2, r3, #7
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_PCD_EP_ClrStall+0x82>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e00e      	b.n	8003af8 <HAL_PCD_EP_ClrStall+0xa0>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68f9      	ldr	r1, [r7, #12]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f004 f9fa 	bl	8007ee2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08e      	sub	sp, #56	; 0x38
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b08:	e2ec      	b.n	80040e4 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b12:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003b14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f003 030f 	and.w	r3, r3, #15
 8003b1c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003b20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f040 8161 	bne.w	8003dec <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003b2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d152      	bne.n	8003bda <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b44:	81fb      	strh	r3, [r7, #14]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	89fb      	ldrh	r3, [r7, #14]
 8003b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3328      	adds	r3, #40	; 0x28
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	461a      	mov	r2, r3
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4413      	add	r3, r2
 8003b72:	3302      	adds	r3, #2
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6812      	ldr	r2, [r2, #0]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	441a      	add	r2, r3
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003b98:	2100      	movs	r1, #0
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f006 f895 	bl	8009cca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 829b 	beq.w	80040e4 <PCD_EP_ISR_Handler+0x5e4>
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f040 8296 	bne.w	80040e4 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	b292      	uxth	r2, r2
 8003bcc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003bd8:	e284      	b.n	80040e4 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003bea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d034      	beq.n	8003c5e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4413      	add	r3, r2
 8003c08:	3306      	adds	r3, #6
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	f004 fa88 	bl	8008148 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c44:	4013      	ands	r3, r2
 8003c46:	823b      	strh	r3, [r7, #16]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	8a3a      	ldrh	r2, [r7, #16]
 8003c4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c52:	b292      	uxth	r2, r2
 8003c54:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f006 f80a 	bl	8009c70 <HAL_PCD_SetupStageCallback>
 8003c5c:	e242      	b.n	80040e4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c5e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f280 823e 	bge.w	80040e4 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c74:	4013      	ands	r3, r2
 8003c76:	83bb      	strh	r3, [r7, #28]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	8bba      	ldrh	r2, [r7, #28]
 8003c7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c82:	b292      	uxth	r2, r2
 8003c84:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4413      	add	r3, r2
 8003c9a:	3306      	adds	r3, #6
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d019      	beq.n	8003cee <PCD_EP_ISR_Handler+0x1ee>
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d015      	beq.n	8003cee <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	6959      	ldr	r1, [r3, #20]
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	f004 fa38 	bl	8008148 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	695a      	ldr	r2, [r3, #20]
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	441a      	add	r2, r3
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f005 ffd3 	bl	8009c94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f040 81f2 	bne.w	80040e4 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	461a      	mov	r2, r3
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	4413      	add	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d112      	bne.n	8003d4e <PCD_EP_ISR_Handler+0x24e>
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	801a      	strh	r2, [r3, #0]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	801a      	strh	r2, [r3, #0]
 8003d4c:	e02f      	b.n	8003dae <PCD_EP_ISR_Handler+0x2ae>
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b3e      	cmp	r3, #62	; 0x3e
 8003d54:	d813      	bhi.n	8003d7e <PCD_EP_ISR_Handler+0x27e>
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <PCD_EP_ISR_Handler+0x270>
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	029b      	lsls	r3, r3, #10
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	801a      	strh	r2, [r3, #0]
 8003d7c:	e017      	b.n	8003dae <PCD_EP_ISR_Handler+0x2ae>
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	633b      	str	r3, [r7, #48]	; 0x30
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 031f 	and.w	r3, r3, #31
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d102      	bne.n	8003d98 <PCD_EP_ISR_Handler+0x298>
 8003d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d94:	3b01      	subs	r3, #1
 8003d96:	633b      	str	r3, [r7, #48]	; 0x30
 8003d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	029b      	lsls	r3, r3, #10
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dbe:	827b      	strh	r3, [r7, #18]
 8003dc0:	8a7b      	ldrh	r3, [r7, #18]
 8003dc2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003dc6:	827b      	strh	r3, [r7, #18]
 8003dc8:	8a7b      	ldrh	r3, [r7, #18]
 8003dca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003dce:	827b      	strh	r3, [r7, #18]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	8a7b      	ldrh	r3, [r7, #18]
 8003dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	8013      	strh	r3, [r2, #0]
 8003dea:	e17b      	b.n	80040e4 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003dfe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f280 80ea 	bge.w	8003fdc <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e1e:	4013      	ands	r3, r2
 8003e20:	853b      	strh	r3, [r7, #40]	; 0x28
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003e32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e36:	b292      	uxth	r2, r2
 8003e38:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003e3a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	7b1b      	ldrb	r3, [r3, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d122      	bne.n	8003e9e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3306      	adds	r3, #6
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e80:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003e82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 8087 	beq.w	8003f98 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	6959      	ldr	r1, [r3, #20]
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	88da      	ldrh	r2, [r3, #6]
 8003e96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e98:	f004 f956 	bl	8008148 <USB_ReadPMA>
 8003e9c:	e07c      	b.n	8003f98 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	78db      	ldrb	r3, [r3, #3]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d108      	bne.n	8003eb8 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003ea6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f927 	bl	8004100 <HAL_PCD_EP_DB_Receive>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003eb6:	e06f      	b.n	8003f98 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed2:	847b      	strh	r3, [r7, #34]	; 0x22
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	441a      	add	r2, r3
 8003ee2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d021      	beq.n	8003f56 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4413      	add	r3, r2
 8003f26:	3302      	adds	r3, #2
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6812      	ldr	r2, [r2, #0]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f3a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003f3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d02a      	beq.n	8003f98 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	6959      	ldr	r1, [r3, #20]
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	891a      	ldrh	r2, [r3, #8]
 8003f4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f50:	f004 f8fa 	bl	8008148 <USB_ReadPMA>
 8003f54:	e020      	b.n	8003f98 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4413      	add	r3, r2
 8003f6a:	3306      	adds	r3, #6
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6812      	ldr	r2, [r2, #0]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f7e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003f80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	6959      	ldr	r1, [r3, #20]
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	895a      	ldrh	r2, [r3, #10]
 8003f92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f94:	f004 f8d8 	bl	8008148 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f9e:	441a      	add	r2, r3
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	695a      	ldr	r2, [r3, #20]
 8003fa8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003faa:	441a      	add	r2, r3
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d004      	beq.n	8003fc2 <PCD_EP_ISR_Handler+0x4c2>
 8003fb8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d206      	bcs.n	8003fd0 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f005 fe63 	bl	8009c94 <HAL_PCD_DataOutStageCallback>
 8003fce:	e005      	b.n	8003fdc <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f002 fc3c 	bl	8006854 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003fdc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d07e      	beq.n	80040e4 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003fe6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	b29b      	uxth	r3, r3
 800400c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004014:	843b      	strh	r3, [r7, #32]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	441a      	add	r2, r3
 8004024:	8c3b      	ldrh	r3, [r7, #32]
 8004026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800402a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800402e:	b29b      	uxth	r3, r3
 8004030:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	78db      	ldrb	r3, [r3, #3]
 8004036:	2b03      	cmp	r3, #3
 8004038:	d00c      	beq.n	8004054 <PCD_EP_ISR_Handler+0x554>
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	78db      	ldrb	r3, [r3, #3]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d008      	beq.n	8004054 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004046:	2b02      	cmp	r3, #2
 8004048:	d146      	bne.n	80040d8 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800404a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800404c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004050:	2b00      	cmp	r3, #0
 8004052:	d141      	bne.n	80040d8 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800405c:	b29b      	uxth	r3, r3
 800405e:	461a      	mov	r2, r3
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4413      	add	r3, r2
 8004068:	3302      	adds	r3, #2
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6812      	ldr	r2, [r2, #0]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800407c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	8bfb      	ldrh	r3, [r7, #30]
 8004084:	429a      	cmp	r2, r3
 8004086:	d906      	bls.n	8004096 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	699a      	ldr	r2, [r3, #24]
 800408c:	8bfb      	ldrh	r3, [r7, #30]
 800408e:	1ad2      	subs	r2, r2, r3
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	619a      	str	r2, [r3, #24]
 8004094:	e002      	b.n	800409c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	2200      	movs	r2, #0
 800409a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d106      	bne.n	80040b2 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	4619      	mov	r1, r3
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f005 fe0d 	bl	8009cca <HAL_PCD_DataInStageCallback>
 80040b0:	e018      	b.n	80040e4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	695a      	ldr	r2, [r3, #20]
 80040b6:	8bfb      	ldrh	r3, [r7, #30]
 80040b8:	441a      	add	r2, r3
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	69da      	ldr	r2, [r3, #28]
 80040c2:	8bfb      	ldrh	r3, [r7, #30]
 80040c4:	441a      	add	r2, r3
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040d0:	4618      	mov	r0, r3
 80040d2:	f002 fbbf 	bl	8006854 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80040d6:	e005      	b.n	80040e4 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80040d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80040da:	461a      	mov	r2, r3
 80040dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f91b 	bl	800431a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	b21b      	sxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f6ff ad0a 	blt.w	8003b0a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3738      	adds	r7, #56	; 0x38
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	4613      	mov	r3, r2
 800410c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d07e      	beq.n	8004216 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004120:	b29b      	uxth	r3, r3
 8004122:	461a      	mov	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4413      	add	r3, r2
 800412c:	3302      	adds	r3, #2
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004140:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	8b7b      	ldrh	r3, [r7, #26]
 8004148:	429a      	cmp	r2, r3
 800414a:	d306      	bcc.n	800415a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	699a      	ldr	r2, [r3, #24]
 8004150:	8b7b      	ldrh	r3, [r7, #26]
 8004152:	1ad2      	subs	r2, r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	619a      	str	r2, [r3, #24]
 8004158:	e002      	b.n	8004160 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2200      	movs	r2, #0
 800415e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d123      	bne.n	80041b0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	b29b      	uxth	r3, r3
 800417a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800417e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004182:	833b      	strh	r3, [r7, #24]
 8004184:	8b3b      	ldrh	r3, [r7, #24]
 8004186:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800418a:	833b      	strh	r3, [r7, #24]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	441a      	add	r2, r3
 800419a:	8b3b      	ldrh	r3, [r7, #24]
 800419c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01f      	beq.n	80041fa <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d4:	82fb      	strh	r3, [r7, #22]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	441a      	add	r2, r3
 80041e4:	8afb      	ldrh	r3, [r7, #22]
 80041e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80041fa:	8b7b      	ldrh	r3, [r7, #26]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 8087 	beq.w	8004310 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	6959      	ldr	r1, [r3, #20]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	891a      	ldrh	r2, [r3, #8]
 800420e:	8b7b      	ldrh	r3, [r7, #26]
 8004210:	f003 ff9a 	bl	8008148 <USB_ReadPMA>
 8004214:	e07c      	b.n	8004310 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800421e:	b29b      	uxth	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4413      	add	r3, r2
 800422a:	3306      	adds	r3, #6
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800423e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	699a      	ldr	r2, [r3, #24]
 8004244:	8b7b      	ldrh	r3, [r7, #26]
 8004246:	429a      	cmp	r2, r3
 8004248:	d306      	bcc.n	8004258 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	8b7b      	ldrh	r3, [r7, #26]
 8004250:	1ad2      	subs	r2, r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	619a      	str	r2, [r3, #24]
 8004256:	e002      	b.n	800425e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2200      	movs	r2, #0
 800425c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d123      	bne.n	80042ae <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	b29b      	uxth	r3, r3
 8004278:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800427c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004280:	83fb      	strh	r3, [r7, #30]
 8004282:	8bfb      	ldrh	r3, [r7, #30]
 8004284:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004288:	83fb      	strh	r3, [r7, #30]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	441a      	add	r2, r3
 8004298:	8bfb      	ldrh	r3, [r7, #30]
 800429a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800429e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80042ae:	88fb      	ldrh	r3, [r7, #6]
 80042b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d11f      	bne.n	80042f8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d2:	83bb      	strh	r3, [r7, #28]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	441a      	add	r2, r3
 80042e2:	8bbb      	ldrh	r3, [r7, #28]
 80042e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80042f8:	8b7b      	ldrh	r3, [r7, #26]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d008      	beq.n	8004310 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	6959      	ldr	r1, [r3, #20]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	895a      	ldrh	r2, [r3, #10]
 800430a:	8b7b      	ldrh	r3, [r7, #26]
 800430c:	f003 ff1c 	bl	8008148 <USB_ReadPMA>
    }
  }

  return count;
 8004310:	8b7b      	ldrh	r3, [r7, #26]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3720      	adds	r7, #32
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b0a2      	sub	sp, #136	; 0x88
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	4613      	mov	r3, r2
 8004326:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004328:	88fb      	ldrh	r3, [r7, #6]
 800432a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 81c7 	beq.w	80046c2 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800433c:	b29b      	uxth	r3, r3
 800433e:	461a      	mov	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4413      	add	r3, r2
 8004348:	3302      	adds	r3, #2
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800435c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	699a      	ldr	r2, [r3, #24]
 8004364:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004368:	429a      	cmp	r2, r3
 800436a:	d907      	bls.n	800437c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	699a      	ldr	r2, [r3, #24]
 8004370:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004374:	1ad2      	subs	r2, r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	619a      	str	r2, [r3, #24]
 800437a:	e002      	b.n	8004382 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2200      	movs	r2, #0
 8004380:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	2b00      	cmp	r3, #0
 8004388:	f040 80b9 	bne.w	80044fe <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	785b      	ldrb	r3, [r3, #1]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d126      	bne.n	80043e2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	4413      	add	r3, r2
 80043aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	011a      	lsls	r2, r3, #4
 80043b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b4:	4413      	add	r3, r2
 80043b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	801a      	strh	r2, [r3, #0]
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043da:	b29a      	uxth	r2, r3
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	801a      	strh	r2, [r3, #0]
 80043e0:	e01a      	b.n	8004418 <HAL_PCD_EP_DB_Transmit+0xfe>
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	785b      	ldrb	r3, [r3, #1]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d116      	bne.n	8004418 <HAL_PCD_EP_DB_Transmit+0xfe>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	633b      	str	r3, [r7, #48]	; 0x30
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	4413      	add	r3, r2
 8004400:	633b      	str	r3, [r7, #48]	; 0x30
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	011a      	lsls	r2, r3, #4
 8004408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440a:	4413      	add	r3, r2
 800440c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	2200      	movs	r2, #0
 8004416:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	623b      	str	r3, [r7, #32]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	785b      	ldrb	r3, [r3, #1]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d126      	bne.n	8004474 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	61bb      	str	r3, [r7, #24]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004434:	b29b      	uxth	r3, r3
 8004436:	461a      	mov	r2, r3
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	4413      	add	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	011a      	lsls	r2, r3, #4
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	4413      	add	r3, r2
 8004448:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	b29b      	uxth	r3, r3
 8004454:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004458:	b29a      	uxth	r2, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	801a      	strh	r2, [r3, #0]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	b29b      	uxth	r3, r3
 8004464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800446c:	b29a      	uxth	r2, r3
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	801a      	strh	r2, [r3, #0]
 8004472:	e017      	b.n	80044a4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	785b      	ldrb	r3, [r3, #1]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d113      	bne.n	80044a4 <HAL_PCD_EP_DB_Transmit+0x18a>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004484:	b29b      	uxth	r3, r3
 8004486:	461a      	mov	r2, r3
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	4413      	add	r3, r2
 800448c:	623b      	str	r3, [r7, #32]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	011a      	lsls	r2, r3, #4
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	4413      	add	r3, r2
 8004498:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800449c:	61fb      	str	r3, [r7, #28]
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	2200      	movs	r2, #0
 80044a2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	4619      	mov	r1, r3
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f005 fc0d 	bl	8009cca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 82d4 	beq.w	8004a64 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	827b      	strh	r3, [r7, #18]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	441a      	add	r2, r3
 80044e6:	8a7b      	ldrh	r3, [r7, #18]
 80044e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	8013      	strh	r3, [r2, #0]
 80044fc:	e2b2      	b.n	8004a64 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d021      	beq.n	800454c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	b29b      	uxth	r3, r3
 800451a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004522:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	441a      	add	r2, r3
 8004534:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800453c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004540:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004548:	b29b      	uxth	r3, r3
 800454a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004552:	2b01      	cmp	r3, #1
 8004554:	f040 8286 	bne.w	8004a64 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	695a      	ldr	r2, [r3, #20]
 800455c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004560:	441a      	add	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	69da      	ldr	r2, [r3, #28]
 800456a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800456e:	441a      	add	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	6a1a      	ldr	r2, [r3, #32]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	429a      	cmp	r2, r3
 800457e:	d309      	bcc.n	8004594 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	6a1a      	ldr	r2, [r3, #32]
 800458a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800458c:	1ad2      	subs	r2, r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	621a      	str	r2, [r3, #32]
 8004592:	e015      	b.n	80045c0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d107      	bne.n	80045ac <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800459c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045a0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80045aa:	e009      	b.n	80045c0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2200      	movs	r2, #0
 80045be:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	785b      	ldrb	r3, [r3, #1]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d155      	bne.n	8004674 <HAL_PCD_EP_DB_Transmit+0x35a>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045dc:	4413      	add	r3, r2
 80045de:	63bb      	str	r3, [r7, #56]	; 0x38
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	011a      	lsls	r2, r3, #4
 80045e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e8:	4413      	add	r3, r2
 80045ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045ee:	637b      	str	r3, [r7, #52]	; 0x34
 80045f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d112      	bne.n	800461c <HAL_PCD_EP_DB_Transmit+0x302>
 80045f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004600:	b29a      	uxth	r2, r3
 8004602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004604:	801a      	strh	r2, [r3, #0]
 8004606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	b29b      	uxth	r3, r3
 800460c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004614:	b29a      	uxth	r2, r3
 8004616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004618:	801a      	strh	r2, [r3, #0]
 800461a:	e047      	b.n	80046ac <HAL_PCD_EP_DB_Transmit+0x392>
 800461c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800461e:	2b3e      	cmp	r3, #62	; 0x3e
 8004620:	d811      	bhi.n	8004646 <HAL_PCD_EP_DB_Transmit+0x32c>
 8004622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	64bb      	str	r3, [r7, #72]	; 0x48
 8004628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <HAL_PCD_EP_DB_Transmit+0x31e>
 8004632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004634:	3301      	adds	r3, #1
 8004636:	64bb      	str	r3, [r7, #72]	; 0x48
 8004638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800463a:	b29b      	uxth	r3, r3
 800463c:	029b      	lsls	r3, r3, #10
 800463e:	b29a      	uxth	r2, r3
 8004640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004642:	801a      	strh	r2, [r3, #0]
 8004644:	e032      	b.n	80046ac <HAL_PCD_EP_DB_Transmit+0x392>
 8004646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	64bb      	str	r3, [r7, #72]	; 0x48
 800464c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800464e:	f003 031f 	and.w	r3, r3, #31
 8004652:	2b00      	cmp	r3, #0
 8004654:	d102      	bne.n	800465c <HAL_PCD_EP_DB_Transmit+0x342>
 8004656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004658:	3b01      	subs	r3, #1
 800465a:	64bb      	str	r3, [r7, #72]	; 0x48
 800465c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800465e:	b29b      	uxth	r3, r3
 8004660:	029b      	lsls	r3, r3, #10
 8004662:	b29b      	uxth	r3, r3
 8004664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800466c:	b29a      	uxth	r2, r3
 800466e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004670:	801a      	strh	r2, [r3, #0]
 8004672:	e01b      	b.n	80046ac <HAL_PCD_EP_DB_Transmit+0x392>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d117      	bne.n	80046ac <HAL_PCD_EP_DB_Transmit+0x392>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	643b      	str	r3, [r7, #64]	; 0x40
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800468a:	b29b      	uxth	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004690:	4413      	add	r3, r2
 8004692:	643b      	str	r3, [r7, #64]	; 0x40
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	011a      	lsls	r2, r3, #4
 800469a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800469c:	4413      	add	r3, r2
 800469e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046aa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	6959      	ldr	r1, [r3, #20]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	891a      	ldrh	r2, [r3, #8]
 80046b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	f003 fcff 	bl	80080be <USB_WritePMA>
 80046c0:	e1d0      	b.n	8004a64 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	461a      	mov	r2, r3
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4413      	add	r3, r2
 80046d6:	3306      	adds	r3, #6
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d307      	bcc.n	800470a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004702:	1ad2      	subs	r2, r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	619a      	str	r2, [r3, #24]
 8004708:	e002      	b.n	8004710 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2200      	movs	r2, #0
 800470e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	2b00      	cmp	r3, #0
 8004716:	f040 80c4 	bne.w	80048a2 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	785b      	ldrb	r3, [r3, #1]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d126      	bne.n	8004770 <HAL_PCD_EP_DB_Transmit+0x456>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004730:	b29b      	uxth	r3, r3
 8004732:	461a      	mov	r2, r3
 8004734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004736:	4413      	add	r3, r2
 8004738:	66fb      	str	r3, [r7, #108]	; 0x6c
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	011a      	lsls	r2, r3, #4
 8004740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004742:	4413      	add	r3, r2
 8004744:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004748:	66bb      	str	r3, [r7, #104]	; 0x68
 800474a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	b29b      	uxth	r3, r3
 8004750:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004754:	b29a      	uxth	r2, r3
 8004756:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004758:	801a      	strh	r2, [r3, #0]
 800475a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	b29b      	uxth	r3, r3
 8004760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004768:	b29a      	uxth	r2, r3
 800476a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800476c:	801a      	strh	r2, [r3, #0]
 800476e:	e01a      	b.n	80047a6 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	785b      	ldrb	r3, [r3, #1]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d116      	bne.n	80047a6 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	677b      	str	r3, [r7, #116]	; 0x74
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004786:	b29b      	uxth	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800478c:	4413      	add	r3, r2
 800478e:	677b      	str	r3, [r7, #116]	; 0x74
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	011a      	lsls	r2, r3, #4
 8004796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004798:	4413      	add	r3, r2
 800479a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800479e:	673b      	str	r3, [r7, #112]	; 0x70
 80047a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047a2:	2200      	movs	r2, #0
 80047a4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	785b      	ldrb	r3, [r3, #1]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d12f      	bne.n	8004814 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	461a      	mov	r2, r3
 80047c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047cc:	4413      	add	r3, r2
 80047ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	011a      	lsls	r2, r3, #4
 80047d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047dc:	4413      	add	r3, r2
 80047de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047f8:	801a      	strh	r2, [r3, #0]
 80047fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	b29b      	uxth	r3, r3
 8004802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800480a:	b29a      	uxth	r2, r3
 800480c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004810:	801a      	strh	r2, [r3, #0]
 8004812:	e017      	b.n	8004844 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	785b      	ldrb	r3, [r3, #1]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d113      	bne.n	8004844 <HAL_PCD_EP_DB_Transmit+0x52a>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004824:	b29b      	uxth	r3, r3
 8004826:	461a      	mov	r2, r3
 8004828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800482a:	4413      	add	r3, r2
 800482c:	67bb      	str	r3, [r7, #120]	; 0x78
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	011a      	lsls	r2, r3, #4
 8004834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004836:	4413      	add	r3, r2
 8004838:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800483c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800483e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004840:	2200      	movs	r2, #0
 8004842:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	4619      	mov	r1, r3
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f005 fa3d 	bl	8009cca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004856:	2b00      	cmp	r3, #0
 8004858:	f040 8104 	bne.w	8004a64 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	b29b      	uxth	r3, r3
 800486e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004876:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	441a      	add	r2, r3
 8004888:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800488c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004894:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800489c:	b29b      	uxth	r3, r3
 800489e:	8013      	strh	r3, [r2, #0]
 80048a0:	e0e0      	b.n	8004a64 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80048a2:	88fb      	ldrh	r3, [r7, #6]
 80048a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d121      	bne.n	80048f0 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	461a      	mov	r2, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	b29b      	uxth	r3, r3
 80048be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	441a      	add	r2, r3
 80048d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80048dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	f040 80b4 	bne.w	8004a64 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	695a      	ldr	r2, [r3, #20]
 8004900:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004904:	441a      	add	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	69da      	ldr	r2, [r3, #28]
 800490e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004912:	441a      	add	r2, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	6a1a      	ldr	r2, [r3, #32]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	429a      	cmp	r2, r3
 8004922:	d309      	bcc.n	8004938 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	6a1a      	ldr	r2, [r3, #32]
 800492e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004930:	1ad2      	subs	r2, r2, r3
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	621a      	str	r2, [r3, #32]
 8004936:	e015      	b.n	8004964 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d107      	bne.n	8004950 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004940:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004944:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800494e:	e009      	b.n	8004964 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2200      	movs	r2, #0
 800495a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	667b      	str	r3, [r7, #100]	; 0x64
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	785b      	ldrb	r3, [r3, #1]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d155      	bne.n	8004a1e <HAL_PCD_EP_DB_Transmit+0x704>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004980:	b29b      	uxth	r3, r3
 8004982:	461a      	mov	r2, r3
 8004984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004986:	4413      	add	r3, r2
 8004988:	65fb      	str	r3, [r7, #92]	; 0x5c
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	011a      	lsls	r2, r3, #4
 8004990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004992:	4413      	add	r3, r2
 8004994:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004998:	65bb      	str	r3, [r7, #88]	; 0x58
 800499a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800499c:	2b00      	cmp	r3, #0
 800499e:	d112      	bne.n	80049c6 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80049a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049ae:	801a      	strh	r2, [r3, #0]
 80049b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049be:	b29a      	uxth	r2, r3
 80049c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049c2:	801a      	strh	r2, [r3, #0]
 80049c4:	e044      	b.n	8004a50 <HAL_PCD_EP_DB_Transmit+0x736>
 80049c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049c8:	2b3e      	cmp	r3, #62	; 0x3e
 80049ca:	d811      	bhi.n	80049f0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80049cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ce:	085b      	lsrs	r3, r3, #1
 80049d0:	657b      	str	r3, [r7, #84]	; 0x54
 80049d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80049dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049de:	3301      	adds	r3, #1
 80049e0:	657b      	str	r3, [r7, #84]	; 0x54
 80049e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	029b      	lsls	r3, r3, #10
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049ec:	801a      	strh	r2, [r3, #0]
 80049ee:	e02f      	b.n	8004a50 <HAL_PCD_EP_DB_Transmit+0x736>
 80049f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	657b      	str	r3, [r7, #84]	; 0x54
 80049f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049f8:	f003 031f 	and.w	r3, r3, #31
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d102      	bne.n	8004a06 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a02:	3b01      	subs	r3, #1
 8004a04:	657b      	str	r3, [r7, #84]	; 0x54
 8004a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	029b      	lsls	r3, r3, #10
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a1a:	801a      	strh	r2, [r3, #0]
 8004a1c:	e018      	b.n	8004a50 <HAL_PCD_EP_DB_Transmit+0x736>
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	785b      	ldrb	r3, [r3, #1]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d114      	bne.n	8004a50 <HAL_PCD_EP_DB_Transmit+0x736>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a34:	4413      	add	r3, r2
 8004a36:	667b      	str	r3, [r7, #100]	; 0x64
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	011a      	lsls	r2, r3, #4
 8004a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a40:	4413      	add	r3, r2
 8004a42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a46:	663b      	str	r3, [r7, #96]	; 0x60
 8004a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a4e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6818      	ldr	r0, [r3, #0]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	6959      	ldr	r1, [r3, #20]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	895a      	ldrh	r2, [r3, #10]
 8004a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	f003 fb2d 	bl	80080be <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a7e:	823b      	strh	r3, [r7, #16]
 8004a80:	8a3b      	ldrh	r3, [r7, #16]
 8004a82:	f083 0310 	eor.w	r3, r3, #16
 8004a86:	823b      	strh	r3, [r7, #16]
 8004a88:	8a3b      	ldrh	r3, [r7, #16]
 8004a8a:	f083 0320 	eor.w	r3, r3, #32
 8004a8e:	823b      	strh	r3, [r7, #16]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	441a      	add	r2, r3
 8004a9e:	8a3b      	ldrh	r3, [r7, #16]
 8004aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3788      	adds	r7, #136	; 0x88
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b087      	sub	sp, #28
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	607b      	str	r3, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	817b      	strh	r3, [r7, #10]
 8004acc:	4613      	mov	r3, r2
 8004ace:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004ad0:	897b      	ldrh	r3, [r7, #10]
 8004ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00b      	beq.n	8004af4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004adc:	897b      	ldrh	r3, [r7, #10]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	e009      	b.n	8004b08 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004af4:	897a      	ldrh	r2, [r7, #10]
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004b08:	893b      	ldrh	r3, [r7, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d107      	bne.n	8004b1e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2200      	movs	r2, #0
 8004b12:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	80da      	strh	r2, [r3, #6]
 8004b1c:	e00b      	b.n	8004b36 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2201      	movs	r2, #1
 8004b22:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	0c1b      	lsrs	r3, r3, #16
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr
	...

08004b44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e26c      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 8087 	beq.w	8004c72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b64:	4b92      	ldr	r3, [pc, #584]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f003 030c 	and.w	r3, r3, #12
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d00c      	beq.n	8004b8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b70:	4b8f      	ldr	r3, [pc, #572]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 030c 	and.w	r3, r3, #12
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d112      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x5e>
 8004b7c:	4b8c      	ldr	r3, [pc, #560]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b88:	d10b      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b8a:	4b89      	ldr	r3, [pc, #548]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d06c      	beq.n	8004c70 <HAL_RCC_OscConfig+0x12c>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d168      	bne.n	8004c70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e246      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004baa:	d106      	bne.n	8004bba <HAL_RCC_OscConfig+0x76>
 8004bac:	4b80      	ldr	r3, [pc, #512]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a7f      	ldr	r2, [pc, #508]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	e02e      	b.n	8004c18 <HAL_RCC_OscConfig+0xd4>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10c      	bne.n	8004bdc <HAL_RCC_OscConfig+0x98>
 8004bc2:	4b7b      	ldr	r3, [pc, #492]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a7a      	ldr	r2, [pc, #488]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	4b78      	ldr	r3, [pc, #480]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a77      	ldr	r2, [pc, #476]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	e01d      	b.n	8004c18 <HAL_RCC_OscConfig+0xd4>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004be4:	d10c      	bne.n	8004c00 <HAL_RCC_OscConfig+0xbc>
 8004be6:	4b72      	ldr	r3, [pc, #456]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a71      	ldr	r2, [pc, #452]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	4b6f      	ldr	r3, [pc, #444]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a6e      	ldr	r2, [pc, #440]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	e00b      	b.n	8004c18 <HAL_RCC_OscConfig+0xd4>
 8004c00:	4b6b      	ldr	r3, [pc, #428]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a6a      	ldr	r2, [pc, #424]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	4b68      	ldr	r3, [pc, #416]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a67      	ldr	r2, [pc, #412]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d013      	beq.n	8004c48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c20:	f7fc ffc2 	bl	8001ba8 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c28:	f7fc ffbe 	bl	8001ba8 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b64      	cmp	r3, #100	; 0x64
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e1fa      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c3a:	4b5d      	ldr	r3, [pc, #372]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0f0      	beq.n	8004c28 <HAL_RCC_OscConfig+0xe4>
 8004c46:	e014      	b.n	8004c72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c48:	f7fc ffae 	bl	8001ba8 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c50:	f7fc ffaa 	bl	8001ba8 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b64      	cmp	r3, #100	; 0x64
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e1e6      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c62:	4b53      	ldr	r3, [pc, #332]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1f0      	bne.n	8004c50 <HAL_RCC_OscConfig+0x10c>
 8004c6e:	e000      	b.n	8004c72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d063      	beq.n	8004d46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c7e:	4b4c      	ldr	r3, [pc, #304]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f003 030c 	and.w	r3, r3, #12
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00b      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c8a:	4b49      	ldr	r3, [pc, #292]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f003 030c 	and.w	r3, r3, #12
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d11c      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x18c>
 8004c96:	4b46      	ldr	r3, [pc, #280]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d116      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ca2:	4b43      	ldr	r3, [pc, #268]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d005      	beq.n	8004cba <HAL_RCC_OscConfig+0x176>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d001      	beq.n	8004cba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e1ba      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cba:	4b3d      	ldr	r3, [pc, #244]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4939      	ldr	r1, [pc, #228]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cce:	e03a      	b.n	8004d46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d020      	beq.n	8004d1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cd8:	4b36      	ldr	r3, [pc, #216]	; (8004db4 <HAL_RCC_OscConfig+0x270>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cde:	f7fc ff63 	bl	8001ba8 <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ce6:	f7fc ff5f 	bl	8001ba8 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e19b      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf8:	4b2d      	ldr	r3, [pc, #180]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0f0      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d04:	4b2a      	ldr	r3, [pc, #168]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	4927      	ldr	r1, [pc, #156]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	600b      	str	r3, [r1, #0]
 8004d18:	e015      	b.n	8004d46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d1a:	4b26      	ldr	r3, [pc, #152]	; (8004db4 <HAL_RCC_OscConfig+0x270>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d20:	f7fc ff42 	bl	8001ba8 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d28:	f7fc ff3e 	bl	8001ba8 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e17a      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d3a:	4b1d      	ldr	r3, [pc, #116]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f0      	bne.n	8004d28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d03a      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d019      	beq.n	8004d8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d5a:	4b17      	ldr	r3, [pc, #92]	; (8004db8 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d60:	f7fc ff22 	bl	8001ba8 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d68:	f7fc ff1e 	bl	8001ba8 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e15a      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d7a:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0f0      	beq.n	8004d68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d86:	2001      	movs	r0, #1
 8004d88:	f000 fac6 	bl	8005318 <RCC_Delay>
 8004d8c:	e01c      	b.n	8004dc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d8e:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <HAL_RCC_OscConfig+0x274>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d94:	f7fc ff08 	bl	8001ba8 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d9a:	e00f      	b.n	8004dbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d9c:	f7fc ff04 	bl	8001ba8 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d908      	bls.n	8004dbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e140      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
 8004dae:	bf00      	nop
 8004db0:	40021000 	.word	0x40021000
 8004db4:	42420000 	.word	0x42420000
 8004db8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dbc:	4b9e      	ldr	r3, [pc, #632]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e9      	bne.n	8004d9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 80a6 	beq.w	8004f22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dda:	4b97      	ldr	r3, [pc, #604]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10d      	bne.n	8004e02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004de6:	4b94      	ldr	r3, [pc, #592]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	4a93      	ldr	r2, [pc, #588]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df0:	61d3      	str	r3, [r2, #28]
 8004df2:	4b91      	ldr	r3, [pc, #580]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	60bb      	str	r3, [r7, #8]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e02:	4b8e      	ldr	r3, [pc, #568]	; (800503c <HAL_RCC_OscConfig+0x4f8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d118      	bne.n	8004e40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e0e:	4b8b      	ldr	r3, [pc, #556]	; (800503c <HAL_RCC_OscConfig+0x4f8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a8a      	ldr	r2, [pc, #552]	; (800503c <HAL_RCC_OscConfig+0x4f8>)
 8004e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e1a:	f7fc fec5 	bl	8001ba8 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e22:	f7fc fec1 	bl	8001ba8 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b64      	cmp	r3, #100	; 0x64
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e0fd      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e34:	4b81      	ldr	r3, [pc, #516]	; (800503c <HAL_RCC_OscConfig+0x4f8>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f0      	beq.n	8004e22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d106      	bne.n	8004e56 <HAL_RCC_OscConfig+0x312>
 8004e48:	4b7b      	ldr	r3, [pc, #492]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	4a7a      	ldr	r2, [pc, #488]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	6213      	str	r3, [r2, #32]
 8004e54:	e02d      	b.n	8004eb2 <HAL_RCC_OscConfig+0x36e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCC_OscConfig+0x334>
 8004e5e:	4b76      	ldr	r3, [pc, #472]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	4a75      	ldr	r2, [pc, #468]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	6213      	str	r3, [r2, #32]
 8004e6a:	4b73      	ldr	r3, [pc, #460]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	4a72      	ldr	r2, [pc, #456]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e70:	f023 0304 	bic.w	r3, r3, #4
 8004e74:	6213      	str	r3, [r2, #32]
 8004e76:	e01c      	b.n	8004eb2 <HAL_RCC_OscConfig+0x36e>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b05      	cmp	r3, #5
 8004e7e:	d10c      	bne.n	8004e9a <HAL_RCC_OscConfig+0x356>
 8004e80:	4b6d      	ldr	r3, [pc, #436]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	4a6c      	ldr	r2, [pc, #432]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e86:	f043 0304 	orr.w	r3, r3, #4
 8004e8a:	6213      	str	r3, [r2, #32]
 8004e8c:	4b6a      	ldr	r3, [pc, #424]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	4a69      	ldr	r2, [pc, #420]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	6213      	str	r3, [r2, #32]
 8004e98:	e00b      	b.n	8004eb2 <HAL_RCC_OscConfig+0x36e>
 8004e9a:	4b67      	ldr	r3, [pc, #412]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	4a66      	ldr	r2, [pc, #408]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	6213      	str	r3, [r2, #32]
 8004ea6:	4b64      	ldr	r3, [pc, #400]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	4a63      	ldr	r2, [pc, #396]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004eac:	f023 0304 	bic.w	r3, r3, #4
 8004eb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d015      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eba:	f7fc fe75 	bl	8001ba8 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec0:	e00a      	b.n	8004ed8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec2:	f7fc fe71 	bl	8001ba8 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e0ab      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed8:	4b57      	ldr	r3, [pc, #348]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0ee      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x37e>
 8004ee4:	e014      	b.n	8004f10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee6:	f7fc fe5f 	bl	8001ba8 <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eec:	e00a      	b.n	8004f04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eee:	f7fc fe5b 	bl	8001ba8 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e095      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f04:	4b4c      	ldr	r3, [pc, #304]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1ee      	bne.n	8004eee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d105      	bne.n	8004f22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f16:	4b48      	ldr	r3, [pc, #288]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	4a47      	ldr	r2, [pc, #284]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 8081 	beq.w	800502e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f2c:	4b42      	ldr	r3, [pc, #264]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f003 030c 	and.w	r3, r3, #12
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d061      	beq.n	8004ffc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d146      	bne.n	8004fce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f40:	4b3f      	ldr	r3, [pc, #252]	; (8005040 <HAL_RCC_OscConfig+0x4fc>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f46:	f7fc fe2f 	bl	8001ba8 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4e:	f7fc fe2b 	bl	8001ba8 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e067      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f60:	4b35      	ldr	r3, [pc, #212]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f0      	bne.n	8004f4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f74:	d108      	bne.n	8004f88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f76:	4b30      	ldr	r3, [pc, #192]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	492d      	ldr	r1, [pc, #180]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f88:	4b2b      	ldr	r3, [pc, #172]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a19      	ldr	r1, [r3, #32]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	430b      	orrs	r3, r1
 8004f9a:	4927      	ldr	r1, [pc, #156]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fa0:	4b27      	ldr	r3, [pc, #156]	; (8005040 <HAL_RCC_OscConfig+0x4fc>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa6:	f7fc fdff 	bl	8001ba8 <HAL_GetTick>
 8004faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fae:	f7fc fdfb 	bl	8001ba8 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e037      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fc0:	4b1d      	ldr	r3, [pc, #116]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f0      	beq.n	8004fae <HAL_RCC_OscConfig+0x46a>
 8004fcc:	e02f      	b.n	800502e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fce:	4b1c      	ldr	r3, [pc, #112]	; (8005040 <HAL_RCC_OscConfig+0x4fc>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd4:	f7fc fde8 	bl	8001ba8 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fdc:	f7fc fde4 	bl	8001ba8 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e020      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fee:	4b12      	ldr	r3, [pc, #72]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f0      	bne.n	8004fdc <HAL_RCC_OscConfig+0x498>
 8004ffa:	e018      	b.n	800502e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e013      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005008:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	429a      	cmp	r2, r3
 800501a:	d106      	bne.n	800502a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005026:	429a      	cmp	r2, r3
 8005028:	d001      	beq.n	800502e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40021000 	.word	0x40021000
 800503c:	40007000 	.word	0x40007000
 8005040:	42420060 	.word	0x42420060

08005044 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0d0      	b.n	80051fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005058:	4b6a      	ldr	r3, [pc, #424]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d910      	bls.n	8005088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005066:	4b67      	ldr	r3, [pc, #412]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f023 0207 	bic.w	r2, r3, #7
 800506e:	4965      	ldr	r1, [pc, #404]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	4313      	orrs	r3, r2
 8005074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005076:	4b63      	ldr	r3, [pc, #396]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d001      	beq.n	8005088 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0b8      	b.n	80051fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d020      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050a0:	4b59      	ldr	r3, [pc, #356]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	4a58      	ldr	r2, [pc, #352]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80050a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050b8:	4b53      	ldr	r3, [pc, #332]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	4a52      	ldr	r2, [pc, #328]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80050be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80050c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c4:	4b50      	ldr	r3, [pc, #320]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	494d      	ldr	r1, [pc, #308]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d040      	beq.n	8005164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d107      	bne.n	80050fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ea:	4b47      	ldr	r3, [pc, #284]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d115      	bne.n	8005122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e07f      	b.n	80051fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d107      	bne.n	8005112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005102:	4b41      	ldr	r3, [pc, #260]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d109      	bne.n	8005122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e073      	b.n	80051fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005112:	4b3d      	ldr	r3, [pc, #244]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e06b      	b.n	80051fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005122:	4b39      	ldr	r3, [pc, #228]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f023 0203 	bic.w	r2, r3, #3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	4936      	ldr	r1, [pc, #216]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 8005130:	4313      	orrs	r3, r2
 8005132:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005134:	f7fc fd38 	bl	8001ba8 <HAL_GetTick>
 8005138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800513a:	e00a      	b.n	8005152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800513c:	f7fc fd34 	bl	8001ba8 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	f241 3288 	movw	r2, #5000	; 0x1388
 800514a:	4293      	cmp	r3, r2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e053      	b.n	80051fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005152:	4b2d      	ldr	r3, [pc, #180]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f003 020c 	and.w	r2, r3, #12
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	429a      	cmp	r2, r3
 8005162:	d1eb      	bne.n	800513c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005164:	4b27      	ldr	r3, [pc, #156]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d210      	bcs.n	8005194 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005172:	4b24      	ldr	r3, [pc, #144]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f023 0207 	bic.w	r2, r3, #7
 800517a:	4922      	ldr	r1, [pc, #136]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	4313      	orrs	r3, r2
 8005180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005182:	4b20      	ldr	r3, [pc, #128]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d001      	beq.n	8005194 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e032      	b.n	80051fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d008      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051a0:	4b19      	ldr	r3, [pc, #100]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	4916      	ldr	r1, [pc, #88]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d009      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051be:	4b12      	ldr	r3, [pc, #72]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	490e      	ldr	r1, [pc, #56]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051d2:	f000 f821 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 80051d6:	4602      	mov	r2, r0
 80051d8:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	091b      	lsrs	r3, r3, #4
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	490a      	ldr	r1, [pc, #40]	; (800520c <HAL_RCC_ClockConfig+0x1c8>)
 80051e4:	5ccb      	ldrb	r3, [r1, r3]
 80051e6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ea:	4a09      	ldr	r2, [pc, #36]	; (8005210 <HAL_RCC_ClockConfig+0x1cc>)
 80051ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051ee:	4b09      	ldr	r3, [pc, #36]	; (8005214 <HAL_RCC_ClockConfig+0x1d0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fc fc96 	bl	8001b24 <HAL_InitTick>

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	40022000 	.word	0x40022000
 8005208:	40021000 	.word	0x40021000
 800520c:	0800a308 	.word	0x0800a308
 8005210:	20000008 	.word	0x20000008
 8005214:	2000000c 	.word	0x2000000c

08005218 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005218:	b490      	push	{r4, r7}
 800521a:	b08a      	sub	sp, #40	; 0x28
 800521c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800521e:	4b2a      	ldr	r3, [pc, #168]	; (80052c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005220:	1d3c      	adds	r4, r7, #4
 8005222:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005224:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005228:	f240 2301 	movw	r3, #513	; 0x201
 800522c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
 8005232:	2300      	movs	r3, #0
 8005234:	61bb      	str	r3, [r7, #24]
 8005236:	2300      	movs	r3, #0
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005242:	4b22      	ldr	r3, [pc, #136]	; (80052cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b04      	cmp	r3, #4
 8005250:	d002      	beq.n	8005258 <HAL_RCC_GetSysClockFreq+0x40>
 8005252:	2b08      	cmp	r3, #8
 8005254:	d003      	beq.n	800525e <HAL_RCC_GetSysClockFreq+0x46>
 8005256:	e02d      	b.n	80052b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005258:	4b1d      	ldr	r3, [pc, #116]	; (80052d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800525a:	623b      	str	r3, [r7, #32]
      break;
 800525c:	e02d      	b.n	80052ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	0c9b      	lsrs	r3, r3, #18
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800526a:	4413      	add	r3, r2
 800526c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005270:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d013      	beq.n	80052a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800527c:	4b13      	ldr	r3, [pc, #76]	; (80052cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	0c5b      	lsrs	r3, r3, #17
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800528a:	4413      	add	r3, r2
 800528c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005290:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	4a0e      	ldr	r2, [pc, #56]	; (80052d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005296:	fb02 f203 	mul.w	r2, r2, r3
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
 80052a2:	e004      	b.n	80052ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	4a0b      	ldr	r2, [pc, #44]	; (80052d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052a8:	fb02 f303 	mul.w	r3, r2, r3
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	623b      	str	r3, [r7, #32]
      break;
 80052b2:	e002      	b.n	80052ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80052b4:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80052b6:	623b      	str	r3, [r7, #32]
      break;
 80052b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052ba:	6a3b      	ldr	r3, [r7, #32]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3728      	adds	r7, #40	; 0x28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bc90      	pop	{r4, r7}
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	0800a2b0 	.word	0x0800a2b0
 80052cc:	40021000 	.word	0x40021000
 80052d0:	00f42400 	.word	0x00f42400
 80052d4:	003d0900 	.word	0x003d0900
 80052d8:	007a1200 	.word	0x007a1200

080052dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052e0:	4b02      	ldr	r3, [pc, #8]	; (80052ec <HAL_RCC_GetHCLKFreq+0x10>)
 80052e2:	681b      	ldr	r3, [r3, #0]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr
 80052ec:	20000008 	.word	0x20000008

080052f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052f4:	f7ff fff2 	bl	80052dc <HAL_RCC_GetHCLKFreq>
 80052f8:	4602      	mov	r2, r0
 80052fa:	4b05      	ldr	r3, [pc, #20]	; (8005310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	0a1b      	lsrs	r3, r3, #8
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	4903      	ldr	r1, [pc, #12]	; (8005314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005306:	5ccb      	ldrb	r3, [r1, r3]
 8005308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800530c:	4618      	mov	r0, r3
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40021000 	.word	0x40021000
 8005314:	0800a318 	.word	0x0800a318

08005318 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005320:	4b0a      	ldr	r3, [pc, #40]	; (800534c <RCC_Delay+0x34>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a0a      	ldr	r2, [pc, #40]	; (8005350 <RCC_Delay+0x38>)
 8005326:	fba2 2303 	umull	r2, r3, r2, r3
 800532a:	0a5b      	lsrs	r3, r3, #9
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	fb02 f303 	mul.w	r3, r2, r3
 8005332:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005334:	bf00      	nop
  }
  while (Delay --);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	1e5a      	subs	r2, r3, #1
 800533a:	60fa      	str	r2, [r7, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1f9      	bne.n	8005334 <RCC_Delay+0x1c>
}
 8005340:	bf00      	nop
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	bc80      	pop	{r7}
 800534a:	4770      	bx	lr
 800534c:	20000008 	.word	0x20000008
 8005350:	10624dd3 	.word	0x10624dd3

08005354 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	613b      	str	r3, [r7, #16]
 8005360:	2300      	movs	r3, #0
 8005362:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b00      	cmp	r3, #0
 800536e:	d07d      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005370:	2300      	movs	r3, #0
 8005372:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005374:	4b4f      	ldr	r3, [pc, #316]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10d      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005380:	4b4c      	ldr	r3, [pc, #304]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	4a4b      	ldr	r2, [pc, #300]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800538a:	61d3      	str	r3, [r2, #28]
 800538c:	4b49      	ldr	r3, [pc, #292]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005394:	60bb      	str	r3, [r7, #8]
 8005396:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005398:	2301      	movs	r3, #1
 800539a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800539c:	4b46      	ldr	r3, [pc, #280]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d118      	bne.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053a8:	4b43      	ldr	r3, [pc, #268]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a42      	ldr	r2, [pc, #264]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053b4:	f7fc fbf8 	bl	8001ba8 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ba:	e008      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053bc:	f7fc fbf4 	bl	8001ba8 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b64      	cmp	r3, #100	; 0x64
 80053c8:	d901      	bls.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e06d      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ce:	4b3a      	ldr	r3, [pc, #232]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0f0      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053da:	4b36      	ldr	r3, [pc, #216]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d02e      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d027      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053f8:	4b2e      	ldr	r3, [pc, #184]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005400:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005402:	4b2e      	ldr	r3, [pc, #184]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005404:	2201      	movs	r2, #1
 8005406:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005408:	4b2c      	ldr	r3, [pc, #176]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800540e:	4a29      	ldr	r2, [pc, #164]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d014      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800541e:	f7fc fbc3 	bl	8001ba8 <HAL_GetTick>
 8005422:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005424:	e00a      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005426:	f7fc fbbf 	bl	8001ba8 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	f241 3288 	movw	r2, #5000	; 0x1388
 8005434:	4293      	cmp	r3, r2
 8005436:	d901      	bls.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e036      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800543c:	4b1d      	ldr	r3, [pc, #116]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0ee      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005448:	4b1a      	ldr	r3, [pc, #104]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	4917      	ldr	r1, [pc, #92]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005456:	4313      	orrs	r3, r2
 8005458:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800545a:	7dfb      	ldrb	r3, [r7, #23]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d105      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005460:	4b14      	ldr	r3, [pc, #80]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	4a13      	ldr	r2, [pc, #76]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800546a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005478:	4b0e      	ldr	r3, [pc, #56]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	490b      	ldr	r1, [pc, #44]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005486:	4313      	orrs	r3, r2
 8005488:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0310 	and.w	r3, r3, #16
 8005492:	2b00      	cmp	r3, #0
 8005494:	d008      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005496:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	4904      	ldr	r1, [pc, #16]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3718      	adds	r7, #24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	40021000 	.word	0x40021000
 80054b8:	40007000 	.word	0x40007000
 80054bc:	42420440 	.word	0x42420440

080054c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e076      	b.n	80055c0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d108      	bne.n	80054ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e2:	d009      	beq.n	80054f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	61da      	str	r2, [r3, #28]
 80054ea:	e005      	b.n	80054f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7fb fffc 	bl	8001510 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800552e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800554a:	431a      	orrs	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	431a      	orrs	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557c:	ea42 0103 	orr.w	r1, r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005584:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	0c1a      	lsrs	r2, r3, #16
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f002 0204 	and.w	r2, r2, #4
 800559e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69da      	ldr	r2, [r3, #28]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	4613      	mov	r3, r2
 80055d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d101      	bne.n	80055ea <HAL_SPI_Transmit+0x22>
 80055e6:	2302      	movs	r3, #2
 80055e8:	e126      	b.n	8005838 <HAL_SPI_Transmit+0x270>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055f2:	f7fc fad9 	bl	8001ba8 <HAL_GetTick>
 80055f6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055f8:	88fb      	ldrh	r3, [r7, #6]
 80055fa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b01      	cmp	r3, #1
 8005606:	d002      	beq.n	800560e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005608:	2302      	movs	r3, #2
 800560a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800560c:	e10b      	b.n	8005826 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <HAL_SPI_Transmit+0x52>
 8005614:	88fb      	ldrh	r3, [r7, #6]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d102      	bne.n	8005620 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800561e:	e102      	b.n	8005826 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2203      	movs	r2, #3
 8005624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	88fa      	ldrh	r2, [r7, #6]
 8005638:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	88fa      	ldrh	r2, [r7, #6]
 800563e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005666:	d10f      	bne.n	8005688 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005676:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005686:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005692:	2b40      	cmp	r3, #64	; 0x40
 8005694:	d007      	beq.n	80056a6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ae:	d14b      	bne.n	8005748 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <HAL_SPI_Transmit+0xf6>
 80056b8:	8afb      	ldrh	r3, [r7, #22]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d13e      	bne.n	800573c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c2:	881a      	ldrh	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ce:	1c9a      	adds	r2, r3, #2
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056e2:	e02b      	b.n	800573c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d112      	bne.n	8005718 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	881a      	ldrh	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	1c9a      	adds	r2, r3, #2
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800570c:	b29b      	uxth	r3, r3
 800570e:	3b01      	subs	r3, #1
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	86da      	strh	r2, [r3, #54]	; 0x36
 8005716:	e011      	b.n	800573c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005718:	f7fc fa46 	bl	8001ba8 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d803      	bhi.n	8005730 <HAL_SPI_Transmit+0x168>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572e:	d102      	bne.n	8005736 <HAL_SPI_Transmit+0x16e>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d102      	bne.n	800573c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	77fb      	strb	r3, [r7, #31]
          goto error;
 800573a:	e074      	b.n	8005826 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1ce      	bne.n	80056e4 <HAL_SPI_Transmit+0x11c>
 8005746:	e04c      	b.n	80057e2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <HAL_SPI_Transmit+0x18e>
 8005750:	8afb      	ldrh	r3, [r7, #22]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d140      	bne.n	80057d8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	330c      	adds	r3, #12
 8005760:	7812      	ldrb	r2, [r2, #0]
 8005762:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005772:	b29b      	uxth	r3, r3
 8005774:	3b01      	subs	r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800577c:	e02c      	b.n	80057d8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b02      	cmp	r3, #2
 800578a:	d113      	bne.n	80057b4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	330c      	adds	r3, #12
 8005796:	7812      	ldrb	r2, [r2, #0]
 8005798:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3b01      	subs	r3, #1
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80057b2:	e011      	b.n	80057d8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057b4:	f7fc f9f8 	bl	8001ba8 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d803      	bhi.n	80057cc <HAL_SPI_Transmit+0x204>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ca:	d102      	bne.n	80057d2 <HAL_SPI_Transmit+0x20a>
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d102      	bne.n	80057d8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057d6:	e026      	b.n	8005826 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1cd      	bne.n	800577e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	6839      	ldr	r1, [r7, #0]
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 fa54 	bl	8005c94 <SPI_EndRxTxTransaction>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d002      	beq.n	80057f8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2220      	movs	r2, #32
 80057f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10a      	bne.n	8005816 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005800:	2300      	movs	r3, #0
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	613b      	str	r3, [r7, #16]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	613b      	str	r3, [r7, #16]
 8005814:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	77fb      	strb	r3, [r7, #31]
 8005822:	e000      	b.n	8005826 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005824:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005836:	7ffb      	ldrb	r3, [r7, #31]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3720      	adds	r7, #32
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b08c      	sub	sp, #48	; 0x30
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800584e:	2301      	movs	r3, #1
 8005850:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800585e:	2b01      	cmp	r3, #1
 8005860:	d101      	bne.n	8005866 <HAL_SPI_TransmitReceive+0x26>
 8005862:	2302      	movs	r3, #2
 8005864:	e18a      	b.n	8005b7c <HAL_SPI_TransmitReceive+0x33c>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800586e:	f7fc f99b 	bl	8001ba8 <HAL_GetTick>
 8005872:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800587a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005884:	887b      	ldrh	r3, [r7, #2]
 8005886:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005888:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800588c:	2b01      	cmp	r3, #1
 800588e:	d00f      	beq.n	80058b0 <HAL_SPI_TransmitReceive+0x70>
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005896:	d107      	bne.n	80058a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d103      	bne.n	80058a8 <HAL_SPI_TransmitReceive+0x68>
 80058a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d003      	beq.n	80058b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80058a8:	2302      	movs	r3, #2
 80058aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058ae:	e15b      	b.n	8005b68 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <HAL_SPI_TransmitReceive+0x82>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <HAL_SPI_TransmitReceive+0x82>
 80058bc:	887b      	ldrh	r3, [r7, #2]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d103      	bne.n	80058ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058c8:	e14e      	b.n	8005b68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d003      	beq.n	80058de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2205      	movs	r2, #5
 80058da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	887a      	ldrh	r2, [r7, #2]
 80058ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	887a      	ldrh	r2, [r7, #2]
 80058f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	887a      	ldrh	r2, [r7, #2]
 8005900:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	887a      	ldrh	r2, [r7, #2]
 8005906:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591e:	2b40      	cmp	r3, #64	; 0x40
 8005920:	d007      	beq.n	8005932 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005930:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800593a:	d178      	bne.n	8005a2e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <HAL_SPI_TransmitReceive+0x10a>
 8005944:	8b7b      	ldrh	r3, [r7, #26]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d166      	bne.n	8005a18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594e:	881a      	ldrh	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	1c9a      	adds	r2, r3, #2
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005964:	b29b      	uxth	r3, r3
 8005966:	3b01      	subs	r3, #1
 8005968:	b29a      	uxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800596e:	e053      	b.n	8005a18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b02      	cmp	r3, #2
 800597c:	d11b      	bne.n	80059b6 <HAL_SPI_TransmitReceive+0x176>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005982:	b29b      	uxth	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d016      	beq.n	80059b6 <HAL_SPI_TransmitReceive+0x176>
 8005988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598a:	2b01      	cmp	r3, #1
 800598c:	d113      	bne.n	80059b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005992:	881a      	ldrh	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599e:	1c9a      	adds	r2, r3, #2
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	3b01      	subs	r3, #1
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d119      	bne.n	80059f8 <HAL_SPI_TransmitReceive+0x1b8>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d014      	beq.n	80059f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d8:	b292      	uxth	r2, r2
 80059da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e0:	1c9a      	adds	r2, r3, #2
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059f4:	2301      	movs	r3, #1
 80059f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059f8:	f7fc f8d6 	bl	8001ba8 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d807      	bhi.n	8005a18 <HAL_SPI_TransmitReceive+0x1d8>
 8005a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0e:	d003      	beq.n	8005a18 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a16:	e0a7      	b.n	8005b68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1a6      	bne.n	8005970 <HAL_SPI_TransmitReceive+0x130>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1a1      	bne.n	8005970 <HAL_SPI_TransmitReceive+0x130>
 8005a2c:	e07c      	b.n	8005b28 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <HAL_SPI_TransmitReceive+0x1fc>
 8005a36:	8b7b      	ldrh	r3, [r7, #26]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d16b      	bne.n	8005b14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	330c      	adds	r3, #12
 8005a46:	7812      	ldrb	r2, [r2, #0]
 8005a48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a62:	e057      	b.n	8005b14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d11c      	bne.n	8005aac <HAL_SPI_TransmitReceive+0x26c>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d017      	beq.n	8005aac <HAL_SPI_TransmitReceive+0x26c>
 8005a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d114      	bne.n	8005aac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	330c      	adds	r3, #12
 8005a8c:	7812      	ldrb	r2, [r2, #0]
 8005a8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d119      	bne.n	8005aee <HAL_SPI_TransmitReceive+0x2ae>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d014      	beq.n	8005aee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005aea:	2301      	movs	r3, #1
 8005aec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005aee:	f7fc f85b 	bl	8001ba8 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d803      	bhi.n	8005b06 <HAL_SPI_TransmitReceive+0x2c6>
 8005afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b04:	d102      	bne.n	8005b0c <HAL_SPI_TransmitReceive+0x2cc>
 8005b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d103      	bne.n	8005b14 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b12:	e029      	b.n	8005b68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1a2      	bne.n	8005a64 <HAL_SPI_TransmitReceive+0x224>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d19d      	bne.n	8005a64 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f8b1 	bl	8005c94 <SPI_EndRxTxTransaction>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d006      	beq.n	8005b46 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2220      	movs	r2, #32
 8005b42:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b44:	e010      	b.n	8005b68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10b      	bne.n	8005b66 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b4e:	2300      	movs	r3, #0
 8005b50:	617b      	str	r3, [r7, #20]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	e000      	b.n	8005b68 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005b66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3730      	adds	r7, #48	; 0x30
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	4613      	mov	r3, r2
 8005b92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b94:	f7fc f808 	bl	8001ba8 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	1a9b      	subs	r3, r3, r2
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ba4:	f7fc f800 	bl	8001ba8 <HAL_GetTick>
 8005ba8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005baa:	4b39      	ldr	r3, [pc, #228]	; (8005c90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	015b      	lsls	r3, r3, #5
 8005bb0:	0d1b      	lsrs	r3, r3, #20
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	fb02 f303 	mul.w	r3, r2, r3
 8005bb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bba:	e054      	b.n	8005c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc2:	d050      	beq.n	8005c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bc4:	f7fb fff0 	bl	8001ba8 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d902      	bls.n	8005bda <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d13d      	bne.n	8005c56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005be8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bf2:	d111      	bne.n	8005c18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bfc:	d004      	beq.n	8005c08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c06:	d107      	bne.n	8005c18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c20:	d10f      	bne.n	8005c42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e017      	b.n	8005c86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	bf0c      	ite	eq
 8005c76:	2301      	moveq	r3, #1
 8005c78:	2300      	movne	r3, #0
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d19b      	bne.n	8005bbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3720      	adds	r7, #32
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	20000008 	.word	0x20000008

08005c94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2180      	movs	r1, #128	; 0x80
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f7ff ff6a 	bl	8005b84 <SPI_WaitFlagStateUntilTimeout>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d007      	beq.n	8005cc6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cba:	f043 0220 	orr.w	r2, r3, #32
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e000      	b.n	8005cc8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	f107 0014 	add.w	r0, r7, #20
 8005cde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	b004      	add	sp, #16
 8005cee:	4770      	bx	lr

08005cf0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d00:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005d04:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bc80      	pop	{r7}
 8005d1a:	4770      	bx	lr

08005d1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d24:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005d28:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	43db      	mvns	r3, r3
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bc80      	pop	{r7}
 8005d4e:	4770      	bx	lr

08005d50 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bc80      	pop	{r7}
 8005d66:	4770      	bx	lr

08005d68 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d68:	b084      	sub	sp, #16
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	f107 0014 	add.w	r0, r7, #20
 8005d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	b004      	add	sp, #16
 8005da6:	4770      	bx	lr

08005da8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b09b      	sub	sp, #108	; 0x6c
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	78db      	ldrb	r3, [r3, #3]
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d81f      	bhi.n	8005e1a <USB_ActivateEndpoint+0x72>
 8005dda:	a201      	add	r2, pc, #4	; (adr r2, 8005de0 <USB_ActivateEndpoint+0x38>)
 8005ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de0:	08005df1 	.word	0x08005df1
 8005de4:	08005e0d 	.word	0x08005e0d
 8005de8:	08005e23 	.word	0x08005e23
 8005dec:	08005dff 	.word	0x08005dff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005df0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005df4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005df8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005dfc:	e012      	b.n	8005e24 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005dfe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e02:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005e06:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005e0a:	e00b      	b.n	8005e24 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005e0c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e14:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005e18:	e004      	b.n	8005e24 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005e20:	e000      	b.n	8005e24 <USB_ActivateEndpoint+0x7c>
      break;
 8005e22:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	441a      	add	r2, r3
 8005e2e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	441a      	add	r2, r3
 8005e74:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	7b1b      	ldrb	r3, [r3, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f040 8149 	bne.w	8006128 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	785b      	ldrb	r3, [r3, #1]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 8084 	beq.w	8005fa8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	011a      	lsls	r2, r3, #4
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ec2:	613b      	str	r3, [r7, #16]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	88db      	ldrh	r3, [r3, #6]
 8005ec8:	085b      	lsrs	r3, r3, #1
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	81fb      	strh	r3, [r7, #14]
 8005ee2:	89fb      	ldrh	r3, [r7, #14]
 8005ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01b      	beq.n	8005f24 <USB_ActivateEndpoint+0x17c>
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f02:	81bb      	strh	r3, [r7, #12]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	441a      	add	r2, r3
 8005f0e:	89bb      	ldrh	r3, [r7, #12]
 8005f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	78db      	ldrb	r3, [r3, #3]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d020      	beq.n	8005f6e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f42:	813b      	strh	r3, [r7, #8]
 8005f44:	893b      	ldrh	r3, [r7, #8]
 8005f46:	f083 0320 	eor.w	r3, r3, #32
 8005f4a:	813b      	strh	r3, [r7, #8]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	441a      	add	r2, r3
 8005f56:	893b      	ldrh	r3, [r7, #8]
 8005f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	8013      	strh	r3, [r2, #0]
 8005f6c:	e27f      	b.n	800646e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f84:	817b      	strh	r3, [r7, #10]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	441a      	add	r2, r3
 8005f90:	897b      	ldrh	r3, [r7, #10]
 8005f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	8013      	strh	r3, [r2, #0]
 8005fa6:	e262      	b.n	800646e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb8:	4413      	add	r3, r2
 8005fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	011a      	lsls	r2, r3, #4
 8005fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	88db      	ldrh	r3, [r3, #6]
 8005fd0:	085b      	lsrs	r3, r3, #1
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	461a      	mov	r2, r3
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	4413      	add	r3, r2
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	011a      	lsls	r2, r3, #4
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ffe:	623b      	str	r3, [r7, #32]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d112      	bne.n	800602e <USB_ActivateEndpoint+0x286>
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	b29b      	uxth	r3, r3
 800600e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006012:	b29a      	uxth	r2, r3
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	801a      	strh	r2, [r3, #0]
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	b29b      	uxth	r3, r3
 800601e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006026:	b29a      	uxth	r2, r3
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	801a      	strh	r2, [r3, #0]
 800602c:	e02f      	b.n	800608e <USB_ActivateEndpoint+0x2e6>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	2b3e      	cmp	r3, #62	; 0x3e
 8006034:	d813      	bhi.n	800605e <USB_ActivateEndpoint+0x2b6>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	085b      	lsrs	r3, r3, #1
 800603c:	663b      	str	r3, [r7, #96]	; 0x60
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <USB_ActivateEndpoint+0x2a8>
 800604a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800604c:	3301      	adds	r3, #1
 800604e:	663b      	str	r3, [r7, #96]	; 0x60
 8006050:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006052:	b29b      	uxth	r3, r3
 8006054:	029b      	lsls	r3, r3, #10
 8006056:	b29a      	uxth	r2, r3
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	801a      	strh	r2, [r3, #0]
 800605c:	e017      	b.n	800608e <USB_ActivateEndpoint+0x2e6>
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	663b      	str	r3, [r7, #96]	; 0x60
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f003 031f 	and.w	r3, r3, #31
 800606e:	2b00      	cmp	r3, #0
 8006070:	d102      	bne.n	8006078 <USB_ActivateEndpoint+0x2d0>
 8006072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006074:	3b01      	subs	r3, #1
 8006076:	663b      	str	r3, [r7, #96]	; 0x60
 8006078:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800607a:	b29b      	uxth	r3, r3
 800607c:	029b      	lsls	r3, r3, #10
 800607e:	b29b      	uxth	r3, r3
 8006080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006088:	b29a      	uxth	r2, r3
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	83fb      	strh	r3, [r7, #30]
 800609c:	8bfb      	ldrh	r3, [r7, #30]
 800609e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d01b      	beq.n	80060de <USB_ActivateEndpoint+0x336>
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060bc:	83bb      	strh	r3, [r7, #28]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	441a      	add	r2, r3
 80060c8:	8bbb      	ldrh	r3, [r7, #28]
 80060ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060da:	b29b      	uxth	r3, r3
 80060dc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f4:	837b      	strh	r3, [r7, #26]
 80060f6:	8b7b      	ldrh	r3, [r7, #26]
 80060f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060fc:	837b      	strh	r3, [r7, #26]
 80060fe:	8b7b      	ldrh	r3, [r7, #26]
 8006100:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006104:	837b      	strh	r3, [r7, #26]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	441a      	add	r2, r3
 8006110:	8b7b      	ldrh	r3, [r7, #26]
 8006112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006122:	b29b      	uxth	r3, r3
 8006124:	8013      	strh	r3, [r2, #0]
 8006126:	e1a2      	b.n	800646e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	b29b      	uxth	r3, r3
 8006136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800613a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	441a      	add	r2, r3
 800614c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006158:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800615c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006160:	b29b      	uxth	r3, r3
 8006162:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	65bb      	str	r3, [r7, #88]	; 0x58
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800616e:	b29b      	uxth	r3, r3
 8006170:	461a      	mov	r2, r3
 8006172:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006174:	4413      	add	r3, r2
 8006176:	65bb      	str	r3, [r7, #88]	; 0x58
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	011a      	lsls	r2, r3, #4
 800617e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006180:	4413      	add	r3, r2
 8006182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006186:	657b      	str	r3, [r7, #84]	; 0x54
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	891b      	ldrh	r3, [r3, #8]
 800618c:	085b      	lsrs	r3, r3, #1
 800618e:	b29b      	uxth	r3, r3
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	b29a      	uxth	r2, r3
 8006194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006196:	801a      	strh	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	653b      	str	r3, [r7, #80]	; 0x50
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	461a      	mov	r2, r3
 80061a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061a8:	4413      	add	r3, r2
 80061aa:	653b      	str	r3, [r7, #80]	; 0x50
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	011a      	lsls	r2, r3, #4
 80061b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80061ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	895b      	ldrh	r3, [r3, #10]
 80061c0:	085b      	lsrs	r3, r3, #1
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	785b      	ldrb	r3, [r3, #1]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f040 8091 	bne.w	80062f8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80061e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80061e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d01b      	beq.n	8006226 <USB_ActivateEndpoint+0x47e>
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006204:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	441a      	add	r2, r3
 8006210:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800621a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800621e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006222:	b29b      	uxth	r3, r3
 8006224:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	873b      	strh	r3, [r7, #56]	; 0x38
 8006234:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d01b      	beq.n	8006276 <USB_ActivateEndpoint+0x4ce>
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	b29b      	uxth	r3, r3
 800624c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006254:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	441a      	add	r2, r3
 8006260:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800626a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800626e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006272:	b29b      	uxth	r3, r3
 8006274:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	b29b      	uxth	r3, r3
 8006284:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800628e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006290:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006294:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006296:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006298:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800629c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	441a      	add	r2, r3
 80062a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80062aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062d4:	867b      	strh	r3, [r7, #50]	; 0x32
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	441a      	add	r2, r3
 80062e0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80062e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	8013      	strh	r3, [r2, #0]
 80062f6:	e0ba      	b.n	800646e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006308:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800630c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01d      	beq.n	8006350 <USB_ActivateEndpoint+0x5a8>
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4413      	add	r3, r2
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	b29b      	uxth	r3, r3
 8006322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	441a      	add	r2, r3
 8006338:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800633c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006344:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800634c:	b29b      	uxth	r3, r3
 800634e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006360:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	d01d      	beq.n	80063a8 <USB_ActivateEndpoint+0x600>
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	b29b      	uxth	r3, r3
 800637a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006382:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	441a      	add	r2, r3
 8006390:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800639c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	78db      	ldrb	r3, [r3, #3]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d024      	beq.n	80063fa <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	881b      	ldrh	r3, [r3, #0]
 80063bc:	b29b      	uxth	r3, r3
 80063be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80063ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80063ce:	f083 0320 	eor.w	r3, r3, #32
 80063d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	441a      	add	r2, r3
 80063e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80063e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	8013      	strh	r3, [r2, #0]
 80063f8:	e01d      	b.n	8006436 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	b29b      	uxth	r3, r3
 8006408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800640c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006410:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	441a      	add	r2, r3
 800641e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800642a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800642e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006432:	b29b      	uxth	r3, r3
 8006434:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	b29b      	uxth	r3, r3
 8006444:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800644c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	441a      	add	r2, r3
 8006458:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800645a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800645e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800646a:	b29b      	uxth	r3, r3
 800646c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800646e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006472:	4618      	mov	r0, r3
 8006474:	376c      	adds	r7, #108	; 0x6c
 8006476:	46bd      	mov	sp, r7
 8006478:	bc80      	pop	{r7}
 800647a:	4770      	bx	lr

0800647c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800647c:	b480      	push	{r7}
 800647e:	b08d      	sub	sp, #52	; 0x34
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	7b1b      	ldrb	r3, [r3, #12]
 800648a:	2b00      	cmp	r3, #0
 800648c:	f040 808e 	bne.w	80065ac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	785b      	ldrb	r3, [r3, #1]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d044      	beq.n	8006522 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	81bb      	strh	r3, [r7, #12]
 80064a6:	89bb      	ldrh	r3, [r7, #12]
 80064a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d01b      	beq.n	80064e8 <USB_DeactivateEndpoint+0x6c>
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c6:	817b      	strh	r3, [r7, #10]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	441a      	add	r2, r3
 80064d2:	897b      	ldrh	r3, [r7, #10]
 80064d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064fe:	813b      	strh	r3, [r7, #8]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	441a      	add	r2, r3
 800650a:	893b      	ldrh	r3, [r7, #8]
 800650c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800651c:	b29b      	uxth	r3, r3
 800651e:	8013      	strh	r3, [r2, #0]
 8006520:	e192      	b.n	8006848 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	827b      	strh	r3, [r7, #18]
 8006530:	8a7b      	ldrh	r3, [r7, #18]
 8006532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d01b      	beq.n	8006572 <USB_DeactivateEndpoint+0xf6>
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	b29b      	uxth	r3, r3
 8006548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800654c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006550:	823b      	strh	r3, [r7, #16]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	441a      	add	r2, r3
 800655c:	8a3b      	ldrh	r3, [r7, #16]
 800655e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006566:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800656a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656e:	b29b      	uxth	r3, r3
 8006570:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006588:	81fb      	strh	r3, [r7, #14]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	441a      	add	r2, r3
 8006594:	89fb      	ldrh	r3, [r7, #14]
 8006596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800659a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800659e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	8013      	strh	r3, [r2, #0]
 80065aa:	e14d      	b.n	8006848 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	785b      	ldrb	r3, [r3, #1]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f040 80a5 	bne.w	8006700 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	843b      	strh	r3, [r7, #32]
 80065c4:	8c3b      	ldrh	r3, [r7, #32]
 80065c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d01b      	beq.n	8006606 <USB_DeactivateEndpoint+0x18a>
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e4:	83fb      	strh	r3, [r7, #30]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	441a      	add	r2, r3
 80065f0:	8bfb      	ldrh	r3, [r7, #30]
 80065f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006602:	b29b      	uxth	r3, r3
 8006604:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	83bb      	strh	r3, [r7, #28]
 8006614:	8bbb      	ldrh	r3, [r7, #28]
 8006616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661a:	2b00      	cmp	r3, #0
 800661c:	d01b      	beq.n	8006656 <USB_DeactivateEndpoint+0x1da>
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4413      	add	r3, r2
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	b29b      	uxth	r3, r3
 800662c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006634:	837b      	strh	r3, [r7, #26]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	441a      	add	r2, r3
 8006640:	8b7b      	ldrh	r3, [r7, #26]
 8006642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800664a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800664e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006652:	b29b      	uxth	r3, r3
 8006654:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	b29b      	uxth	r3, r3
 8006664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666c:	833b      	strh	r3, [r7, #24]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	441a      	add	r2, r3
 8006678:	8b3b      	ldrh	r3, [r7, #24]
 800667a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800667e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006686:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800668a:	b29b      	uxth	r3, r3
 800668c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	b29b      	uxth	r3, r3
 800669c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a4:	82fb      	strh	r3, [r7, #22]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	441a      	add	r2, r3
 80066b0:	8afb      	ldrh	r3, [r7, #22]
 80066b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066dc:	82bb      	strh	r3, [r7, #20]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	441a      	add	r2, r3
 80066e8:	8abb      	ldrh	r3, [r7, #20]
 80066ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	8013      	strh	r3, [r2, #0]
 80066fe:	e0a3      	b.n	8006848 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800670e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d01b      	beq.n	8006750 <USB_DeactivateEndpoint+0x2d4>
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	b29b      	uxth	r3, r3
 8006726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800672a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	441a      	add	r2, r3
 800673a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800673c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006744:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800674c:	b29b      	uxth	r3, r3
 800674e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800675e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006764:	2b00      	cmp	r3, #0
 8006766:	d01b      	beq.n	80067a0 <USB_DeactivateEndpoint+0x324>
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	b29b      	uxth	r3, r3
 8006776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800677a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	441a      	add	r2, r3
 800678a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800678c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006798:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800679c:	b29b      	uxth	r3, r3
 800679e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	881b      	ldrh	r3, [r3, #0]
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	441a      	add	r2, r3
 80067c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	441a      	add	r2, r3
 80067fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006800:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800680c:	b29b      	uxth	r3, r3
 800680e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29b      	uxth	r3, r3
 800681e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006826:	847b      	strh	r3, [r7, #34]	; 0x22
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	441a      	add	r2, r3
 8006832:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800683c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006844:	b29b      	uxth	r3, r3
 8006846:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3734      	adds	r7, #52	; 0x34
 800684e:	46bd      	mov	sp, r7
 8006850:	bc80      	pop	{r7}
 8006852:	4770      	bx	lr

08006854 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b0cc      	sub	sp, #304	; 0x130
 8006858:	af00      	add	r7, sp, #0
 800685a:	1d3b      	adds	r3, r7, #4
 800685c:	6018      	str	r0, [r3, #0]
 800685e:	463b      	mov	r3, r7
 8006860:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006862:	463b      	mov	r3, r7
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	785b      	ldrb	r3, [r3, #1]
 8006868:	2b01      	cmp	r3, #1
 800686a:	f040 872e 	bne.w	80076ca <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800686e:	463b      	mov	r3, r7
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	699a      	ldr	r2, [r3, #24]
 8006874:	463b      	mov	r3, r7
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	429a      	cmp	r2, r3
 800687c:	d905      	bls.n	800688a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800687e:	463b      	mov	r3, r7
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006888:	e004      	b.n	8006894 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800688a:	463b      	mov	r3, r7
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006894:	463b      	mov	r3, r7
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	7b1b      	ldrb	r3, [r3, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d134      	bne.n	8006908 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800689e:	463b      	mov	r3, r7
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6959      	ldr	r1, [r3, #20]
 80068a4:	463b      	mov	r3, r7
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	88da      	ldrh	r2, [r3, #6]
 80068aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	1d38      	adds	r0, r7, #4
 80068b2:	6800      	ldr	r0, [r0, #0]
 80068b4:	f001 fc03 	bl	80080be <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80068b8:	f107 0310 	add.w	r3, r7, #16
 80068bc:	1d3a      	adds	r2, r7, #4
 80068be:	6812      	ldr	r2, [r2, #0]
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	1d3b      	adds	r3, r7, #4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	4619      	mov	r1, r3
 80068ce:	f107 0310 	add.w	r3, r7, #16
 80068d2:	f107 0210 	add.w	r2, r7, #16
 80068d6:	6812      	ldr	r2, [r2, #0]
 80068d8:	440a      	add	r2, r1
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	463b      	mov	r3, r7
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	011a      	lsls	r2, r3, #4
 80068e4:	f107 0310 	add.w	r3, r7, #16
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4413      	add	r3, r2
 80068ec:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80068f0:	f107 030c 	add.w	r3, r7, #12
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	f107 030c 	add.w	r3, r7, #12
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	801a      	strh	r2, [r3, #0]
 8006904:	f000 beac 	b.w	8007660 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006908:	463b      	mov	r3, r7
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	78db      	ldrb	r3, [r3, #3]
 800690e:	2b02      	cmp	r3, #2
 8006910:	f040 838c 	bne.w	800702c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006914:	463b      	mov	r3, r7
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6a1a      	ldr	r2, [r3, #32]
 800691a:	463b      	mov	r3, r7
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	429a      	cmp	r2, r3
 8006922:	f240 8330 	bls.w	8006f86 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006926:	1d3b      	adds	r3, r7, #4
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	463b      	mov	r3, r7
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	b29b      	uxth	r3, r3
 8006938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800693c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006940:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006944:	1d3b      	adds	r3, r7, #4
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	463b      	mov	r3, r7
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	441a      	add	r2, r3
 8006952:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800695a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800695e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006966:	b29b      	uxth	r3, r3
 8006968:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800696a:	463b      	mov	r3, r7
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6a1a      	ldr	r2, [r3, #32]
 8006970:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006974:	1ad2      	subs	r2, r2, r3
 8006976:	463b      	mov	r3, r7
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800697c:	1d3b      	adds	r3, r7, #4
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	463b      	mov	r3, r7
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	b29b      	uxth	r3, r3
 800698e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 819e 	beq.w	8006cd4 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006998:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800699c:	1d3a      	adds	r2, r7, #4
 800699e:	6812      	ldr	r2, [r2, #0]
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	463b      	mov	r3, r7
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	785b      	ldrb	r3, [r3, #1]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d17a      	bne.n	8006aa2 <USB_EPStartXfer+0x24e>
 80069ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069b0:	1d3a      	adds	r2, r7, #4
 80069b2:	6812      	ldr	r2, [r2, #0]
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	1d3b      	adds	r3, r7, #4
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069be:	b29b      	uxth	r3, r3
 80069c0:	4619      	mov	r1, r3
 80069c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80069ca:	6812      	ldr	r2, [r2, #0]
 80069cc:	440a      	add	r2, r1
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	463b      	mov	r3, r7
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	011a      	lsls	r2, r3, #4
 80069d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4413      	add	r3, r2
 80069e0:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80069e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d11a      	bne.n	8006a28 <USB_EPStartXfer+0x1d4>
 80069f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	801a      	strh	r2, [r3, #0]
 8006a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	801a      	strh	r2, [r3, #0]
 8006a26:	e062      	b.n	8006aee <USB_EPStartXfer+0x29a>
 8006a28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a2c:	2b3e      	cmp	r3, #62	; 0x3e
 8006a2e:	d819      	bhi.n	8006a64 <USB_EPStartXfer+0x210>
 8006a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a34:	085b      	lsrs	r3, r3, #1
 8006a36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d004      	beq.n	8006a50 <USB_EPStartXfer+0x1fc>
 8006a46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	029b      	lsls	r3, r3, #10
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	801a      	strh	r2, [r3, #0]
 8006a62:	e044      	b.n	8006aee <USB_EPStartXfer+0x29a>
 8006a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a68:	095b      	lsrs	r3, r3, #5
 8006a6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a72:	f003 031f 	and.w	r3, r3, #31
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d104      	bne.n	8006a84 <USB_EPStartXfer+0x230>
 8006a7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	029b      	lsls	r3, r3, #10
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	801a      	strh	r2, [r3, #0]
 8006aa0:	e025      	b.n	8006aee <USB_EPStartXfer+0x29a>
 8006aa2:	463b      	mov	r3, r7
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	785b      	ldrb	r3, [r3, #1]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d120      	bne.n	8006aee <USB_EPStartXfer+0x29a>
 8006aac:	1d3b      	adds	r3, r7, #4
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006abc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006ac0:	6812      	ldr	r2, [r2, #0]
 8006ac2:	440a      	add	r2, r1
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	463b      	mov	r3, r7
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	011a      	lsls	r2, r3, #4
 8006ace:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006ada:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ade:	601a      	str	r2, [r3, #0]
 8006ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006aee:	463b      	mov	r3, r7
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	895b      	ldrh	r3, [r3, #10]
 8006af4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006af8:	463b      	mov	r3, r7
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6959      	ldr	r1, [r3, #20]
 8006afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006b08:	1d38      	adds	r0, r7, #4
 8006b0a:	6800      	ldr	r0, [r0, #0]
 8006b0c:	f001 fad7 	bl	80080be <USB_WritePMA>
            ep->xfer_buff += len;
 8006b10:	463b      	mov	r3, r7
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	695a      	ldr	r2, [r3, #20]
 8006b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b1a:	441a      	add	r2, r3
 8006b1c:	463b      	mov	r3, r7
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b22:	463b      	mov	r3, r7
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6a1a      	ldr	r2, [r3, #32]
 8006b28:	463b      	mov	r3, r7
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d909      	bls.n	8006b46 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8006b32:	463b      	mov	r3, r7
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6a1a      	ldr	r2, [r3, #32]
 8006b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b3c:	1ad2      	subs	r2, r2, r3
 8006b3e:	463b      	mov	r3, r7
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	621a      	str	r2, [r3, #32]
 8006b44:	e008      	b.n	8006b58 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b46:	463b      	mov	r3, r7
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006b50:	463b      	mov	r3, r7
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2200      	movs	r2, #0
 8006b56:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b58:	463b      	mov	r3, r7
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	785b      	ldrb	r3, [r3, #1]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d17a      	bne.n	8006c58 <USB_EPStartXfer+0x404>
 8006b62:	f107 0318 	add.w	r3, r7, #24
 8006b66:	1d3a      	adds	r2, r7, #4
 8006b68:	6812      	ldr	r2, [r2, #0]
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	1d3b      	adds	r3, r7, #4
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	4619      	mov	r1, r3
 8006b78:	f107 0318 	add.w	r3, r7, #24
 8006b7c:	f107 0218 	add.w	r2, r7, #24
 8006b80:	6812      	ldr	r2, [r2, #0]
 8006b82:	440a      	add	r2, r1
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	463b      	mov	r3, r7
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	011a      	lsls	r2, r3, #4
 8006b8e:	f107 0318 	add.w	r3, r7, #24
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4413      	add	r3, r2
 8006b96:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006b9a:	f107 0314 	add.w	r3, r7, #20
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d11a      	bne.n	8006bde <USB_EPStartXfer+0x38a>
 8006ba8:	f107 0314 	add.w	r3, r7, #20
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	f107 0314 	add.w	r3, r7, #20
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	801a      	strh	r2, [r3, #0]
 8006bc0:	f107 0314 	add.w	r3, r7, #20
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	f107 0314 	add.w	r3, r7, #20
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	801a      	strh	r2, [r3, #0]
 8006bdc:	e067      	b.n	8006cae <USB_EPStartXfer+0x45a>
 8006bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006be2:	2b3e      	cmp	r3, #62	; 0x3e
 8006be4:	d819      	bhi.n	8006c1a <USB_EPStartXfer+0x3c6>
 8006be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006bf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d004      	beq.n	8006c06 <USB_EPStartXfer+0x3b2>
 8006bfc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006c00:	3301      	adds	r3, #1
 8006c02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006c06:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	029b      	lsls	r3, r3, #10
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	f107 0314 	add.w	r3, r7, #20
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	801a      	strh	r2, [r3, #0]
 8006c18:	e049      	b.n	8006cae <USB_EPStartXfer+0x45a>
 8006c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c1e:	095b      	lsrs	r3, r3, #5
 8006c20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c28:	f003 031f 	and.w	r3, r3, #31
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d104      	bne.n	8006c3a <USB_EPStartXfer+0x3e6>
 8006c30:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006c34:	3b01      	subs	r3, #1
 8006c36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006c3a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	029b      	lsls	r3, r3, #10
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	f107 0314 	add.w	r3, r7, #20
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	801a      	strh	r2, [r3, #0]
 8006c56:	e02a      	b.n	8006cae <USB_EPStartXfer+0x45a>
 8006c58:	463b      	mov	r3, r7
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	785b      	ldrb	r3, [r3, #1]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d125      	bne.n	8006cae <USB_EPStartXfer+0x45a>
 8006c62:	f107 0320 	add.w	r3, r7, #32
 8006c66:	1d3a      	adds	r2, r7, #4
 8006c68:	6812      	ldr	r2, [r2, #0]
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	1d3b      	adds	r3, r7, #4
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	4619      	mov	r1, r3
 8006c78:	f107 0320 	add.w	r3, r7, #32
 8006c7c:	f107 0220 	add.w	r2, r7, #32
 8006c80:	6812      	ldr	r2, [r2, #0]
 8006c82:	440a      	add	r2, r1
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	463b      	mov	r3, r7
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	011a      	lsls	r2, r3, #4
 8006c8e:	f107 0320 	add.w	r3, r7, #32
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4413      	add	r3, r2
 8006c96:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006c9a:	f107 031c 	add.w	r3, r7, #28
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	f107 031c 	add.w	r3, r7, #28
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006cae:	463b      	mov	r3, r7
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	891b      	ldrh	r3, [r3, #8]
 8006cb4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cb8:	463b      	mov	r3, r7
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6959      	ldr	r1, [r3, #20]
 8006cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006cc8:	1d38      	adds	r0, r7, #4
 8006cca:	6800      	ldr	r0, [r0, #0]
 8006ccc:	f001 f9f7 	bl	80080be <USB_WritePMA>
 8006cd0:	f000 bcc6 	b.w	8007660 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cd4:	463b      	mov	r3, r7
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	785b      	ldrb	r3, [r3, #1]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d164      	bne.n	8006da8 <USB_EPStartXfer+0x554>
 8006cde:	1d3b      	adds	r3, r7, #4
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ce4:	1d3b      	adds	r3, r7, #4
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	461a      	mov	r2, r3
 8006cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cf2:	4413      	add	r3, r2
 8006cf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	011a      	lsls	r2, r3, #4
 8006cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d00:	4413      	add	r3, r2
 8006d02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d06:	647b      	str	r3, [r7, #68]	; 0x44
 8006d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d112      	bne.n	8006d36 <USB_EPStartXfer+0x4e2>
 8006d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d1e:	801a      	strh	r2, [r3, #0]
 8006d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d32:	801a      	strh	r2, [r3, #0]
 8006d34:	e057      	b.n	8006de6 <USB_EPStartXfer+0x592>
 8006d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d3a:	2b3e      	cmp	r3, #62	; 0x3e
 8006d3c:	d817      	bhi.n	8006d6e <USB_EPStartXfer+0x51a>
 8006d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d42:	085b      	lsrs	r3, r3, #1
 8006d44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d004      	beq.n	8006d5e <USB_EPStartXfer+0x50a>
 8006d54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d58:	3301      	adds	r3, #1
 8006d5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	029b      	lsls	r3, r3, #10
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d6a:	801a      	strh	r2, [r3, #0]
 8006d6c:	e03b      	b.n	8006de6 <USB_EPStartXfer+0x592>
 8006d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d72:	095b      	lsrs	r3, r3, #5
 8006d74:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d7c:	f003 031f 	and.w	r3, r3, #31
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d104      	bne.n	8006d8e <USB_EPStartXfer+0x53a>
 8006d84:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	029b      	lsls	r3, r3, #10
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006da4:	801a      	strh	r2, [r3, #0]
 8006da6:	e01e      	b.n	8006de6 <USB_EPStartXfer+0x592>
 8006da8:	463b      	mov	r3, r7
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	785b      	ldrb	r3, [r3, #1]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d119      	bne.n	8006de6 <USB_EPStartXfer+0x592>
 8006db2:	1d3b      	adds	r3, r7, #4
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	653b      	str	r3, [r7, #80]	; 0x50
 8006db8:	1d3b      	adds	r3, r7, #4
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc6:	4413      	add	r3, r2
 8006dc8:	653b      	str	r3, [r7, #80]	; 0x50
 8006dca:	463b      	mov	r3, r7
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	011a      	lsls	r2, r3, #4
 8006dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006de4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006de6:	463b      	mov	r3, r7
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	891b      	ldrh	r3, [r3, #8]
 8006dec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006df0:	463b      	mov	r3, r7
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6959      	ldr	r1, [r3, #20]
 8006df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006e00:	1d38      	adds	r0, r7, #4
 8006e02:	6800      	ldr	r0, [r0, #0]
 8006e04:	f001 f95b 	bl	80080be <USB_WritePMA>
            ep->xfer_buff += len;
 8006e08:	463b      	mov	r3, r7
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	695a      	ldr	r2, [r3, #20]
 8006e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e12:	441a      	add	r2, r3
 8006e14:	463b      	mov	r3, r7
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e1a:	463b      	mov	r3, r7
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6a1a      	ldr	r2, [r3, #32]
 8006e20:	463b      	mov	r3, r7
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d909      	bls.n	8006e3e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8006e2a:	463b      	mov	r3, r7
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6a1a      	ldr	r2, [r3, #32]
 8006e30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e34:	1ad2      	subs	r2, r2, r3
 8006e36:	463b      	mov	r3, r7
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	621a      	str	r2, [r3, #32]
 8006e3c:	e008      	b.n	8006e50 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e3e:	463b      	mov	r3, r7
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006e48:	463b      	mov	r3, r7
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e50:	1d3b      	adds	r3, r7, #4
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	643b      	str	r3, [r7, #64]	; 0x40
 8006e56:	463b      	mov	r3, r7
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	785b      	ldrb	r3, [r3, #1]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d164      	bne.n	8006f2a <USB_EPStartXfer+0x6d6>
 8006e60:	1d3b      	adds	r3, r7, #4
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e66:	1d3b      	adds	r3, r7, #4
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	461a      	mov	r2, r3
 8006e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e74:	4413      	add	r3, r2
 8006e76:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e78:	463b      	mov	r3, r7
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	011a      	lsls	r2, r3, #4
 8006e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e82:	4413      	add	r3, r2
 8006e84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e88:	637b      	str	r3, [r7, #52]	; 0x34
 8006e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d112      	bne.n	8006eb8 <USB_EPStartXfer+0x664>
 8006e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea0:	801a      	strh	r2, [r3, #0]
 8006ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb4:	801a      	strh	r2, [r3, #0]
 8006eb6:	e054      	b.n	8006f62 <USB_EPStartXfer+0x70e>
 8006eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ebc:	2b3e      	cmp	r3, #62	; 0x3e
 8006ebe:	d817      	bhi.n	8006ef0 <USB_EPStartXfer+0x69c>
 8006ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ec4:	085b      	lsrs	r3, r3, #1
 8006ec6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d004      	beq.n	8006ee0 <USB_EPStartXfer+0x68c>
 8006ed6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006eda:	3301      	adds	r3, #1
 8006edc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006ee0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	029b      	lsls	r3, r3, #10
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eec:	801a      	strh	r2, [r3, #0]
 8006eee:	e038      	b.n	8006f62 <USB_EPStartXfer+0x70e>
 8006ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ef4:	095b      	lsrs	r3, r3, #5
 8006ef6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006efe:	f003 031f 	and.w	r3, r3, #31
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d104      	bne.n	8006f10 <USB_EPStartXfer+0x6bc>
 8006f06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006f10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	029b      	lsls	r3, r3, #10
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f26:	801a      	strh	r2, [r3, #0]
 8006f28:	e01b      	b.n	8006f62 <USB_EPStartXfer+0x70e>
 8006f2a:	463b      	mov	r3, r7
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	785b      	ldrb	r3, [r3, #1]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d116      	bne.n	8006f62 <USB_EPStartXfer+0x70e>
 8006f34:	1d3b      	adds	r3, r7, #4
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	461a      	mov	r2, r3
 8006f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f42:	4413      	add	r3, r2
 8006f44:	643b      	str	r3, [r7, #64]	; 0x40
 8006f46:	463b      	mov	r3, r7
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	011a      	lsls	r2, r3, #4
 8006f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f50:	4413      	add	r3, r2
 8006f52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f62:	463b      	mov	r3, r7
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	895b      	ldrh	r3, [r3, #10]
 8006f68:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f6c:	463b      	mov	r3, r7
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6959      	ldr	r1, [r3, #20]
 8006f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f7c:	1d38      	adds	r0, r7, #4
 8006f7e:	6800      	ldr	r0, [r0, #0]
 8006f80:	f001 f89d 	bl	80080be <USB_WritePMA>
 8006f84:	e36c      	b.n	8007660 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006f86:	463b      	mov	r3, r7
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006f90:	1d3b      	adds	r3, r7, #4
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	463b      	mov	r3, r7
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006faa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006fae:	1d3b      	adds	r3, r7, #4
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	463b      	mov	r3, r7
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	441a      	add	r2, r3
 8006fbc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006fd4:	1d3b      	adds	r3, r7, #4
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fda:	1d3b      	adds	r3, r7, #4
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fe8:	4413      	add	r3, r2
 8006fea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fec:	463b      	mov	r3, r7
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	011a      	lsls	r2, r3, #4
 8006ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ffc:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007002:	b29a      	uxth	r2, r3
 8007004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007006:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007008:	463b      	mov	r3, r7
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	891b      	ldrh	r3, [r3, #8]
 800700e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007012:	463b      	mov	r3, r7
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6959      	ldr	r1, [r3, #20]
 8007018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800701c:	b29b      	uxth	r3, r3
 800701e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007022:	1d38      	adds	r0, r7, #4
 8007024:	6800      	ldr	r0, [r0, #0]
 8007026:	f001 f84a 	bl	80080be <USB_WritePMA>
 800702a:	e319      	b.n	8007660 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800702c:	1d3b      	adds	r3, r7, #4
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	463b      	mov	r3, r7
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	b29b      	uxth	r3, r3
 800703e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007046:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800704a:	1d3b      	adds	r3, r7, #4
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	463b      	mov	r3, r7
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	441a      	add	r2, r3
 8007058:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800705c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007064:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800706c:	b29b      	uxth	r3, r3
 800706e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007070:	463b      	mov	r3, r7
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6a1a      	ldr	r2, [r3, #32]
 8007076:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800707a:	1ad2      	subs	r2, r2, r3
 800707c:	463b      	mov	r3, r7
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007082:	1d3b      	adds	r3, r7, #4
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	463b      	mov	r3, r7
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	b29b      	uxth	r3, r3
 8007094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 8162 	beq.w	8007362 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800709e:	1d3b      	adds	r3, r7, #4
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070a6:	463b      	mov	r3, r7
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	785b      	ldrb	r3, [r3, #1]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d164      	bne.n	800717a <USB_EPStartXfer+0x926>
 80070b0:	1d3b      	adds	r3, r7, #4
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80070b6:	1d3b      	adds	r3, r7, #4
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070be:	b29b      	uxth	r3, r3
 80070c0:	461a      	mov	r2, r3
 80070c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070c4:	4413      	add	r3, r2
 80070c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80070c8:	463b      	mov	r3, r7
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	011a      	lsls	r2, r3, #4
 80070d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070d2:	4413      	add	r3, r2
 80070d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070d8:	677b      	str	r3, [r7, #116]	; 0x74
 80070da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d112      	bne.n	8007108 <USB_EPStartXfer+0x8b4>
 80070e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070f0:	801a      	strh	r2, [r3, #0]
 80070f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070f4:	881b      	ldrh	r3, [r3, #0]
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007100:	b29a      	uxth	r2, r3
 8007102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007104:	801a      	strh	r2, [r3, #0]
 8007106:	e057      	b.n	80071b8 <USB_EPStartXfer+0x964>
 8007108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800710c:	2b3e      	cmp	r3, #62	; 0x3e
 800710e:	d817      	bhi.n	8007140 <USB_EPStartXfer+0x8ec>
 8007110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007114:	085b      	lsrs	r3, r3, #1
 8007116:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800711a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d004      	beq.n	8007130 <USB_EPStartXfer+0x8dc>
 8007126:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800712a:	3301      	adds	r3, #1
 800712c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007130:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007134:	b29b      	uxth	r3, r3
 8007136:	029b      	lsls	r3, r3, #10
 8007138:	b29a      	uxth	r2, r3
 800713a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800713c:	801a      	strh	r2, [r3, #0]
 800713e:	e03b      	b.n	80071b8 <USB_EPStartXfer+0x964>
 8007140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007144:	095b      	lsrs	r3, r3, #5
 8007146:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800714a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800714e:	f003 031f 	and.w	r3, r3, #31
 8007152:	2b00      	cmp	r3, #0
 8007154:	d104      	bne.n	8007160 <USB_EPStartXfer+0x90c>
 8007156:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800715a:	3b01      	subs	r3, #1
 800715c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007160:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007164:	b29b      	uxth	r3, r3
 8007166:	029b      	lsls	r3, r3, #10
 8007168:	b29b      	uxth	r3, r3
 800716a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800716e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007172:	b29a      	uxth	r2, r3
 8007174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007176:	801a      	strh	r2, [r3, #0]
 8007178:	e01e      	b.n	80071b8 <USB_EPStartXfer+0x964>
 800717a:	463b      	mov	r3, r7
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	785b      	ldrb	r3, [r3, #1]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d119      	bne.n	80071b8 <USB_EPStartXfer+0x964>
 8007184:	1d3b      	adds	r3, r7, #4
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800718c:	b29b      	uxth	r3, r3
 800718e:	461a      	mov	r2, r3
 8007190:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007194:	4413      	add	r3, r2
 8007196:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800719a:	463b      	mov	r3, r7
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	011a      	lsls	r2, r3, #4
 80071a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80071a6:	4413      	add	r3, r2
 80071a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80071ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80071b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80071b8:	463b      	mov	r3, r7
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	895b      	ldrh	r3, [r3, #10]
 80071be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071c2:	463b      	mov	r3, r7
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6959      	ldr	r1, [r3, #20]
 80071c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80071d2:	1d38      	adds	r0, r7, #4
 80071d4:	6800      	ldr	r0, [r0, #0]
 80071d6:	f000 ff72 	bl	80080be <USB_WritePMA>
          ep->xfer_buff += len;
 80071da:	463b      	mov	r3, r7
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	695a      	ldr	r2, [r3, #20]
 80071e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071e4:	441a      	add	r2, r3
 80071e6:	463b      	mov	r3, r7
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80071ec:	463b      	mov	r3, r7
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6a1a      	ldr	r2, [r3, #32]
 80071f2:	463b      	mov	r3, r7
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d909      	bls.n	8007210 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80071fc:	463b      	mov	r3, r7
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6a1a      	ldr	r2, [r3, #32]
 8007202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007206:	1ad2      	subs	r2, r2, r3
 8007208:	463b      	mov	r3, r7
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	621a      	str	r2, [r3, #32]
 800720e:	e008      	b.n	8007222 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8007210:	463b      	mov	r3, r7
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800721a:	463b      	mov	r3, r7
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2200      	movs	r2, #0
 8007220:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 821a 	beq.w	8007660 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800722c:	463b      	mov	r3, r7
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	785b      	ldrb	r3, [r3, #1]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d164      	bne.n	8007300 <USB_EPStartXfer+0xaac>
 8007236:	1d3b      	adds	r3, r7, #4
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	66bb      	str	r3, [r7, #104]	; 0x68
 800723c:	1d3b      	adds	r3, r7, #4
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007244:	b29b      	uxth	r3, r3
 8007246:	461a      	mov	r2, r3
 8007248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800724a:	4413      	add	r3, r2
 800724c:	66bb      	str	r3, [r7, #104]	; 0x68
 800724e:	463b      	mov	r3, r7
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	011a      	lsls	r2, r3, #4
 8007256:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007258:	4413      	add	r3, r2
 800725a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800725e:	667b      	str	r3, [r7, #100]	; 0x64
 8007260:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007264:	2b00      	cmp	r3, #0
 8007266:	d112      	bne.n	800728e <USB_EPStartXfer+0xa3a>
 8007268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	b29b      	uxth	r3, r3
 800726e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007272:	b29a      	uxth	r2, r3
 8007274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800727a:	881b      	ldrh	r3, [r3, #0]
 800727c:	b29b      	uxth	r3, r3
 800727e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007286:	b29a      	uxth	r2, r3
 8007288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800728a:	801a      	strh	r2, [r3, #0]
 800728c:	e057      	b.n	800733e <USB_EPStartXfer+0xaea>
 800728e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007292:	2b3e      	cmp	r3, #62	; 0x3e
 8007294:	d817      	bhi.n	80072c6 <USB_EPStartXfer+0xa72>
 8007296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800729a:	085b      	lsrs	r3, r3, #1
 800729c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80072a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d004      	beq.n	80072b6 <USB_EPStartXfer+0xa62>
 80072ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072b0:	3301      	adds	r3, #1
 80072b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80072b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	029b      	lsls	r3, r3, #10
 80072be:	b29a      	uxth	r2, r3
 80072c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072c2:	801a      	strh	r2, [r3, #0]
 80072c4:	e03b      	b.n	800733e <USB_EPStartXfer+0xaea>
 80072c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ca:	095b      	lsrs	r3, r3, #5
 80072cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80072d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d4:	f003 031f 	and.w	r3, r3, #31
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d104      	bne.n	80072e6 <USB_EPStartXfer+0xa92>
 80072dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072e0:	3b01      	subs	r3, #1
 80072e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80072e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	029b      	lsls	r3, r3, #10
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072fc:	801a      	strh	r2, [r3, #0]
 80072fe:	e01e      	b.n	800733e <USB_EPStartXfer+0xaea>
 8007300:	463b      	mov	r3, r7
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	785b      	ldrb	r3, [r3, #1]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d119      	bne.n	800733e <USB_EPStartXfer+0xaea>
 800730a:	1d3b      	adds	r3, r7, #4
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	673b      	str	r3, [r7, #112]	; 0x70
 8007310:	1d3b      	adds	r3, r7, #4
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007318:	b29b      	uxth	r3, r3
 800731a:	461a      	mov	r2, r3
 800731c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800731e:	4413      	add	r3, r2
 8007320:	673b      	str	r3, [r7, #112]	; 0x70
 8007322:	463b      	mov	r3, r7
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	011a      	lsls	r2, r3, #4
 800732a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800732c:	4413      	add	r3, r2
 800732e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007332:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007338:	b29a      	uxth	r2, r3
 800733a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800733e:	463b      	mov	r3, r7
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	891b      	ldrh	r3, [r3, #8]
 8007344:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007348:	463b      	mov	r3, r7
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6959      	ldr	r1, [r3, #20]
 800734e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007352:	b29b      	uxth	r3, r3
 8007354:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007358:	1d38      	adds	r0, r7, #4
 800735a:	6800      	ldr	r0, [r0, #0]
 800735c:	f000 feaf 	bl	80080be <USB_WritePMA>
 8007360:	e17e      	b.n	8007660 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007362:	463b      	mov	r3, r7
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	785b      	ldrb	r3, [r3, #1]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d16f      	bne.n	800744c <USB_EPStartXfer+0xbf8>
 800736c:	1d3b      	adds	r3, r7, #4
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007374:	1d3b      	adds	r3, r7, #4
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800737c:	b29b      	uxth	r3, r3
 800737e:	461a      	mov	r2, r3
 8007380:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007384:	4413      	add	r3, r2
 8007386:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800738a:	463b      	mov	r3, r7
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	011a      	lsls	r2, r3, #4
 8007392:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007396:	4413      	add	r3, r2
 8007398:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800739c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80073a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d116      	bne.n	80073d6 <USB_EPStartXfer+0xb82>
 80073a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073ac:	881b      	ldrh	r3, [r3, #0]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073ba:	801a      	strh	r2, [r3, #0]
 80073bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073d2:	801a      	strh	r2, [r3, #0]
 80073d4:	e05f      	b.n	8007496 <USB_EPStartXfer+0xc42>
 80073d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073da:	2b3e      	cmp	r3, #62	; 0x3e
 80073dc:	d818      	bhi.n	8007410 <USB_EPStartXfer+0xbbc>
 80073de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073e2:	085b      	lsrs	r3, r3, #1
 80073e4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80073e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d004      	beq.n	80073fe <USB_EPStartXfer+0xbaa>
 80073f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80073f8:	3301      	adds	r3, #1
 80073fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80073fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007402:	b29b      	uxth	r3, r3
 8007404:	029b      	lsls	r3, r3, #10
 8007406:	b29a      	uxth	r2, r3
 8007408:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800740c:	801a      	strh	r2, [r3, #0]
 800740e:	e042      	b.n	8007496 <USB_EPStartXfer+0xc42>
 8007410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007414:	095b      	lsrs	r3, r3, #5
 8007416:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800741a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800741e:	f003 031f 	and.w	r3, r3, #31
 8007422:	2b00      	cmp	r3, #0
 8007424:	d104      	bne.n	8007430 <USB_EPStartXfer+0xbdc>
 8007426:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800742a:	3b01      	subs	r3, #1
 800742c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007430:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007434:	b29b      	uxth	r3, r3
 8007436:	029b      	lsls	r3, r3, #10
 8007438:	b29b      	uxth	r3, r3
 800743a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800743e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007442:	b29a      	uxth	r2, r3
 8007444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007448:	801a      	strh	r2, [r3, #0]
 800744a:	e024      	b.n	8007496 <USB_EPStartXfer+0xc42>
 800744c:	463b      	mov	r3, r7
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	785b      	ldrb	r3, [r3, #1]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d11f      	bne.n	8007496 <USB_EPStartXfer+0xc42>
 8007456:	1d3b      	adds	r3, r7, #4
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800745e:	1d3b      	adds	r3, r7, #4
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007466:	b29b      	uxth	r3, r3
 8007468:	461a      	mov	r2, r3
 800746a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800746e:	4413      	add	r3, r2
 8007470:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007474:	463b      	mov	r3, r7
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	011a      	lsls	r2, r3, #4
 800747c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007480:	4413      	add	r3, r2
 8007482:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007486:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800748a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800748e:	b29a      	uxth	r2, r3
 8007490:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007494:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007496:	463b      	mov	r3, r7
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	891b      	ldrh	r3, [r3, #8]
 800749c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074a0:	463b      	mov	r3, r7
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6959      	ldr	r1, [r3, #20]
 80074a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80074b0:	1d38      	adds	r0, r7, #4
 80074b2:	6800      	ldr	r0, [r0, #0]
 80074b4:	f000 fe03 	bl	80080be <USB_WritePMA>
          ep->xfer_buff += len;
 80074b8:	463b      	mov	r3, r7
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	695a      	ldr	r2, [r3, #20]
 80074be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074c2:	441a      	add	r2, r3
 80074c4:	463b      	mov	r3, r7
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80074ca:	463b      	mov	r3, r7
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6a1a      	ldr	r2, [r3, #32]
 80074d0:	463b      	mov	r3, r7
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d909      	bls.n	80074ee <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80074da:	463b      	mov	r3, r7
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6a1a      	ldr	r2, [r3, #32]
 80074e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e4:	1ad2      	subs	r2, r2, r3
 80074e6:	463b      	mov	r3, r7
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	621a      	str	r2, [r3, #32]
 80074ec:	e008      	b.n	8007500 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80074ee:	463b      	mov	r3, r7
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6a1b      	ldr	r3, [r3, #32]
 80074f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80074f8:	463b      	mov	r3, r7
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2200      	movs	r2, #0
 80074fe:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007504:	2b00      	cmp	r3, #0
 8007506:	f000 80ab 	beq.w	8007660 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800750a:	1d3b      	adds	r3, r7, #4
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007512:	463b      	mov	r3, r7
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	785b      	ldrb	r3, [r3, #1]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d16f      	bne.n	80075fc <USB_EPStartXfer+0xda8>
 800751c:	1d3b      	adds	r3, r7, #4
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007524:	1d3b      	adds	r3, r7, #4
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800752c:	b29b      	uxth	r3, r3
 800752e:	461a      	mov	r2, r3
 8007530:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007534:	4413      	add	r3, r2
 8007536:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800753a:	463b      	mov	r3, r7
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	011a      	lsls	r2, r3, #4
 8007542:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007546:	4413      	add	r3, r2
 8007548:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800754c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007554:	2b00      	cmp	r3, #0
 8007556:	d116      	bne.n	8007586 <USB_EPStartXfer+0xd32>
 8007558:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	b29b      	uxth	r3, r3
 8007560:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007564:	b29a      	uxth	r2, r3
 8007566:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800756a:	801a      	strh	r2, [r3, #0]
 800756c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007570:	881b      	ldrh	r3, [r3, #0]
 8007572:	b29b      	uxth	r3, r3
 8007574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800757c:	b29a      	uxth	r2, r3
 800757e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007582:	801a      	strh	r2, [r3, #0]
 8007584:	e05b      	b.n	800763e <USB_EPStartXfer+0xdea>
 8007586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800758a:	2b3e      	cmp	r3, #62	; 0x3e
 800758c:	d818      	bhi.n	80075c0 <USB_EPStartXfer+0xd6c>
 800758e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007592:	085b      	lsrs	r3, r3, #1
 8007594:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007598:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800759c:	f003 0301 	and.w	r3, r3, #1
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d004      	beq.n	80075ae <USB_EPStartXfer+0xd5a>
 80075a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075a8:	3301      	adds	r3, #1
 80075aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80075ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	029b      	lsls	r3, r3, #10
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075bc:	801a      	strh	r2, [r3, #0]
 80075be:	e03e      	b.n	800763e <USB_EPStartXfer+0xdea>
 80075c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075c4:	095b      	lsrs	r3, r3, #5
 80075c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80075ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ce:	f003 031f 	and.w	r3, r3, #31
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d104      	bne.n	80075e0 <USB_EPStartXfer+0xd8c>
 80075d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075da:	3b01      	subs	r3, #1
 80075dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80075e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	029b      	lsls	r3, r3, #10
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075f8:	801a      	strh	r2, [r3, #0]
 80075fa:	e020      	b.n	800763e <USB_EPStartXfer+0xdea>
 80075fc:	463b      	mov	r3, r7
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	785b      	ldrb	r3, [r3, #1]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d11b      	bne.n	800763e <USB_EPStartXfer+0xdea>
 8007606:	1d3b      	adds	r3, r7, #4
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800760e:	b29b      	uxth	r3, r3
 8007610:	461a      	mov	r2, r3
 8007612:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007616:	4413      	add	r3, r2
 8007618:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800761c:	463b      	mov	r3, r7
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	011a      	lsls	r2, r3, #4
 8007624:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007628:	4413      	add	r3, r2
 800762a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800762e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007632:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007636:	b29a      	uxth	r2, r3
 8007638:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800763c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800763e:	463b      	mov	r3, r7
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	895b      	ldrh	r3, [r3, #10]
 8007644:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007648:	463b      	mov	r3, r7
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6959      	ldr	r1, [r3, #20]
 800764e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007652:	b29b      	uxth	r3, r3
 8007654:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007658:	1d38      	adds	r0, r7, #4
 800765a:	6800      	ldr	r0, [r0, #0]
 800765c:	f000 fd2f 	bl	80080be <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007660:	1d3b      	adds	r3, r7, #4
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	463b      	mov	r3, r7
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	b29b      	uxth	r3, r3
 8007672:	f107 020a 	add.w	r2, r7, #10
 8007676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800767a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800767e:	8013      	strh	r3, [r2, #0]
 8007680:	f107 030a 	add.w	r3, r7, #10
 8007684:	f107 020a 	add.w	r2, r7, #10
 8007688:	8812      	ldrh	r2, [r2, #0]
 800768a:	f082 0210 	eor.w	r2, r2, #16
 800768e:	801a      	strh	r2, [r3, #0]
 8007690:	f107 030a 	add.w	r3, r7, #10
 8007694:	f107 020a 	add.w	r2, r7, #10
 8007698:	8812      	ldrh	r2, [r2, #0]
 800769a:	f082 0220 	eor.w	r2, r2, #32
 800769e:	801a      	strh	r2, [r3, #0]
 80076a0:	1d3b      	adds	r3, r7, #4
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	463b      	mov	r3, r7
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	441a      	add	r2, r3
 80076ae:	f107 030a 	add.w	r3, r7, #10
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	8013      	strh	r3, [r2, #0]
 80076c8:	e3b5      	b.n	8007e36 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80076ca:	463b      	mov	r3, r7
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	7b1b      	ldrb	r3, [r3, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f040 8090 	bne.w	80077f6 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80076d6:	463b      	mov	r3, r7
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	699a      	ldr	r2, [r3, #24]
 80076dc:	463b      	mov	r3, r7
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d90e      	bls.n	8007704 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80076e6:	463b      	mov	r3, r7
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80076f0:	463b      	mov	r3, r7
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	699a      	ldr	r2, [r3, #24]
 80076f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076fa:	1ad2      	subs	r2, r2, r3
 80076fc:	463b      	mov	r3, r7
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	619a      	str	r2, [r3, #24]
 8007702:	e008      	b.n	8007716 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8007704:	463b      	mov	r3, r7
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800770e:	463b      	mov	r3, r7
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2200      	movs	r2, #0
 8007714:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007716:	1d3b      	adds	r3, r7, #4
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800771e:	1d3b      	adds	r3, r7, #4
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007726:	b29b      	uxth	r3, r3
 8007728:	461a      	mov	r2, r3
 800772a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800772e:	4413      	add	r3, r2
 8007730:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007734:	463b      	mov	r3, r7
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	011a      	lsls	r2, r3, #4
 800773c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007740:	4413      	add	r3, r2
 8007742:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007746:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800774a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800774e:	2b00      	cmp	r3, #0
 8007750:	d116      	bne.n	8007780 <USB_EPStartXfer+0xf2c>
 8007752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007756:	881b      	ldrh	r3, [r3, #0]
 8007758:	b29b      	uxth	r3, r3
 800775a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800775e:	b29a      	uxth	r2, r3
 8007760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007764:	801a      	strh	r2, [r3, #0]
 8007766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800776a:	881b      	ldrh	r3, [r3, #0]
 800776c:	b29b      	uxth	r3, r3
 800776e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007776:	b29a      	uxth	r2, r3
 8007778:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800777c:	801a      	strh	r2, [r3, #0]
 800777e:	e32c      	b.n	8007dda <USB_EPStartXfer+0x1586>
 8007780:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007784:	2b3e      	cmp	r3, #62	; 0x3e
 8007786:	d818      	bhi.n	80077ba <USB_EPStartXfer+0xf66>
 8007788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800778c:	085b      	lsrs	r3, r3, #1
 800778e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007792:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	2b00      	cmp	r3, #0
 800779c:	d004      	beq.n	80077a8 <USB_EPStartXfer+0xf54>
 800779e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077a2:	3301      	adds	r3, #1
 80077a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80077a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	029b      	lsls	r3, r3, #10
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077b6:	801a      	strh	r2, [r3, #0]
 80077b8:	e30f      	b.n	8007dda <USB_EPStartXfer+0x1586>
 80077ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077be:	095b      	lsrs	r3, r3, #5
 80077c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80077c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c8:	f003 031f 	and.w	r3, r3, #31
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d104      	bne.n	80077da <USB_EPStartXfer+0xf86>
 80077d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077d4:	3b01      	subs	r3, #1
 80077d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80077da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077de:	b29b      	uxth	r3, r3
 80077e0:	029b      	lsls	r3, r3, #10
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077f2:	801a      	strh	r2, [r3, #0]
 80077f4:	e2f1      	b.n	8007dda <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80077f6:	463b      	mov	r3, r7
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	78db      	ldrb	r3, [r3, #3]
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	f040 818f 	bne.w	8007b20 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007802:	463b      	mov	r3, r7
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	785b      	ldrb	r3, [r3, #1]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d175      	bne.n	80078f8 <USB_EPStartXfer+0x10a4>
 800780c:	1d3b      	adds	r3, r7, #4
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007814:	1d3b      	adds	r3, r7, #4
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800781c:	b29b      	uxth	r3, r3
 800781e:	461a      	mov	r2, r3
 8007820:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007824:	4413      	add	r3, r2
 8007826:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800782a:	463b      	mov	r3, r7
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	011a      	lsls	r2, r3, #4
 8007832:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007836:	4413      	add	r3, r2
 8007838:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800783c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007840:	463b      	mov	r3, r7
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d116      	bne.n	8007878 <USB_EPStartXfer+0x1024>
 800784a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	b29b      	uxth	r3, r3
 8007852:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007856:	b29a      	uxth	r2, r3
 8007858:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800785c:	801a      	strh	r2, [r3, #0]
 800785e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	b29b      	uxth	r3, r3
 8007866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800786a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800786e:	b29a      	uxth	r2, r3
 8007870:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007874:	801a      	strh	r2, [r3, #0]
 8007876:	e065      	b.n	8007944 <USB_EPStartXfer+0x10f0>
 8007878:	463b      	mov	r3, r7
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	2b3e      	cmp	r3, #62	; 0x3e
 8007880:	d81a      	bhi.n	80078b8 <USB_EPStartXfer+0x1064>
 8007882:	463b      	mov	r3, r7
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	085b      	lsrs	r3, r3, #1
 800788a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800788e:	463b      	mov	r3, r7
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	2b00      	cmp	r3, #0
 800789a:	d004      	beq.n	80078a6 <USB_EPStartXfer+0x1052>
 800789c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a0:	3301      	adds	r3, #1
 80078a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80078a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	029b      	lsls	r3, r3, #10
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078b4:	801a      	strh	r2, [r3, #0]
 80078b6:	e045      	b.n	8007944 <USB_EPStartXfer+0x10f0>
 80078b8:	463b      	mov	r3, r7
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	095b      	lsrs	r3, r3, #5
 80078c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80078c4:	463b      	mov	r3, r7
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	f003 031f 	and.w	r3, r3, #31
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d104      	bne.n	80078dc <USB_EPStartXfer+0x1088>
 80078d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078d6:	3b01      	subs	r3, #1
 80078d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80078dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	029b      	lsls	r3, r3, #10
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078f4:	801a      	strh	r2, [r3, #0]
 80078f6:	e025      	b.n	8007944 <USB_EPStartXfer+0x10f0>
 80078f8:	463b      	mov	r3, r7
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	785b      	ldrb	r3, [r3, #1]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d120      	bne.n	8007944 <USB_EPStartXfer+0x10f0>
 8007902:	1d3b      	adds	r3, r7, #4
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800790a:	1d3b      	adds	r3, r7, #4
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007912:	b29b      	uxth	r3, r3
 8007914:	461a      	mov	r2, r3
 8007916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800791a:	4413      	add	r3, r2
 800791c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007920:	463b      	mov	r3, r7
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	011a      	lsls	r2, r3, #4
 8007928:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800792c:	4413      	add	r3, r2
 800792e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007932:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007936:	463b      	mov	r3, r7
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	b29a      	uxth	r2, r3
 800793e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007942:	801a      	strh	r2, [r3, #0]
 8007944:	1d3b      	adds	r3, r7, #4
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800794c:	463b      	mov	r3, r7
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	785b      	ldrb	r3, [r3, #1]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d175      	bne.n	8007a42 <USB_EPStartXfer+0x11ee>
 8007956:	1d3b      	adds	r3, r7, #4
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800795e:	1d3b      	adds	r3, r7, #4
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007966:	b29b      	uxth	r3, r3
 8007968:	461a      	mov	r2, r3
 800796a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800796e:	4413      	add	r3, r2
 8007970:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007974:	463b      	mov	r3, r7
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	011a      	lsls	r2, r3, #4
 800797c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007980:	4413      	add	r3, r2
 8007982:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007986:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800798a:	463b      	mov	r3, r7
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d116      	bne.n	80079c2 <USB_EPStartXfer+0x116e>
 8007994:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	b29b      	uxth	r3, r3
 800799c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079a6:	801a      	strh	r2, [r3, #0]
 80079a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079ac:	881b      	ldrh	r3, [r3, #0]
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079be:	801a      	strh	r2, [r3, #0]
 80079c0:	e061      	b.n	8007a86 <USB_EPStartXfer+0x1232>
 80079c2:	463b      	mov	r3, r7
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	2b3e      	cmp	r3, #62	; 0x3e
 80079ca:	d81a      	bhi.n	8007a02 <USB_EPStartXfer+0x11ae>
 80079cc:	463b      	mov	r3, r7
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	085b      	lsrs	r3, r3, #1
 80079d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80079d8:	463b      	mov	r3, r7
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d004      	beq.n	80079f0 <USB_EPStartXfer+0x119c>
 80079e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80079ea:	3301      	adds	r3, #1
 80079ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80079f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	029b      	lsls	r3, r3, #10
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079fe:	801a      	strh	r2, [r3, #0]
 8007a00:	e041      	b.n	8007a86 <USB_EPStartXfer+0x1232>
 8007a02:	463b      	mov	r3, r7
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	095b      	lsrs	r3, r3, #5
 8007a0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a0e:	463b      	mov	r3, r7
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	f003 031f 	and.w	r3, r3, #31
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d104      	bne.n	8007a26 <USB_EPStartXfer+0x11d2>
 8007a1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a20:	3b01      	subs	r3, #1
 8007a22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a26:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	029b      	lsls	r3, r3, #10
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a3e:	801a      	strh	r2, [r3, #0]
 8007a40:	e021      	b.n	8007a86 <USB_EPStartXfer+0x1232>
 8007a42:	463b      	mov	r3, r7
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	785b      	ldrb	r3, [r3, #1]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d11c      	bne.n	8007a86 <USB_EPStartXfer+0x1232>
 8007a4c:	1d3b      	adds	r3, r7, #4
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	461a      	mov	r2, r3
 8007a58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a62:	463b      	mov	r3, r7
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	011a      	lsls	r2, r3, #4
 8007a6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a6e:	4413      	add	r3, r2
 8007a70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a78:	463b      	mov	r3, r7
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a84:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007a86:	463b      	mov	r3, r7
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	69db      	ldr	r3, [r3, #28]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 81a4 	beq.w	8007dda <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007a92:	1d3b      	adds	r3, r7, #4
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	463b      	mov	r3, r7
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007aa6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d005      	beq.n	8007abe <USB_EPStartXfer+0x126a>
 8007ab2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10d      	bne.n	8007ada <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007abe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f040 8187 	bne.w	8007dda <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007acc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f040 8180 	bne.w	8007dda <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007ada:	1d3b      	adds	r3, r7, #4
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	463b      	mov	r3, r7
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007af4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007af8:	1d3b      	adds	r3, r7, #4
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	463b      	mov	r3, r7
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	441a      	add	r2, r3
 8007b06:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	8013      	strh	r3, [r2, #0]
 8007b1e:	e15c      	b.n	8007dda <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007b20:	463b      	mov	r3, r7
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	78db      	ldrb	r3, [r3, #3]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	f040 8155 	bne.w	8007dd6 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007b2c:	463b      	mov	r3, r7
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	699a      	ldr	r2, [r3, #24]
 8007b32:	463b      	mov	r3, r7
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d90e      	bls.n	8007b5a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8007b3c:	463b      	mov	r3, r7
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007b46:	463b      	mov	r3, r7
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	699a      	ldr	r2, [r3, #24]
 8007b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b50:	1ad2      	subs	r2, r2, r3
 8007b52:	463b      	mov	r3, r7
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	619a      	str	r2, [r3, #24]
 8007b58:	e008      	b.n	8007b6c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8007b5a:	463b      	mov	r3, r7
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007b64:	463b      	mov	r3, r7
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007b6c:	463b      	mov	r3, r7
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	785b      	ldrb	r3, [r3, #1]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d16f      	bne.n	8007c56 <USB_EPStartXfer+0x1402>
 8007b76:	1d3b      	adds	r3, r7, #4
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007b7e:	1d3b      	adds	r3, r7, #4
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	461a      	mov	r2, r3
 8007b8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007b8e:	4413      	add	r3, r2
 8007b90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007b94:	463b      	mov	r3, r7
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	011a      	lsls	r2, r3, #4
 8007b9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ba6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d116      	bne.n	8007be0 <USB_EPStartXfer+0x138c>
 8007bb2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007bb6:	881b      	ldrh	r3, [r3, #0]
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007bc4:	801a      	strh	r2, [r3, #0]
 8007bc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007bca:	881b      	ldrh	r3, [r3, #0]
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007bdc:	801a      	strh	r2, [r3, #0]
 8007bde:	e05f      	b.n	8007ca0 <USB_EPStartXfer+0x144c>
 8007be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007be4:	2b3e      	cmp	r3, #62	; 0x3e
 8007be6:	d818      	bhi.n	8007c1a <USB_EPStartXfer+0x13c6>
 8007be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bec:	085b      	lsrs	r3, r3, #1
 8007bee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d004      	beq.n	8007c08 <USB_EPStartXfer+0x13b4>
 8007bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c02:	3301      	adds	r3, #1
 8007c04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	029b      	lsls	r3, r3, #10
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c16:	801a      	strh	r2, [r3, #0]
 8007c18:	e042      	b.n	8007ca0 <USB_EPStartXfer+0x144c>
 8007c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c1e:	095b      	lsrs	r3, r3, #5
 8007c20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c28:	f003 031f 	and.w	r3, r3, #31
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d104      	bne.n	8007c3a <USB_EPStartXfer+0x13e6>
 8007c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c34:	3b01      	subs	r3, #1
 8007c36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	029b      	lsls	r3, r3, #10
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c52:	801a      	strh	r2, [r3, #0]
 8007c54:	e024      	b.n	8007ca0 <USB_EPStartXfer+0x144c>
 8007c56:	463b      	mov	r3, r7
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	785b      	ldrb	r3, [r3, #1]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d11f      	bne.n	8007ca0 <USB_EPStartXfer+0x144c>
 8007c60:	1d3b      	adds	r3, r7, #4
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007c68:	1d3b      	adds	r3, r7, #4
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	461a      	mov	r2, r3
 8007c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c78:	4413      	add	r3, r2
 8007c7a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007c7e:	463b      	mov	r3, r7
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	011a      	lsls	r2, r3, #4
 8007c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007c94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007c9e:	801a      	strh	r2, [r3, #0]
 8007ca0:	1d3b      	adds	r3, r7, #4
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ca8:	463b      	mov	r3, r7
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d16f      	bne.n	8007d92 <USB_EPStartXfer+0x153e>
 8007cb2:	1d3b      	adds	r3, r7, #4
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007cba:	1d3b      	adds	r3, r7, #4
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cca:	4413      	add	r3, r2
 8007ccc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007cd0:	463b      	mov	r3, r7
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	011a      	lsls	r2, r3, #4
 8007cd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cdc:	4413      	add	r3, r2
 8007cde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ce2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d116      	bne.n	8007d1c <USB_EPStartXfer+0x14c8>
 8007cee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d00:	801a      	strh	r2, [r3, #0]
 8007d02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d18:	801a      	strh	r2, [r3, #0]
 8007d1a:	e05e      	b.n	8007dda <USB_EPStartXfer+0x1586>
 8007d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d20:	2b3e      	cmp	r3, #62	; 0x3e
 8007d22:	d818      	bhi.n	8007d56 <USB_EPStartXfer+0x1502>
 8007d24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d28:	085b      	lsrs	r3, r3, #1
 8007d2a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d004      	beq.n	8007d44 <USB_EPStartXfer+0x14f0>
 8007d3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d3e:	3301      	adds	r3, #1
 8007d40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	029b      	lsls	r3, r3, #10
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d52:	801a      	strh	r2, [r3, #0]
 8007d54:	e041      	b.n	8007dda <USB_EPStartXfer+0x1586>
 8007d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d5a:	095b      	lsrs	r3, r3, #5
 8007d5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d64:	f003 031f 	and.w	r3, r3, #31
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d104      	bne.n	8007d76 <USB_EPStartXfer+0x1522>
 8007d6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d70:	3b01      	subs	r3, #1
 8007d72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	029b      	lsls	r3, r3, #10
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d8e:	801a      	strh	r2, [r3, #0]
 8007d90:	e023      	b.n	8007dda <USB_EPStartXfer+0x1586>
 8007d92:	463b      	mov	r3, r7
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	785b      	ldrb	r3, [r3, #1]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d11e      	bne.n	8007dda <USB_EPStartXfer+0x1586>
 8007d9c:	1d3b      	adds	r3, r7, #4
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	461a      	mov	r2, r3
 8007da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dac:	4413      	add	r3, r2
 8007dae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007db2:	463b      	mov	r3, r7
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	011a      	lsls	r2, r3, #4
 8007dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007dc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dd2:	801a      	strh	r2, [r3, #0]
 8007dd4:	e001      	b.n	8007dda <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e02e      	b.n	8007e38 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007dda:	1d3b      	adds	r3, r7, #4
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	463b      	mov	r3, r7
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	881b      	ldrh	r3, [r3, #0]
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007df4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007df8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007dfc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e00:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007e04:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007e08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007e0c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007e10:	1d3b      	adds	r3, r7, #4
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	463b      	mov	r3, r7
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	441a      	add	r2, r3
 8007e1e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b085      	sub	sp, #20
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	785b      	ldrb	r3, [r3, #1]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d020      	beq.n	8007e96 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e6a:	81bb      	strh	r3, [r7, #12]
 8007e6c:	89bb      	ldrh	r3, [r7, #12]
 8007e6e:	f083 0310 	eor.w	r3, r3, #16
 8007e72:	81bb      	strh	r3, [r7, #12]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	441a      	add	r2, r3
 8007e7e:	89bb      	ldrh	r3, [r7, #12]
 8007e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	8013      	strh	r3, [r2, #0]
 8007e94:	e01f      	b.n	8007ed6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eac:	81fb      	strh	r3, [r7, #14]
 8007eae:	89fb      	ldrh	r3, [r7, #14]
 8007eb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007eb4:	81fb      	strh	r3, [r7, #14]
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	441a      	add	r2, r3
 8007ec0:	89fb      	ldrh	r3, [r7, #14]
 8007ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bc80      	pop	{r7}
 8007ee0:	4770      	bx	lr

08007ee2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b087      	sub	sp, #28
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	7b1b      	ldrb	r3, [r3, #12]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f040 809d 	bne.w	8008030 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	785b      	ldrb	r3, [r3, #1]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d04c      	beq.n	8007f98 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	823b      	strh	r3, [r7, #16]
 8007f0c:	8a3b      	ldrh	r3, [r7, #16]
 8007f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d01b      	beq.n	8007f4e <USB_EPClearStall+0x6c>
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2c:	81fb      	strh	r3, [r7, #14]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	441a      	add	r2, r3
 8007f38:	89fb      	ldrh	r3, [r7, #14]
 8007f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	78db      	ldrb	r3, [r3, #3]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d06c      	beq.n	8008030 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f6c:	81bb      	strh	r3, [r7, #12]
 8007f6e:	89bb      	ldrh	r3, [r7, #12]
 8007f70:	f083 0320 	eor.w	r3, r3, #32
 8007f74:	81bb      	strh	r3, [r7, #12]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	441a      	add	r2, r3
 8007f80:	89bb      	ldrh	r3, [r7, #12]
 8007f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	8013      	strh	r3, [r2, #0]
 8007f96:	e04b      	b.n	8008030 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	82fb      	strh	r3, [r7, #22]
 8007fa6:	8afb      	ldrh	r3, [r7, #22]
 8007fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d01b      	beq.n	8007fe8 <USB_EPClearStall+0x106>
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	881b      	ldrh	r3, [r3, #0]
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc6:	82bb      	strh	r3, [r7, #20]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	441a      	add	r2, r3
 8007fd2:	8abb      	ldrh	r3, [r7, #20]
 8007fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ffe:	827b      	strh	r3, [r7, #18]
 8008000:	8a7b      	ldrh	r3, [r7, #18]
 8008002:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008006:	827b      	strh	r3, [r7, #18]
 8008008:	8a7b      	ldrh	r3, [r7, #18]
 800800a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800800e:	827b      	strh	r3, [r7, #18]
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	441a      	add	r2, r3
 800801a:	8a7b      	ldrh	r3, [r7, #18]
 800801c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800802c:	b29b      	uxth	r3, r3
 800802e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	371c      	adds	r7, #28
 8008036:	46bd      	mov	sp, r7
 8008038:	bc80      	pop	{r7}
 800803a:	4770      	bx	lr

0800803c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008048:	78fb      	ldrb	r3, [r7, #3]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d103      	bne.n	8008056 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2280      	movs	r2, #128	; 0x80
 8008052:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	bc80      	pop	{r7}
 8008060:	4770      	bx	lr

08008062 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008062:	b480      	push	{r7}
 8008064:	b083      	sub	sp, #12
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	bc80      	pop	{r7}
 8008074:	4770      	bx	lr

08008076 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008076:	b480      	push	{r7}
 8008078:	b083      	sub	sp, #12
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	bc80      	pop	{r7}
 8008088:	4770      	bx	lr

0800808a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800808a:	b480      	push	{r7}
 800808c:	b085      	sub	sp, #20
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008098:	b29b      	uxth	r3, r3
 800809a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800809c:	68fb      	ldr	r3, [r7, #12]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bc80      	pop	{r7}
 80080a6:	4770      	bx	lr

080080a8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bc80      	pop	{r7}
 80080bc:	4770      	bx	lr

080080be <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80080be:	b480      	push	{r7}
 80080c0:	b08d      	sub	sp, #52	; 0x34
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	60f8      	str	r0, [r7, #12]
 80080c6:	60b9      	str	r1, [r7, #8]
 80080c8:	4611      	mov	r1, r2
 80080ca:	461a      	mov	r2, r3
 80080cc:	460b      	mov	r3, r1
 80080ce:	80fb      	strh	r3, [r7, #6]
 80080d0:	4613      	mov	r3, r2
 80080d2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80080d4:	88bb      	ldrh	r3, [r7, #4]
 80080d6:	3301      	adds	r3, #1
 80080d8:	085b      	lsrs	r3, r3, #1
 80080da:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80080e4:	88fb      	ldrh	r3, [r7, #6]
 80080e6:	005a      	lsls	r2, r3, #1
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	4413      	add	r3, r2
 80080ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080f0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080f6:	e01e      	b.n	8008136 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	3301      	adds	r3, #1
 8008102:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	b29b      	uxth	r3, r3
 800810a:	021b      	lsls	r3, r3, #8
 800810c:	b29b      	uxth	r3, r3
 800810e:	461a      	mov	r2, r3
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	4313      	orrs	r3, r2
 8008114:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	b29a      	uxth	r2, r3
 800811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	3302      	adds	r3, #2
 8008122:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008126:	3302      	adds	r3, #2
 8008128:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	3301      	adds	r3, #1
 800812e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008132:	3b01      	subs	r3, #1
 8008134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1dd      	bne.n	80080f8 <USB_WritePMA+0x3a>
  }
}
 800813c:	bf00      	nop
 800813e:	bf00      	nop
 8008140:	3734      	adds	r7, #52	; 0x34
 8008142:	46bd      	mov	sp, r7
 8008144:	bc80      	pop	{r7}
 8008146:	4770      	bx	lr

08008148 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008148:	b480      	push	{r7}
 800814a:	b08b      	sub	sp, #44	; 0x2c
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	4611      	mov	r1, r2
 8008154:	461a      	mov	r2, r3
 8008156:	460b      	mov	r3, r1
 8008158:	80fb      	strh	r3, [r7, #6]
 800815a:	4613      	mov	r3, r2
 800815c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800815e:	88bb      	ldrh	r3, [r7, #4]
 8008160:	085b      	lsrs	r3, r3, #1
 8008162:	b29b      	uxth	r3, r3
 8008164:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800816e:	88fb      	ldrh	r3, [r7, #6]
 8008170:	005a      	lsls	r2, r3, #1
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	4413      	add	r3, r2
 8008176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800817a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	627b      	str	r3, [r7, #36]	; 0x24
 8008180:	e01b      	b.n	80081ba <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008182:	6a3b      	ldr	r3, [r7, #32]
 8008184:	881b      	ldrh	r3, [r3, #0]
 8008186:	b29b      	uxth	r3, r3
 8008188:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	3302      	adds	r3, #2
 800818e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	b2da      	uxtb	r2, r3
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	3301      	adds	r3, #1
 800819c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	0a1b      	lsrs	r3, r3, #8
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	3301      	adds	r3, #1
 80081ac:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	3302      	adds	r3, #2
 80081b2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	3b01      	subs	r3, #1
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1e0      	bne.n	8008182 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80081c0:	88bb      	ldrh	r3, [r7, #4]
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d007      	beq.n	80081dc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80081cc:	6a3b      	ldr	r3, [r7, #32]
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	701a      	strb	r2, [r3, #0]
  }
}
 80081dc:	bf00      	nop
 80081de:	372c      	adds	r7, #44	; 0x2c
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bc80      	pop	{r7}
 80081e4:	4770      	bx	lr

080081e6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b084      	sub	sp, #16
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	460b      	mov	r3, r1
 80081f0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	7c1b      	ldrb	r3, [r3, #16]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d115      	bne.n	800822a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80081fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008202:	2202      	movs	r2, #2
 8008204:	2181      	movs	r1, #129	; 0x81
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f001 fe43 	bl	8009e92 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008216:	2202      	movs	r2, #2
 8008218:	2101      	movs	r1, #1
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f001 fe39 	bl	8009e92 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008228:	e012      	b.n	8008250 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800822a:	2340      	movs	r3, #64	; 0x40
 800822c:	2202      	movs	r2, #2
 800822e:	2181      	movs	r1, #129	; 0x81
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f001 fe2e 	bl	8009e92 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800823c:	2340      	movs	r3, #64	; 0x40
 800823e:	2202      	movs	r2, #2
 8008240:	2101      	movs	r1, #1
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f001 fe25 	bl	8009e92 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008250:	2308      	movs	r3, #8
 8008252:	2203      	movs	r2, #3
 8008254:	2182      	movs	r1, #130	; 0x82
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f001 fe1b 	bl	8009e92 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008262:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008266:	f001 ff3b 	bl	800a0e0 <USBD_static_malloc>
 800826a:	4602      	mov	r2, r0
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008278:	2b00      	cmp	r3, #0
 800827a:	d102      	bne.n	8008282 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800827c:	2301      	movs	r3, #1
 800827e:	73fb      	strb	r3, [r7, #15]
 8008280:	e026      	b.n	80082d0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008288:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2200      	movs	r2, #0
 8008298:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2200      	movs	r2, #0
 80082a0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	7c1b      	ldrb	r3, [r3, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d109      	bne.n	80082c0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80082b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082b6:	2101      	movs	r1, #1
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f001 fedb 	bl	800a074 <USBD_LL_PrepareReceive>
 80082be:	e007      	b.n	80082d0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80082c6:	2340      	movs	r3, #64	; 0x40
 80082c8:	2101      	movs	r1, #1
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f001 fed2 	bl	800a074 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b084      	sub	sp, #16
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	460b      	mov	r3, r1
 80082e4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80082e6:	2300      	movs	r3, #0
 80082e8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80082ea:	2181      	movs	r1, #129	; 0x81
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f001 fdf6 	bl	8009ede <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80082f8:	2101      	movs	r1, #1
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f001 fdef 	bl	8009ede <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008308:	2182      	movs	r1, #130	; 0x82
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f001 fde7 	bl	8009ede <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00e      	beq.n	800833e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008330:	4618      	mov	r0, r3
 8008332:	f001 fee1 	bl	800a0f8 <USBD_static_free>
    pdev->pClassData = NULL;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800833e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008358:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800835a:	2300      	movs	r3, #0
 800835c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800835e:	2300      	movs	r3, #0
 8008360:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008362:	2300      	movs	r3, #0
 8008364:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800836e:	2b00      	cmp	r3, #0
 8008370:	d039      	beq.n	80083e6 <USBD_CDC_Setup+0x9e>
 8008372:	2b20      	cmp	r3, #32
 8008374:	d17f      	bne.n	8008476 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	88db      	ldrh	r3, [r3, #6]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d029      	beq.n	80083d2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	b25b      	sxtb	r3, r3
 8008384:	2b00      	cmp	r3, #0
 8008386:	da11      	bge.n	80083ac <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008394:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	88d2      	ldrh	r2, [r2, #6]
 800839a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800839c:	6939      	ldr	r1, [r7, #16]
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	88db      	ldrh	r3, [r3, #6]
 80083a2:	461a      	mov	r2, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f001 f9da 	bl	800975e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80083aa:	e06b      	b.n	8008484 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	785a      	ldrb	r2, [r3, #1]
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	88db      	ldrh	r3, [r3, #6]
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80083c2:	6939      	ldr	r1, [r7, #16]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	88db      	ldrh	r3, [r3, #6]
 80083c8:	461a      	mov	r2, r3
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f001 f9f5 	bl	80097ba <USBD_CtlPrepareRx>
      break;
 80083d0:	e058      	b.n	8008484 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	7850      	ldrb	r0, [r2, #1]
 80083de:	2200      	movs	r2, #0
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	4798      	blx	r3
      break;
 80083e4:	e04e      	b.n	8008484 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	785b      	ldrb	r3, [r3, #1]
 80083ea:	2b0b      	cmp	r3, #11
 80083ec:	d02e      	beq.n	800844c <USBD_CDC_Setup+0x104>
 80083ee:	2b0b      	cmp	r3, #11
 80083f0:	dc38      	bgt.n	8008464 <USBD_CDC_Setup+0x11c>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <USBD_CDC_Setup+0xb4>
 80083f6:	2b0a      	cmp	r3, #10
 80083f8:	d014      	beq.n	8008424 <USBD_CDC_Setup+0xdc>
 80083fa:	e033      	b.n	8008464 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008402:	2b03      	cmp	r3, #3
 8008404:	d107      	bne.n	8008416 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008406:	f107 030c 	add.w	r3, r7, #12
 800840a:	2202      	movs	r2, #2
 800840c:	4619      	mov	r1, r3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f001 f9a5 	bl	800975e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008414:	e02e      	b.n	8008474 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f001 f936 	bl	800968a <USBD_CtlError>
            ret = USBD_FAIL;
 800841e:	2302      	movs	r3, #2
 8008420:	75fb      	strb	r3, [r7, #23]
          break;
 8008422:	e027      	b.n	8008474 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800842a:	2b03      	cmp	r3, #3
 800842c:	d107      	bne.n	800843e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800842e:	f107 030f 	add.w	r3, r7, #15
 8008432:	2201      	movs	r2, #1
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f001 f991 	bl	800975e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800843c:	e01a      	b.n	8008474 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800843e:	6839      	ldr	r1, [r7, #0]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f001 f922 	bl	800968a <USBD_CtlError>
            ret = USBD_FAIL;
 8008446:	2302      	movs	r3, #2
 8008448:	75fb      	strb	r3, [r7, #23]
          break;
 800844a:	e013      	b.n	8008474 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008452:	2b03      	cmp	r3, #3
 8008454:	d00d      	beq.n	8008472 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f001 f916 	bl	800968a <USBD_CtlError>
            ret = USBD_FAIL;
 800845e:	2302      	movs	r3, #2
 8008460:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008462:	e006      	b.n	8008472 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008464:	6839      	ldr	r1, [r7, #0]
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f001 f90f 	bl	800968a <USBD_CtlError>
          ret = USBD_FAIL;
 800846c:	2302      	movs	r3, #2
 800846e:	75fb      	strb	r3, [r7, #23]
          break;
 8008470:	e000      	b.n	8008474 <USBD_CDC_Setup+0x12c>
          break;
 8008472:	bf00      	nop
      }
      break;
 8008474:	e006      	b.n	8008484 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f001 f906 	bl	800968a <USBD_CtlError>
      ret = USBD_FAIL;
 800847e:	2302      	movs	r3, #2
 8008480:	75fb      	strb	r3, [r7, #23]
      break;
 8008482:	bf00      	nop
  }

  return ret;
 8008484:	7dfb      	ldrb	r3, [r7, #23]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3718      	adds	r7, #24
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	460b      	mov	r3, r1
 8008498:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084a8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d03a      	beq.n	800852a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80084b4:	78fa      	ldrb	r2, [r7, #3]
 80084b6:	6879      	ldr	r1, [r7, #4]
 80084b8:	4613      	mov	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	440b      	add	r3, r1
 80084c2:	331c      	adds	r3, #28
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d029      	beq.n	800851e <USBD_CDC_DataIn+0x90>
 80084ca:	78fa      	ldrb	r2, [r7, #3]
 80084cc:	6879      	ldr	r1, [r7, #4]
 80084ce:	4613      	mov	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4413      	add	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	440b      	add	r3, r1
 80084d8:	331c      	adds	r3, #28
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	78f9      	ldrb	r1, [r7, #3]
 80084de:	68b8      	ldr	r0, [r7, #8]
 80084e0:	460b      	mov	r3, r1
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	440b      	add	r3, r1
 80084e6:	00db      	lsls	r3, r3, #3
 80084e8:	4403      	add	r3, r0
 80084ea:	3338      	adds	r3, #56	; 0x38
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	fbb2 f1f3 	udiv	r1, r2, r3
 80084f2:	fb03 f301 	mul.w	r3, r3, r1
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d110      	bne.n	800851e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80084fc:	78fa      	ldrb	r2, [r7, #3]
 80084fe:	6879      	ldr	r1, [r7, #4]
 8008500:	4613      	mov	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4413      	add	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	440b      	add	r3, r1
 800850a:	331c      	adds	r3, #28
 800850c:	2200      	movs	r2, #0
 800850e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008510:	78f9      	ldrb	r1, [r7, #3]
 8008512:	2300      	movs	r3, #0
 8008514:	2200      	movs	r2, #0
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f001 fd89 	bl	800a02e <USBD_LL_Transmit>
 800851c:	e003      	b.n	8008526 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	e000      	b.n	800852c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800852a:	2302      	movs	r3, #2
  }
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	460b      	mov	r3, r1
 800853e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008546:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008548:	78fb      	ldrb	r3, [r7, #3]
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f001 fdb4 	bl	800a0ba <USBD_LL_GetRxDataSize>
 8008552:	4602      	mov	r2, r0
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00d      	beq.n	8008580 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008578:	4611      	mov	r1, r2
 800857a:	4798      	blx	r3

    return USBD_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	e000      	b.n	8008582 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008580:	2302      	movs	r3, #2
  }
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b084      	sub	sp, #16
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008598:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d015      	beq.n	80085d0 <USBD_CDC_EP0_RxReady+0x46>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80085aa:	2bff      	cmp	r3, #255	; 0xff
 80085ac:	d010      	beq.n	80085d0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80085bc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80085c4:	b292      	uxth	r2, r2
 80085c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	22ff      	movs	r2, #255	; 0xff
 80085cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
	...

080085dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2243      	movs	r2, #67	; 0x43
 80085e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80085ea:	4b03      	ldr	r3, [pc, #12]	; (80085f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bc80      	pop	{r7}
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	2000009c 	.word	0x2000009c

080085fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2243      	movs	r2, #67	; 0x43
 8008608:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800860a:	4b03      	ldr	r3, [pc, #12]	; (8008618 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800860c:	4618      	mov	r0, r3
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	bc80      	pop	{r7}
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	20000058 	.word	0x20000058

0800861c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2243      	movs	r2, #67	; 0x43
 8008628:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800862a:	4b03      	ldr	r3, [pc, #12]	; (8008638 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800862c:	4618      	mov	r0, r3
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	bc80      	pop	{r7}
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	200000e0 	.word	0x200000e0

0800863c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	220a      	movs	r2, #10
 8008648:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800864a:	4b03      	ldr	r3, [pc, #12]	; (8008658 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800864c:	4618      	mov	r0, r3
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	bc80      	pop	{r7}
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	20000014 	.word	0x20000014

0800865c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008666:	2302      	movs	r3, #2
 8008668:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d005      	beq.n	800867c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	683a      	ldr	r2, [r7, #0]
 8008674:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800867c:	7bfb      	ldrb	r3, [r7, #15]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3714      	adds	r7, #20
 8008682:	46bd      	mov	sp, r7
 8008684:	bc80      	pop	{r7}
 8008686:	4770      	bx	lr

08008688 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008688:	b480      	push	{r7}
 800868a:	b087      	sub	sp, #28
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	4613      	mov	r3, r2
 8008694:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800869c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80086a6:	88fa      	ldrh	r2, [r7, #6]
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	371c      	adds	r7, #28
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bc80      	pop	{r7}
 80086b8:	4770      	bx	lr

080086ba <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b085      	sub	sp, #20
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ca:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	bc80      	pop	{r7}
 80086de:	4770      	bx	lr

080086e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ee:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d017      	beq.n	800872a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	7c1b      	ldrb	r3, [r3, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d109      	bne.n	8008716 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800870c:	2101      	movs	r1, #1
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f001 fcb0 	bl	800a074 <USBD_LL_PrepareReceive>
 8008714:	e007      	b.n	8008726 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800871c:	2340      	movs	r3, #64	; 0x40
 800871e:	2101      	movs	r1, #1
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f001 fca7 	bl	800a074 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	e000      	b.n	800872c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800872a:	2302      	movs	r3, #2
  }
}
 800872c:	4618      	mov	r0, r3
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	4613      	mov	r3, r2
 8008740:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d101      	bne.n	800874c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008748:	2302      	movs	r3, #2
 800874a:	e01a      	b.n	8008782 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008752:	2b00      	cmp	r3, #0
 8008754:	d003      	beq.n	800875e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d003      	beq.n	800876c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	79fa      	ldrb	r2, [r7, #7]
 8008778:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f001 fb14 	bl	8009da8 <USBD_LL_Init>

  return USBD_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800878a:	b480      	push	{r7}
 800878c:	b085      	sub	sp, #20
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d006      	beq.n	80087ac <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	683a      	ldr	r2, [r7, #0]
 80087a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	73fb      	strb	r3, [r7, #15]
 80087aa:	e001      	b.n	80087b0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80087ac:	2302      	movs	r3, #2
 80087ae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bc80      	pop	{r7}
 80087ba:	4770      	bx	lr

080087bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f001 fb49 	bl	8009e5c <USBD_LL_Start>

  return USBD_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bc80      	pop	{r7}
 80087e6:	4770      	bx	lr

080087e8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	460b      	mov	r3, r1
 80087f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80087f4:	2302      	movs	r3, #2
 80087f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00c      	beq.n	800881c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	78fa      	ldrb	r2, [r7, #3]
 800880c:	4611      	mov	r1, r2
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	4798      	blx	r3
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d101      	bne.n	800881c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800881c:	7bfb      	ldrb	r3, [r7, #15]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008826:	b580      	push	{r7, lr}
 8008828:	b082      	sub	sp, #8
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	460b      	mov	r3, r1
 8008830:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	78fa      	ldrb	r2, [r7, #3]
 800883c:	4611      	mov	r1, r2
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	4798      	blx	r3

  return USBD_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800885c:	6839      	ldr	r1, [r7, #0]
 800885e:	4618      	mov	r0, r3
 8008860:	f000 fed7 	bl	8009612 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008872:	461a      	mov	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008880:	f003 031f 	and.w	r3, r3, #31
 8008884:	2b02      	cmp	r3, #2
 8008886:	d016      	beq.n	80088b6 <USBD_LL_SetupStage+0x6a>
 8008888:	2b02      	cmp	r3, #2
 800888a:	d81c      	bhi.n	80088c6 <USBD_LL_SetupStage+0x7a>
 800888c:	2b00      	cmp	r3, #0
 800888e:	d002      	beq.n	8008896 <USBD_LL_SetupStage+0x4a>
 8008890:	2b01      	cmp	r3, #1
 8008892:	d008      	beq.n	80088a6 <USBD_LL_SetupStage+0x5a>
 8008894:	e017      	b.n	80088c6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800889c:	4619      	mov	r1, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f9ca 	bl	8008c38 <USBD_StdDevReq>
      break;
 80088a4:	e01a      	b.n	80088dc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80088ac:	4619      	mov	r1, r3
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fa2c 	bl	8008d0c <USBD_StdItfReq>
      break;
 80088b4:	e012      	b.n	80088dc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fa6c 	bl	8008d9c <USBD_StdEPReq>
      break;
 80088c4:	e00a      	b.n	80088dc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80088cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f001 fb21 	bl	8009f1c <USBD_LL_StallEP>
      break;
 80088da:	bf00      	nop
  }

  return USBD_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b086      	sub	sp, #24
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	460b      	mov	r3, r1
 80088f0:	607a      	str	r2, [r7, #4]
 80088f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80088f4:	7afb      	ldrb	r3, [r7, #11]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d14b      	bne.n	8008992 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008900:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008908:	2b03      	cmp	r3, #3
 800890a:	d134      	bne.n	8008976 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	68da      	ldr	r2, [r3, #12]
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	429a      	cmp	r2, r3
 8008916:	d919      	bls.n	800894c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	68da      	ldr	r2, [r3, #12]
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	1ad2      	subs	r2, r2, r3
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	68da      	ldr	r2, [r3, #12]
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800892e:	429a      	cmp	r2, r3
 8008930:	d203      	bcs.n	800893a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008936:	b29b      	uxth	r3, r3
 8008938:	e002      	b.n	8008940 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800893e:	b29b      	uxth	r3, r3
 8008940:	461a      	mov	r2, r3
 8008942:	6879      	ldr	r1, [r7, #4]
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f000 ff56 	bl	80097f6 <USBD_CtlContinueRx>
 800894a:	e038      	b.n	80089be <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00a      	beq.n	800896e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800895e:	2b03      	cmp	r3, #3
 8008960:	d105      	bne.n	800896e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f000 ff53 	bl	800981a <USBD_CtlSendStatus>
 8008974:	e023      	b.n	80089be <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800897c:	2b05      	cmp	r3, #5
 800897e:	d11e      	bne.n	80089be <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008988:	2100      	movs	r1, #0
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f001 fac6 	bl	8009f1c <USBD_LL_StallEP>
 8008990:	e015      	b.n	80089be <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00d      	beq.n	80089ba <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80089a4:	2b03      	cmp	r3, #3
 80089a6:	d108      	bne.n	80089ba <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	7afa      	ldrb	r2, [r7, #11]
 80089b2:	4611      	mov	r1, r2
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	4798      	blx	r3
 80089b8:	e001      	b.n	80089be <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80089ba:	2302      	movs	r3, #2
 80089bc:	e000      	b.n	80089c0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3718      	adds	r7, #24
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	460b      	mov	r3, r1
 80089d2:	607a      	str	r2, [r7, #4]
 80089d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80089d6:	7afb      	ldrb	r3, [r7, #11]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d17f      	bne.n	8008adc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3314      	adds	r3, #20
 80089e0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d15c      	bne.n	8008aa6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	68da      	ldr	r2, [r3, #12]
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d915      	bls.n	8008a24 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	68da      	ldr	r2, [r3, #12]
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	1ad2      	subs	r2, r2, r3
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	6879      	ldr	r1, [r7, #4]
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f000 fec0 	bl	8009796 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a16:	2300      	movs	r3, #0
 8008a18:	2200      	movs	r2, #0
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f001 fb29 	bl	800a074 <USBD_LL_PrepareReceive>
 8008a22:	e04e      	b.n	8008ac2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	6912      	ldr	r2, [r2, #16]
 8008a2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a30:	fb02 f201 	mul.w	r2, r2, r1
 8008a34:	1a9b      	subs	r3, r3, r2
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d11c      	bne.n	8008a74 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	689a      	ldr	r2, [r3, #8]
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d316      	bcc.n	8008a74 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	689a      	ldr	r2, [r3, #8]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d20f      	bcs.n	8008a74 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008a54:	2200      	movs	r2, #0
 8008a56:	2100      	movs	r1, #0
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 fe9c 	bl	8009796 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a66:	2300      	movs	r3, #0
 8008a68:	2200      	movs	r2, #0
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f001 fb01 	bl	800a074 <USBD_LL_PrepareReceive>
 8008a72:	e026      	b.n	8008ac2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00a      	beq.n	8008a96 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008a86:	2b03      	cmp	r3, #3
 8008a88:	d105      	bne.n	8008a96 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008a96:	2180      	movs	r1, #128	; 0x80
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f001 fa3f 	bl	8009f1c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f000 fece 	bl	8009840 <USBD_CtlReceiveStatus>
 8008aa4:	e00d      	b.n	8008ac2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008aac:	2b04      	cmp	r3, #4
 8008aae:	d004      	beq.n	8008aba <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d103      	bne.n	8008ac2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008aba:	2180      	movs	r1, #128	; 0x80
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f001 fa2d 	bl	8009f1c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d11d      	bne.n	8008b08 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f7ff fe81 	bl	80087d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008ada:	e015      	b.n	8008b08 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ae2:	695b      	ldr	r3, [r3, #20]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00d      	beq.n	8008b04 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d108      	bne.n	8008b04 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	7afa      	ldrb	r2, [r7, #11]
 8008afc:	4611      	mov	r1, r2
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	4798      	blx	r3
 8008b02:	e001      	b.n	8008b08 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008b04:	2302      	movs	r3, #2
 8008b06:	e000      	b.n	8008b0a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3718      	adds	r7, #24
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b082      	sub	sp, #8
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b1a:	2340      	movs	r3, #64	; 0x40
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	2100      	movs	r1, #0
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f001 f9b6 	bl	8009e92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2240      	movs	r2, #64	; 0x40
 8008b32:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b36:	2340      	movs	r3, #64	; 0x40
 8008b38:	2200      	movs	r2, #0
 8008b3a:	2180      	movs	r1, #128	; 0x80
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f001 f9a8 	bl	8009e92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2201      	movs	r2, #1
 8008b46:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2240      	movs	r2, #64	; 0x40
 8008b4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d009      	beq.n	8008b8a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	6852      	ldr	r2, [r2, #4]
 8008b82:	b2d2      	uxtb	r2, r2
 8008b84:	4611      	mov	r1, r2
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	4798      	blx	r3
  }

  return USBD_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	78fa      	ldrb	r2, [r7, #3]
 8008ba4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bc80      	pop	{r7}
 8008bb0:	4770      	bx	lr

08008bb2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008bb2:	b480      	push	{r7}
 8008bb4:	b083      	sub	sp, #12
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2204      	movs	r2, #4
 8008bca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bc80      	pop	{r7}
 8008bd8:	4770      	bx	lr

08008bda <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008bda:	b480      	push	{r7}
 8008bdc:	b083      	sub	sp, #12
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be8:	2b04      	cmp	r3, #4
 8008bea:	d105      	bne.n	8008bf8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bc80      	pop	{r7}
 8008c02:	4770      	bx	lr

08008c04 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c12:	2b03      	cmp	r3, #3
 8008c14:	d10b      	bne.n	8008c2e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c1c:	69db      	ldr	r3, [r3, #28]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d005      	beq.n	8008c2e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c4e:	2b40      	cmp	r3, #64	; 0x40
 8008c50:	d005      	beq.n	8008c5e <USBD_StdDevReq+0x26>
 8008c52:	2b40      	cmp	r3, #64	; 0x40
 8008c54:	d84f      	bhi.n	8008cf6 <USBD_StdDevReq+0xbe>
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d009      	beq.n	8008c6e <USBD_StdDevReq+0x36>
 8008c5a:	2b20      	cmp	r3, #32
 8008c5c:	d14b      	bne.n	8008cf6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	4798      	blx	r3
      break;
 8008c6c:	e048      	b.n	8008d00 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	785b      	ldrb	r3, [r3, #1]
 8008c72:	2b09      	cmp	r3, #9
 8008c74:	d839      	bhi.n	8008cea <USBD_StdDevReq+0xb2>
 8008c76:	a201      	add	r2, pc, #4	; (adr r2, 8008c7c <USBD_StdDevReq+0x44>)
 8008c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7c:	08008ccd 	.word	0x08008ccd
 8008c80:	08008ce1 	.word	0x08008ce1
 8008c84:	08008ceb 	.word	0x08008ceb
 8008c88:	08008cd7 	.word	0x08008cd7
 8008c8c:	08008ceb 	.word	0x08008ceb
 8008c90:	08008caf 	.word	0x08008caf
 8008c94:	08008ca5 	.word	0x08008ca5
 8008c98:	08008ceb 	.word	0x08008ceb
 8008c9c:	08008cc3 	.word	0x08008cc3
 8008ca0:	08008cb9 	.word	0x08008cb9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ca4:	6839      	ldr	r1, [r7, #0]
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f9dc 	bl	8009064 <USBD_GetDescriptor>
          break;
 8008cac:	e022      	b.n	8008cf4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fb3f 	bl	8009334 <USBD_SetAddress>
          break;
 8008cb6:	e01d      	b.n	8008cf4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fb7e 	bl	80093bc <USBD_SetConfig>
          break;
 8008cc0:	e018      	b.n	8008cf4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fc07 	bl	80094d8 <USBD_GetConfig>
          break;
 8008cca:	e013      	b.n	8008cf4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ccc:	6839      	ldr	r1, [r7, #0]
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fc37 	bl	8009542 <USBD_GetStatus>
          break;
 8008cd4:	e00e      	b.n	8008cf4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fc65 	bl	80095a8 <USBD_SetFeature>
          break;
 8008cde:	e009      	b.n	8008cf4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fc74 	bl	80095d0 <USBD_ClrFeature>
          break;
 8008ce8:	e004      	b.n	8008cf4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fccc 	bl	800968a <USBD_CtlError>
          break;
 8008cf2:	bf00      	nop
      }
      break;
 8008cf4:	e004      	b.n	8008d00 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fcc6 	bl	800968a <USBD_CtlError>
      break;
 8008cfe:	bf00      	nop
  }

  return ret;
 8008d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop

08008d0c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d22:	2b40      	cmp	r3, #64	; 0x40
 8008d24:	d005      	beq.n	8008d32 <USBD_StdItfReq+0x26>
 8008d26:	2b40      	cmp	r3, #64	; 0x40
 8008d28:	d82e      	bhi.n	8008d88 <USBD_StdItfReq+0x7c>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d001      	beq.n	8008d32 <USBD_StdItfReq+0x26>
 8008d2e:	2b20      	cmp	r3, #32
 8008d30:	d12a      	bne.n	8008d88 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d81d      	bhi.n	8008d7a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	889b      	ldrh	r3, [r3, #4]
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d813      	bhi.n	8008d70 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	4798      	blx	r3
 8008d56:	4603      	mov	r3, r0
 8008d58:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	88db      	ldrh	r3, [r3, #6]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d110      	bne.n	8008d84 <USBD_StdItfReq+0x78>
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d10d      	bne.n	8008d84 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fd56 	bl	800981a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d6e:	e009      	b.n	8008d84 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fc89 	bl	800968a <USBD_CtlError>
          break;
 8008d78:	e004      	b.n	8008d84 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fc84 	bl	800968a <USBD_CtlError>
          break;
 8008d82:	e000      	b.n	8008d86 <USBD_StdItfReq+0x7a>
          break;
 8008d84:	bf00      	nop
      }
      break;
 8008d86:	e004      	b.n	8008d92 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fc7d 	bl	800968a <USBD_CtlError>
      break;
 8008d90:	bf00      	nop
  }

  return USBD_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	889b      	ldrh	r3, [r3, #4]
 8008dae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008db8:	2b40      	cmp	r3, #64	; 0x40
 8008dba:	d007      	beq.n	8008dcc <USBD_StdEPReq+0x30>
 8008dbc:	2b40      	cmp	r3, #64	; 0x40
 8008dbe:	f200 8146 	bhi.w	800904e <USBD_StdEPReq+0x2b2>
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00a      	beq.n	8008ddc <USBD_StdEPReq+0x40>
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	f040 8141 	bne.w	800904e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	6839      	ldr	r1, [r7, #0]
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	4798      	blx	r3
      break;
 8008dda:	e13d      	b.n	8009058 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008de4:	2b20      	cmp	r3, #32
 8008de6:	d10a      	bne.n	8008dfe <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	4798      	blx	r3
 8008df6:	4603      	mov	r3, r0
 8008df8:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
 8008dfc:	e12d      	b.n	800905a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	785b      	ldrb	r3, [r3, #1]
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d007      	beq.n	8008e16 <USBD_StdEPReq+0x7a>
 8008e06:	2b03      	cmp	r3, #3
 8008e08:	f300 811b 	bgt.w	8009042 <USBD_StdEPReq+0x2a6>
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d072      	beq.n	8008ef6 <USBD_StdEPReq+0x15a>
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d03a      	beq.n	8008e8a <USBD_StdEPReq+0xee>
 8008e14:	e115      	b.n	8009042 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d002      	beq.n	8008e26 <USBD_StdEPReq+0x8a>
 8008e20:	2b03      	cmp	r3, #3
 8008e22:	d015      	beq.n	8008e50 <USBD_StdEPReq+0xb4>
 8008e24:	e02b      	b.n	8008e7e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e26:	7bbb      	ldrb	r3, [r7, #14]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00c      	beq.n	8008e46 <USBD_StdEPReq+0xaa>
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
 8008e2e:	2b80      	cmp	r3, #128	; 0x80
 8008e30:	d009      	beq.n	8008e46 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008e32:	7bbb      	ldrb	r3, [r7, #14]
 8008e34:	4619      	mov	r1, r3
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f001 f870 	bl	8009f1c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008e3c:	2180      	movs	r1, #128	; 0x80
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f001 f86c 	bl	8009f1c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e44:	e020      	b.n	8008e88 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008e46:	6839      	ldr	r1, [r7, #0]
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fc1e 	bl	800968a <USBD_CtlError>
              break;
 8008e4e:	e01b      	b.n	8008e88 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	885b      	ldrh	r3, [r3, #2]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10e      	bne.n	8008e76 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008e58:	7bbb      	ldrb	r3, [r7, #14]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00b      	beq.n	8008e76 <USBD_StdEPReq+0xda>
 8008e5e:	7bbb      	ldrb	r3, [r7, #14]
 8008e60:	2b80      	cmp	r3, #128	; 0x80
 8008e62:	d008      	beq.n	8008e76 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	88db      	ldrh	r3, [r3, #6]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d104      	bne.n	8008e76 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008e6c:	7bbb      	ldrb	r3, [r7, #14]
 8008e6e:	4619      	mov	r1, r3
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f001 f853 	bl	8009f1c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fccf 	bl	800981a <USBD_CtlSendStatus>

              break;
 8008e7c:	e004      	b.n	8008e88 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fc02 	bl	800968a <USBD_CtlError>
              break;
 8008e86:	bf00      	nop
          }
          break;
 8008e88:	e0e0      	b.n	800904c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d002      	beq.n	8008e9a <USBD_StdEPReq+0xfe>
 8008e94:	2b03      	cmp	r3, #3
 8008e96:	d015      	beq.n	8008ec4 <USBD_StdEPReq+0x128>
 8008e98:	e026      	b.n	8008ee8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e9a:	7bbb      	ldrb	r3, [r7, #14]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00c      	beq.n	8008eba <USBD_StdEPReq+0x11e>
 8008ea0:	7bbb      	ldrb	r3, [r7, #14]
 8008ea2:	2b80      	cmp	r3, #128	; 0x80
 8008ea4:	d009      	beq.n	8008eba <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008ea6:	7bbb      	ldrb	r3, [r7, #14]
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f001 f836 	bl	8009f1c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008eb0:	2180      	movs	r1, #128	; 0x80
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f001 f832 	bl	8009f1c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008eb8:	e01c      	b.n	8008ef4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008eba:	6839      	ldr	r1, [r7, #0]
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 fbe4 	bl	800968a <USBD_CtlError>
              break;
 8008ec2:	e017      	b.n	8008ef4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	885b      	ldrh	r3, [r3, #2]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d112      	bne.n	8008ef2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d004      	beq.n	8008ee0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ed6:	7bbb      	ldrb	r3, [r7, #14]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f001 f83d 	bl	8009f5a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fc9a 	bl	800981a <USBD_CtlSendStatus>
              }
              break;
 8008ee6:	e004      	b.n	8008ef2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fbcd 	bl	800968a <USBD_CtlError>
              break;
 8008ef0:	e000      	b.n	8008ef4 <USBD_StdEPReq+0x158>
              break;
 8008ef2:	bf00      	nop
          }
          break;
 8008ef4:	e0aa      	b.n	800904c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d002      	beq.n	8008f06 <USBD_StdEPReq+0x16a>
 8008f00:	2b03      	cmp	r3, #3
 8008f02:	d032      	beq.n	8008f6a <USBD_StdEPReq+0x1ce>
 8008f04:	e097      	b.n	8009036 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d007      	beq.n	8008f1c <USBD_StdEPReq+0x180>
 8008f0c:	7bbb      	ldrb	r3, [r7, #14]
 8008f0e:	2b80      	cmp	r3, #128	; 0x80
 8008f10:	d004      	beq.n	8008f1c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fbb8 	bl	800968a <USBD_CtlError>
                break;
 8008f1a:	e091      	b.n	8009040 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	da0b      	bge.n	8008f3c <USBD_StdEPReq+0x1a0>
 8008f24:	7bbb      	ldrb	r3, [r7, #14]
 8008f26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4413      	add	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	3310      	adds	r3, #16
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	4413      	add	r3, r2
 8008f38:	3304      	adds	r3, #4
 8008f3a:	e00b      	b.n	8008f54 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f3c:	7bbb      	ldrb	r3, [r7, #14]
 8008f3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f42:	4613      	mov	r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	4413      	add	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	4413      	add	r3, r2
 8008f52:	3304      	adds	r3, #4
 8008f54:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	2202      	movs	r2, #2
 8008f60:	4619      	mov	r1, r3
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fbfb 	bl	800975e <USBD_CtlSendData>
              break;
 8008f68:	e06a      	b.n	8009040 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	da11      	bge.n	8008f96 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f72:	7bbb      	ldrb	r3, [r7, #14]
 8008f74:	f003 020f 	and.w	r2, r3, #15
 8008f78:	6879      	ldr	r1, [r7, #4]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4413      	add	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	440b      	add	r3, r1
 8008f84:	3318      	adds	r3, #24
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d117      	bne.n	8008fbc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008f8c:	6839      	ldr	r1, [r7, #0]
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fb7b 	bl	800968a <USBD_CtlError>
                  break;
 8008f94:	e054      	b.n	8009040 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f96:	7bbb      	ldrb	r3, [r7, #14]
 8008f98:	f003 020f 	and.w	r2, r3, #15
 8008f9c:	6879      	ldr	r1, [r7, #4]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4413      	add	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	440b      	add	r3, r1
 8008fa8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d104      	bne.n	8008fbc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fb68 	bl	800968a <USBD_CtlError>
                  break;
 8008fba:	e041      	b.n	8009040 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	da0b      	bge.n	8008fdc <USBD_StdEPReq+0x240>
 8008fc4:	7bbb      	ldrb	r3, [r7, #14]
 8008fc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fca:	4613      	mov	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	3310      	adds	r3, #16
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	3304      	adds	r3, #4
 8008fda:	e00b      	b.n	8008ff4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ff6:	7bbb      	ldrb	r3, [r7, #14]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d002      	beq.n	8009002 <USBD_StdEPReq+0x266>
 8008ffc:	7bbb      	ldrb	r3, [r7, #14]
 8008ffe:	2b80      	cmp	r3, #128	; 0x80
 8009000:	d103      	bne.n	800900a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2200      	movs	r2, #0
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	e00e      	b.n	8009028 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800900a:	7bbb      	ldrb	r3, [r7, #14]
 800900c:	4619      	mov	r1, r3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 ffc2 	bl	8009f98 <USBD_LL_IsStallEP>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d003      	beq.n	8009022 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	2201      	movs	r2, #1
 800901e:	601a      	str	r2, [r3, #0]
 8009020:	e002      	b.n	8009028 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	2200      	movs	r2, #0
 8009026:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	2202      	movs	r2, #2
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fb95 	bl	800975e <USBD_CtlSendData>
              break;
 8009034:	e004      	b.n	8009040 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009036:	6839      	ldr	r1, [r7, #0]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fb26 	bl	800968a <USBD_CtlError>
              break;
 800903e:	bf00      	nop
          }
          break;
 8009040:	e004      	b.n	800904c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 fb20 	bl	800968a <USBD_CtlError>
          break;
 800904a:	bf00      	nop
      }
      break;
 800904c:	e004      	b.n	8009058 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800904e:	6839      	ldr	r1, [r7, #0]
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 fb1a 	bl	800968a <USBD_CtlError>
      break;
 8009056:	bf00      	nop
  }

  return ret;
 8009058:	7bfb      	ldrb	r3, [r7, #15]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
	...

08009064 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800906e:	2300      	movs	r3, #0
 8009070:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009072:	2300      	movs	r3, #0
 8009074:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009076:	2300      	movs	r3, #0
 8009078:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	885b      	ldrh	r3, [r3, #2]
 800907e:	0a1b      	lsrs	r3, r3, #8
 8009080:	b29b      	uxth	r3, r3
 8009082:	3b01      	subs	r3, #1
 8009084:	2b06      	cmp	r3, #6
 8009086:	f200 8128 	bhi.w	80092da <USBD_GetDescriptor+0x276>
 800908a:	a201      	add	r2, pc, #4	; (adr r2, 8009090 <USBD_GetDescriptor+0x2c>)
 800908c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009090:	080090ad 	.word	0x080090ad
 8009094:	080090c5 	.word	0x080090c5
 8009098:	08009105 	.word	0x08009105
 800909c:	080092db 	.word	0x080092db
 80090a0:	080092db 	.word	0x080092db
 80090a4:	0800927b 	.word	0x0800927b
 80090a8:	080092a7 	.word	0x080092a7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	7c12      	ldrb	r2, [r2, #16]
 80090b8:	f107 0108 	add.w	r1, r7, #8
 80090bc:	4610      	mov	r0, r2
 80090be:	4798      	blx	r3
 80090c0:	60f8      	str	r0, [r7, #12]
      break;
 80090c2:	e112      	b.n	80092ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	7c1b      	ldrb	r3, [r3, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d10d      	bne.n	80090e8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d4:	f107 0208 	add.w	r2, r7, #8
 80090d8:	4610      	mov	r0, r2
 80090da:	4798      	blx	r3
 80090dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	3301      	adds	r3, #1
 80090e2:	2202      	movs	r2, #2
 80090e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80090e6:	e100      	b.n	80092ea <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f0:	f107 0208 	add.w	r2, r7, #8
 80090f4:	4610      	mov	r0, r2
 80090f6:	4798      	blx	r3
 80090f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	3301      	adds	r3, #1
 80090fe:	2202      	movs	r2, #2
 8009100:	701a      	strb	r2, [r3, #0]
      break;
 8009102:	e0f2      	b.n	80092ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	885b      	ldrh	r3, [r3, #2]
 8009108:	b2db      	uxtb	r3, r3
 800910a:	2b05      	cmp	r3, #5
 800910c:	f200 80ac 	bhi.w	8009268 <USBD_GetDescriptor+0x204>
 8009110:	a201      	add	r2, pc, #4	; (adr r2, 8009118 <USBD_GetDescriptor+0xb4>)
 8009112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009116:	bf00      	nop
 8009118:	08009131 	.word	0x08009131
 800911c:	08009165 	.word	0x08009165
 8009120:	08009199 	.word	0x08009199
 8009124:	080091cd 	.word	0x080091cd
 8009128:	08009201 	.word	0x08009201
 800912c:	08009235 	.word	0x08009235
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00b      	beq.n	8009154 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	7c12      	ldrb	r2, [r2, #16]
 8009148:	f107 0108 	add.w	r1, r7, #8
 800914c:	4610      	mov	r0, r2
 800914e:	4798      	blx	r3
 8009150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009152:	e091      	b.n	8009278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009154:	6839      	ldr	r1, [r7, #0]
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 fa97 	bl	800968a <USBD_CtlError>
            err++;
 800915c:	7afb      	ldrb	r3, [r7, #11]
 800915e:	3301      	adds	r3, #1
 8009160:	72fb      	strb	r3, [r7, #11]
          break;
 8009162:	e089      	b.n	8009278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00b      	beq.n	8009188 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	7c12      	ldrb	r2, [r2, #16]
 800917c:	f107 0108 	add.w	r1, r7, #8
 8009180:	4610      	mov	r0, r2
 8009182:	4798      	blx	r3
 8009184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009186:	e077      	b.n	8009278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fa7d 	bl	800968a <USBD_CtlError>
            err++;
 8009190:	7afb      	ldrb	r3, [r7, #11]
 8009192:	3301      	adds	r3, #1
 8009194:	72fb      	strb	r3, [r7, #11]
          break;
 8009196:	e06f      	b.n	8009278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00b      	beq.n	80091bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	7c12      	ldrb	r2, [r2, #16]
 80091b0:	f107 0108 	add.w	r1, r7, #8
 80091b4:	4610      	mov	r0, r2
 80091b6:	4798      	blx	r3
 80091b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091ba:	e05d      	b.n	8009278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fa63 	bl	800968a <USBD_CtlError>
            err++;
 80091c4:	7afb      	ldrb	r3, [r7, #11]
 80091c6:	3301      	adds	r3, #1
 80091c8:	72fb      	strb	r3, [r7, #11]
          break;
 80091ca:	e055      	b.n	8009278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00b      	beq.n	80091f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	7c12      	ldrb	r2, [r2, #16]
 80091e4:	f107 0108 	add.w	r1, r7, #8
 80091e8:	4610      	mov	r0, r2
 80091ea:	4798      	blx	r3
 80091ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091ee:	e043      	b.n	8009278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091f0:	6839      	ldr	r1, [r7, #0]
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fa49 	bl	800968a <USBD_CtlError>
            err++;
 80091f8:	7afb      	ldrb	r3, [r7, #11]
 80091fa:	3301      	adds	r3, #1
 80091fc:	72fb      	strb	r3, [r7, #11]
          break;
 80091fe:	e03b      	b.n	8009278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00b      	beq.n	8009224 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009212:	695b      	ldr	r3, [r3, #20]
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	7c12      	ldrb	r2, [r2, #16]
 8009218:	f107 0108 	add.w	r1, r7, #8
 800921c:	4610      	mov	r0, r2
 800921e:	4798      	blx	r3
 8009220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009222:	e029      	b.n	8009278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fa2f 	bl	800968a <USBD_CtlError>
            err++;
 800922c:	7afb      	ldrb	r3, [r7, #11]
 800922e:	3301      	adds	r3, #1
 8009230:	72fb      	strb	r3, [r7, #11]
          break;
 8009232:	e021      	b.n	8009278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800923a:	699b      	ldr	r3, [r3, #24]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00b      	beq.n	8009258 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009246:	699b      	ldr	r3, [r3, #24]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	7c12      	ldrb	r2, [r2, #16]
 800924c:	f107 0108 	add.w	r1, r7, #8
 8009250:	4610      	mov	r0, r2
 8009252:	4798      	blx	r3
 8009254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009256:	e00f      	b.n	8009278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009258:	6839      	ldr	r1, [r7, #0]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fa15 	bl	800968a <USBD_CtlError>
            err++;
 8009260:	7afb      	ldrb	r3, [r7, #11]
 8009262:	3301      	adds	r3, #1
 8009264:	72fb      	strb	r3, [r7, #11]
          break;
 8009266:	e007      	b.n	8009278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fa0d 	bl	800968a <USBD_CtlError>
          err++;
 8009270:	7afb      	ldrb	r3, [r7, #11]
 8009272:	3301      	adds	r3, #1
 8009274:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009276:	e038      	b.n	80092ea <USBD_GetDescriptor+0x286>
 8009278:	e037      	b.n	80092ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	7c1b      	ldrb	r3, [r3, #16]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d109      	bne.n	8009296 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800928a:	f107 0208 	add.w	r2, r7, #8
 800928e:	4610      	mov	r0, r2
 8009290:	4798      	blx	r3
 8009292:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009294:	e029      	b.n	80092ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 f9f6 	bl	800968a <USBD_CtlError>
        err++;
 800929e:	7afb      	ldrb	r3, [r7, #11]
 80092a0:	3301      	adds	r3, #1
 80092a2:	72fb      	strb	r3, [r7, #11]
      break;
 80092a4:	e021      	b.n	80092ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	7c1b      	ldrb	r3, [r3, #16]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10d      	bne.n	80092ca <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b6:	f107 0208 	add.w	r2, r7, #8
 80092ba:	4610      	mov	r0, r2
 80092bc:	4798      	blx	r3
 80092be:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	3301      	adds	r3, #1
 80092c4:	2207      	movs	r2, #7
 80092c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092c8:	e00f      	b.n	80092ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80092ca:	6839      	ldr	r1, [r7, #0]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f9dc 	bl	800968a <USBD_CtlError>
        err++;
 80092d2:	7afb      	ldrb	r3, [r7, #11]
 80092d4:	3301      	adds	r3, #1
 80092d6:	72fb      	strb	r3, [r7, #11]
      break;
 80092d8:	e007      	b.n	80092ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80092da:	6839      	ldr	r1, [r7, #0]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f9d4 	bl	800968a <USBD_CtlError>
      err++;
 80092e2:	7afb      	ldrb	r3, [r7, #11]
 80092e4:	3301      	adds	r3, #1
 80092e6:	72fb      	strb	r3, [r7, #11]
      break;
 80092e8:	bf00      	nop
  }

  if (err != 0U)
 80092ea:	7afb      	ldrb	r3, [r7, #11]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d11c      	bne.n	800932a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80092f0:	893b      	ldrh	r3, [r7, #8]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d011      	beq.n	800931a <USBD_GetDescriptor+0x2b6>
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	88db      	ldrh	r3, [r3, #6]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00d      	beq.n	800931a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	88da      	ldrh	r2, [r3, #6]
 8009302:	893b      	ldrh	r3, [r7, #8]
 8009304:	4293      	cmp	r3, r2
 8009306:	bf28      	it	cs
 8009308:	4613      	movcs	r3, r2
 800930a:	b29b      	uxth	r3, r3
 800930c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800930e:	893b      	ldrh	r3, [r7, #8]
 8009310:	461a      	mov	r2, r3
 8009312:	68f9      	ldr	r1, [r7, #12]
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fa22 	bl	800975e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	88db      	ldrh	r3, [r3, #6]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d104      	bne.n	800932c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fa79 	bl	800981a <USBD_CtlSendStatus>
 8009328:	e000      	b.n	800932c <USBD_GetDescriptor+0x2c8>
    return;
 800932a:	bf00      	nop
    }
  }
}
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop

08009334 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	889b      	ldrh	r3, [r3, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d130      	bne.n	80093a8 <USBD_SetAddress+0x74>
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	88db      	ldrh	r3, [r3, #6]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d12c      	bne.n	80093a8 <USBD_SetAddress+0x74>
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	885b      	ldrh	r3, [r3, #2]
 8009352:	2b7f      	cmp	r3, #127	; 0x7f
 8009354:	d828      	bhi.n	80093a8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	885b      	ldrh	r3, [r3, #2]
 800935a:	b2db      	uxtb	r3, r3
 800935c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009360:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009368:	2b03      	cmp	r3, #3
 800936a:	d104      	bne.n	8009376 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f98b 	bl	800968a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009374:	e01d      	b.n	80093b2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	7bfa      	ldrb	r2, [r7, #15]
 800937a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800937e:	7bfb      	ldrb	r3, [r7, #15]
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fe34 	bl	8009ff0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fa46 	bl	800981a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800938e:	7bfb      	ldrb	r3, [r7, #15]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d004      	beq.n	800939e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2202      	movs	r2, #2
 8009398:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800939c:	e009      	b.n	80093b2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2201      	movs	r2, #1
 80093a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093a6:	e004      	b.n	80093b2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80093a8:	6839      	ldr	r1, [r7, #0]
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f96d 	bl	800968a <USBD_CtlError>
  }
}
 80093b0:	bf00      	nop
 80093b2:	bf00      	nop
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
	...

080093bc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	885b      	ldrh	r3, [r3, #2]
 80093ca:	b2da      	uxtb	r2, r3
 80093cc:	4b41      	ldr	r3, [pc, #260]	; (80094d4 <USBD_SetConfig+0x118>)
 80093ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80093d0:	4b40      	ldr	r3, [pc, #256]	; (80094d4 <USBD_SetConfig+0x118>)
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d904      	bls.n	80093e2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80093d8:	6839      	ldr	r1, [r7, #0]
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f955 	bl	800968a <USBD_CtlError>
 80093e0:	e075      	b.n	80094ce <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d002      	beq.n	80093f2 <USBD_SetConfig+0x36>
 80093ec:	2b03      	cmp	r3, #3
 80093ee:	d023      	beq.n	8009438 <USBD_SetConfig+0x7c>
 80093f0:	e062      	b.n	80094b8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80093f2:	4b38      	ldr	r3, [pc, #224]	; (80094d4 <USBD_SetConfig+0x118>)
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d01a      	beq.n	8009430 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80093fa:	4b36      	ldr	r3, [pc, #216]	; (80094d4 <USBD_SetConfig+0x118>)
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	461a      	mov	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2203      	movs	r2, #3
 8009408:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800940c:	4b31      	ldr	r3, [pc, #196]	; (80094d4 <USBD_SetConfig+0x118>)
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7ff f9e8 	bl	80087e8 <USBD_SetClassConfig>
 8009418:	4603      	mov	r3, r0
 800941a:	2b02      	cmp	r3, #2
 800941c:	d104      	bne.n	8009428 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f932 	bl	800968a <USBD_CtlError>
            return;
 8009426:	e052      	b.n	80094ce <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f9f6 	bl	800981a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800942e:	e04e      	b.n	80094ce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f9f2 	bl	800981a <USBD_CtlSendStatus>
        break;
 8009436:	e04a      	b.n	80094ce <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009438:	4b26      	ldr	r3, [pc, #152]	; (80094d4 <USBD_SetConfig+0x118>)
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d112      	bne.n	8009466 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2202      	movs	r2, #2
 8009444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009448:	4b22      	ldr	r3, [pc, #136]	; (80094d4 <USBD_SetConfig+0x118>)
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	461a      	mov	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009452:	4b20      	ldr	r3, [pc, #128]	; (80094d4 <USBD_SetConfig+0x118>)
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	4619      	mov	r1, r3
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7ff f9e4 	bl	8008826 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f9db 	bl	800981a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009464:	e033      	b.n	80094ce <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009466:	4b1b      	ldr	r3, [pc, #108]	; (80094d4 <USBD_SetConfig+0x118>)
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	461a      	mov	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	429a      	cmp	r2, r3
 8009472:	d01d      	beq.n	80094b0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	b2db      	uxtb	r3, r3
 800947a:	4619      	mov	r1, r3
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7ff f9d2 	bl	8008826 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009482:	4b14      	ldr	r3, [pc, #80]	; (80094d4 <USBD_SetConfig+0x118>)
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	461a      	mov	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800948c:	4b11      	ldr	r3, [pc, #68]	; (80094d4 <USBD_SetConfig+0x118>)
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	4619      	mov	r1, r3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7ff f9a8 	bl	80087e8 <USBD_SetClassConfig>
 8009498:	4603      	mov	r3, r0
 800949a:	2b02      	cmp	r3, #2
 800949c:	d104      	bne.n	80094a8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800949e:	6839      	ldr	r1, [r7, #0]
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f8f2 	bl	800968a <USBD_CtlError>
            return;
 80094a6:	e012      	b.n	80094ce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f9b6 	bl	800981a <USBD_CtlSendStatus>
        break;
 80094ae:	e00e      	b.n	80094ce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f9b2 	bl	800981a <USBD_CtlSendStatus>
        break;
 80094b6:	e00a      	b.n	80094ce <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80094b8:	6839      	ldr	r1, [r7, #0]
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f8e5 	bl	800968a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80094c0:	4b04      	ldr	r3, [pc, #16]	; (80094d4 <USBD_SetConfig+0x118>)
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	4619      	mov	r1, r3
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7ff f9ad 	bl	8008826 <USBD_ClrClassConfig>
        break;
 80094cc:	bf00      	nop
    }
  }
}
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	200001be 	.word	0x200001be

080094d8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	88db      	ldrh	r3, [r3, #6]
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d004      	beq.n	80094f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80094ea:	6839      	ldr	r1, [r7, #0]
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 f8cc 	bl	800968a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80094f2:	e022      	b.n	800953a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	dc02      	bgt.n	8009504 <USBD_GetConfig+0x2c>
 80094fe:	2b00      	cmp	r3, #0
 8009500:	dc03      	bgt.n	800950a <USBD_GetConfig+0x32>
 8009502:	e015      	b.n	8009530 <USBD_GetConfig+0x58>
 8009504:	2b03      	cmp	r3, #3
 8009506:	d00b      	beq.n	8009520 <USBD_GetConfig+0x48>
 8009508:	e012      	b.n	8009530 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	3308      	adds	r3, #8
 8009514:	2201      	movs	r2, #1
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f920 	bl	800975e <USBD_CtlSendData>
        break;
 800951e:	e00c      	b.n	800953a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	3304      	adds	r3, #4
 8009524:	2201      	movs	r2, #1
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 f918 	bl	800975e <USBD_CtlSendData>
        break;
 800952e:	e004      	b.n	800953a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009530:	6839      	ldr	r1, [r7, #0]
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f8a9 	bl	800968a <USBD_CtlError>
        break;
 8009538:	bf00      	nop
}
 800953a:	bf00      	nop
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b082      	sub	sp, #8
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009552:	3b01      	subs	r3, #1
 8009554:	2b02      	cmp	r3, #2
 8009556:	d81e      	bhi.n	8009596 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	88db      	ldrh	r3, [r3, #6]
 800955c:	2b02      	cmp	r3, #2
 800955e:	d004      	beq.n	800956a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f891 	bl	800968a <USBD_CtlError>
        break;
 8009568:	e01a      	b.n	80095a0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2201      	movs	r2, #1
 800956e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009576:	2b00      	cmp	r3, #0
 8009578:	d005      	beq.n	8009586 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	f043 0202 	orr.w	r2, r3, #2
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	330c      	adds	r3, #12
 800958a:	2202      	movs	r2, #2
 800958c:	4619      	mov	r1, r3
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 f8e5 	bl	800975e <USBD_CtlSendData>
      break;
 8009594:	e004      	b.n	80095a0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 f876 	bl	800968a <USBD_CtlError>
      break;
 800959e:	bf00      	nop
  }
}
 80095a0:	bf00      	nop
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	885b      	ldrh	r3, [r3, #2]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d106      	bne.n	80095c8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f929 	bl	800981a <USBD_CtlSendStatus>
  }
}
 80095c8:	bf00      	nop
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095e0:	3b01      	subs	r3, #1
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d80b      	bhi.n	80095fe <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	885b      	ldrh	r3, [r3, #2]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d10c      	bne.n	8009608 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f90f 	bl	800981a <USBD_CtlSendStatus>
      }
      break;
 80095fc:	e004      	b.n	8009608 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80095fe:	6839      	ldr	r1, [r7, #0]
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 f842 	bl	800968a <USBD_CtlError>
      break;
 8009606:	e000      	b.n	800960a <USBD_ClrFeature+0x3a>
      break;
 8009608:	bf00      	nop
  }
}
 800960a:	bf00      	nop
 800960c:	3708      	adds	r7, #8
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009612:	b480      	push	{r7}
 8009614:	b083      	sub	sp, #12
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	781a      	ldrb	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	785a      	ldrb	r2, [r3, #1]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	3302      	adds	r3, #2
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	b29a      	uxth	r2, r3
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	3303      	adds	r3, #3
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	b29b      	uxth	r3, r3
 800963c:	021b      	lsls	r3, r3, #8
 800963e:	b29b      	uxth	r3, r3
 8009640:	4413      	add	r3, r2
 8009642:	b29a      	uxth	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	3304      	adds	r3, #4
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	b29a      	uxth	r2, r3
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	3305      	adds	r3, #5
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	b29b      	uxth	r3, r3
 8009658:	021b      	lsls	r3, r3, #8
 800965a:	b29b      	uxth	r3, r3
 800965c:	4413      	add	r3, r2
 800965e:	b29a      	uxth	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	3306      	adds	r3, #6
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	b29a      	uxth	r2, r3
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	3307      	adds	r3, #7
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	b29b      	uxth	r3, r3
 8009674:	021b      	lsls	r3, r3, #8
 8009676:	b29b      	uxth	r3, r3
 8009678:	4413      	add	r3, r2
 800967a:	b29a      	uxth	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	80da      	strh	r2, [r3, #6]

}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	bc80      	pop	{r7}
 8009688:	4770      	bx	lr

0800968a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b082      	sub	sp, #8
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009694:	2180      	movs	r1, #128	; 0x80
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fc40 	bl	8009f1c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800969c:	2100      	movs	r1, #0
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 fc3c 	bl	8009f1c <USBD_LL_StallEP>
}
 80096a4:	bf00      	nop
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80096b8:	2300      	movs	r3, #0
 80096ba:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d032      	beq.n	8009728 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f000 f834 	bl	8009730 <USBD_GetLen>
 80096c8:	4603      	mov	r3, r0
 80096ca:	3301      	adds	r3, #1
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	005b      	lsls	r3, r3, #1
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
 80096d8:	1c5a      	adds	r2, r3, #1
 80096da:	75fa      	strb	r2, [r7, #23]
 80096dc:	461a      	mov	r2, r3
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	4413      	add	r3, r2
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	7812      	ldrb	r2, [r2, #0]
 80096e6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80096e8:	7dfb      	ldrb	r3, [r7, #23]
 80096ea:	1c5a      	adds	r2, r3, #1
 80096ec:	75fa      	strb	r2, [r7, #23]
 80096ee:	461a      	mov	r2, r3
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	4413      	add	r3, r2
 80096f4:	2203      	movs	r2, #3
 80096f6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80096f8:	e012      	b.n	8009720 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	1c5a      	adds	r2, r3, #1
 80096fe:	60fa      	str	r2, [r7, #12]
 8009700:	7dfa      	ldrb	r2, [r7, #23]
 8009702:	1c51      	adds	r1, r2, #1
 8009704:	75f9      	strb	r1, [r7, #23]
 8009706:	4611      	mov	r1, r2
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	440a      	add	r2, r1
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009710:	7dfb      	ldrb	r3, [r7, #23]
 8009712:	1c5a      	adds	r2, r3, #1
 8009714:	75fa      	strb	r2, [r7, #23]
 8009716:	461a      	mov	r2, r3
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	4413      	add	r3, r2
 800971c:	2200      	movs	r2, #0
 800971e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1e8      	bne.n	80096fa <USBD_GetString+0x4e>
    }
  }
}
 8009728:	bf00      	nop
 800972a:	3718      	adds	r7, #24
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009730:	b480      	push	{r7}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009738:	2300      	movs	r3, #0
 800973a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800973c:	e005      	b.n	800974a <USBD_GetLen+0x1a>
  {
    len++;
 800973e:	7bfb      	ldrb	r3, [r7, #15]
 8009740:	3301      	adds	r3, #1
 8009742:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	3301      	adds	r3, #1
 8009748:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1f5      	bne.n	800973e <USBD_GetLen+0xe>
  }

  return len;
 8009752:	7bfb      	ldrb	r3, [r7, #15]
}
 8009754:	4618      	mov	r0, r3
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	bc80      	pop	{r7}
 800975c:	4770      	bx	lr

0800975e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b084      	sub	sp, #16
 8009762:	af00      	add	r7, sp, #0
 8009764:	60f8      	str	r0, [r7, #12]
 8009766:	60b9      	str	r1, [r7, #8]
 8009768:	4613      	mov	r3, r2
 800976a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2202      	movs	r2, #2
 8009770:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009774:	88fa      	ldrh	r2, [r7, #6]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800977a:	88fa      	ldrh	r2, [r7, #6]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009780:	88fb      	ldrh	r3, [r7, #6]
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	2100      	movs	r1, #0
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f000 fc51 	bl	800a02e <USBD_LL_Transmit>

  return USBD_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b084      	sub	sp, #16
 800979a:	af00      	add	r7, sp, #0
 800979c:	60f8      	str	r0, [r7, #12]
 800979e:	60b9      	str	r1, [r7, #8]
 80097a0:	4613      	mov	r3, r2
 80097a2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097a4:	88fb      	ldrh	r3, [r7, #6]
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	2100      	movs	r1, #0
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f000 fc3f 	bl	800a02e <USBD_LL_Transmit>

  return USBD_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b084      	sub	sp, #16
 80097be:	af00      	add	r7, sp, #0
 80097c0:	60f8      	str	r0, [r7, #12]
 80097c2:	60b9      	str	r1, [r7, #8]
 80097c4:	4613      	mov	r3, r2
 80097c6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2203      	movs	r2, #3
 80097cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80097d0:	88fa      	ldrh	r2, [r7, #6]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80097d8:	88fa      	ldrh	r2, [r7, #6]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097e0:	88fb      	ldrh	r3, [r7, #6]
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	2100      	movs	r1, #0
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 fc44 	bl	800a074 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b084      	sub	sp, #16
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	60f8      	str	r0, [r7, #12]
 80097fe:	60b9      	str	r1, [r7, #8]
 8009800:	4613      	mov	r3, r2
 8009802:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009804:	88fb      	ldrh	r3, [r7, #6]
 8009806:	68ba      	ldr	r2, [r7, #8]
 8009808:	2100      	movs	r1, #0
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f000 fc32 	bl	800a074 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b082      	sub	sp, #8
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2204      	movs	r2, #4
 8009826:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800982a:	2300      	movs	r3, #0
 800982c:	2200      	movs	r2, #0
 800982e:	2100      	movs	r1, #0
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 fbfc 	bl	800a02e <USBD_LL_Transmit>

  return USBD_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2205      	movs	r2, #5
 800984c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009850:	2300      	movs	r3, #0
 8009852:	2200      	movs	r2, #0
 8009854:	2100      	movs	r1, #0
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fc0c 	bl	800a074 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
	...

08009868 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800986c:	2200      	movs	r2, #0
 800986e:	4912      	ldr	r1, [pc, #72]	; (80098b8 <MX_USB_DEVICE_Init+0x50>)
 8009870:	4812      	ldr	r0, [pc, #72]	; (80098bc <MX_USB_DEVICE_Init+0x54>)
 8009872:	f7fe ff5f 	bl	8008734 <USBD_Init>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d001      	beq.n	8009880 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800987c:	f7f7 fae2 	bl	8000e44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009880:	490f      	ldr	r1, [pc, #60]	; (80098c0 <MX_USB_DEVICE_Init+0x58>)
 8009882:	480e      	ldr	r0, [pc, #56]	; (80098bc <MX_USB_DEVICE_Init+0x54>)
 8009884:	f7fe ff81 	bl	800878a <USBD_RegisterClass>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d001      	beq.n	8009892 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800988e:	f7f7 fad9 	bl	8000e44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009892:	490c      	ldr	r1, [pc, #48]	; (80098c4 <MX_USB_DEVICE_Init+0x5c>)
 8009894:	4809      	ldr	r0, [pc, #36]	; (80098bc <MX_USB_DEVICE_Init+0x54>)
 8009896:	f7fe fee1 	bl	800865c <USBD_CDC_RegisterInterface>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d001      	beq.n	80098a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80098a0:	f7f7 fad0 	bl	8000e44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80098a4:	4805      	ldr	r0, [pc, #20]	; (80098bc <MX_USB_DEVICE_Init+0x54>)
 80098a6:	f7fe ff89 	bl	80087bc <USBD_Start>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d001      	beq.n	80098b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80098b0:	f7f7 fac8 	bl	8000e44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80098b4:	bf00      	nop
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	20000134 	.word	0x20000134
 80098bc:	200005b4 	.word	0x200005b4
 80098c0:	20000020 	.word	0x20000020
 80098c4:	20000124 	.word	0x20000124

080098c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80098cc:	2200      	movs	r2, #0
 80098ce:	4905      	ldr	r1, [pc, #20]	; (80098e4 <CDC_Init_FS+0x1c>)
 80098d0:	4805      	ldr	r0, [pc, #20]	; (80098e8 <CDC_Init_FS+0x20>)
 80098d2:	f7fe fed9 	bl	8008688 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80098d6:	4905      	ldr	r1, [pc, #20]	; (80098ec <CDC_Init_FS+0x24>)
 80098d8:	4803      	ldr	r0, [pc, #12]	; (80098e8 <CDC_Init_FS+0x20>)
 80098da:	f7fe feee 	bl	80086ba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80098de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	20000c60 	.word	0x20000c60
 80098e8:	200005b4 	.word	0x200005b4
 80098ec:	20000878 	.word	0x20000878

080098f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80098f0:	b480      	push	{r7}
 80098f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80098f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bc80      	pop	{r7}
 80098fc:	4770      	bx	lr
	...

08009900 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	4603      	mov	r3, r0
 8009908:	6039      	str	r1, [r7, #0]
 800990a:	71fb      	strb	r3, [r7, #7]
 800990c:	4613      	mov	r3, r2
 800990e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009910:	79fb      	ldrb	r3, [r7, #7]
 8009912:	2b23      	cmp	r3, #35	; 0x23
 8009914:	d84a      	bhi.n	80099ac <CDC_Control_FS+0xac>
 8009916:	a201      	add	r2, pc, #4	; (adr r2, 800991c <CDC_Control_FS+0x1c>)
 8009918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991c:	080099ad 	.word	0x080099ad
 8009920:	080099ad 	.word	0x080099ad
 8009924:	080099ad 	.word	0x080099ad
 8009928:	080099ad 	.word	0x080099ad
 800992c:	080099ad 	.word	0x080099ad
 8009930:	080099ad 	.word	0x080099ad
 8009934:	080099ad 	.word	0x080099ad
 8009938:	080099ad 	.word	0x080099ad
 800993c:	080099ad 	.word	0x080099ad
 8009940:	080099ad 	.word	0x080099ad
 8009944:	080099ad 	.word	0x080099ad
 8009948:	080099ad 	.word	0x080099ad
 800994c:	080099ad 	.word	0x080099ad
 8009950:	080099ad 	.word	0x080099ad
 8009954:	080099ad 	.word	0x080099ad
 8009958:	080099ad 	.word	0x080099ad
 800995c:	080099ad 	.word	0x080099ad
 8009960:	080099ad 	.word	0x080099ad
 8009964:	080099ad 	.word	0x080099ad
 8009968:	080099ad 	.word	0x080099ad
 800996c:	080099ad 	.word	0x080099ad
 8009970:	080099ad 	.word	0x080099ad
 8009974:	080099ad 	.word	0x080099ad
 8009978:	080099ad 	.word	0x080099ad
 800997c:	080099ad 	.word	0x080099ad
 8009980:	080099ad 	.word	0x080099ad
 8009984:	080099ad 	.word	0x080099ad
 8009988:	080099ad 	.word	0x080099ad
 800998c:	080099ad 	.word	0x080099ad
 8009990:	080099ad 	.word	0x080099ad
 8009994:	080099ad 	.word	0x080099ad
 8009998:	080099ad 	.word	0x080099ad
 800999c:	080099ad 	.word	0x080099ad
 80099a0:	080099ad 	.word	0x080099ad
 80099a4:	080099ad 	.word	0x080099ad
 80099a8:	080099ad 	.word	0x080099ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80099ac:	bf00      	nop
  }

  return (USBD_OK);
 80099ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bc80      	pop	{r7}
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop

080099bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	for (int i = 0; i < (*Len); i++)
 80099c6:	2300      	movs	r3, #0
 80099c8:	60fb      	str	r3, [r7, #12]
 80099ca:	e009      	b.n	80099e0 <CDC_Receive_FS+0x24>
		fifo_push(Buf[i]);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	4413      	add	r3, r2
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7f6 fbb9 	bl	800014c <fifo_push>
	for (int i = 0; i < (*Len); i++)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	3301      	adds	r3, #1
 80099de:	60fb      	str	r3, [r7, #12]
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d8f0      	bhi.n	80099cc <CDC_Receive_FS+0x10>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80099ea:	6879      	ldr	r1, [r7, #4]
 80099ec:	4805      	ldr	r0, [pc, #20]	; (8009a04 <CDC_Receive_FS+0x48>)
 80099ee:	f7fe fe64 	bl	80086ba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80099f2:	4804      	ldr	r0, [pc, #16]	; (8009a04 <CDC_Receive_FS+0x48>)
 80099f4:	f7fe fe74 	bl	80086e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80099f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	200005b4 	.word	0x200005b4

08009a08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	4603      	mov	r3, r0
 8009a10:	6039      	str	r1, [r7, #0]
 8009a12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	2212      	movs	r2, #18
 8009a18:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009a1a:	4b03      	ldr	r3, [pc, #12]	; (8009a28 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bc80      	pop	{r7}
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	20000150 	.word	0x20000150

08009a2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	4603      	mov	r3, r0
 8009a34:	6039      	str	r1, [r7, #0]
 8009a36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	2204      	movs	r2, #4
 8009a3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a3e:	4b03      	ldr	r3, [pc, #12]	; (8009a4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bc80      	pop	{r7}
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	20000164 	.word	0x20000164

08009a50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	4603      	mov	r3, r0
 8009a58:	6039      	str	r1, [r7, #0]
 8009a5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a5c:	79fb      	ldrb	r3, [r7, #7]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d105      	bne.n	8009a6e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	4907      	ldr	r1, [pc, #28]	; (8009a84 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a66:	4808      	ldr	r0, [pc, #32]	; (8009a88 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a68:	f7ff fe20 	bl	80096ac <USBD_GetString>
 8009a6c:	e004      	b.n	8009a78 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	4904      	ldr	r1, [pc, #16]	; (8009a84 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a72:	4805      	ldr	r0, [pc, #20]	; (8009a88 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a74:	f7ff fe1a 	bl	80096ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a78:	4b02      	ldr	r3, [pc, #8]	; (8009a84 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3708      	adds	r7, #8
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	20001048 	.word	0x20001048
 8009a88:	0800a2c0 	.word	0x0800a2c0

08009a8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	4603      	mov	r3, r0
 8009a94:	6039      	str	r1, [r7, #0]
 8009a96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	4904      	ldr	r1, [pc, #16]	; (8009aac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a9c:	4804      	ldr	r0, [pc, #16]	; (8009ab0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a9e:	f7ff fe05 	bl	80096ac <USBD_GetString>
  return USBD_StrDesc;
 8009aa2:	4b02      	ldr	r3, [pc, #8]	; (8009aac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	20001048 	.word	0x20001048
 8009ab0:	0800a2d8 	.word	0x0800a2d8

08009ab4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	4603      	mov	r3, r0
 8009abc:	6039      	str	r1, [r7, #0]
 8009abe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	221a      	movs	r2, #26
 8009ac4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009ac6:	f000 f843 	bl	8009b50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009aca:	4b02      	ldr	r3, [pc, #8]	; (8009ad4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	20000168 	.word	0x20000168

08009ad8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	4603      	mov	r3, r0
 8009ae0:	6039      	str	r1, [r7, #0]
 8009ae2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ae4:	79fb      	ldrb	r3, [r7, #7]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d105      	bne.n	8009af6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009aea:	683a      	ldr	r2, [r7, #0]
 8009aec:	4907      	ldr	r1, [pc, #28]	; (8009b0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009aee:	4808      	ldr	r0, [pc, #32]	; (8009b10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009af0:	f7ff fddc 	bl	80096ac <USBD_GetString>
 8009af4:	e004      	b.n	8009b00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	4904      	ldr	r1, [pc, #16]	; (8009b0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009afa:	4805      	ldr	r0, [pc, #20]	; (8009b10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009afc:	f7ff fdd6 	bl	80096ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b00:	4b02      	ldr	r3, [pc, #8]	; (8009b0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	20001048 	.word	0x20001048
 8009b10:	0800a2ec 	.word	0x0800a2ec

08009b14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	6039      	str	r1, [r7, #0]
 8009b1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b20:	79fb      	ldrb	r3, [r7, #7]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d105      	bne.n	8009b32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b26:	683a      	ldr	r2, [r7, #0]
 8009b28:	4907      	ldr	r1, [pc, #28]	; (8009b48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b2a:	4808      	ldr	r0, [pc, #32]	; (8009b4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b2c:	f7ff fdbe 	bl	80096ac <USBD_GetString>
 8009b30:	e004      	b.n	8009b3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b32:	683a      	ldr	r2, [r7, #0]
 8009b34:	4904      	ldr	r1, [pc, #16]	; (8009b48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b36:	4805      	ldr	r0, [pc, #20]	; (8009b4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b38:	f7ff fdb8 	bl	80096ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b3c:	4b02      	ldr	r3, [pc, #8]	; (8009b48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	20001048 	.word	0x20001048
 8009b4c:	0800a2f8 	.word	0x0800a2f8

08009b50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009b56:	4b0f      	ldr	r3, [pc, #60]	; (8009b94 <Get_SerialNum+0x44>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b5c:	4b0e      	ldr	r3, [pc, #56]	; (8009b98 <Get_SerialNum+0x48>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009b62:	4b0e      	ldr	r3, [pc, #56]	; (8009b9c <Get_SerialNum+0x4c>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d009      	beq.n	8009b8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b76:	2208      	movs	r2, #8
 8009b78:	4909      	ldr	r1, [pc, #36]	; (8009ba0 <Get_SerialNum+0x50>)
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f000 f814 	bl	8009ba8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009b80:	2204      	movs	r2, #4
 8009b82:	4908      	ldr	r1, [pc, #32]	; (8009ba4 <Get_SerialNum+0x54>)
 8009b84:	68b8      	ldr	r0, [r7, #8]
 8009b86:	f000 f80f 	bl	8009ba8 <IntToUnicode>
  }
}
 8009b8a:	bf00      	nop
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	1ffff7e8 	.word	0x1ffff7e8
 8009b98:	1ffff7ec 	.word	0x1ffff7ec
 8009b9c:	1ffff7f0 	.word	0x1ffff7f0
 8009ba0:	2000016a 	.word	0x2000016a
 8009ba4:	2000017a 	.word	0x2000017a

08009ba8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b087      	sub	sp, #28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009bba:	2300      	movs	r3, #0
 8009bbc:	75fb      	strb	r3, [r7, #23]
 8009bbe:	e027      	b.n	8009c10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	0f1b      	lsrs	r3, r3, #28
 8009bc4:	2b09      	cmp	r3, #9
 8009bc6:	d80b      	bhi.n	8009be0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	0f1b      	lsrs	r3, r3, #28
 8009bcc:	b2da      	uxtb	r2, r3
 8009bce:	7dfb      	ldrb	r3, [r7, #23]
 8009bd0:	005b      	lsls	r3, r3, #1
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	440b      	add	r3, r1
 8009bd8:	3230      	adds	r2, #48	; 0x30
 8009bda:	b2d2      	uxtb	r2, r2
 8009bdc:	701a      	strb	r2, [r3, #0]
 8009bde:	e00a      	b.n	8009bf6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	0f1b      	lsrs	r3, r3, #28
 8009be4:	b2da      	uxtb	r2, r3
 8009be6:	7dfb      	ldrb	r3, [r7, #23]
 8009be8:	005b      	lsls	r3, r3, #1
 8009bea:	4619      	mov	r1, r3
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	440b      	add	r3, r1
 8009bf0:	3237      	adds	r2, #55	; 0x37
 8009bf2:	b2d2      	uxtb	r2, r2
 8009bf4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	011b      	lsls	r3, r3, #4
 8009bfa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009bfc:	7dfb      	ldrb	r3, [r7, #23]
 8009bfe:	005b      	lsls	r3, r3, #1
 8009c00:	3301      	adds	r3, #1
 8009c02:	68ba      	ldr	r2, [r7, #8]
 8009c04:	4413      	add	r3, r2
 8009c06:	2200      	movs	r2, #0
 8009c08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c0a:	7dfb      	ldrb	r3, [r7, #23]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	75fb      	strb	r3, [r7, #23]
 8009c10:	7dfa      	ldrb	r2, [r7, #23]
 8009c12:	79fb      	ldrb	r3, [r7, #7]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d3d3      	bcc.n	8009bc0 <IntToUnicode+0x18>
  }
}
 8009c18:	bf00      	nop
 8009c1a:	bf00      	nop
 8009c1c:	371c      	adds	r7, #28
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bc80      	pop	{r7}
 8009c22:	4770      	bx	lr

08009c24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a0d      	ldr	r2, [pc, #52]	; (8009c68 <HAL_PCD_MspInit+0x44>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d113      	bne.n	8009c5e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009c36:	4b0d      	ldr	r3, [pc, #52]	; (8009c6c <HAL_PCD_MspInit+0x48>)
 8009c38:	69db      	ldr	r3, [r3, #28]
 8009c3a:	4a0c      	ldr	r2, [pc, #48]	; (8009c6c <HAL_PCD_MspInit+0x48>)
 8009c3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009c40:	61d3      	str	r3, [r2, #28]
 8009c42:	4b0a      	ldr	r3, [pc, #40]	; (8009c6c <HAL_PCD_MspInit+0x48>)
 8009c44:	69db      	ldr	r3, [r3, #28]
 8009c46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009c4e:	2200      	movs	r2, #0
 8009c50:	2100      	movs	r1, #0
 8009c52:	2014      	movs	r0, #20
 8009c54:	f7f8 f8ad 	bl	8001db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009c58:	2014      	movs	r0, #20
 8009c5a:	f7f8 f8c6 	bl	8001dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009c5e:	bf00      	nop
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	40005c00 	.word	0x40005c00
 8009c6c:	40021000 	.word	0x40021000

08009c70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009c84:	4619      	mov	r1, r3
 8009c86:	4610      	mov	r0, r2
 8009c88:	f7fe fde0 	bl	800884c <USBD_LL_SetupStage>
}
 8009c8c:	bf00      	nop
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009ca6:	78fa      	ldrb	r2, [r7, #3]
 8009ca8:	6879      	ldr	r1, [r7, #4]
 8009caa:	4613      	mov	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4413      	add	r3, r2
 8009cb0:	00db      	lsls	r3, r3, #3
 8009cb2:	440b      	add	r3, r1
 8009cb4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	78fb      	ldrb	r3, [r7, #3]
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	f7fe fe12 	bl	80088e6 <USBD_LL_DataOutStage>
}
 8009cc2:	bf00      	nop
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b082      	sub	sp, #8
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009cdc:	78fa      	ldrb	r2, [r7, #3]
 8009cde:	6879      	ldr	r1, [r7, #4]
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	4413      	add	r3, r2
 8009ce6:	00db      	lsls	r3, r3, #3
 8009ce8:	440b      	add	r3, r1
 8009cea:	333c      	adds	r3, #60	; 0x3c
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	78fb      	ldrb	r3, [r7, #3]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	f7fe fe69 	bl	80089c8 <USBD_LL_DataInStage>
}
 8009cf6:	bf00      	nop
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b082      	sub	sp, #8
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7fe ff79 	bl	8008c04 <USBD_LL_SOF>
}
 8009d12:	bf00      	nop
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b084      	sub	sp, #16
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d22:	2301      	movs	r3, #1
 8009d24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d001      	beq.n	8009d32 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009d2e:	f7f7 f889 	bl	8000e44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009d38:	7bfa      	ldrb	r2, [r7, #15]
 8009d3a:	4611      	mov	r1, r2
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7fe ff29 	bl	8008b94 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7fe fee2 	bl	8008b12 <USBD_LL_Reset>
}
 8009d4e:	bf00      	nop
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
	...

08009d58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7fe ff23 	bl	8008bb2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d005      	beq.n	8009d80 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d74:	4b04      	ldr	r3, [pc, #16]	; (8009d88 <HAL_PCD_SuspendCallback+0x30>)
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	4a03      	ldr	r2, [pc, #12]	; (8009d88 <HAL_PCD_SuspendCallback+0x30>)
 8009d7a:	f043 0306 	orr.w	r3, r3, #6
 8009d7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009d80:	bf00      	nop
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	e000ed00 	.word	0xe000ed00

08009d8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fe ff1d 	bl	8008bda <USBD_LL_Resume>
}
 8009da0:	bf00      	nop
 8009da2:	3708      	adds	r7, #8
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009db0:	4a28      	ldr	r2, [pc, #160]	; (8009e54 <USBD_LL_Init+0xac>)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a26      	ldr	r2, [pc, #152]	; (8009e54 <USBD_LL_Init+0xac>)
 8009dbc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009dc0:	4b24      	ldr	r3, [pc, #144]	; (8009e54 <USBD_LL_Init+0xac>)
 8009dc2:	4a25      	ldr	r2, [pc, #148]	; (8009e58 <USBD_LL_Init+0xb0>)
 8009dc4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009dc6:	4b23      	ldr	r3, [pc, #140]	; (8009e54 <USBD_LL_Init+0xac>)
 8009dc8:	2208      	movs	r2, #8
 8009dca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009dcc:	4b21      	ldr	r3, [pc, #132]	; (8009e54 <USBD_LL_Init+0xac>)
 8009dce:	2202      	movs	r2, #2
 8009dd0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009dd2:	4b20      	ldr	r3, [pc, #128]	; (8009e54 <USBD_LL_Init+0xac>)
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009dd8:	4b1e      	ldr	r3, [pc, #120]	; (8009e54 <USBD_LL_Init+0xac>)
 8009dda:	2200      	movs	r2, #0
 8009ddc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009dde:	4b1d      	ldr	r3, [pc, #116]	; (8009e54 <USBD_LL_Init+0xac>)
 8009de0:	2200      	movs	r2, #0
 8009de2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009de4:	481b      	ldr	r0, [pc, #108]	; (8009e54 <USBD_LL_Init+0xac>)
 8009de6:	f7f9 f9e7 	bl	80031b8 <HAL_PCD_Init>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d001      	beq.n	8009df4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009df0:	f7f7 f828 	bl	8000e44 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009dfa:	2318      	movs	r3, #24
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	2100      	movs	r1, #0
 8009e00:	f7fa fe5d 	bl	8004abe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e0a:	2358      	movs	r3, #88	; 0x58
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	2180      	movs	r1, #128	; 0x80
 8009e10:	f7fa fe55 	bl	8004abe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e1a:	23c0      	movs	r3, #192	; 0xc0
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	2181      	movs	r1, #129	; 0x81
 8009e20:	f7fa fe4d 	bl	8004abe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e2a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009e2e:	2200      	movs	r2, #0
 8009e30:	2101      	movs	r1, #1
 8009e32:	f7fa fe44 	bl	8004abe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e40:	2200      	movs	r2, #0
 8009e42:	2182      	movs	r1, #130	; 0x82
 8009e44:	f7fa fe3b 	bl	8004abe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	20001248 	.word	0x20001248
 8009e58:	40005c00 	.word	0x40005c00

08009e5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e64:	2300      	movs	r3, #0
 8009e66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7f9 faab 	bl	80033ce <HAL_PCD_Start>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e7c:	7bfb      	ldrb	r3, [r7, #15]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f000 f94e 	bl	800a120 <USBD_Get_USB_Status>
 8009e84:	4603      	mov	r3, r0
 8009e86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e88:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b084      	sub	sp, #16
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
 8009e9a:	4608      	mov	r0, r1
 8009e9c:	4611      	mov	r1, r2
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	70fb      	strb	r3, [r7, #3]
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	70bb      	strb	r3, [r7, #2]
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eac:	2300      	movs	r3, #0
 8009eae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009eba:	78bb      	ldrb	r3, [r7, #2]
 8009ebc:	883a      	ldrh	r2, [r7, #0]
 8009ebe:	78f9      	ldrb	r1, [r7, #3]
 8009ec0:	f7f9 fc25 	bl	800370e <HAL_PCD_EP_Open>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f000 f928 	bl	800a120 <USBD_Get_USB_Status>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ed4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b084      	sub	sp, #16
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eea:	2300      	movs	r3, #0
 8009eec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ef8:	78fa      	ldrb	r2, [r7, #3]
 8009efa:	4611      	mov	r1, r2
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7f9 fc6c 	bl	80037da <HAL_PCD_EP_Close>
 8009f02:	4603      	mov	r3, r0
 8009f04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f06:	7bfb      	ldrb	r3, [r7, #15]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 f909 	bl	800a120 <USBD_Get_USB_Status>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f12:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	460b      	mov	r3, r1
 8009f26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f36:	78fa      	ldrb	r2, [r7, #3]
 8009f38:	4611      	mov	r1, r2
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7f9 fd2c 	bl	8003998 <HAL_PCD_EP_SetStall>
 8009f40:	4603      	mov	r3, r0
 8009f42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f44:	7bfb      	ldrb	r3, [r7, #15]
 8009f46:	4618      	mov	r0, r3
 8009f48:	f000 f8ea 	bl	800a120 <USBD_Get_USB_Status>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f50:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3710      	adds	r7, #16
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b084      	sub	sp, #16
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
 8009f62:	460b      	mov	r3, r1
 8009f64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f66:	2300      	movs	r3, #0
 8009f68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f74:	78fa      	ldrb	r2, [r7, #3]
 8009f76:	4611      	mov	r1, r2
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7f9 fd6d 	bl	8003a58 <HAL_PCD_EP_ClrStall>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f82:	7bfb      	ldrb	r3, [r7, #15]
 8009f84:	4618      	mov	r0, r3
 8009f86:	f000 f8cb 	bl	800a120 <USBD_Get_USB_Status>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009faa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	da0c      	bge.n	8009fce <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009fb4:	78fb      	ldrb	r3, [r7, #3]
 8009fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fba:	68f9      	ldr	r1, [r7, #12]
 8009fbc:	1c5a      	adds	r2, r3, #1
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4413      	add	r3, r2
 8009fc4:	00db      	lsls	r3, r3, #3
 8009fc6:	440b      	add	r3, r1
 8009fc8:	3302      	adds	r3, #2
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	e00b      	b.n	8009fe6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009fce:	78fb      	ldrb	r3, [r7, #3]
 8009fd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fd4:	68f9      	ldr	r1, [r7, #12]
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	4413      	add	r3, r2
 8009fdc:	00db      	lsls	r3, r3, #3
 8009fde:	440b      	add	r3, r1
 8009fe0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009fe4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bc80      	pop	{r7}
 8009fee:	4770      	bx	lr

08009ff0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a000:	2300      	movs	r3, #0
 800a002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a00a:	78fa      	ldrb	r2, [r7, #3]
 800a00c:	4611      	mov	r1, r2
 800a00e:	4618      	mov	r0, r3
 800a010:	f7f9 fb58 	bl	80036c4 <HAL_PCD_SetAddress>
 800a014:	4603      	mov	r3, r0
 800a016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a018:	7bfb      	ldrb	r3, [r7, #15]
 800a01a:	4618      	mov	r0, r3
 800a01c:	f000 f880 	bl	800a120 <USBD_Get_USB_Status>
 800a020:	4603      	mov	r3, r0
 800a022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a024:	7bbb      	ldrb	r3, [r7, #14]
}
 800a026:	4618      	mov	r0, r3
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b086      	sub	sp, #24
 800a032:	af00      	add	r7, sp, #0
 800a034:	60f8      	str	r0, [r7, #12]
 800a036:	607a      	str	r2, [r7, #4]
 800a038:	461a      	mov	r2, r3
 800a03a:	460b      	mov	r3, r1
 800a03c:	72fb      	strb	r3, [r7, #11]
 800a03e:	4613      	mov	r3, r2
 800a040:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a050:	893b      	ldrh	r3, [r7, #8]
 800a052:	7af9      	ldrb	r1, [r7, #11]
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	f7f9 fc5c 	bl	8003912 <HAL_PCD_EP_Transmit>
 800a05a:	4603      	mov	r3, r0
 800a05c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a05e:	7dfb      	ldrb	r3, [r7, #23]
 800a060:	4618      	mov	r0, r3
 800a062:	f000 f85d 	bl	800a120 <USBD_Get_USB_Status>
 800a066:	4603      	mov	r3, r0
 800a068:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a06a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3718      	adds	r7, #24
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	607a      	str	r2, [r7, #4]
 800a07e:	461a      	mov	r2, r3
 800a080:	460b      	mov	r3, r1
 800a082:	72fb      	strb	r3, [r7, #11]
 800a084:	4613      	mov	r3, r2
 800a086:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a088:	2300      	movs	r3, #0
 800a08a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a08c:	2300      	movs	r3, #0
 800a08e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a096:	893b      	ldrh	r3, [r7, #8]
 800a098:	7af9      	ldrb	r1, [r7, #11]
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	f7f9 fbe5 	bl	800386a <HAL_PCD_EP_Receive>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0a4:	7dfb      	ldrb	r3, [r7, #23]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 f83a 	bl	800a120 <USBD_Get_USB_Status>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a0b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b082      	sub	sp, #8
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0cc:	78fa      	ldrb	r2, [r7, #3]
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7f9 fc07 	bl	80038e4 <HAL_PCD_EP_GetRxCount>
 800a0d6:	4603      	mov	r3, r0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a0e8:	4b02      	ldr	r3, [pc, #8]	; (800a0f4 <USBD_static_malloc+0x14>)
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	370c      	adds	r7, #12
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bc80      	pop	{r7}
 800a0f2:	4770      	bx	lr
 800a0f4:	200001c0 	.word	0x200001c0

0800a0f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]

}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	bc80      	pop	{r7}
 800a108:	4770      	bx	lr

0800a10a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a10a:	b480      	push	{r7}
 800a10c:	b083      	sub	sp, #12
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
 800a112:	460b      	mov	r3, r1
 800a114:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a116:	bf00      	nop
 800a118:	370c      	adds	r7, #12
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bc80      	pop	{r7}
 800a11e:	4770      	bx	lr

0800a120 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a120:	b480      	push	{r7}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	4603      	mov	r3, r0
 800a128:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a12a:	2300      	movs	r3, #0
 800a12c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a12e:	79fb      	ldrb	r3, [r7, #7]
 800a130:	2b03      	cmp	r3, #3
 800a132:	d817      	bhi.n	800a164 <USBD_Get_USB_Status+0x44>
 800a134:	a201      	add	r2, pc, #4	; (adr r2, 800a13c <USBD_Get_USB_Status+0x1c>)
 800a136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a13a:	bf00      	nop
 800a13c:	0800a14d 	.word	0x0800a14d
 800a140:	0800a153 	.word	0x0800a153
 800a144:	0800a159 	.word	0x0800a159
 800a148:	0800a15f 	.word	0x0800a15f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a14c:	2300      	movs	r3, #0
 800a14e:	73fb      	strb	r3, [r7, #15]
    break;
 800a150:	e00b      	b.n	800a16a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a152:	2302      	movs	r3, #2
 800a154:	73fb      	strb	r3, [r7, #15]
    break;
 800a156:	e008      	b.n	800a16a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a158:	2301      	movs	r3, #1
 800a15a:	73fb      	strb	r3, [r7, #15]
    break;
 800a15c:	e005      	b.n	800a16a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a15e:	2302      	movs	r3, #2
 800a160:	73fb      	strb	r3, [r7, #15]
    break;
 800a162:	e002      	b.n	800a16a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a164:	2302      	movs	r3, #2
 800a166:	73fb      	strb	r3, [r7, #15]
    break;
 800a168:	bf00      	nop
  }
  return usb_status;
 800a16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3714      	adds	r7, #20
 800a170:	46bd      	mov	sp, r7
 800a172:	bc80      	pop	{r7}
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop

0800a178 <__libc_init_array>:
 800a178:	b570      	push	{r4, r5, r6, lr}
 800a17a:	2600      	movs	r6, #0
 800a17c:	4d0c      	ldr	r5, [pc, #48]	; (800a1b0 <__libc_init_array+0x38>)
 800a17e:	4c0d      	ldr	r4, [pc, #52]	; (800a1b4 <__libc_init_array+0x3c>)
 800a180:	1b64      	subs	r4, r4, r5
 800a182:	10a4      	asrs	r4, r4, #2
 800a184:	42a6      	cmp	r6, r4
 800a186:	d109      	bne.n	800a19c <__libc_init_array+0x24>
 800a188:	f000 f822 	bl	800a1d0 <_init>
 800a18c:	2600      	movs	r6, #0
 800a18e:	4d0a      	ldr	r5, [pc, #40]	; (800a1b8 <__libc_init_array+0x40>)
 800a190:	4c0a      	ldr	r4, [pc, #40]	; (800a1bc <__libc_init_array+0x44>)
 800a192:	1b64      	subs	r4, r4, r5
 800a194:	10a4      	asrs	r4, r4, #2
 800a196:	42a6      	cmp	r6, r4
 800a198:	d105      	bne.n	800a1a6 <__libc_init_array+0x2e>
 800a19a:	bd70      	pop	{r4, r5, r6, pc}
 800a19c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1a0:	4798      	blx	r3
 800a1a2:	3601      	adds	r6, #1
 800a1a4:	e7ee      	b.n	800a184 <__libc_init_array+0xc>
 800a1a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1aa:	4798      	blx	r3
 800a1ac:	3601      	adds	r6, #1
 800a1ae:	e7f2      	b.n	800a196 <__libc_init_array+0x1e>
 800a1b0:	0800a42c 	.word	0x0800a42c
 800a1b4:	0800a42c 	.word	0x0800a42c
 800a1b8:	0800a42c 	.word	0x0800a42c
 800a1bc:	0800a430 	.word	0x0800a430

0800a1c0 <memset>:
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	4402      	add	r2, r0
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d100      	bne.n	800a1ca <memset+0xa>
 800a1c8:	4770      	bx	lr
 800a1ca:	f803 1b01 	strb.w	r1, [r3], #1
 800a1ce:	e7f9      	b.n	800a1c4 <memset+0x4>

0800a1d0 <_init>:
 800a1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d2:	bf00      	nop
 800a1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d6:	bc08      	pop	{r3}
 800a1d8:	469e      	mov	lr, r3
 800a1da:	4770      	bx	lr

0800a1dc <_fini>:
 800a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1de:	bf00      	nop
 800a1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1e2:	bc08      	pop	{r3}
 800a1e4:	469e      	mov	lr, r3
 800a1e6:	4770      	bx	lr
